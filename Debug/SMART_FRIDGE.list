
SMART_FRIDGE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         0000c020  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  0800c1c0  0800c1c0  0000d1c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c6ac  0800c6ac  0000e1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c6ac  0800c6ac  0000d6ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c6b4  0800c6b4  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c6b4  0800c6b4  0000d6b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c6b8  0800c6b8  0000d6b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800c6bc  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e58  200001d8  0800c894  0000e1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005030  0800c894  0000f030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fbbc  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045ce  00000000  00000000  0002ddc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b50  00000000  00000000  00032398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000154f  00000000  00000000  00033ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e79  00000000  00000000  00035437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002000c  00000000  00000000  0004f2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009eec1  00000000  00000000  0006f2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010e17d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000846c  00000000  00000000  0010e1c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0011662c  2**0
=======
  1 .text         0000c0f0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  0800c290  0800c290  0000d290  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c78c  0800c78c  0000e1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c78c  0800c78c  0000d78c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c794  0800c794  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c794  0800c794  0000d794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c798  0800c798  0000d798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800c79c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e60  200001d8  0800c974  0000e1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005038  0800c974  0000f038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fc24  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045f8  00000000  00000000  0002de2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b70  00000000  00000000  00032428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000155d  00000000  00000000  00033f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f1f  00000000  00000000  000354f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000200c4  00000000  00000000  0004f414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f674  00000000  00000000  0006f4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010eb4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000854c  00000000  00000000  0010eb90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  001170dc  2**0
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80001c0:	0800c1a8 	.word	0x0800c1a8
=======
 80001c0:	0800c278 	.word	0x0800c278
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
<<<<<<< HEAD
 80001dc:	0800c1a8 	.word	0x0800c1a8
=======
 80001dc:	0800c278 	.word	0x0800c278
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <dht11_init>:
#define DHT11_PORT GPIOA

volatile uint8_t dht11_data[5] = {0};

void dht11_init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
    GPIOA->MODER |= (0x01 << (0 * 2));
 8000ee8:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <dht11_init+0x20>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a05      	ldr	r2, [pc, #20]	@ (8000f04 <dht11_init+0x20>)
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	6013      	str	r3, [r2, #0]
    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_SET);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	4802      	ldr	r0, [pc, #8]	@ (8000f04 <dht11_init+0x20>)
<<<<<<< HEAD
 8000efa:	f001 fef9 	bl	8002cf0 <HAL_GPIO_WritePin>
=======
 8000efa:	f001 ff07 	bl	8002d0c <HAL_GPIO_WritePin>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40020000 	.word	0x40020000

08000f08 <start_signal>:

static void start_signal(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
    GPIOA->MODER |= (0x01 << (0 * 2));
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f4c <start_signal+0x44>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0e      	ldr	r2, [pc, #56]	@ (8000f4c <start_signal+0x44>)
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	6013      	str	r3, [r2, #0]
    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	480b      	ldr	r0, [pc, #44]	@ (8000f4c <start_signal+0x44>)
<<<<<<< HEAD
 8000f1e:	f001 fee7 	bl	8002cf0 <HAL_GPIO_WritePin>
    delay_us(20000);
 8000f22:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8000f26:	f001 fa85 	bl	8002434 <delay_us>
=======
 8000f1e:	f001 fef5 	bl	8002d0c <HAL_GPIO_WritePin>
    delay_us(20000);
 8000f22:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8000f26:	f001 fa93 	bl	8002450 <delay_us>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_SET);
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	4807      	ldr	r0, [pc, #28]	@ (8000f4c <start_signal+0x44>)
<<<<<<< HEAD
 8000f30:	f001 fede 	bl	8002cf0 <HAL_GPIO_WritePin>
=======
 8000f30:	f001 feec 	bl	8002d0c <HAL_GPIO_WritePin>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    GPIOA->MODER &= ~(0x3 << (0 * 2));
 8000f34:	4b05      	ldr	r3, [pc, #20]	@ (8000f4c <start_signal+0x44>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a04      	ldr	r2, [pc, #16]	@ (8000f4c <start_signal+0x44>)
 8000f3a:	f023 0303 	bic.w	r3, r3, #3
 8000f3e:	6013      	str	r3, [r2, #0]
    delay_us(30);
 8000f40:	201e      	movs	r0, #30
<<<<<<< HEAD
 8000f42:	f001 fa77 	bl	8002434 <delay_us>
=======
 8000f42:	f001 fa85 	bl	8002450 <delay_us>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40020000 	.word	0x40020000

08000f50 <check_response>:

static uint8_t check_response(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
    int us=0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	607b      	str	r3, [r7, #4]
    while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) && us++<100) delay_us(1);
 8000f5a:	e002      	b.n	8000f62 <check_response+0x12>
 8000f5c:	2001      	movs	r0, #1
<<<<<<< HEAD
 8000f5e:	f001 fa69 	bl	8002434 <delay_us>
 8000f62:	2101      	movs	r1, #1
 8000f64:	4815      	ldr	r0, [pc, #84]	@ (8000fbc <check_response+0x6c>)
 8000f66:	f001 feab 	bl	8002cc0 <HAL_GPIO_ReadPin>
=======
 8000f5e:	f001 fa77 	bl	8002450 <delay_us>
 8000f62:	2101      	movs	r1, #1
 8000f64:	4815      	ldr	r0, [pc, #84]	@ (8000fbc <check_response+0x6c>)
 8000f66:	f001 feb9 	bl	8002cdc <HAL_GPIO_ReadPin>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d004      	beq.n	8000f7a <check_response+0x2a>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	1c5a      	adds	r2, r3, #1
 8000f74:	607a      	str	r2, [r7, #4]
 8000f76:	2b63      	cmp	r3, #99	@ 0x63
 8000f78:	ddf0      	ble.n	8000f5c <check_response+0xc>
    if(us>=100) return 0;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2b63      	cmp	r3, #99	@ 0x63
 8000f7e:	dd01      	ble.n	8000f84 <check_response+0x34>
 8000f80:	2300      	movs	r3, #0
 8000f82:	e017      	b.n	8000fb4 <check_response+0x64>
    us=0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	607b      	str	r3, [r7, #4]
    while(!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) && us++<100) delay_us(1);
 8000f88:	e002      	b.n	8000f90 <check_response+0x40>
 8000f8a:	2001      	movs	r0, #1
<<<<<<< HEAD
 8000f8c:	f001 fa52 	bl	8002434 <delay_us>
 8000f90:	2101      	movs	r1, #1
 8000f92:	480a      	ldr	r0, [pc, #40]	@ (8000fbc <check_response+0x6c>)
 8000f94:	f001 fe94 	bl	8002cc0 <HAL_GPIO_ReadPin>
=======
 8000f8c:	f001 fa60 	bl	8002450 <delay_us>
 8000f90:	2101      	movs	r1, #1
 8000f92:	480a      	ldr	r0, [pc, #40]	@ (8000fbc <check_response+0x6c>)
 8000f94:	f001 fea2 	bl	8002cdc <HAL_GPIO_ReadPin>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d104      	bne.n	8000fa8 <check_response+0x58>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	1c5a      	adds	r2, r3, #1
 8000fa2:	607a      	str	r2, [r7, #4]
 8000fa4:	2b63      	cmp	r3, #99	@ 0x63
 8000fa6:	ddf0      	ble.n	8000f8a <check_response+0x3a>
    if(us>=100) return 0;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b63      	cmp	r3, #99	@ 0x63
 8000fac:	dd01      	ble.n	8000fb2 <check_response+0x62>
 8000fae:	2300      	movs	r3, #0
 8000fb0:	e000      	b.n	8000fb4 <check_response+0x64>
    return 1;
 8000fb2:	2301      	movs	r3, #1
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40020000 	.word	0x40020000

08000fc0 <receive_data>:

static void receive_data(uint8_t data[5])
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
    int us=0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
    for(int i=0;i<40;i++)
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	e062      	b.n	8001098 <receive_data+0xd8>
    {
        us=0; while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) && us++<100) delay_us(1);
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	e002      	b.n	8000fde <receive_data+0x1e>
 8000fd8:	2001      	movs	r0, #1
<<<<<<< HEAD
 8000fda:	f001 fa2b 	bl	8002434 <delay_us>
 8000fde:	2101      	movs	r1, #1
 8000fe0:	4831      	ldr	r0, [pc, #196]	@ (80010a8 <receive_data+0xe8>)
 8000fe2:	f001 fe6d 	bl	8002cc0 <HAL_GPIO_ReadPin>
=======
 8000fda:	f001 fa39 	bl	8002450 <delay_us>
 8000fde:	2101      	movs	r1, #1
 8000fe0:	4831      	ldr	r0, [pc, #196]	@ (80010a8 <receive_data+0xe8>)
 8000fe2:	f001 fe7b 	bl	8002cdc <HAL_GPIO_ReadPin>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d004      	beq.n	8000ff6 <receive_data+0x36>
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	1c5a      	adds	r2, r3, #1
 8000ff0:	60fa      	str	r2, [r7, #12]
 8000ff2:	2b63      	cmp	r3, #99	@ 0x63
 8000ff4:	ddf0      	ble.n	8000fd8 <receive_data+0x18>
        us=0; while(!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) && us++<100) delay_us(1);
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	e002      	b.n	8001002 <receive_data+0x42>
 8000ffc:	2001      	movs	r0, #1
<<<<<<< HEAD
 8000ffe:	f001 fa19 	bl	8002434 <delay_us>
 8001002:	2101      	movs	r1, #1
 8001004:	4828      	ldr	r0, [pc, #160]	@ (80010a8 <receive_data+0xe8>)
 8001006:	f001 fe5b 	bl	8002cc0 <HAL_GPIO_ReadPin>
=======
 8000ffe:	f001 fa27 	bl	8002450 <delay_us>
 8001002:	2101      	movs	r1, #1
 8001004:	4828      	ldr	r0, [pc, #160]	@ (80010a8 <receive_data+0xe8>)
 8001006:	f001 fe69 	bl	8002cdc <HAL_GPIO_ReadPin>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d104      	bne.n	800101a <receive_data+0x5a>
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	1c5a      	adds	r2, r3, #1
 8001014:	60fa      	str	r2, [r7, #12]
 8001016:	2b63      	cmp	r3, #99	@ 0x63
 8001018:	ddf0      	ble.n	8000ffc <receive_data+0x3c>
        delay_us(30);
 800101a:	201e      	movs	r0, #30
<<<<<<< HEAD
 800101c:	f001 fa0a 	bl	8002434 <delay_us>
        if(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) data[i/8] |= (1<<(7-(i%8)));
 8001020:	2101      	movs	r1, #1
 8001022:	4821      	ldr	r0, [pc, #132]	@ (80010a8 <receive_data+0xe8>)
 8001024:	f001 fe4c 	bl	8002cc0 <HAL_GPIO_ReadPin>
=======
 800101c:	f001 fa18 	bl	8002450 <delay_us>
        if(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) data[i/8] |= (1<<(7-(i%8)));
 8001020:	2101      	movs	r1, #1
 8001022:	4821      	ldr	r0, [pc, #132]	@ (80010a8 <receive_data+0xe8>)
 8001024:	f001 fe5a 	bl	8002cdc <HAL_GPIO_ReadPin>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d01f      	beq.n	800106e <receive_data+0xae>
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	2b00      	cmp	r3, #0
 8001032:	da00      	bge.n	8001036 <receive_data+0x76>
 8001034:	3307      	adds	r3, #7
 8001036:	10db      	asrs	r3, r3, #3
 8001038:	4618      	mov	r0, r3
 800103a:	4602      	mov	r2, r0
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4413      	add	r3, r2
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	b25a      	sxtb	r2, r3
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	4259      	negs	r1, r3
 8001048:	f003 0307 	and.w	r3, r3, #7
 800104c:	f001 0107 	and.w	r1, r1, #7
 8001050:	bf58      	it	pl
 8001052:	424b      	negpl	r3, r1
 8001054:	f1c3 0307 	rsb	r3, r3, #7
 8001058:	2101      	movs	r1, #1
 800105a:	fa01 f303 	lsl.w	r3, r1, r3
 800105e:	b25b      	sxtb	r3, r3
 8001060:	4313      	orrs	r3, r2
 8001062:	b25a      	sxtb	r2, r3
 8001064:	4601      	mov	r1, r0
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	440b      	add	r3, r1
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	701a      	strb	r2, [r3, #0]
        us=0; while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) && us++<100) delay_us(1);
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	e002      	b.n	800107a <receive_data+0xba>
 8001074:	2001      	movs	r0, #1
<<<<<<< HEAD
 8001076:	f001 f9dd 	bl	8002434 <delay_us>
 800107a:	2101      	movs	r1, #1
 800107c:	480a      	ldr	r0, [pc, #40]	@ (80010a8 <receive_data+0xe8>)
 800107e:	f001 fe1f 	bl	8002cc0 <HAL_GPIO_ReadPin>
=======
 8001076:	f001 f9eb 	bl	8002450 <delay_us>
 800107a:	2101      	movs	r1, #1
 800107c:	480a      	ldr	r0, [pc, #40]	@ (80010a8 <receive_data+0xe8>)
 800107e:	f001 fe2d 	bl	8002cdc <HAL_GPIO_ReadPin>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d004      	beq.n	8001092 <receive_data+0xd2>
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	1c5a      	adds	r2, r3, #1
 800108c:	60fa      	str	r2, [r7, #12]
 800108e:	2b63      	cmp	r3, #99	@ 0x63
 8001090:	ddf0      	ble.n	8001074 <receive_data+0xb4>
    for(int i=0;i<40;i++)
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	3301      	adds	r3, #1
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	2b27      	cmp	r3, #39	@ 0x27
 800109c:	dd99      	ble.n	8000fd2 <receive_data+0x12>
    }
}
 800109e:	bf00      	nop
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40020000 	.word	0x40020000

080010ac <checksum_valid>:

static uint8_t checksum_valid(uint8_t data[5])
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
    return data[4] == (data[0]+data[1]+data[2]+data[3]);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3304      	adds	r3, #4
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	4619      	mov	r1, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	461a      	mov	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3301      	adds	r3, #1
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	4413      	add	r3, r2
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	3202      	adds	r2, #2
 80010ce:	7812      	ldrb	r2, [r2, #0]
 80010d0:	4413      	add	r3, r2
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	3203      	adds	r2, #3
 80010d6:	7812      	ldrb	r2, [r2, #0]
 80010d8:	4413      	add	r3, r2
 80010da:	4299      	cmp	r1, r3
 80010dc:	bf0c      	ite	eq
 80010de:	2301      	moveq	r3, #1
 80010e0:	2300      	movne	r3, #0
 80010e2:	b2db      	uxtb	r3, r3
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <dht11_read>:

void dht11_read(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
    uint8_t data[5] = {0};
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	711a      	strb	r2, [r3, #4]
    start_signal();
 80010fe:	f7ff ff03 	bl	8000f08 <start_signal>
    if(!check_response()) return;
 8001102:	f7ff ff25 	bl	8000f50 <check_response>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d01d      	beq.n	8001148 <dht11_read+0x58>
    receive_data(data);
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ff56 	bl	8000fc0 <receive_data>
    if(checksum_valid(data)) for(int i=0;i<5;i++) dht11_data[i]=data[i];
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff ffc8 	bl	80010ac <checksum_valid>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d013      	beq.n	800114a <dht11_read+0x5a>
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	e00b      	b.n	8001140 <dht11_read+0x50>
 8001128:	1d3a      	adds	r2, r7, #4
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	4413      	add	r3, r2
 800112e:	7819      	ldrb	r1, [r3, #0]
 8001130:	4a07      	ldr	r2, [pc, #28]	@ (8001150 <dht11_read+0x60>)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	4413      	add	r3, r2
 8001136:	460a      	mov	r2, r1
 8001138:	701a      	strb	r2, [r3, #0]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	3301      	adds	r3, #1
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2b04      	cmp	r3, #4
 8001144:	ddf0      	ble.n	8001128 <dht11_read+0x38>
 8001146:	e000      	b.n	800114a <dht11_read+0x5a>
    if(!check_response()) return;
 8001148:	bf00      	nop
}
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	200001f4 	.word	0x200001f4

08001154 <lcd_command>:
	lcd_command(LCD_ENTRY); lcd_command(LCD_CLEAR);
	HAL_Delay(2);
}

void lcd_command(uint8_t cmd)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af02      	add	r7, sp, #8
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
	uint8_t h=cmd&0xF0, l=(cmd<<4)&0xF0;
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	f023 030f 	bic.w	r3, r3, #15
 8001164:	73fb      	strb	r3, [r7, #15]
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	011b      	lsls	r3, r3, #4
 800116a:	73bb      	strb	r3, [r7, #14]
	uint8_t d[4]={h|0x04|BACKLIGHT,h|BACKLIGHT,l|0x04|BACKLIGHT,l|BACKLIGHT};
 800116c:	7bfb      	ldrb	r3, [r7, #15]
 800116e:	f043 030c 	orr.w	r3, r3, #12
 8001172:	b2db      	uxtb	r3, r3
 8001174:	723b      	strb	r3, [r7, #8]
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	f043 0308 	orr.w	r3, r3, #8
 800117c:	b2db      	uxtb	r3, r3
 800117e:	727b      	strb	r3, [r7, #9]
 8001180:	7bbb      	ldrb	r3, [r7, #14]
 8001182:	f043 030c 	orr.w	r3, r3, #12
 8001186:	b2db      	uxtb	r3, r3
 8001188:	72bb      	strb	r3, [r7, #10]
 800118a:	7bbb      	ldrb	r3, [r7, #14]
 800118c:	f043 0308 	orr.w	r3, r3, #8
 8001190:	b2db      	uxtb	r3, r3
 8001192:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDR, d, 4, 100);
 8001194:	f107 0208 	add.w	r2, r7, #8
 8001198:	2364      	movs	r3, #100	@ 0x64
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	2304      	movs	r3, #4
 800119e:	214e      	movs	r1, #78	@ 0x4e
 80011a0:	4803      	ldr	r0, [pc, #12]	@ (80011b0 <lcd_command+0x5c>)
<<<<<<< HEAD
 80011a2:	f001 ff03 	bl	8002fac <HAL_I2C_Master_Transmit>
=======
 80011a2:	f001 ff11 	bl	8002fc8 <HAL_I2C_Master_Transmit>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200001fc 	.word	0x200001fc

080011b4 <lcd_data>:

void lcd_data(uint8_t data_byte)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af02      	add	r7, sp, #8
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
	uint8_t h=data_byte&0xF0,l=(data_byte<<4)&0xF0;
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	f023 030f 	bic.w	r3, r3, #15
 80011c4:	73fb      	strb	r3, [r7, #15]
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	011b      	lsls	r3, r3, #4
 80011ca:	73bb      	strb	r3, [r7, #14]
	uint8_t d[4]={h|0x05|BACKLIGHT,h|0x01|BACKLIGHT,l|0x05|BACKLIGHT,l|0x01|BACKLIGHT};
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	f043 030d 	orr.w	r3, r3, #13
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	723b      	strb	r3, [r7, #8]
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	f043 0309 	orr.w	r3, r3, #9
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	727b      	strb	r3, [r7, #9]
 80011e0:	7bbb      	ldrb	r3, [r7, #14]
 80011e2:	f043 030d 	orr.w	r3, r3, #13
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	72bb      	strb	r3, [r7, #10]
 80011ea:	7bbb      	ldrb	r3, [r7, #14]
 80011ec:	f043 0309 	orr.w	r3, r3, #9
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDR, d, 4, 100);
 80011f4:	f107 0208 	add.w	r2, r7, #8
 80011f8:	2364      	movs	r3, #100	@ 0x64
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2304      	movs	r3, #4
 80011fe:	214e      	movs	r1, #78	@ 0x4e
 8001200:	4803      	ldr	r0, [pc, #12]	@ (8001210 <lcd_data+0x5c>)
<<<<<<< HEAD
 8001202:	f001 fed3 	bl	8002fac <HAL_I2C_Master_Transmit>
=======
 8001202:	f001 fee1 	bl	8002fc8 <HAL_I2C_Master_Transmit>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
}
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	200001fc 	.word	0x200001fc

08001214 <lcd_string>:

void lcd_string(uint8_t *str){while(*str) lcd_data(*str++);}
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	e006      	b.n	800122c <lcd_string+0x18>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	1c5a      	adds	r2, r3, #1
 8001222:	607a      	str	r2, [r7, #4]
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff ffc4 	bl	80011b4 <lcd_data>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d1f4      	bne.n	800121e <lcd_string+0xa>
 8001234:	bf00      	nop
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <move_cursor>:
void move_cursor(uint8_t row,uint8_t col){lcd_command(0x80|(row<<6)|col);}
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	4603      	mov	r3, r0
 8001246:	460a      	mov	r2, r1
 8001248:	71fb      	strb	r3, [r7, #7]
 800124a:	4613      	mov	r3, r2
 800124c:	71bb      	strb	r3, [r7, #6]
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	019b      	lsls	r3, r3, #6
 8001252:	b2da      	uxtb	r2, r3
 8001254:	79bb      	ldrb	r3, [r7, #6]
 8001256:	4313      	orrs	r3, r2
 8001258:	b2db      	uxtb	r3, r3
 800125a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800125e:	b2db      	uxtb	r3, r3
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff77 	bl	8001154 <lcd_command>
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE   // Add for printf
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART3 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001278:	1d39      	adds	r1, r7, #4
 800127a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800127e:	2201      	movs	r2, #1
 8001280:	4803      	ldr	r0, [pc, #12]	@ (8001290 <__io_putchar+0x20>)
<<<<<<< HEAD
 8001282:	f004 fa5c 	bl	800573e <HAL_UART_Transmit>
=======
 8001282:	f004 faad 	bl	80057e0 <HAL_UART_Transmit>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

	return ch;
 8001286:	687b      	ldr	r3, [r7, #4]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
<<<<<<< HEAD
 8001290:	2000040c 	.word	0x2000040c
=======
 8001290:	20000410 	.word	0x20000410
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

08001294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 8001298:	f001 f9d8 	bl	800264c <HAL_Init>
=======
 8001298:	f001 f9e6 	bl	8002668 <HAL_Init>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 800129c:	f000 f88c 	bl	80013b8 <SystemClock_Config>
=======
 800129c:	f000 f890 	bl	80013c0 <SystemClock_Config>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 80012a0:	f000 fae6 	bl	8001870 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012a4:	f000 faba 	bl	800181c <MX_USART2_UART_Init>
  MX_TIM11_Init();
 80012a8:	f000 fa6a 	bl	8001780 <MX_TIM11_Init>
  MX_TIM2_Init();
 80012ac:	f000 f952 	bl	8001554 <MX_TIM2_Init>
  MX_I2C1_Init();
 80012b0:	f000 f8ec 	bl	800148c <MX_I2C1_Init>
  MX_TIM3_Init();
 80012b4:	f000 f99a 	bl	80015ec <MX_TIM3_Init>
  MX_TIM5_Init();
 80012b8:	f000 fa08 	bl	80016cc <MX_TIM5_Init>
  MX_SPI2_Init();
 80012bc:	f000 f914 	bl	80014e8 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80012c0:	f000 fa82 	bl	80017c8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 80012c4:	2201      	movs	r2, #1
 80012c6:	4925      	ldr	r1, [pc, #148]	@ (800135c <main+0xc8>)
 80012c8:	4825      	ldr	r0, [pc, #148]	@ (8001360 <main+0xcc>)
 80012ca:	f004 fb0f 	bl	80058ec <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim11);
 80012ce:	4825      	ldr	r0, [pc, #148]	@ (8001364 <main+0xd0>)
 80012d0:	f002 ff16 	bl	8004100 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);	// for make delay_us
 80012d4:	4824      	ldr	r0, [pc, #144]	@ (8001368 <main+0xd4>)
 80012d6:	f002 ff13 	bl	8004100 <HAL_TIM_Base_Start_IT>
=======
 80012a0:	f000 faea 	bl	8001878 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012a4:	f000 fabe 	bl	8001824 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 80012a8:	f000 fa6e 	bl	8001788 <MX_TIM11_Init>
  MX_TIM2_Init();
 80012ac:	f000 f956 	bl	800155c <MX_TIM2_Init>
  MX_I2C1_Init();
 80012b0:	f000 f8f0 	bl	8001494 <MX_I2C1_Init>
  MX_TIM3_Init();
 80012b4:	f000 f99e 	bl	80015f4 <MX_TIM3_Init>
  MX_TIM5_Init();
 80012b8:	f000 fa0c 	bl	80016d4 <MX_TIM5_Init>
  MX_SPI2_Init();
 80012bc:	f000 f918 	bl	80014f0 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80012c0:	f000 fa86 	bl	80017d0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  printf("start\r\n");
 80012c4:	4826      	ldr	r0, [pc, #152]	@ (8001360 <main+0xcc>)
 80012c6:	f008 fe27 	bl	8009f18 <puts>
	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 80012ca:	2201      	movs	r2, #1
 80012cc:	4925      	ldr	r1, [pc, #148]	@ (8001364 <main+0xd0>)
 80012ce:	4826      	ldr	r0, [pc, #152]	@ (8001368 <main+0xd4>)
 80012d0:	f004 fb11 	bl	80058f6 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim11);
 80012d4:	4825      	ldr	r0, [pc, #148]	@ (800136c <main+0xd8>)
 80012d6:	f002 ff73 	bl	80041c0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);	// for make delay_us
 80012da:	4825      	ldr	r0, [pc, #148]	@ (8001370 <main+0xdc>)
 80012dc:	f002 ff70 	bl	80041c0 <HAL_TIM_Base_Start_IT>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0


	// RESET MODULES
	//i2c_lcd_init();
	ultra_sonic_init();
<<<<<<< HEAD
 80012da:	f001 f8df 	bl	800249c <ultra_sonic_init>
	servo_motor_init();
 80012de:	f000 fc65 	bl	8001bac <servo_motor_init>
	dht11_init();
 80012e2:	f7ff fdff 	bl	8000ee4 <dht11_init>


	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80012e6:	2104      	movs	r1, #4
 80012e8:	4820      	ldr	r0, [pc, #128]	@ (800136c <main+0xd8>)
 80012ea:	f003 f8c5 	bl	8004478 <HAL_TIM_IC_Start_IT>
=======
 80012e0:	f001 f8ea 	bl	80024b8 <ultra_sonic_init>
	servo_motor_init();
 80012e4:	f000 fc68 	bl	8001bb8 <servo_motor_init>
	dht11_init();
 80012e8:	f7ff fdfc 	bl	8000ee4 <dht11_init>


	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80012ec:	2104      	movs	r1, #4
 80012ee:	4821      	ldr	r0, [pc, #132]	@ (8001374 <main+0xe0>)
 80012f0:	f003 f922 	bl	8004538 <HAL_TIM_IC_Start_IT>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
<<<<<<< HEAD
 80012ee:	f005 fadf 	bl	80068b0 <osKernelInitialize>
=======
 80012f4:	f005 fade 	bl	80068b4 <osKernelInitialize>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
<<<<<<< HEAD
 80012f2:	4a1f      	ldr	r2, [pc, #124]	@ (8001370 <main+0xdc>)
 80012f4:	2100      	movs	r1, #0
 80012f6:	481f      	ldr	r0, [pc, #124]	@ (8001374 <main+0xe0>)
 80012f8:	f005 fb24 	bl	8006944 <osThreadNew>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4a1e      	ldr	r2, [pc, #120]	@ (8001378 <main+0xe4>)
 8001300:	6013      	str	r3, [r2, #0]

  /* creation of UART */
  UARTHandle = osThreadNew(UARTTask, NULL, &UART_attributes);
 8001302:	4a1e      	ldr	r2, [pc, #120]	@ (800137c <main+0xe8>)
 8001304:	2100      	movs	r1, #0
 8001306:	481e      	ldr	r0, [pc, #120]	@ (8001380 <main+0xec>)
 8001308:	f005 fb1c 	bl	8006944 <osThreadNew>
 800130c:	4603      	mov	r3, r0
 800130e:	4a1d      	ldr	r2, [pc, #116]	@ (8001384 <main+0xf0>)
 8001310:	6013      	str	r3, [r2, #0]

  /* creation of ULTRASONIC */
  ULTRASONICHandle = osThreadNew(UltrasonicTask, NULL, &ULTRASONIC_attributes);
 8001312:	4a1d      	ldr	r2, [pc, #116]	@ (8001388 <main+0xf4>)
 8001314:	2100      	movs	r1, #0
 8001316:	481d      	ldr	r0, [pc, #116]	@ (800138c <main+0xf8>)
 8001318:	f005 fb14 	bl	8006944 <osThreadNew>
 800131c:	4603      	mov	r3, r0
 800131e:	4a1c      	ldr	r2, [pc, #112]	@ (8001390 <main+0xfc>)
 8001320:	6013      	str	r3, [r2, #0]

  /* creation of LCD */
  LCDHandle = osThreadNew(LCDTask, NULL, &LCD_attributes);
 8001322:	4a1c      	ldr	r2, [pc, #112]	@ (8001394 <main+0x100>)
 8001324:	2100      	movs	r1, #0
 8001326:	481c      	ldr	r0, [pc, #112]	@ (8001398 <main+0x104>)
 8001328:	f005 fb0c 	bl	8006944 <osThreadNew>
 800132c:	4603      	mov	r3, r0
 800132e:	4a1b      	ldr	r2, [pc, #108]	@ (800139c <main+0x108>)
 8001330:	6013      	str	r3, [r2, #0]

  /* creation of SERVO_MOTOR */
  SERVO_MOTORHandle = osThreadNew(ServoTask, NULL, &SERVO_MOTOR_attributes);
 8001332:	4a1b      	ldr	r2, [pc, #108]	@ (80013a0 <main+0x10c>)
 8001334:	2100      	movs	r1, #0
 8001336:	481b      	ldr	r0, [pc, #108]	@ (80013a4 <main+0x110>)
 8001338:	f005 fb04 	bl	8006944 <osThreadNew>
 800133c:	4603      	mov	r3, r0
 800133e:	4a1a      	ldr	r2, [pc, #104]	@ (80013a8 <main+0x114>)
 8001340:	6013      	str	r3, [r2, #0]

  /* creation of DHT11 */
  DHT11Handle = osThreadNew(DHT11Task, NULL, &DHT11_attributes);
 8001342:	4a1a      	ldr	r2, [pc, #104]	@ (80013ac <main+0x118>)
 8001344:	2100      	movs	r1, #0
 8001346:	481a      	ldr	r0, [pc, #104]	@ (80013b0 <main+0x11c>)
 8001348:	f005 fafc 	bl	8006944 <osThreadNew>
 800134c:	4603      	mov	r3, r0
 800134e:	4a19      	ldr	r2, [pc, #100]	@ (80013b4 <main+0x120>)
 8001350:	6013      	str	r3, [r2, #0]
=======
 80012f8:	4a1f      	ldr	r2, [pc, #124]	@ (8001378 <main+0xe4>)
 80012fa:	2100      	movs	r1, #0
 80012fc:	481f      	ldr	r0, [pc, #124]	@ (800137c <main+0xe8>)
 80012fe:	f005 fb23 	bl	8006948 <osThreadNew>
 8001302:	4603      	mov	r3, r0
 8001304:	4a1e      	ldr	r2, [pc, #120]	@ (8001380 <main+0xec>)
 8001306:	6013      	str	r3, [r2, #0]

  /* creation of UART */
  UARTHandle = osThreadNew(UARTTask, NULL, &UART_attributes);
 8001308:	4a1e      	ldr	r2, [pc, #120]	@ (8001384 <main+0xf0>)
 800130a:	2100      	movs	r1, #0
 800130c:	481e      	ldr	r0, [pc, #120]	@ (8001388 <main+0xf4>)
 800130e:	f005 fb1b 	bl	8006948 <osThreadNew>
 8001312:	4603      	mov	r3, r0
 8001314:	4a1d      	ldr	r2, [pc, #116]	@ (800138c <main+0xf8>)
 8001316:	6013      	str	r3, [r2, #0]

  /* creation of ULTRASONIC */
  ULTRASONICHandle = osThreadNew(UltrasonicTask, NULL, &ULTRASONIC_attributes);
 8001318:	4a1d      	ldr	r2, [pc, #116]	@ (8001390 <main+0xfc>)
 800131a:	2100      	movs	r1, #0
 800131c:	481d      	ldr	r0, [pc, #116]	@ (8001394 <main+0x100>)
 800131e:	f005 fb13 	bl	8006948 <osThreadNew>
 8001322:	4603      	mov	r3, r0
 8001324:	4a1c      	ldr	r2, [pc, #112]	@ (8001398 <main+0x104>)
 8001326:	6013      	str	r3, [r2, #0]

  /* creation of LCD */
  LCDHandle = osThreadNew(LCDTask, NULL, &LCD_attributes);
 8001328:	4a1c      	ldr	r2, [pc, #112]	@ (800139c <main+0x108>)
 800132a:	2100      	movs	r1, #0
 800132c:	481c      	ldr	r0, [pc, #112]	@ (80013a0 <main+0x10c>)
 800132e:	f005 fb0b 	bl	8006948 <osThreadNew>
 8001332:	4603      	mov	r3, r0
 8001334:	4a1b      	ldr	r2, [pc, #108]	@ (80013a4 <main+0x110>)
 8001336:	6013      	str	r3, [r2, #0]

  /* creation of SERVO_MOTOR */
  SERVO_MOTORHandle = osThreadNew(ServoTask, NULL, &SERVO_MOTOR_attributes);
 8001338:	4a1b      	ldr	r2, [pc, #108]	@ (80013a8 <main+0x114>)
 800133a:	2100      	movs	r1, #0
 800133c:	481b      	ldr	r0, [pc, #108]	@ (80013ac <main+0x118>)
 800133e:	f005 fb03 	bl	8006948 <osThreadNew>
 8001342:	4603      	mov	r3, r0
 8001344:	4a1a      	ldr	r2, [pc, #104]	@ (80013b0 <main+0x11c>)
 8001346:	6013      	str	r3, [r2, #0]

  /* creation of DHT11 */
  DHT11Handle = osThreadNew(DHT11Task, NULL, &DHT11_attributes);
 8001348:	4a1a      	ldr	r2, [pc, #104]	@ (80013b4 <main+0x120>)
 800134a:	2100      	movs	r1, #0
 800134c:	481a      	ldr	r0, [pc, #104]	@ (80013b8 <main+0x124>)
 800134e:	f005 fafb 	bl	8006948 <osThreadNew>
 8001352:	4603      	mov	r3, r0
 8001354:	4a19      	ldr	r2, [pc, #100]	@ (80013bc <main+0x128>)
 8001356:	6013      	str	r3, [r2, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
<<<<<<< HEAD
 8001352:	f005 fad1 	bl	80068f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001356:	bf00      	nop
 8001358:	e7fd      	b.n	8001356 <main+0xc2>
 800135a:	bf00      	nop
 800135c:	20000468 	.word	0x20000468
 8001360:	2000040c 	.word	0x2000040c
 8001364:	20000380 	.word	0x20000380
 8001368:	200002a8 	.word	0x200002a8
 800136c:	200002f0 	.word	0x200002f0
 8001370:	0800c244 	.word	0x0800c244
 8001374:	08001999 	.word	0x08001999
 8001378:	20000450 	.word	0x20000450
 800137c:	0800c268 	.word	0x0800c268
 8001380:	080019e1 	.word	0x080019e1
 8001384:	20000454 	.word	0x20000454
 8001388:	0800c28c 	.word	0x0800c28c
 800138c:	08001a2d 	.word	0x08001a2d
 8001390:	20000458 	.word	0x20000458
 8001394:	0800c2b0 	.word	0x0800c2b0
 8001398:	08001a45 	.word	0x08001a45
 800139c:	2000045c 	.word	0x2000045c
 80013a0:	0800c2d4 	.word	0x0800c2d4
 80013a4:	08001ae9 	.word	0x08001ae9
 80013a8:	20000460 	.word	0x20000460
 80013ac:	0800c2f8 	.word	0x0800c2f8
 80013b0:	08001b01 	.word	0x08001b01
 80013b4:	20000464 	.word	0x20000464

080013b8 <SystemClock_Config>:
=======
 8001358:	f005 fad0 	bl	80068fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <main+0xc8>
 8001360:	0800c2c8 	.word	0x0800c2c8
 8001364:	20000470 	.word	0x20000470
 8001368:	20000410 	.word	0x20000410
 800136c:	20000380 	.word	0x20000380
 8001370:	200002a8 	.word	0x200002a8
 8001374:	200002f0 	.word	0x200002f0
 8001378:	0800c324 	.word	0x0800c324
 800137c:	080019a1 	.word	0x080019a1
 8001380:	20000458 	.word	0x20000458
 8001384:	0800c348 	.word	0x0800c348
 8001388:	080019e9 	.word	0x080019e9
 800138c:	2000045c 	.word	0x2000045c
 8001390:	0800c36c 	.word	0x0800c36c
 8001394:	08001a39 	.word	0x08001a39
 8001398:	20000460 	.word	0x20000460
 800139c:	0800c390 	.word	0x0800c390
 80013a0:	08001a51 	.word	0x08001a51
 80013a4:	20000464 	.word	0x20000464
 80013a8:	0800c3b4 	.word	0x0800c3b4
 80013ac:	08001af5 	.word	0x08001af5
 80013b0:	20000468 	.word	0x20000468
 80013b4:	0800c3d8 	.word	0x0800c3d8
 80013b8:	08001b0d 	.word	0x08001b0d
 80013bc:	2000046c 	.word	0x2000046c

080013c0 <SystemClock_Config>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b094      	sub	sp, #80	@ 0x50
 80013bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013be:	f107 0320 	add.w	r3, r7, #32
 80013c2:	2230      	movs	r2, #48	@ 0x30
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f008 fdc1 	bl	8009f4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013cc:	f107 030c 	add.w	r3, r7, #12
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
=======
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b094      	sub	sp, #80	@ 0x50
 80013c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c6:	f107 0320 	add.w	r3, r7, #32
 80013ca:	2230      	movs	r2, #48	@ 0x30
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f008 feb8 	bl	800a144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d4:	f107 030c 	add.w	r3, r7, #12
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 80013dc:	2300      	movs	r3, #0
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	4b28      	ldr	r3, [pc, #160]	@ (8001484 <SystemClock_Config+0xcc>)
 80013e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e4:	4a27      	ldr	r2, [pc, #156]	@ (8001484 <SystemClock_Config+0xcc>)
 80013e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ec:	4b25      	ldr	r3, [pc, #148]	@ (8001484 <SystemClock_Config+0xcc>)
 80013ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013f8:	2300      	movs	r3, #0
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	4b22      	ldr	r3, [pc, #136]	@ (8001488 <SystemClock_Config+0xd0>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a21      	ldr	r2, [pc, #132]	@ (8001488 <SystemClock_Config+0xd0>)
 8001402:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	4b1f      	ldr	r3, [pc, #124]	@ (8001488 <SystemClock_Config+0xd0>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	687b      	ldr	r3, [r7, #4]
=======
 80013e4:	2300      	movs	r3, #0
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	4b28      	ldr	r3, [pc, #160]	@ (800148c <SystemClock_Config+0xcc>)
 80013ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ec:	4a27      	ldr	r2, [pc, #156]	@ (800148c <SystemClock_Config+0xcc>)
 80013ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f4:	4b25      	ldr	r3, [pc, #148]	@ (800148c <SystemClock_Config+0xcc>)
 80013f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001400:	2300      	movs	r3, #0
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	4b22      	ldr	r3, [pc, #136]	@ (8001490 <SystemClock_Config+0xd0>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a21      	ldr	r2, [pc, #132]	@ (8001490 <SystemClock_Config+0xd0>)
 800140a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	4b1f      	ldr	r3, [pc, #124]	@ (8001490 <SystemClock_Config+0xd0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	687b      	ldr	r3, [r7, #4]

>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
<<<<<<< HEAD
 8001414:	2302      	movs	r3, #2
 8001416:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001418:	2301      	movs	r3, #1
 800141a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800141c:	2310      	movs	r3, #16
 800141e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001420:	2302      	movs	r3, #2
 8001422:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001424:	2300      	movs	r3, #0
 8001426:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001428:	2310      	movs	r3, #16
 800142a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800142c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001430:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001432:	2304      	movs	r3, #4
 8001434:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001436:	2304      	movs	r3, #4
 8001438:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800143a:	f107 0320 	add.w	r3, r7, #32
 800143e:	4618      	mov	r0, r3
 8001440:	f002 f8bc 	bl	80035bc <HAL_RCC_OscConfig>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800144a:	f000 fba9 	bl	8001ba0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800144e:	230f      	movs	r3, #15
 8001450:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001452:	2302      	movs	r3, #2
 8001454:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800145a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800145e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001460:	2300      	movs	r3, #0
 8001462:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001464:	f107 030c 	add.w	r3, r7, #12
 8001468:	2102      	movs	r1, #2
 800146a:	4618      	mov	r0, r3
 800146c:	f002 fb1e 	bl	8003aac <HAL_RCC_ClockConfig>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001476:	f000 fb93 	bl	8001ba0 <Error_Handler>
  }
}
 800147a:	bf00      	nop
 800147c:	3750      	adds	r7, #80	@ 0x50
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40023800 	.word	0x40023800
 8001488:	40007000 	.word	0x40007000

0800148c <MX_I2C1_Init>:
=======
 800141c:	2302      	movs	r3, #2
 800141e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001420:	2301      	movs	r3, #1
 8001422:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001424:	2310      	movs	r3, #16
 8001426:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001428:	2302      	movs	r3, #2
 800142a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800142c:	2300      	movs	r3, #0
 800142e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001430:	2310      	movs	r3, #16
 8001432:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001434:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001438:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800143a:	2304      	movs	r3, #4
 800143c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800143e:	2304      	movs	r3, #4
 8001440:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001442:	f107 0320 	add.w	r3, r7, #32
 8001446:	4618      	mov	r0, r3
 8001448:	f002 f918 	bl	800367c <HAL_RCC_OscConfig>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001452:	f000 fbab 	bl	8001bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001456:	230f      	movs	r3, #15
 8001458:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800145a:	2302      	movs	r3, #2
 800145c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001462:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001466:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800146c:	f107 030c 	add.w	r3, r7, #12
 8001470:	2102      	movs	r1, #2
 8001472:	4618      	mov	r0, r3
 8001474:	f002 fb7a 	bl	8003b6c <HAL_RCC_ClockConfig>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800147e:	f000 fb95 	bl	8001bac <Error_Handler>
  }
}
 8001482:	bf00      	nop
 8001484:	3750      	adds	r7, #80	@ 0x50
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800
 8001490:	40007000 	.word	0x40007000

08001494 <MX_I2C1_Init>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
<<<<<<< HEAD
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
=======
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
<<<<<<< HEAD
 8001490:	4b12      	ldr	r3, [pc, #72]	@ (80014dc <MX_I2C1_Init+0x50>)
 8001492:	4a13      	ldr	r2, [pc, #76]	@ (80014e0 <MX_I2C1_Init+0x54>)
 8001494:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001496:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <MX_I2C1_Init+0x50>)
 8001498:	4a12      	ldr	r2, [pc, #72]	@ (80014e4 <MX_I2C1_Init+0x58>)
 800149a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800149c:	4b0f      	ldr	r3, [pc, #60]	@ (80014dc <MX_I2C1_Init+0x50>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014a2:	4b0e      	ldr	r3, [pc, #56]	@ (80014dc <MX_I2C1_Init+0x50>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014a8:	4b0c      	ldr	r3, [pc, #48]	@ (80014dc <MX_I2C1_Init+0x50>)
 80014aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014b0:	4b0a      	ldr	r3, [pc, #40]	@ (80014dc <MX_I2C1_Init+0x50>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014b6:	4b09      	ldr	r3, [pc, #36]	@ (80014dc <MX_I2C1_Init+0x50>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014bc:	4b07      	ldr	r3, [pc, #28]	@ (80014dc <MX_I2C1_Init+0x50>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014c2:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <MX_I2C1_Init+0x50>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014c8:	4804      	ldr	r0, [pc, #16]	@ (80014dc <MX_I2C1_Init+0x50>)
 80014ca:	f001 fc2b 	bl	8002d24 <HAL_I2C_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014d4:	f000 fb64 	bl	8001ba0 <Error_Handler>
=======
 8001498:	4b12      	ldr	r3, [pc, #72]	@ (80014e4 <MX_I2C1_Init+0x50>)
 800149a:	4a13      	ldr	r2, [pc, #76]	@ (80014e8 <MX_I2C1_Init+0x54>)
 800149c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800149e:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014a0:	4a12      	ldr	r2, [pc, #72]	@ (80014ec <MX_I2C1_Init+0x58>)
 80014a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014a4:	4b0f      	ldr	r3, [pc, #60]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014aa:	4b0e      	ldr	r3, [pc, #56]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014b0:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014b8:	4b0a      	ldr	r3, [pc, #40]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014be:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014c4:	4b07      	ldr	r3, [pc, #28]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ca:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014d0:	4804      	ldr	r0, [pc, #16]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014d2:	f001 fc35 	bl	8002d40 <HAL_I2C_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014dc:	f000 fb66 	bl	8001bac <Error_Handler>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
<<<<<<< HEAD
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	200001fc 	.word	0x200001fc
 80014e0:	40005400 	.word	0x40005400
 80014e4:	000186a0 	.word	0x000186a0

080014e8 <MX_SPI2_Init>:
=======
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	200001fc 	.word	0x200001fc
 80014e8:	40005400 	.word	0x40005400
 80014ec:	000186a0 	.word	0x000186a0

080014f0 <MX_SPI2_Init>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
<<<<<<< HEAD
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
=======
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
<<<<<<< HEAD
 80014ec:	4b17      	ldr	r3, [pc, #92]	@ (800154c <MX_SPI2_Init+0x64>)
 80014ee:	4a18      	ldr	r2, [pc, #96]	@ (8001550 <MX_SPI2_Init+0x68>)
 80014f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014f2:	4b16      	ldr	r3, [pc, #88]	@ (800154c <MX_SPI2_Init+0x64>)
 80014f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014fa:	4b14      	ldr	r3, [pc, #80]	@ (800154c <MX_SPI2_Init+0x64>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001500:	4b12      	ldr	r3, [pc, #72]	@ (800154c <MX_SPI2_Init+0x64>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001506:	4b11      	ldr	r3, [pc, #68]	@ (800154c <MX_SPI2_Init+0x64>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800150c:	4b0f      	ldr	r3, [pc, #60]	@ (800154c <MX_SPI2_Init+0x64>)
 800150e:	2200      	movs	r2, #0
 8001510:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001512:	4b0e      	ldr	r3, [pc, #56]	@ (800154c <MX_SPI2_Init+0x64>)
 8001514:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001518:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800151a:	4b0c      	ldr	r3, [pc, #48]	@ (800154c <MX_SPI2_Init+0x64>)
 800151c:	2200      	movs	r2, #0
 800151e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001520:	4b0a      	ldr	r3, [pc, #40]	@ (800154c <MX_SPI2_Init+0x64>)
 8001522:	2200      	movs	r2, #0
 8001524:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001526:	4b09      	ldr	r3, [pc, #36]	@ (800154c <MX_SPI2_Init+0x64>)
 8001528:	2200      	movs	r2, #0
 800152a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800152c:	4b07      	ldr	r3, [pc, #28]	@ (800154c <MX_SPI2_Init+0x64>)
 800152e:	2200      	movs	r2, #0
 8001530:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001532:	4b06      	ldr	r3, [pc, #24]	@ (800154c <MX_SPI2_Init+0x64>)
 8001534:	220a      	movs	r2, #10
 8001536:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001538:	4804      	ldr	r0, [pc, #16]	@ (800154c <MX_SPI2_Init+0x64>)
 800153a:	f002 fd09 	bl	8003f50 <HAL_SPI_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001544:	f000 fb2c 	bl	8001ba0 <Error_Handler>
=======
 80014f4:	4b17      	ldr	r3, [pc, #92]	@ (8001554 <MX_SPI2_Init+0x64>)
 80014f6:	4a18      	ldr	r2, [pc, #96]	@ (8001558 <MX_SPI2_Init+0x68>)
 80014f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014fa:	4b16      	ldr	r3, [pc, #88]	@ (8001554 <MX_SPI2_Init+0x64>)
 80014fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001500:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001502:	4b14      	ldr	r3, [pc, #80]	@ (8001554 <MX_SPI2_Init+0x64>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001508:	4b12      	ldr	r3, [pc, #72]	@ (8001554 <MX_SPI2_Init+0x64>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800150e:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <MX_SPI2_Init+0x64>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001514:	4b0f      	ldr	r3, [pc, #60]	@ (8001554 <MX_SPI2_Init+0x64>)
 8001516:	2200      	movs	r2, #0
 8001518:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800151a:	4b0e      	ldr	r3, [pc, #56]	@ (8001554 <MX_SPI2_Init+0x64>)
 800151c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001520:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001522:	4b0c      	ldr	r3, [pc, #48]	@ (8001554 <MX_SPI2_Init+0x64>)
 8001524:	2200      	movs	r2, #0
 8001526:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001528:	4b0a      	ldr	r3, [pc, #40]	@ (8001554 <MX_SPI2_Init+0x64>)
 800152a:	2200      	movs	r2, #0
 800152c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800152e:	4b09      	ldr	r3, [pc, #36]	@ (8001554 <MX_SPI2_Init+0x64>)
 8001530:	2200      	movs	r2, #0
 8001532:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001534:	4b07      	ldr	r3, [pc, #28]	@ (8001554 <MX_SPI2_Init+0x64>)
 8001536:	2200      	movs	r2, #0
 8001538:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800153a:	4b06      	ldr	r3, [pc, #24]	@ (8001554 <MX_SPI2_Init+0x64>)
 800153c:	220a      	movs	r2, #10
 800153e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001540:	4804      	ldr	r0, [pc, #16]	@ (8001554 <MX_SPI2_Init+0x64>)
 8001542:	f002 fd65 	bl	8004010 <HAL_SPI_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800154c:	f000 fb2e 	bl	8001bac <Error_Handler>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
<<<<<<< HEAD
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000250 	.word	0x20000250
 8001550:	40003800 	.word	0x40003800

08001554 <MX_TIM2_Init>:
=======
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000250 	.word	0x20000250
 8001558:	40003800 	.word	0x40003800

0800155c <MX_TIM2_Init>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
<<<<<<< HEAD
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
=======
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 800155a:	f107 0308 	add.w	r3, r7, #8
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001568:	463b      	mov	r3, r7
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
=======
 8001562:	f107 0308 	add.w	r3, r7, #8
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001570:	463b      	mov	r3, r7
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
<<<<<<< HEAD
 8001570:	4b1d      	ldr	r3, [pc, #116]	@ (80015e8 <MX_TIM2_Init+0x94>)
 8001572:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001576:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001578:	4b1b      	ldr	r3, [pc, #108]	@ (80015e8 <MX_TIM2_Init+0x94>)
 800157a:	2253      	movs	r2, #83	@ 0x53
 800157c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157e:	4b1a      	ldr	r3, [pc, #104]	@ (80015e8 <MX_TIM2_Init+0x94>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001584:	4b18      	ldr	r3, [pc, #96]	@ (80015e8 <MX_TIM2_Init+0x94>)
 8001586:	f04f 32ff 	mov.w	r2, #4294967295
 800158a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800158c:	4b16      	ldr	r3, [pc, #88]	@ (80015e8 <MX_TIM2_Init+0x94>)
 800158e:	2200      	movs	r2, #0
 8001590:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001592:	4b15      	ldr	r3, [pc, #84]	@ (80015e8 <MX_TIM2_Init+0x94>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001598:	4813      	ldr	r0, [pc, #76]	@ (80015e8 <MX_TIM2_Init+0x94>)
 800159a:	f002 fd62 	bl	8004062 <HAL_TIM_Base_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015a4:	f000 fafc 	bl	8001ba0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015ae:	f107 0308 	add.w	r3, r7, #8
 80015b2:	4619      	mov	r1, r3
 80015b4:	480c      	ldr	r0, [pc, #48]	@ (80015e8 <MX_TIM2_Init+0x94>)
 80015b6:	f003 fadf 	bl	8004b78 <HAL_TIM_ConfigClockSource>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015c0:	f000 faee 	bl	8001ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c4:	2300      	movs	r3, #0
 80015c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015cc:	463b      	mov	r3, r7
 80015ce:	4619      	mov	r1, r3
 80015d0:	4805      	ldr	r0, [pc, #20]	@ (80015e8 <MX_TIM2_Init+0x94>)
 80015d2:	f003 ffe5 	bl	80055a0 <HAL_TIMEx_MasterConfigSynchronization>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015dc:	f000 fae0 	bl	8001ba0 <Error_Handler>
=======
 8001578:	4b1d      	ldr	r3, [pc, #116]	@ (80015f0 <MX_TIM2_Init+0x94>)
 800157a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800157e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001580:	4b1b      	ldr	r3, [pc, #108]	@ (80015f0 <MX_TIM2_Init+0x94>)
 8001582:	2253      	movs	r2, #83	@ 0x53
 8001584:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001586:	4b1a      	ldr	r3, [pc, #104]	@ (80015f0 <MX_TIM2_Init+0x94>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800158c:	4b18      	ldr	r3, [pc, #96]	@ (80015f0 <MX_TIM2_Init+0x94>)
 800158e:	f04f 32ff 	mov.w	r2, #4294967295
 8001592:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001594:	4b16      	ldr	r3, [pc, #88]	@ (80015f0 <MX_TIM2_Init+0x94>)
 8001596:	2200      	movs	r2, #0
 8001598:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800159a:	4b15      	ldr	r3, [pc, #84]	@ (80015f0 <MX_TIM2_Init+0x94>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015a0:	4813      	ldr	r0, [pc, #76]	@ (80015f0 <MX_TIM2_Init+0x94>)
 80015a2:	f002 fdbe 	bl	8004122 <HAL_TIM_Base_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015ac:	f000 fafe 	bl	8001bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015b6:	f107 0308 	add.w	r3, r7, #8
 80015ba:	4619      	mov	r1, r3
 80015bc:	480c      	ldr	r0, [pc, #48]	@ (80015f0 <MX_TIM2_Init+0x94>)
 80015be:	f003 fb23 	bl	8004c08 <HAL_TIM_ConfigClockSource>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015c8:	f000 faf0 	bl	8001bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015cc:	2300      	movs	r3, #0
 80015ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015d4:	463b      	mov	r3, r7
 80015d6:	4619      	mov	r1, r3
 80015d8:	4805      	ldr	r0, [pc, #20]	@ (80015f0 <MX_TIM2_Init+0x94>)
 80015da:	f004 f82f 	bl	800563c <HAL_TIMEx_MasterConfigSynchronization>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015e4:	f000 fae2 	bl	8001bac <Error_Handler>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
<<<<<<< HEAD
 80015e0:	bf00      	nop
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	200002a8 	.word	0x200002a8

080015ec <MX_TIM3_Init>:
=======
 80015e8:	bf00      	nop
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	200002a8 	.word	0x200002a8

080015f4 <MX_TIM3_Init>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
<<<<<<< HEAD
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08a      	sub	sp, #40	@ 0x28
 80015f0:	af00      	add	r7, sp, #0
=======
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	@ 0x28
 80015f8:	af00      	add	r7, sp, #0
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 80015f2:	f107 0318 	add.w	r3, r7, #24
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001600:	f107 0310 	add.w	r3, r7, #16
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800160a:	463b      	mov	r3, r7
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
=======
 80015fa:	f107 0318 	add.w	r3, r7, #24
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001608:	f107 0310 	add.w	r3, r7, #16
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001612:	463b      	mov	r3, r7
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
<<<<<<< HEAD
 8001616:	4b2b      	ldr	r3, [pc, #172]	@ (80016c4 <MX_TIM3_Init+0xd8>)
 8001618:	4a2b      	ldr	r2, [pc, #172]	@ (80016c8 <MX_TIM3_Init+0xdc>)
 800161a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800161c:	4b29      	ldr	r3, [pc, #164]	@ (80016c4 <MX_TIM3_Init+0xd8>)
 800161e:	2253      	movs	r2, #83	@ 0x53
 8001620:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001622:	4b28      	ldr	r3, [pc, #160]	@ (80016c4 <MX_TIM3_Init+0xd8>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001628:	4b26      	ldr	r3, [pc, #152]	@ (80016c4 <MX_TIM3_Init+0xd8>)
 800162a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800162e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001630:	4b24      	ldr	r3, [pc, #144]	@ (80016c4 <MX_TIM3_Init+0xd8>)
 8001632:	2200      	movs	r2, #0
 8001634:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001636:	4b23      	ldr	r3, [pc, #140]	@ (80016c4 <MX_TIM3_Init+0xd8>)
 8001638:	2200      	movs	r2, #0
 800163a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800163c:	4821      	ldr	r0, [pc, #132]	@ (80016c4 <MX_TIM3_Init+0xd8>)
 800163e:	f002 fd10 	bl	8004062 <HAL_TIM_Base_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001648:	f000 faaa 	bl	8001ba0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800164c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001650:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001652:	f107 0318 	add.w	r3, r7, #24
 8001656:	4619      	mov	r1, r3
 8001658:	481a      	ldr	r0, [pc, #104]	@ (80016c4 <MX_TIM3_Init+0xd8>)
 800165a:	f003 fa8d 	bl	8004b78 <HAL_TIM_ConfigClockSource>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001664:	f000 fa9c 	bl	8001ba0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001668:	4816      	ldr	r0, [pc, #88]	@ (80016c4 <MX_TIM3_Init+0xd8>)
 800166a:	f002 feab 	bl	80043c4 <HAL_TIM_IC_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001674:	f000 fa94 	bl	8001ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001678:	2300      	movs	r3, #0
 800167a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001680:	f107 0310 	add.w	r3, r7, #16
 8001684:	4619      	mov	r1, r3
 8001686:	480f      	ldr	r0, [pc, #60]	@ (80016c4 <MX_TIM3_Init+0xd8>)
 8001688:	f003 ff8a 	bl	80055a0 <HAL_TIMEx_MasterConfigSynchronization>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001692:	f000 fa85 	bl	8001ba0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001696:	230a      	movs	r3, #10
 8001698:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800169a:	2301      	movs	r3, #1
 800169c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800169e:	2300      	movs	r3, #0
 80016a0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80016a6:	463b      	mov	r3, r7
 80016a8:	2204      	movs	r2, #4
 80016aa:	4619      	mov	r1, r3
 80016ac:	4805      	ldr	r0, [pc, #20]	@ (80016c4 <MX_TIM3_Init+0xd8>)
 80016ae:	f003 f905 	bl	80048bc <HAL_TIM_IC_ConfigChannel>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80016b8:	f000 fa72 	bl	8001ba0 <Error_Handler>
=======
 800161e:	4b2b      	ldr	r3, [pc, #172]	@ (80016cc <MX_TIM3_Init+0xd8>)
 8001620:	4a2b      	ldr	r2, [pc, #172]	@ (80016d0 <MX_TIM3_Init+0xdc>)
 8001622:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001624:	4b29      	ldr	r3, [pc, #164]	@ (80016cc <MX_TIM3_Init+0xd8>)
 8001626:	2253      	movs	r2, #83	@ 0x53
 8001628:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162a:	4b28      	ldr	r3, [pc, #160]	@ (80016cc <MX_TIM3_Init+0xd8>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001630:	4b26      	ldr	r3, [pc, #152]	@ (80016cc <MX_TIM3_Init+0xd8>)
 8001632:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001636:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001638:	4b24      	ldr	r3, [pc, #144]	@ (80016cc <MX_TIM3_Init+0xd8>)
 800163a:	2200      	movs	r2, #0
 800163c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800163e:	4b23      	ldr	r3, [pc, #140]	@ (80016cc <MX_TIM3_Init+0xd8>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001644:	4821      	ldr	r0, [pc, #132]	@ (80016cc <MX_TIM3_Init+0xd8>)
 8001646:	f002 fd6c 	bl	8004122 <HAL_TIM_Base_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001650:	f000 faac 	bl	8001bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001654:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001658:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800165a:	f107 0318 	add.w	r3, r7, #24
 800165e:	4619      	mov	r1, r3
 8001660:	481a      	ldr	r0, [pc, #104]	@ (80016cc <MX_TIM3_Init+0xd8>)
 8001662:	f003 fad1 	bl	8004c08 <HAL_TIM_ConfigClockSource>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800166c:	f000 fa9e 	bl	8001bac <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001670:	4816      	ldr	r0, [pc, #88]	@ (80016cc <MX_TIM3_Init+0xd8>)
 8001672:	f002 ff07 	bl	8004484 <HAL_TIM_IC_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800167c:	f000 fa96 	bl	8001bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001680:	2300      	movs	r3, #0
 8001682:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001688:	f107 0310 	add.w	r3, r7, #16
 800168c:	4619      	mov	r1, r3
 800168e:	480f      	ldr	r0, [pc, #60]	@ (80016cc <MX_TIM3_Init+0xd8>)
 8001690:	f003 ffd4 	bl	800563c <HAL_TIMEx_MasterConfigSynchronization>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800169a:	f000 fa87 	bl	8001bac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800169e:	230a      	movs	r3, #10
 80016a0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016a2:	2301      	movs	r3, #1
 80016a4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80016ae:	463b      	mov	r3, r7
 80016b0:	2204      	movs	r2, #4
 80016b2:	4619      	mov	r1, r3
 80016b4:	4805      	ldr	r0, [pc, #20]	@ (80016cc <MX_TIM3_Init+0xd8>)
 80016b6:	f003 f949 	bl	800494c <HAL_TIM_IC_ConfigChannel>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80016c0:	f000 fa74 	bl	8001bac <Error_Handler>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
<<<<<<< HEAD
 80016bc:	bf00      	nop
 80016be:	3728      	adds	r7, #40	@ 0x28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	200002f0 	.word	0x200002f0
 80016c8:	40000400 	.word	0x40000400

080016cc <MX_TIM5_Init>:
=======
 80016c4:	bf00      	nop
 80016c6:	3728      	adds	r7, #40	@ 0x28
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	200002f0 	.word	0x200002f0
 80016d0:	40000400 	.word	0x40000400

080016d4 <MX_TIM5_Init>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
<<<<<<< HEAD
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08a      	sub	sp, #40	@ 0x28
 80016d0:	af00      	add	r7, sp, #0
=======
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08a      	sub	sp, #40	@ 0x28
 80016d8:	af00      	add	r7, sp, #0
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
<<<<<<< HEAD
 80016d2:	f107 0320 	add.w	r3, r7, #32
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
 80016e8:	611a      	str	r2, [r3, #16]
 80016ea:	615a      	str	r2, [r3, #20]
 80016ec:	619a      	str	r2, [r3, #24]
=======
 80016da:	f107 0320 	add.w	r3, r7, #32
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
 80016f0:	611a      	str	r2, [r3, #16]
 80016f2:	615a      	str	r2, [r3, #20]
 80016f4:	619a      	str	r2, [r3, #24]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
<<<<<<< HEAD
 80016ee:	4b22      	ldr	r3, [pc, #136]	@ (8001778 <MX_TIM5_Init+0xac>)
 80016f0:	4a22      	ldr	r2, [pc, #136]	@ (800177c <MX_TIM5_Init+0xb0>)
 80016f2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1680-1;
 80016f4:	4b20      	ldr	r3, [pc, #128]	@ (8001778 <MX_TIM5_Init+0xac>)
 80016f6:	f240 628f 	movw	r2, #1679	@ 0x68f
 80016fa:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001778 <MX_TIM5_Init+0xac>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8001702:	4b1d      	ldr	r3, [pc, #116]	@ (8001778 <MX_TIM5_Init+0xac>)
 8001704:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001708:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800170a:	4b1b      	ldr	r3, [pc, #108]	@ (8001778 <MX_TIM5_Init+0xac>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001710:	4b19      	ldr	r3, [pc, #100]	@ (8001778 <MX_TIM5_Init+0xac>)
 8001712:	2200      	movs	r2, #0
 8001714:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001716:	4818      	ldr	r0, [pc, #96]	@ (8001778 <MX_TIM5_Init+0xac>)
 8001718:	f002 fd54 	bl	80041c4 <HAL_TIM_PWM_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8001722:	f000 fa3d 	bl	8001ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001726:	2300      	movs	r3, #0
 8001728:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800172a:	2300      	movs	r3, #0
 800172c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800172e:	f107 0320 	add.w	r3, r7, #32
 8001732:	4619      	mov	r1, r3
 8001734:	4810      	ldr	r0, [pc, #64]	@ (8001778 <MX_TIM5_Init+0xac>)
 8001736:	f003 ff33 	bl	80055a0 <HAL_TIMEx_MasterConfigSynchronization>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001740:	f000 fa2e 	bl	8001ba0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001744:	2360      	movs	r3, #96	@ 0x60
 8001746:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001754:	1d3b      	adds	r3, r7, #4
 8001756:	2204      	movs	r2, #4
 8001758:	4619      	mov	r1, r3
 800175a:	4807      	ldr	r0, [pc, #28]	@ (8001778 <MX_TIM5_Init+0xac>)
 800175c:	f003 f94a 	bl	80049f4 <HAL_TIM_PWM_ConfigChannel>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001766:	f000 fa1b 	bl	8001ba0 <Error_Handler>
=======
 80016f6:	4b22      	ldr	r3, [pc, #136]	@ (8001780 <MX_TIM5_Init+0xac>)
 80016f8:	4a22      	ldr	r2, [pc, #136]	@ (8001784 <MX_TIM5_Init+0xb0>)
 80016fa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1680-1;
 80016fc:	4b20      	ldr	r3, [pc, #128]	@ (8001780 <MX_TIM5_Init+0xac>)
 80016fe:	f240 628f 	movw	r2, #1679	@ 0x68f
 8001702:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001704:	4b1e      	ldr	r3, [pc, #120]	@ (8001780 <MX_TIM5_Init+0xac>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 800170a:	4b1d      	ldr	r3, [pc, #116]	@ (8001780 <MX_TIM5_Init+0xac>)
 800170c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001710:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001712:	4b1b      	ldr	r3, [pc, #108]	@ (8001780 <MX_TIM5_Init+0xac>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001718:	4b19      	ldr	r3, [pc, #100]	@ (8001780 <MX_TIM5_Init+0xac>)
 800171a:	2200      	movs	r2, #0
 800171c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800171e:	4818      	ldr	r0, [pc, #96]	@ (8001780 <MX_TIM5_Init+0xac>)
 8001720:	f002 fdb0 	bl	8004284 <HAL_TIM_PWM_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 800172a:	f000 fa3f 	bl	8001bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800172e:	2300      	movs	r3, #0
 8001730:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001732:	2300      	movs	r3, #0
 8001734:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001736:	f107 0320 	add.w	r3, r7, #32
 800173a:	4619      	mov	r1, r3
 800173c:	4810      	ldr	r0, [pc, #64]	@ (8001780 <MX_TIM5_Init+0xac>)
 800173e:	f003 ff7d 	bl	800563c <HAL_TIMEx_MasterConfigSynchronization>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001748:	f000 fa30 	bl	8001bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800174c:	2360      	movs	r3, #96	@ 0x60
 800174e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001754:	2300      	movs	r3, #0
 8001756:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800175c:	1d3b      	adds	r3, r7, #4
 800175e:	2204      	movs	r2, #4
 8001760:	4619      	mov	r1, r3
 8001762:	4807      	ldr	r0, [pc, #28]	@ (8001780 <MX_TIM5_Init+0xac>)
 8001764:	f003 f98e 	bl	8004a84 <HAL_TIM_PWM_ConfigChannel>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 800176e:	f000 fa1d 	bl	8001bac <Error_Handler>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
<<<<<<< HEAD
 800176a:	4803      	ldr	r0, [pc, #12]	@ (8001778 <MX_TIM5_Init+0xac>)
 800176c:	f000 fbfe 	bl	8001f6c <HAL_TIM_MspPostInit>

}
 8001770:	bf00      	nop
 8001772:	3728      	adds	r7, #40	@ 0x28
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000338 	.word	0x20000338
 800177c:	40000c00 	.word	0x40000c00

08001780 <MX_TIM11_Init>:
=======
 8001772:	4803      	ldr	r0, [pc, #12]	@ (8001780 <MX_TIM5_Init+0xac>)
 8001774:	f000 fc00 	bl	8001f78 <HAL_TIM_MspPostInit>

}
 8001778:	bf00      	nop
 800177a:	3728      	adds	r7, #40	@ 0x28
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000338 	.word	0x20000338
 8001784:	40000c00 	.word	0x40000c00

08001788 <MX_TIM11_Init>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
<<<<<<< HEAD
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
=======
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
<<<<<<< HEAD
 8001784:	4b0e      	ldr	r3, [pc, #56]	@ (80017c0 <MX_TIM11_Init+0x40>)
 8001786:	4a0f      	ldr	r2, [pc, #60]	@ (80017c4 <MX_TIM11_Init+0x44>)
 8001788:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84-1;
 800178a:	4b0d      	ldr	r3, [pc, #52]	@ (80017c0 <MX_TIM11_Init+0x40>)
 800178c:	2253      	movs	r2, #83	@ 0x53
 800178e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001790:	4b0b      	ldr	r3, [pc, #44]	@ (80017c0 <MX_TIM11_Init+0x40>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8001796:	4b0a      	ldr	r3, [pc, #40]	@ (80017c0 <MX_TIM11_Init+0x40>)
 8001798:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800179c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800179e:	4b08      	ldr	r3, [pc, #32]	@ (80017c0 <MX_TIM11_Init+0x40>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a4:	4b06      	ldr	r3, [pc, #24]	@ (80017c0 <MX_TIM11_Init+0x40>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80017aa:	4805      	ldr	r0, [pc, #20]	@ (80017c0 <MX_TIM11_Init+0x40>)
 80017ac:	f002 fc59 	bl	8004062 <HAL_TIM_Base_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80017b6:	f000 f9f3 	bl	8001ba0 <Error_Handler>
=======
 800178c:	4b0e      	ldr	r3, [pc, #56]	@ (80017c8 <MX_TIM11_Init+0x40>)
 800178e:	4a0f      	ldr	r2, [pc, #60]	@ (80017cc <MX_TIM11_Init+0x44>)
 8001790:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84-1;
 8001792:	4b0d      	ldr	r3, [pc, #52]	@ (80017c8 <MX_TIM11_Init+0x40>)
 8001794:	2253      	movs	r2, #83	@ 0x53
 8001796:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001798:	4b0b      	ldr	r3, [pc, #44]	@ (80017c8 <MX_TIM11_Init+0x40>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 800179e:	4b0a      	ldr	r3, [pc, #40]	@ (80017c8 <MX_TIM11_Init+0x40>)
 80017a0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017a4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a6:	4b08      	ldr	r3, [pc, #32]	@ (80017c8 <MX_TIM11_Init+0x40>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ac:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <MX_TIM11_Init+0x40>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80017b2:	4805      	ldr	r0, [pc, #20]	@ (80017c8 <MX_TIM11_Init+0x40>)
 80017b4:	f002 fcb5 	bl	8004122 <HAL_TIM_Base_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80017be:	f000 f9f5 	bl	8001bac <Error_Handler>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
<<<<<<< HEAD
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000380 	.word	0x20000380
 80017c4:	40014800 	.word	0x40014800

080017c8 <MX_USART1_UART_Init>:
=======
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000380 	.word	0x20000380
 80017cc:	40014800 	.word	0x40014800

080017d0 <MX_USART1_UART_Init>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
<<<<<<< HEAD
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
=======
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
<<<<<<< HEAD
 80017cc:	4b11      	ldr	r3, [pc, #68]	@ (8001814 <MX_USART1_UART_Init+0x4c>)
 80017ce:	4a12      	ldr	r2, [pc, #72]	@ (8001818 <MX_USART1_UART_Init+0x50>)
 80017d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017d2:	4b10      	ldr	r3, [pc, #64]	@ (8001814 <MX_USART1_UART_Init+0x4c>)
 80017d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017da:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <MX_USART1_UART_Init+0x4c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001814 <MX_USART1_UART_Init+0x4c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <MX_USART1_UART_Init+0x4c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017ec:	4b09      	ldr	r3, [pc, #36]	@ (8001814 <MX_USART1_UART_Init+0x4c>)
 80017ee:	220c      	movs	r2, #12
 80017f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f2:	4b08      	ldr	r3, [pc, #32]	@ (8001814 <MX_USART1_UART_Init+0x4c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f8:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <MX_USART1_UART_Init+0x4c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017fe:	4805      	ldr	r0, [pc, #20]	@ (8001814 <MX_USART1_UART_Init+0x4c>)
 8001800:	f003 ff50 	bl	80056a4 <HAL_UART_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800180a:	f000 f9c9 	bl	8001ba0 <Error_Handler>
=======
 80017d4:	4b11      	ldr	r3, [pc, #68]	@ (800181c <MX_USART1_UART_Init+0x4c>)
 80017d6:	4a12      	ldr	r2, [pc, #72]	@ (8001820 <MX_USART1_UART_Init+0x50>)
 80017d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017da:	4b10      	ldr	r3, [pc, #64]	@ (800181c <MX_USART1_UART_Init+0x4c>)
 80017dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	@ (800181c <MX_USART1_UART_Init+0x4c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017e8:	4b0c      	ldr	r3, [pc, #48]	@ (800181c <MX_USART1_UART_Init+0x4c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017ee:	4b0b      	ldr	r3, [pc, #44]	@ (800181c <MX_USART1_UART_Init+0x4c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017f4:	4b09      	ldr	r3, [pc, #36]	@ (800181c <MX_USART1_UART_Init+0x4c>)
 80017f6:	220c      	movs	r2, #12
 80017f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fa:	4b08      	ldr	r3, [pc, #32]	@ (800181c <MX_USART1_UART_Init+0x4c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001800:	4b06      	ldr	r3, [pc, #24]	@ (800181c <MX_USART1_UART_Init+0x4c>)
 8001802:	2200      	movs	r2, #0
 8001804:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001806:	4805      	ldr	r0, [pc, #20]	@ (800181c <MX_USART1_UART_Init+0x4c>)
 8001808:	f003 ff9a 	bl	8005740 <HAL_UART_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001812:	f000 f9cb 	bl	8001bac <Error_Handler>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
<<<<<<< HEAD
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	200003c8 	.word	0x200003c8
 8001818:	40011000 	.word	0x40011000

0800181c <MX_USART2_UART_Init>:
=======
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	200003c8 	.word	0x200003c8
 8001820:	40011000 	.word	0x40011000

08001824 <MX_USART2_UART_Init>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
<<<<<<< HEAD
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
=======
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
<<<<<<< HEAD
 8001820:	4b11      	ldr	r3, [pc, #68]	@ (8001868 <MX_USART2_UART_Init+0x4c>)
 8001822:	4a12      	ldr	r2, [pc, #72]	@ (800186c <MX_USART2_UART_Init+0x50>)
 8001824:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001826:	4b10      	ldr	r3, [pc, #64]	@ (8001868 <MX_USART2_UART_Init+0x4c>)
 8001828:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800182c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800182e:	4b0e      	ldr	r3, [pc, #56]	@ (8001868 <MX_USART2_UART_Init+0x4c>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001834:	4b0c      	ldr	r3, [pc, #48]	@ (8001868 <MX_USART2_UART_Init+0x4c>)
 8001836:	2200      	movs	r2, #0
 8001838:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800183a:	4b0b      	ldr	r3, [pc, #44]	@ (8001868 <MX_USART2_UART_Init+0x4c>)
 800183c:	2200      	movs	r2, #0
 800183e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001840:	4b09      	ldr	r3, [pc, #36]	@ (8001868 <MX_USART2_UART_Init+0x4c>)
 8001842:	220c      	movs	r2, #12
 8001844:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001846:	4b08      	ldr	r3, [pc, #32]	@ (8001868 <MX_USART2_UART_Init+0x4c>)
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800184c:	4b06      	ldr	r3, [pc, #24]	@ (8001868 <MX_USART2_UART_Init+0x4c>)
 800184e:	2200      	movs	r2, #0
 8001850:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001852:	4805      	ldr	r0, [pc, #20]	@ (8001868 <MX_USART2_UART_Init+0x4c>)
 8001854:	f003 ff26 	bl	80056a4 <HAL_UART_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800185e:	f000 f99f 	bl	8001ba0 <Error_Handler>
=======
 8001828:	4b11      	ldr	r3, [pc, #68]	@ (8001870 <MX_USART2_UART_Init+0x4c>)
 800182a:	4a12      	ldr	r2, [pc, #72]	@ (8001874 <MX_USART2_UART_Init+0x50>)
 800182c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800182e:	4b10      	ldr	r3, [pc, #64]	@ (8001870 <MX_USART2_UART_Init+0x4c>)
 8001830:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001834:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001836:	4b0e      	ldr	r3, [pc, #56]	@ (8001870 <MX_USART2_UART_Init+0x4c>)
 8001838:	2200      	movs	r2, #0
 800183a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800183c:	4b0c      	ldr	r3, [pc, #48]	@ (8001870 <MX_USART2_UART_Init+0x4c>)
 800183e:	2200      	movs	r2, #0
 8001840:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001842:	4b0b      	ldr	r3, [pc, #44]	@ (8001870 <MX_USART2_UART_Init+0x4c>)
 8001844:	2200      	movs	r2, #0
 8001846:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001848:	4b09      	ldr	r3, [pc, #36]	@ (8001870 <MX_USART2_UART_Init+0x4c>)
 800184a:	220c      	movs	r2, #12
 800184c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800184e:	4b08      	ldr	r3, [pc, #32]	@ (8001870 <MX_USART2_UART_Init+0x4c>)
 8001850:	2200      	movs	r2, #0
 8001852:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001854:	4b06      	ldr	r3, [pc, #24]	@ (8001870 <MX_USART2_UART_Init+0x4c>)
 8001856:	2200      	movs	r2, #0
 8001858:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800185a:	4805      	ldr	r0, [pc, #20]	@ (8001870 <MX_USART2_UART_Init+0x4c>)
 800185c:	f003 ff70 	bl	8005740 <HAL_UART_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001866:	f000 f9a1 	bl	8001bac <Error_Handler>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
<<<<<<< HEAD
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	2000040c 	.word	0x2000040c
 800186c:	40004400 	.word	0x40004400

08001870 <MX_GPIO_Init>:
=======
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000410 	.word	0x20000410
 8001874:	40004400 	.word	0x40004400

08001878 <MX_GPIO_Init>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 8001870:	b580      	push	{r7, lr}
 8001872:	b08a      	sub	sp, #40	@ 0x28
 8001874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	60da      	str	r2, [r3, #12]
 8001884:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	4b3f      	ldr	r3, [pc, #252]	@ (8001988 <MX_GPIO_Init+0x118>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	4a3e      	ldr	r2, [pc, #248]	@ (8001988 <MX_GPIO_Init+0x118>)
 8001890:	f043 0304 	orr.w	r3, r3, #4
 8001894:	6313      	str	r3, [r2, #48]	@ 0x30
 8001896:	4b3c      	ldr	r3, [pc, #240]	@ (8001988 <MX_GPIO_Init+0x118>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	4b38      	ldr	r3, [pc, #224]	@ (8001988 <MX_GPIO_Init+0x118>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	4a37      	ldr	r2, [pc, #220]	@ (8001988 <MX_GPIO_Init+0x118>)
 80018ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b2:	4b35      	ldr	r3, [pc, #212]	@ (8001988 <MX_GPIO_Init+0x118>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	4b31      	ldr	r3, [pc, #196]	@ (8001988 <MX_GPIO_Init+0x118>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c6:	4a30      	ldr	r2, [pc, #192]	@ (8001988 <MX_GPIO_Init+0x118>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001988 <MX_GPIO_Init+0x118>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	4b2a      	ldr	r3, [pc, #168]	@ (8001988 <MX_GPIO_Init+0x118>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	4a29      	ldr	r2, [pc, #164]	@ (8001988 <MX_GPIO_Init+0x118>)
 80018e4:	f043 0302 	orr.w	r3, r3, #2
 80018e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ea:	4b27      	ldr	r3, [pc, #156]	@ (8001988 <MX_GPIO_Init+0x118>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DHT11_Pin|TRIG_Pin|LD2_Pin|CE_DS1302_Pin
 80018f6:	2200      	movs	r2, #0
 80018f8:	f641 4131 	movw	r1, #7217	@ 0x1c31
 80018fc:	4823      	ldr	r0, [pc, #140]	@ (800198c <MX_GPIO_Init+0x11c>)
 80018fe:	f001 f9f7 	bl	8002cf0 <HAL_GPIO_WritePin>
=======
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	@ 0x28
 800187c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	60da      	str	r2, [r3, #12]
 800188c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	4b3f      	ldr	r3, [pc, #252]	@ (8001990 <MX_GPIO_Init+0x118>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001896:	4a3e      	ldr	r2, [pc, #248]	@ (8001990 <MX_GPIO_Init+0x118>)
 8001898:	f043 0304 	orr.w	r3, r3, #4
 800189c:	6313      	str	r3, [r2, #48]	@ 0x30
 800189e:	4b3c      	ldr	r3, [pc, #240]	@ (8001990 <MX_GPIO_Init+0x118>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	f003 0304 	and.w	r3, r3, #4
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	4b38      	ldr	r3, [pc, #224]	@ (8001990 <MX_GPIO_Init+0x118>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	4a37      	ldr	r2, [pc, #220]	@ (8001990 <MX_GPIO_Init+0x118>)
 80018b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ba:	4b35      	ldr	r3, [pc, #212]	@ (8001990 <MX_GPIO_Init+0x118>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	4b31      	ldr	r3, [pc, #196]	@ (8001990 <MX_GPIO_Init+0x118>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	4a30      	ldr	r2, [pc, #192]	@ (8001990 <MX_GPIO_Init+0x118>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001990 <MX_GPIO_Init+0x118>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001990 <MX_GPIO_Init+0x118>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	4a29      	ldr	r2, [pc, #164]	@ (8001990 <MX_GPIO_Init+0x118>)
 80018ec:	f043 0302 	orr.w	r3, r3, #2
 80018f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f2:	4b27      	ldr	r3, [pc, #156]	@ (8001990 <MX_GPIO_Init+0x118>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DHT11_Pin|TRIG_Pin|LD2_Pin|CE_DS1302_Pin
 80018fe:	2200      	movs	r2, #0
 8001900:	f641 4131 	movw	r1, #7217	@ 0x1c31
 8001904:	4823      	ldr	r0, [pc, #140]	@ (8001994 <MX_GPIO_Init+0x11c>)
 8001906:	f001 fa01 	bl	8002d0c <HAL_GPIO_WritePin>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
                          |IO_DS1302_Pin|CLK_DS1302_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|LATCH_Pin, GPIO_PIN_RESET);
<<<<<<< HEAD
 8001902:	2200      	movs	r2, #0
 8001904:	f242 0107 	movw	r1, #8199	@ 0x2007
 8001908:	4821      	ldr	r0, [pc, #132]	@ (8001990 <MX_GPIO_Init+0x120>)
 800190a:	f001 f9f1 	bl	8002cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800190e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001914:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800191e:	f107 0314 	add.w	r3, r7, #20
 8001922:	4619      	mov	r1, r3
 8001924:	481b      	ldr	r0, [pc, #108]	@ (8001994 <MX_GPIO_Init+0x124>)
 8001926:	f001 f847 	bl	80029b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN0_Pin BTN1_Pin BTN2_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin;
 800192a:	230f      	movs	r3, #15
 800192c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800192e:	2300      	movs	r3, #0
 8001930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	4619      	mov	r1, r3
 800193c:	4815      	ldr	r0, [pc, #84]	@ (8001994 <MX_GPIO_Init+0x124>)
 800193e:	f001 f83b 	bl	80029b8 <HAL_GPIO_Init>
=======
 800190a:	2200      	movs	r2, #0
 800190c:	f242 0107 	movw	r1, #8199	@ 0x2007
 8001910:	4821      	ldr	r0, [pc, #132]	@ (8001998 <MX_GPIO_Init+0x120>)
 8001912:	f001 f9fb 	bl	8002d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001916:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800191a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800191c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001926:	f107 0314 	add.w	r3, r7, #20
 800192a:	4619      	mov	r1, r3
 800192c:	481b      	ldr	r0, [pc, #108]	@ (800199c <MX_GPIO_Init+0x124>)
 800192e:	f001 f851 	bl	80029d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN0_Pin BTN1_Pin BTN2_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin;
 8001932:	230f      	movs	r3, #15
 8001934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001936:	2300      	movs	r3, #0
 8001938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	4619      	mov	r1, r3
 8001944:	4815      	ldr	r0, [pc, #84]	@ (800199c <MX_GPIO_Init+0x124>)
 8001946:	f001 f845 	bl	80029d4 <HAL_GPIO_Init>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

  /*Configure GPIO pins : DHT11_Pin TRIG_Pin LD2_Pin CE_DS1302_Pin
                           IO_DS1302_Pin CLK_DS1302_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin|TRIG_Pin|LD2_Pin|CE_DS1302_Pin
<<<<<<< HEAD
 8001942:	f641 4331 	movw	r3, #7217	@ 0x1c31
 8001946:	617b      	str	r3, [r7, #20]
                          |IO_DS1302_Pin|CLK_DS1302_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001948:	2301      	movs	r3, #1
 800194a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001950:	2300      	movs	r3, #0
 8001952:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001954:	f107 0314 	add.w	r3, r7, #20
 8001958:	4619      	mov	r1, r3
 800195a:	480c      	ldr	r0, [pc, #48]	@ (800198c <MX_GPIO_Init+0x11c>)
 800195c:	f001 f82c 	bl	80029b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 LATCH_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|LATCH_Pin;
 8001960:	f242 0307 	movw	r3, #8199	@ 0x2007
 8001964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001966:	2301      	movs	r3, #1
 8001968:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196e:	2300      	movs	r3, #0
 8001970:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	4619      	mov	r1, r3
 8001978:	4805      	ldr	r0, [pc, #20]	@ (8001990 <MX_GPIO_Init+0x120>)
 800197a:	f001 f81d 	bl	80029b8 <HAL_GPIO_Init>

}
 800197e:	bf00      	nop
 8001980:	3728      	adds	r7, #40	@ 0x28
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800
 800198c:	40020000 	.word	0x40020000
 8001990:	40020400 	.word	0x40020400
 8001994:	40020800 	.word	0x40020800

08001998 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 80019a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019a4:	480d      	ldr	r0, [pc, #52]	@ (80019dc <StartDefaultTask+0x44>)
 80019a6:	f001 f98b 	bl	8002cc0 <HAL_GPIO_ReadPin>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d111      	bne.n	80019d4 <StartDefaultTask+0x3c>
		{
			osDelay(100); // 디바운스
 80019b0:	2064      	movs	r0, #100	@ 0x64
 80019b2:	f005 f859 	bl	8006a68 <osDelay>
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 80019b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019ba:	4808      	ldr	r0, [pc, #32]	@ (80019dc <StartDefaultTask+0x44>)
 80019bc:	f001 f980 	bl	8002cc0 <HAL_GPIO_ReadPin>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d106      	bne.n	80019d4 <StartDefaultTask+0x3c>
			{
				set_event(1);
 80019c6:	2001      	movs	r0, #1
 80019c8:	f000 fd4c 	bl	8002464 <set_event>
				osDelay(300);
 80019cc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80019d0:	f005 f84a 	bl	8006a68 <osDelay>
			}
		}

		osDelay(1);
 80019d4:	2001      	movs	r0, #1
 80019d6:	f005 f847 	bl	8006a68 <osDelay>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 80019da:	e7e1      	b.n	80019a0 <StartDefaultTask+0x8>
 80019dc:	40020800 	.word	0x40020800

080019e0 <UARTTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UARTTask */
void UARTTask(void *argument)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UARTTask */
	/* Infinite loop */
	char* message = "d\r\n";
 80019e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001a20 <UARTTask+0x40>)
 80019ea:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
		if(get_event()) {
 80019ec:	f000 fd4a 	bl	8002484 <get_event>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d010      	beq.n	8001a18 <UARTTask+0x38>

			set_event(0);
 80019f6:	2000      	movs	r0, #0
 80019f8:	f000 fd34 	bl	8002464 <set_event>
			HAL_UART_Transmit_IT(&huart1, (uint8_t*)message, strlen(message));
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f7fe fc3f 	bl	8000280 <strlen>
 8001a02:	4603      	mov	r3, r0
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	461a      	mov	r2, r3
 8001a08:	68f9      	ldr	r1, [r7, #12]
 8001a0a:	4806      	ldr	r0, [pc, #24]	@ (8001a24 <UARTTask+0x44>)
 8001a0c:	f003 ff29 	bl	8005862 <HAL_UART_Transmit_IT>
			printf("%s", message);
 8001a10:	68f9      	ldr	r1, [r7, #12]
 8001a12:	4805      	ldr	r0, [pc, #20]	@ (8001a28 <UARTTask+0x48>)
 8001a14:	f008 fa10 	bl	8009e38 <iprintf>
		}

		osDelay(1);
 8001a18:	2001      	movs	r0, #1
 8001a1a:	f005 f825 	bl	8006a68 <osDelay>
		if(get_event()) {
 8001a1e:	e7e5      	b.n	80019ec <UARTTask+0xc>
 8001a20:	0800c1f8 	.word	0x0800c1f8
 8001a24:	200003c8 	.word	0x200003c8
 8001a28:	0800c1fc 	.word	0x0800c1fc

08001a2c <UltrasonicTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UltrasonicTask */
void UltrasonicTask(void *argument)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UltrasonicTask */
	/* Infinite loop */
	for(;;)
	{
		ultra_sonic_trigger();
 8001a34:	f000 fd3c 	bl	80024b0 <ultra_sonic_trigger>
		osDelay(100);
 8001a38:	2064      	movs	r0, #100	@ 0x64
 8001a3a:	f005 f815 	bl	8006a68 <osDelay>
		ultra_sonic_trigger();
 8001a3e:	bf00      	nop
 8001a40:	e7f8      	b.n	8001a34 <UltrasonicTask+0x8>
	...

08001a44 <LCDTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_LCDTask */
void LCDTask(void *argument)
{
 8001a44:	b590      	push	{r4, r7, lr}
 8001a46:	b08f      	sub	sp, #60	@ 0x3c
 8001a48:	af04      	add	r7, sp, #16
 8001a4a:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	char buf[32];  // 크기는 상황에 따라 적절히 조정
	for(;;)
	{
		// 0번 라인 초기화 후 출력
		move_cursor(0, 0);
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f7ff fbf5 	bl	800123e <move_cursor>
		snprintf(buf, sizeof(buf), "T:%d.%d H:%d.%d     ", temperature_int, temperature_dec, humidity_int, humidity_dec);
 8001a54:	4b1d      	ldr	r3, [pc, #116]	@ (8001acc <LCDTask+0x88>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	461c      	mov	r4, r3
 8001a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad0 <LCDTask+0x8c>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	461a      	mov	r2, r3
 8001a64:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad4 <LCDTask+0x90>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad8 <LCDTask+0x94>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	f107 0008 	add.w	r0, r7, #8
 8001a76:	9302      	str	r3, [sp, #8]
 8001a78:	9101      	str	r1, [sp, #4]
 8001a7a:	9200      	str	r2, [sp, #0]
 8001a7c:	4623      	mov	r3, r4
 8001a7e:	4a17      	ldr	r2, [pc, #92]	@ (8001adc <LCDTask+0x98>)
 8001a80:	2120      	movs	r1, #32
 8001a82:	f008 f9eb 	bl	8009e5c <sniprintf>
		lcd_string((uint8_t*)buf);
 8001a86:	f107 0308 	add.w	r3, r7, #8
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fbc2 	bl	8001214 <lcd_string>

		// 1번 라인 초기화 후 출력
		move_cursor(1, 0);
 8001a90:	2100      	movs	r1, #0
 8001a92:	2001      	movs	r0, #1
 8001a94:	f7ff fbd3 	bl	800123e <move_cursor>
		snprintf(buf, sizeof(buf), "D:%5.1fcm        ", distance);  // %5.1f로 길이 보장
 8001a98:	4b11      	ldr	r3, [pc, #68]	@ (8001ae0 <LCDTask+0x9c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe fd5b 	bl	8000558 <__aeabi_f2d>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	f107 0008 	add.w	r0, r7, #8
 8001aaa:	e9cd 2300 	strd	r2, r3, [sp]
 8001aae:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae4 <LCDTask+0xa0>)
 8001ab0:	2120      	movs	r1, #32
 8001ab2:	f008 f9d3 	bl	8009e5c <sniprintf>
		lcd_string((uint8_t*)buf);
 8001ab6:	f107 0308 	add.w	r3, r7, #8
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fbaa 	bl	8001214 <lcd_string>

		osDelay(500);
 8001ac0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ac4:	f004 ffd0 	bl	8006a68 <osDelay>
		move_cursor(0, 0);
 8001ac8:	bf00      	nop
 8001aca:	e7bf      	b.n	8001a4c <LCDTask+0x8>
 8001acc:	20000478 	.word	0x20000478
 8001ad0:	20000479 	.word	0x20000479
 8001ad4:	2000047a 	.word	0x2000047a
 8001ad8:	2000047b 	.word	0x2000047b
 8001adc:	0800c200 	.word	0x0800c200
 8001ae0:	20000474 	.word	0x20000474
 8001ae4:	0800c218 	.word	0x0800c218

08001ae8 <ServoTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ServoTask */
void ServoTask(void *argument)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ServoTask */
	/* Infinite loop */
	for(;;)
	{
		servo_motor_update();  // 모듈 함수 호출
 8001af0:	f000 f88a 	bl	8001c08 <servo_motor_update>
		osDelay(100);
 8001af4:	2064      	movs	r0, #100	@ 0x64
 8001af6:	f004 ffb7 	bl	8006a68 <osDelay>
		servo_motor_update();  // 모듈 함수 호출
 8001afa:	bf00      	nop
 8001afc:	e7f8      	b.n	8001af0 <ServoTask+0x8>
	...

08001b00 <DHT11Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_DHT11Task */
void DHT11Task(void *argument)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DHT11Task */
	/* Infinite loop */
	for(;;)
	{
		dht11_read();  // dht11_data[] 갱신
 8001b08:	f7ff faf2 	bl	80010f0 <dht11_read>
		temperature_int = dht11_data[2];
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b40 <DHT11Task+0x40>)
 8001b0e:	789b      	ldrb	r3, [r3, #2]
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	4b0c      	ldr	r3, [pc, #48]	@ (8001b44 <DHT11Task+0x44>)
 8001b14:	701a      	strb	r2, [r3, #0]
		temperature_dec = dht11_data[3];
 8001b16:	4b0a      	ldr	r3, [pc, #40]	@ (8001b40 <DHT11Task+0x40>)
 8001b18:	78db      	ldrb	r3, [r3, #3]
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b48 <DHT11Task+0x48>)
 8001b1e:	701a      	strb	r2, [r3, #0]
		humidity_int = dht11_data[0];
 8001b20:	4b07      	ldr	r3, [pc, #28]	@ (8001b40 <DHT11Task+0x40>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	4b09      	ldr	r3, [pc, #36]	@ (8001b4c <DHT11Task+0x4c>)
 8001b28:	701a      	strb	r2, [r3, #0]
		humidity_dec = dht11_data[1];
 8001b2a:	4b05      	ldr	r3, [pc, #20]	@ (8001b40 <DHT11Task+0x40>)
 8001b2c:	785b      	ldrb	r3, [r3, #1]
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	4b07      	ldr	r3, [pc, #28]	@ (8001b50 <DHT11Task+0x50>)
 8001b32:	701a      	strb	r2, [r3, #0]
		osDelay(500);
 8001b34:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001b38:	f004 ff96 	bl	8006a68 <osDelay>
		dht11_read();  // dht11_data[] 갱신
 8001b3c:	bf00      	nop
 8001b3e:	e7e3      	b.n	8001b08 <DHT11Task+0x8>
 8001b40:	200001f4 	.word	0x200001f4
 8001b44:	20000478 	.word	0x20000478
 8001b48:	20000479 	.word	0x20000479
 8001b4c:	2000047a 	.word	0x2000047a
 8001b50:	2000047b 	.word	0x2000047b

08001b54 <HAL_TIM_PeriodElapsedCallback>:
=======
 800194a:	f641 4331 	movw	r3, #7217	@ 0x1c31
 800194e:	617b      	str	r3, [r7, #20]
                          |IO_DS1302_Pin|CLK_DS1302_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001950:	2301      	movs	r3, #1
 8001952:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001958:	2300      	movs	r3, #0
 800195a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	4619      	mov	r1, r3
 8001962:	480c      	ldr	r0, [pc, #48]	@ (8001994 <MX_GPIO_Init+0x11c>)
 8001964:	f001 f836 	bl	80029d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 LATCH_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|LATCH_Pin;
 8001968:	f242 0307 	movw	r3, #8199	@ 0x2007
 800196c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196e:	2301      	movs	r3, #1
 8001970:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001976:	2300      	movs	r3, #0
 8001978:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	4619      	mov	r1, r3
 8001980:	4805      	ldr	r0, [pc, #20]	@ (8001998 <MX_GPIO_Init+0x120>)
 8001982:	f001 f827 	bl	80029d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001986:	bf00      	nop
 8001988:	3728      	adds	r7, #40	@ 0x28
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40023800 	.word	0x40023800
 8001994:	40020000 	.word	0x40020000
 8001998:	40020400 	.word	0x40020400
 800199c:	40020800 	.word	0x40020800

080019a0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
      if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 80019a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019ac:	480d      	ldr	r0, [pc, #52]	@ (80019e4 <StartDefaultTask+0x44>)
 80019ae:	f001 f995 	bl	8002cdc <HAL_GPIO_ReadPin>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d111      	bne.n	80019dc <StartDefaultTask+0x3c>
      {
    	  osDelay(100); // 디바운스
 80019b8:	2064      	movs	r0, #100	@ 0x64
 80019ba:	f005 f857 	bl	8006a6c <osDelay>
          if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 80019be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019c2:	4808      	ldr	r0, [pc, #32]	@ (80019e4 <StartDefaultTask+0x44>)
 80019c4:	f001 f98a 	bl	8002cdc <HAL_GPIO_ReadPin>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d106      	bne.n	80019dc <StartDefaultTask+0x3c>
          {
        	  set_event(1);
 80019ce:	2001      	movs	r0, #1
 80019d0:	f000 fd56 	bl	8002480 <set_event>
        	  osDelay(300);
 80019d4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80019d8:	f005 f848 	bl	8006a6c <osDelay>
          }
      }

      osDelay(1);
 80019dc:	2001      	movs	r0, #1
 80019de:	f005 f845 	bl	8006a6c <osDelay>
      if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 80019e2:	e7e1      	b.n	80019a8 <StartDefaultTask+0x8>
 80019e4:	40020800 	.word	0x40020800

080019e8 <UARTTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UARTTask */
void UARTTask(void *argument)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UARTTask */
  /* Infinite loop */

  char* message = "detect\r\n";
 80019f0:	4b0e      	ldr	r3, [pc, #56]	@ (8001a2c <UARTTask+0x44>)
 80019f2:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	if(get_event()) {
 80019f4:	f000 fd54 	bl	80024a0 <get_event>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d011      	beq.n	8001a22 <UARTTask+0x3a>

		set_event(0);
 80019fe:	2000      	movs	r0, #0
 8001a00:	f000 fd3e 	bl	8002480 <set_event>
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f7fe fc3b 	bl	8000280 <strlen>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a12:	68f9      	ldr	r1, [r7, #12]
 8001a14:	4806      	ldr	r0, [pc, #24]	@ (8001a30 <UARTTask+0x48>)
 8001a16:	f003 fee3 	bl	80057e0 <HAL_UART_Transmit>

		printf("%s", message);
 8001a1a:	68f9      	ldr	r1, [r7, #12]
 8001a1c:	4805      	ldr	r0, [pc, #20]	@ (8001a34 <UARTTask+0x4c>)
 8001a1e:	f008 fa13 	bl	8009e48 <iprintf>
	}

    osDelay(1);
 8001a22:	2001      	movs	r0, #1
 8001a24:	f005 f822 	bl	8006a6c <osDelay>
	if(get_event()) {
 8001a28:	e7e4      	b.n	80019f4 <UARTTask+0xc>
 8001a2a:	bf00      	nop
 8001a2c:	0800c2d0 	.word	0x0800c2d0
 8001a30:	200003c8 	.word	0x200003c8
 8001a34:	0800c2dc 	.word	0x0800c2dc

08001a38 <UltrasonicTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UltrasonicTask */
void UltrasonicTask(void *argument)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UltrasonicTask */
  /* Infinite loop */
  for(;;)
  {
		ultra_sonic_trigger();
 8001a40:	f000 fd44 	bl	80024cc <ultra_sonic_trigger>
		osDelay(100);
 8001a44:	2064      	movs	r0, #100	@ 0x64
 8001a46:	f005 f811 	bl	8006a6c <osDelay>
		ultra_sonic_trigger();
 8001a4a:	bf00      	nop
 8001a4c:	e7f8      	b.n	8001a40 <UltrasonicTask+0x8>
	...

08001a50 <LCDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LCDTask */
void LCDTask(void *argument)
{
 8001a50:	b590      	push	{r4, r7, lr}
 8001a52:	b08f      	sub	sp, #60	@ 0x3c
 8001a54:	af04      	add	r7, sp, #16
 8001a56:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  char buf[32];  // 크기는 상황에 따라 적절히 조정
  for(;;)
  {
		// 0번 라인 초기화 후 출력
		move_cursor(0, 0);
 8001a58:	2100      	movs	r1, #0
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f7ff fbef 	bl	800123e <move_cursor>
		snprintf(buf, sizeof(buf), "T:%d.%d H:%d.%d     ", temperature_int, temperature_dec, humidity_int, humidity_dec);
 8001a60:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad8 <LCDTask+0x88>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	461c      	mov	r4, r3
 8001a68:	4b1c      	ldr	r3, [pc, #112]	@ (8001adc <LCDTask+0x8c>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	461a      	mov	r2, r3
 8001a70:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae0 <LCDTask+0x90>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	4619      	mov	r1, r3
 8001a78:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae4 <LCDTask+0x94>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	f107 0008 	add.w	r0, r7, #8
 8001a82:	9302      	str	r3, [sp, #8]
 8001a84:	9101      	str	r1, [sp, #4]
 8001a86:	9200      	str	r2, [sp, #0]
 8001a88:	4623      	mov	r3, r4
 8001a8a:	4a17      	ldr	r2, [pc, #92]	@ (8001ae8 <LCDTask+0x98>)
 8001a8c:	2120      	movs	r1, #32
 8001a8e:	f008 fa4b 	bl	8009f28 <sniprintf>
		lcd_string((uint8_t*)buf);
 8001a92:	f107 0308 	add.w	r3, r7, #8
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff fbbc 	bl	8001214 <lcd_string>

		// 1번 라인 초기화 후 출력
		move_cursor(1, 0);
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	f7ff fbcd 	bl	800123e <move_cursor>
		snprintf(buf, sizeof(buf), "D:%5.1fcm        ", distance);  // %5.1f로 길이 보장
 8001aa4:	4b11      	ldr	r3, [pc, #68]	@ (8001aec <LCDTask+0x9c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fd55 	bl	8000558 <__aeabi_f2d>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	f107 0008 	add.w	r0, r7, #8
 8001ab6:	e9cd 2300 	strd	r2, r3, [sp]
 8001aba:	4a0d      	ldr	r2, [pc, #52]	@ (8001af0 <LCDTask+0xa0>)
 8001abc:	2120      	movs	r1, #32
 8001abe:	f008 fa33 	bl	8009f28 <sniprintf>
		lcd_string((uint8_t*)buf);
 8001ac2:	f107 0308 	add.w	r3, r7, #8
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fba4 	bl	8001214 <lcd_string>

		osDelay(500);
 8001acc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ad0:	f004 ffcc 	bl	8006a6c <osDelay>
		move_cursor(0, 0);
 8001ad4:	bf00      	nop
 8001ad6:	e7bf      	b.n	8001a58 <LCDTask+0x8>
 8001ad8:	20000480 	.word	0x20000480
 8001adc:	20000481 	.word	0x20000481
 8001ae0:	20000482 	.word	0x20000482
 8001ae4:	20000483 	.word	0x20000483
 8001ae8:	0800c2e0 	.word	0x0800c2e0
 8001aec:	2000047c 	.word	0x2000047c
 8001af0:	0800c2f8 	.word	0x0800c2f8

08001af4 <ServoTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ServoTask */
void ServoTask(void *argument)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ServoTask */
  /* Infinite loop */
  for(;;)
  {
		servo_motor_update();  // 모듈 함수 호출
 8001afc:	f000 f88a 	bl	8001c14 <servo_motor_update>
		osDelay(100);
 8001b00:	2064      	movs	r0, #100	@ 0x64
 8001b02:	f004 ffb3 	bl	8006a6c <osDelay>
		servo_motor_update();  // 모듈 함수 호출
 8001b06:	bf00      	nop
 8001b08:	e7f8      	b.n	8001afc <ServoTask+0x8>
	...

08001b0c <DHT11Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DHT11Task */
void DHT11Task(void *argument)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DHT11Task */
  /* Infinite loop */
  for(;;)
  {
		dht11_read();  // dht11_data[] 갱신
 8001b14:	f7ff faec 	bl	80010f0 <dht11_read>
		temperature_int = dht11_data[2];
 8001b18:	4b0c      	ldr	r3, [pc, #48]	@ (8001b4c <DHT11Task+0x40>)
 8001b1a:	789b      	ldrb	r3, [r3, #2]
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b50 <DHT11Task+0x44>)
 8001b20:	701a      	strb	r2, [r3, #0]
		temperature_dec = dht11_data[3];
 8001b22:	4b0a      	ldr	r3, [pc, #40]	@ (8001b4c <DHT11Task+0x40>)
 8001b24:	78db      	ldrb	r3, [r3, #3]
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	4b0a      	ldr	r3, [pc, #40]	@ (8001b54 <DHT11Task+0x48>)
 8001b2a:	701a      	strb	r2, [r3, #0]
		humidity_int = dht11_data[0];
 8001b2c:	4b07      	ldr	r3, [pc, #28]	@ (8001b4c <DHT11Task+0x40>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4b09      	ldr	r3, [pc, #36]	@ (8001b58 <DHT11Task+0x4c>)
 8001b34:	701a      	strb	r2, [r3, #0]
		humidity_dec = dht11_data[1];
 8001b36:	4b05      	ldr	r3, [pc, #20]	@ (8001b4c <DHT11Task+0x40>)
 8001b38:	785b      	ldrb	r3, [r3, #1]
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	4b07      	ldr	r3, [pc, #28]	@ (8001b5c <DHT11Task+0x50>)
 8001b3e:	701a      	strb	r2, [r3, #0]
		osDelay(500);
 8001b40:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001b44:	f004 ff92 	bl	8006a6c <osDelay>
		dht11_read();  // dht11_data[] 갱신
 8001b48:	bf00      	nop
 8001b4a:	e7e3      	b.n	8001b14 <DHT11Task+0x8>
 8001b4c:	200001f4 	.word	0x200001f4
 8001b50:	20000480 	.word	0x20000480
 8001b54:	20000481 	.word	0x20000481
 8001b58:	20000482 	.word	0x20000482
 8001b5c:	20000483 	.word	0x20000483

08001b60 <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a0b      	ldr	r2, [pc, #44]	@ (8001b90 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d101      	bne.n	8001b6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b66:	f000 fd93 	bl	8002690 <HAL_IncTick>
=======
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a0b      	ldr	r2, [pc, #44]	@ (8001b9c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d101      	bne.n	8001b76 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001b72:	f000 fd9b 	bl	80026ac <HAL_IncTick>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }
  /* USER CODE BEGIN Callback 1 */
	// Timer 11번
	if (htim->Instance == TIM11)
<<<<<<< HEAD
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a09      	ldr	r2, [pc, #36]	@ (8001b94 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d109      	bne.n	8001b88 <HAL_TIM_PeriodElapsedCallback+0x34>
	{
		TIM11_1ms_counter++;
 8001b74:	4b08      	ldr	r3, [pc, #32]	@ (8001b98 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	4a07      	ldr	r2, [pc, #28]	@ (8001b98 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001b7c:	6013      	str	r3, [r2, #0]
		TIM11_sec_counter++;
 8001b7e:	4b07      	ldr	r3, [pc, #28]	@ (8001b9c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	3301      	adds	r3, #1
 8001b84:	4a05      	ldr	r2, [pc, #20]	@ (8001b9c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001b86:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END Callback 1 */
}
 8001b88:	bf00      	nop
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40014400 	.word	0x40014400
 8001b94:	40014800 	.word	0x40014800
 8001b98:	2000046c 	.word	0x2000046c
 8001b9c:	20000470 	.word	0x20000470

08001ba0 <Error_Handler>:
=======
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a09      	ldr	r2, [pc, #36]	@ (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d109      	bne.n	8001b94 <HAL_TIM_PeriodElapsedCallback+0x34>
	{
		TIM11_1ms_counter++;
 8001b80:	4b08      	ldr	r3, [pc, #32]	@ (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	3301      	adds	r3, #1
 8001b86:	4a07      	ldr	r2, [pc, #28]	@ (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001b88:	6013      	str	r3, [r2, #0]
		TIM11_sec_counter++;
 8001b8a:	4b07      	ldr	r3, [pc, #28]	@ (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	4a05      	ldr	r2, [pc, #20]	@ (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001b92:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END Callback 1 */
}
 8001b94:	bf00      	nop
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40014400 	.word	0x40014400
 8001ba0:	40014800 	.word	0x40014800
 8001ba4:	20000474 	.word	0x20000474
 8001ba8:	20000478 	.word	0x20000478

08001bac <Error_Handler>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
=======
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 8001ba4:	b672      	cpsid	i
}
 8001ba6:	bf00      	nop
=======
 8001bb0:	b672      	cpsid	i
}
 8001bb2:	bf00      	nop
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
<<<<<<< HEAD
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <Error_Handler+0x8>

08001bac <servo_motor_init>:
=======
 8001bb4:	bf00      	nop
 8001bb6:	e7fd      	b.n	8001bb4 <Error_Handler+0x8>

08001bb8 <servo_motor_init>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

static int state = 0;
static uint32_t detect_timer = 0, lost_timer = 0;

void servo_motor_init(void)
{
<<<<<<< HEAD
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8001bb0:	2104      	movs	r1, #4
 8001bb2:	4802      	ldr	r0, [pc, #8]	@ (8001bbc <servo_motor_init+0x10>)
 8001bb4:	f002 fb56 	bl	8004264 <HAL_TIM_PWM_Start>
}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000338 	.word	0x20000338

08001bc0 <servo_motor_set_angle>:

void servo_motor_set_angle(uint8_t angle)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	71fb      	strb	r3, [r7, #7]
=======
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8001bbc:	2104      	movs	r1, #4
 8001bbe:	4802      	ldr	r0, [pc, #8]	@ (8001bc8 <servo_motor_init+0x10>)
 8001bc0:	f002 fbb0 	bl	8004324 <HAL_TIM_PWM_Start>
}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20000338 	.word	0x20000338

08001bcc <servo_motor_set_angle>:

void servo_motor_set_angle(uint8_t angle)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	71fb      	strb	r3, [r7, #7]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
//    uint32_t pulse = ((angle * 10) / 180) + 5;
//    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, pulse);
//
    int compare_value;
    if(angle <= 0) compare_value = 40;
<<<<<<< HEAD
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d102      	bne.n	8001bd6 <servo_motor_set_angle+0x16>
 8001bd0:	2328      	movs	r3, #40	@ 0x28
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	e00b      	b.n	8001bee <servo_motor_set_angle+0x2e>
    else if(angle >= 180) compare_value = 130;
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	2bb3      	cmp	r3, #179	@ 0xb3
 8001bda:	d902      	bls.n	8001be2 <servo_motor_set_angle+0x22>
 8001bdc:	2382      	movs	r3, #130	@ 0x82
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	e005      	b.n	8001bee <servo_motor_set_angle+0x2e>
    //else compare_value = 40 + (angle * (130 - 40)) / 180;
    else compare_value = 40 + (angle * 90) / 180; // (130 - 40) = 90
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	0fda      	lsrs	r2, r3, #31
 8001be6:	4413      	add	r3, r2
 8001be8:	105b      	asrs	r3, r3, #1
 8001bea:	3328      	adds	r3, #40	@ 0x28
 8001bec:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, compare_value);
 8001bee:	4b05      	ldr	r3, [pc, #20]	@ (8001c04 <servo_motor_set_angle+0x44>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001bf6:	bf00      	nop
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	20000338 	.word	0x20000338

08001c08 <servo_motor_update>:
=======
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d102      	bne.n	8001be2 <servo_motor_set_angle+0x16>
 8001bdc:	2328      	movs	r3, #40	@ 0x28
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	e00b      	b.n	8001bfa <servo_motor_set_angle+0x2e>
    else if(angle >= 180) compare_value = 130;
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	2bb3      	cmp	r3, #179	@ 0xb3
 8001be6:	d902      	bls.n	8001bee <servo_motor_set_angle+0x22>
 8001be8:	2382      	movs	r3, #130	@ 0x82
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	e005      	b.n	8001bfa <servo_motor_set_angle+0x2e>
    else compare_value = 40 + (angle * (130 - 40)) / 180;
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	0fda      	lsrs	r2, r3, #31
 8001bf2:	4413      	add	r3, r2
 8001bf4:	105b      	asrs	r3, r3, #1
 8001bf6:	3328      	adds	r3, #40	@ 0x28
 8001bf8:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, compare_value);
 8001bfa:	4b05      	ldr	r3, [pc, #20]	@ (8001c10 <servo_motor_set_angle+0x44>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001c02:	bf00      	nop
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	20000338 	.word	0x20000338

08001c14 <servo_motor_update>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

// 모터 제어 함수
void servo_motor_update(void)
{
<<<<<<< HEAD
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
    if(distance > 0 && distance <= 7.0f)
 8001c0c:	4b23      	ldr	r3, [pc, #140]	@ (8001c9c <servo_motor_update+0x94>)
 8001c0e:	edd3 7a00 	vldr	s15, [r3]
 8001c12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1a:	dd21      	ble.n	8001c60 <servo_motor_update+0x58>
 8001c1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001c9c <servo_motor_update+0x94>)
 8001c1e:	edd3 7a00 	vldr	s15, [r3]
 8001c22:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 8001c26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2e:	d817      	bhi.n	8001c60 <servo_motor_update+0x58>
    {
        detect_timer += 100;
 8001c30:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca0 <servo_motor_update+0x98>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	3364      	adds	r3, #100	@ 0x64
 8001c36:	4a1a      	ldr	r2, [pc, #104]	@ (8001ca0 <servo_motor_update+0x98>)
 8001c38:	6013      	str	r3, [r2, #0]
        lost_timer = 0;
 8001c3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca4 <servo_motor_update+0x9c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
        if(detect_timer >= 2000 && state == 0)
 8001c40:	4b17      	ldr	r3, [pc, #92]	@ (8001ca0 <servo_motor_update+0x98>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001c48:	d325      	bcc.n	8001c96 <servo_motor_update+0x8e>
 8001c4a:	4b17      	ldr	r3, [pc, #92]	@ (8001ca8 <servo_motor_update+0xa0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d121      	bne.n	8001c96 <servo_motor_update+0x8e>
        {
            servo_motor_set_angle(150);
 8001c52:	2096      	movs	r0, #150	@ 0x96
 8001c54:	f7ff ffb4 	bl	8001bc0 <servo_motor_set_angle>
            state = 1;
 8001c58:	4b13      	ldr	r3, [pc, #76]	@ (8001ca8 <servo_motor_update+0xa0>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]
        if(detect_timer >= 2000 && state == 0)
 8001c5e:	e01a      	b.n	8001c96 <servo_motor_update+0x8e>
=======
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
    if(distance > 0 && distance <= 7.0f)
 8001c18:	4b23      	ldr	r3, [pc, #140]	@ (8001ca8 <servo_motor_update+0x94>)
 8001c1a:	edd3 7a00 	vldr	s15, [r3]
 8001c1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c26:	dd21      	ble.n	8001c6c <servo_motor_update+0x58>
 8001c28:	4b1f      	ldr	r3, [pc, #124]	@ (8001ca8 <servo_motor_update+0x94>)
 8001c2a:	edd3 7a00 	vldr	s15, [r3]
 8001c2e:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 8001c32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3a:	d817      	bhi.n	8001c6c <servo_motor_update+0x58>
    {
        detect_timer += 100;
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cac <servo_motor_update+0x98>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	3364      	adds	r3, #100	@ 0x64
 8001c42:	4a1a      	ldr	r2, [pc, #104]	@ (8001cac <servo_motor_update+0x98>)
 8001c44:	6013      	str	r3, [r2, #0]
        lost_timer = 0;
 8001c46:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb0 <servo_motor_update+0x9c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
        if(detect_timer >= 2000 && state == 0)
 8001c4c:	4b17      	ldr	r3, [pc, #92]	@ (8001cac <servo_motor_update+0x98>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001c54:	d325      	bcc.n	8001ca2 <servo_motor_update+0x8e>
 8001c56:	4b17      	ldr	r3, [pc, #92]	@ (8001cb4 <servo_motor_update+0xa0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d121      	bne.n	8001ca2 <servo_motor_update+0x8e>
        {
            servo_motor_set_angle(110);
 8001c5e:	206e      	movs	r0, #110	@ 0x6e
 8001c60:	f7ff ffb4 	bl	8001bcc <servo_motor_set_angle>
            state = 1;
 8001c64:	4b13      	ldr	r3, [pc, #76]	@ (8001cb4 <servo_motor_update+0xa0>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	601a      	str	r2, [r3, #0]
        if(detect_timer >= 2000 && state == 0)
 8001c6a:	e01a      	b.n	8001ca2 <servo_motor_update+0x8e>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
        }
    }
    else
    {
        lost_timer += 100;
<<<<<<< HEAD
 8001c60:	4b10      	ldr	r3, [pc, #64]	@ (8001ca4 <servo_motor_update+0x9c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	3364      	adds	r3, #100	@ 0x64
 8001c66:	4a0f      	ldr	r2, [pc, #60]	@ (8001ca4 <servo_motor_update+0x9c>)
 8001c68:	6013      	str	r3, [r2, #0]
        detect_timer = 0;
 8001c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca0 <servo_motor_update+0x98>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
        if(lost_timer >= 2000 && state == 1)
 8001c70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca4 <servo_motor_update+0x9c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001c78:	d30e      	bcc.n	8001c98 <servo_motor_update+0x90>
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca8 <servo_motor_update+0xa0>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d10a      	bne.n	8001c98 <servo_motor_update+0x90>
        {
        	// evnet
        	set_event(1);
 8001c82:	2001      	movs	r0, #1
 8001c84:	f000 fbee 	bl	8002464 <set_event>
            servo_motor_set_angle(60);
 8001c88:	203c      	movs	r0, #60	@ 0x3c
 8001c8a:	f7ff ff99 	bl	8001bc0 <servo_motor_set_angle>
            state = 0;
 8001c8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ca8 <servo_motor_update+0xa0>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
        }
    }
}
 8001c94:	e000      	b.n	8001c98 <servo_motor_update+0x90>
        if(detect_timer >= 2000 && state == 0)
 8001c96:	bf00      	nop
}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000474 	.word	0x20000474
 8001ca0:	20000480 	.word	0x20000480
 8001ca4:	20000484 	.word	0x20000484
 8001ca8:	2000047c 	.word	0x2000047c

08001cac <HAL_MspInit>:
=======
 8001c6c:	4b10      	ldr	r3, [pc, #64]	@ (8001cb0 <servo_motor_update+0x9c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	3364      	adds	r3, #100	@ 0x64
 8001c72:	4a0f      	ldr	r2, [pc, #60]	@ (8001cb0 <servo_motor_update+0x9c>)
 8001c74:	6013      	str	r3, [r2, #0]
        detect_timer = 0;
 8001c76:	4b0d      	ldr	r3, [pc, #52]	@ (8001cac <servo_motor_update+0x98>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
        if(lost_timer >= 2000 && state == 1)
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb0 <servo_motor_update+0x9c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001c84:	d30e      	bcc.n	8001ca4 <servo_motor_update+0x90>
 8001c86:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb4 <servo_motor_update+0xa0>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d10a      	bne.n	8001ca4 <servo_motor_update+0x90>
        {
        	// evnet
        	set_event(1);
 8001c8e:	2001      	movs	r0, #1
 8001c90:	f000 fbf6 	bl	8002480 <set_event>
            servo_motor_set_angle(30);
 8001c94:	201e      	movs	r0, #30
 8001c96:	f7ff ff99 	bl	8001bcc <servo_motor_set_angle>
            state = 0;
 8001c9a:	4b06      	ldr	r3, [pc, #24]	@ (8001cb4 <servo_motor_update+0xa0>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
        }
    }
}
 8001ca0:	e000      	b.n	8001ca4 <servo_motor_update+0x90>
        if(detect_timer >= 2000 && state == 0)
 8001ca2:	bf00      	nop
}
 8001ca4:	bf00      	nop
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	2000047c 	.word	0x2000047c
 8001cac:	20000488 	.word	0x20000488
 8001cb0:	2000048c 	.word	0x2000048c
 8001cb4:	20000484 	.word	0x20000484

08001cb8 <HAL_MspInit>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
=======
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0

>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	607b      	str	r3, [r7, #4]
 8001cb6:	4b12      	ldr	r3, [pc, #72]	@ (8001d00 <HAL_MspInit+0x54>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cba:	4a11      	ldr	r2, [pc, #68]	@ (8001d00 <HAL_MspInit+0x54>)
 8001cbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001d00 <HAL_MspInit+0x54>)
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	603b      	str	r3, [r7, #0]
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d00 <HAL_MspInit+0x54>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d00 <HAL_MspInit+0x54>)
 8001cd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cde:	4b08      	ldr	r3, [pc, #32]	@ (8001d00 <HAL_MspInit+0x54>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ce6:	603b      	str	r3, [r7, #0]
 8001ce8:	683b      	ldr	r3, [r7, #0]
=======
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	607b      	str	r3, [r7, #4]
 8001cc2:	4b12      	ldr	r3, [pc, #72]	@ (8001d0c <HAL_MspInit+0x54>)
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc6:	4a11      	ldr	r2, [pc, #68]	@ (8001d0c <HAL_MspInit+0x54>)
 8001cc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ccc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cce:	4b0f      	ldr	r3, [pc, #60]	@ (8001d0c <HAL_MspInit+0x54>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cd6:	607b      	str	r3, [r7, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	603b      	str	r3, [r7, #0]
 8001cde:	4b0b      	ldr	r3, [pc, #44]	@ (8001d0c <HAL_MspInit+0x54>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8001d0c <HAL_MspInit+0x54>)
 8001ce4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ce8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cea:	4b08      	ldr	r3, [pc, #32]	@ (8001d0c <HAL_MspInit+0x54>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cf2:	603b      	str	r3, [r7, #0]
 8001cf4:	683b      	ldr	r3, [r7, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
<<<<<<< HEAD
 8001cea:	2200      	movs	r2, #0
 8001cec:	210f      	movs	r1, #15
 8001cee:	f06f 0001 	mvn.w	r0, #1
 8001cf2:	f000 fda5 	bl	8002840 <HAL_NVIC_SetPriority>
=======
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	210f      	movs	r1, #15
 8001cfa:	f06f 0001 	mvn.w	r0, #1
 8001cfe:	f000 fdad 	bl	800285c <HAL_NVIC_SetPriority>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40023800 	.word	0x40023800

08001d04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08a      	sub	sp, #40	@ 0x28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a19      	ldr	r2, [pc, #100]	@ (8001d88 <HAL_I2C_MspInit+0x84>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d12c      	bne.n	8001d80 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	4b18      	ldr	r3, [pc, #96]	@ (8001d8c <HAL_I2C_MspInit+0x88>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2e:	4a17      	ldr	r2, [pc, #92]	@ (8001d8c <HAL_I2C_MspInit+0x88>)
 8001d30:	f043 0302 	orr.w	r3, r3, #2
 8001d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d36:	4b15      	ldr	r3, [pc, #84]	@ (8001d8c <HAL_I2C_MspInit+0x88>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	693b      	ldr	r3, [r7, #16]
=======
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40023800 	.word	0x40023800

08001d10 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08a      	sub	sp, #40	@ 0x28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a19      	ldr	r2, [pc, #100]	@ (8001d94 <HAL_I2C_MspInit+0x84>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d12c      	bne.n	8001d8c <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	4b18      	ldr	r3, [pc, #96]	@ (8001d98 <HAL_I2C_MspInit+0x88>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	4a17      	ldr	r2, [pc, #92]	@ (8001d98 <HAL_I2C_MspInit+0x88>)
 8001d3c:	f043 0302 	orr.w	r3, r3, #2
 8001d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d42:	4b15      	ldr	r3, [pc, #84]	@ (8001d98 <HAL_I2C_MspInit+0x88>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	693b      	ldr	r3, [r7, #16]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
<<<<<<< HEAD
 8001d42:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d48:	2312      	movs	r3, #18
 8001d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d50:	2303      	movs	r3, #3
 8001d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d54:	2304      	movs	r3, #4
 8001d56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	480c      	ldr	r0, [pc, #48]	@ (8001d90 <HAL_I2C_MspInit+0x8c>)
 8001d60:	f000 fe2a 	bl	80029b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d64:	2300      	movs	r3, #0
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	4b08      	ldr	r3, [pc, #32]	@ (8001d8c <HAL_I2C_MspInit+0x88>)
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6c:	4a07      	ldr	r2, [pc, #28]	@ (8001d8c <HAL_I2C_MspInit+0x88>)
 8001d6e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d72:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d74:	4b05      	ldr	r3, [pc, #20]	@ (8001d8c <HAL_I2C_MspInit+0x88>)
 8001d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d80:	bf00      	nop
 8001d82:	3728      	adds	r7, #40	@ 0x28
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40005400 	.word	0x40005400
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40020400 	.word	0x40020400

08001d94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08a      	sub	sp, #40	@ 0x28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a19      	ldr	r2, [pc, #100]	@ (8001e18 <HAL_SPI_MspInit+0x84>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d12c      	bne.n	8001e10 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	4b18      	ldr	r3, [pc, #96]	@ (8001e1c <HAL_SPI_MspInit+0x88>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbe:	4a17      	ldr	r2, [pc, #92]	@ (8001e1c <HAL_SPI_MspInit+0x88>)
 8001dc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dc6:	4b15      	ldr	r3, [pc, #84]	@ (8001e1c <HAL_SPI_MspInit+0x88>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	4b11      	ldr	r3, [pc, #68]	@ (8001e1c <HAL_SPI_MspInit+0x88>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	4a10      	ldr	r2, [pc, #64]	@ (8001e1c <HAL_SPI_MspInit+0x88>)
 8001ddc:	f043 0302 	orr.w	r3, r3, #2
 8001de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de2:	4b0e      	ldr	r3, [pc, #56]	@ (8001e1c <HAL_SPI_MspInit+0x88>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
=======
 8001d4e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d54:	2312      	movs	r3, #18
 8001d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d60:	2304      	movs	r3, #4
 8001d62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d64:	f107 0314 	add.w	r3, r7, #20
 8001d68:	4619      	mov	r1, r3
 8001d6a:	480c      	ldr	r0, [pc, #48]	@ (8001d9c <HAL_I2C_MspInit+0x8c>)
 8001d6c:	f000 fe32 	bl	80029d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	4b08      	ldr	r3, [pc, #32]	@ (8001d98 <HAL_I2C_MspInit+0x88>)
 8001d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d78:	4a07      	ldr	r2, [pc, #28]	@ (8001d98 <HAL_I2C_MspInit+0x88>)
 8001d7a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d80:	4b05      	ldr	r3, [pc, #20]	@ (8001d98 <HAL_I2C_MspInit+0x88>)
 8001d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001d8c:	bf00      	nop
 8001d8e:	3728      	adds	r7, #40	@ 0x28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40005400 	.word	0x40005400
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40020400 	.word	0x40020400

08001da0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08a      	sub	sp, #40	@ 0x28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da8:	f107 0314 	add.w	r3, r7, #20
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a19      	ldr	r2, [pc, #100]	@ (8001e24 <HAL_SPI_MspInit+0x84>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d12c      	bne.n	8001e1c <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	4b18      	ldr	r3, [pc, #96]	@ (8001e28 <HAL_SPI_MspInit+0x88>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dca:	4a17      	ldr	r2, [pc, #92]	@ (8001e28 <HAL_SPI_MspInit+0x88>)
 8001dcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dd2:	4b15      	ldr	r3, [pc, #84]	@ (8001e28 <HAL_SPI_MspInit+0x88>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dda:	613b      	str	r3, [r7, #16]
 8001ddc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	4b11      	ldr	r3, [pc, #68]	@ (8001e28 <HAL_SPI_MspInit+0x88>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de6:	4a10      	ldr	r2, [pc, #64]	@ (8001e28 <HAL_SPI_MspInit+0x88>)
 8001de8:	f043 0302 	orr.w	r3, r3, #2
 8001dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dee:	4b0e      	ldr	r3, [pc, #56]	@ (8001e28 <HAL_SPI_MspInit+0x88>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
<<<<<<< HEAD
 8001dee:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8001df2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df4:	2302      	movs	r3, #2
 8001df6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e00:	2305      	movs	r3, #5
 8001e02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e04:	f107 0314 	add.w	r3, r7, #20
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4805      	ldr	r0, [pc, #20]	@ (8001e20 <HAL_SPI_MspInit+0x8c>)
 8001e0c:	f000 fdd4 	bl	80029b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e10:	bf00      	nop
 8001e12:	3728      	adds	r7, #40	@ 0x28
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40003800 	.word	0x40003800
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40020400 	.word	0x40020400

08001e24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08c      	sub	sp, #48	@ 0x30
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 031c 	add.w	r3, r7, #28
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e44:	d10e      	bne.n	8001e64 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	61bb      	str	r3, [r7, #24]
 8001e4a:	4b33      	ldr	r3, [pc, #204]	@ (8001f18 <HAL_TIM_Base_MspInit+0xf4>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4e:	4a32      	ldr	r2, [pc, #200]	@ (8001f18 <HAL_TIM_Base_MspInit+0xf4>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e56:	4b30      	ldr	r3, [pc, #192]	@ (8001f18 <HAL_TIM_Base_MspInit+0xf4>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	61bb      	str	r3, [r7, #24]
 8001e60:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001e62:	e054      	b.n	8001f0e <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM3)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a2c      	ldr	r2, [pc, #176]	@ (8001f1c <HAL_TIM_Base_MspInit+0xf8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d134      	bne.n	8001ed8 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	4b29      	ldr	r3, [pc, #164]	@ (8001f18 <HAL_TIM_Base_MspInit+0xf4>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e76:	4a28      	ldr	r2, [pc, #160]	@ (8001f18 <HAL_TIM_Base_MspInit+0xf4>)
 8001e78:	f043 0302 	orr.w	r3, r3, #2
 8001e7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e7e:	4b26      	ldr	r3, [pc, #152]	@ (8001f18 <HAL_TIM_Base_MspInit+0xf4>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	4b22      	ldr	r3, [pc, #136]	@ (8001f18 <HAL_TIM_Base_MspInit+0xf4>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	4a21      	ldr	r2, [pc, #132]	@ (8001f18 <HAL_TIM_Base_MspInit+0xf4>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001f18 <HAL_TIM_Base_MspInit+0xf4>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	613b      	str	r3, [r7, #16]
 8001ea4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ECHO_Pin;
 8001ea6:	2380      	movs	r3, #128	@ 0x80
 8001ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8001eba:	f107 031c 	add.w	r3, r7, #28
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4817      	ldr	r0, [pc, #92]	@ (8001f20 <HAL_TIM_Base_MspInit+0xfc>)
 8001ec2:	f000 fd79 	bl	80029b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2105      	movs	r1, #5
 8001eca:	201d      	movs	r0, #29
 8001ecc:	f000 fcb8 	bl	8002840 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ed0:	201d      	movs	r0, #29
 8001ed2:	f000 fcd1 	bl	8002878 <HAL_NVIC_EnableIRQ>
}
 8001ed6:	e01a      	b.n	8001f0e <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM11)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a11      	ldr	r2, [pc, #68]	@ (8001f24 <HAL_TIM_Base_MspInit+0x100>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d115      	bne.n	8001f0e <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8001f18 <HAL_TIM_Base_MspInit+0xf4>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eea:	4a0b      	ldr	r2, [pc, #44]	@ (8001f18 <HAL_TIM_Base_MspInit+0xf4>)
 8001eec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ef0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ef2:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <HAL_TIM_Base_MspInit+0xf4>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001efe:	2200      	movs	r2, #0
 8001f00:	2105      	movs	r1, #5
 8001f02:	201a      	movs	r0, #26
 8001f04:	f000 fc9c 	bl	8002840 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001f08:	201a      	movs	r0, #26
 8001f0a:	f000 fcb5 	bl	8002878 <HAL_NVIC_EnableIRQ>
}
 8001f0e:	bf00      	nop
 8001f10:	3730      	adds	r7, #48	@ 0x30
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40000400 	.word	0x40000400
 8001f20:	40020000 	.word	0x40020000
 8001f24:	40014800 	.word	0x40014800

08001f28 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a0b      	ldr	r2, [pc, #44]	@ (8001f64 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d10d      	bne.n	8001f56 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f68 <HAL_TIM_PWM_MspInit+0x40>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f42:	4a09      	ldr	r2, [pc, #36]	@ (8001f68 <HAL_TIM_PWM_MspInit+0x40>)
 8001f44:	f043 0308 	orr.w	r3, r3, #8
 8001f48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f4a:	4b07      	ldr	r3, [pc, #28]	@ (8001f68 <HAL_TIM_PWM_MspInit+0x40>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001f56:	bf00      	nop
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	40000c00 	.word	0x40000c00
 8001f68:	40023800 	.word	0x40023800

08001f6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b088      	sub	sp, #32
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	f107 030c 	add.w	r3, r7, #12
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a12      	ldr	r2, [pc, #72]	@ (8001fd4 <HAL_TIM_MspPostInit+0x68>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d11d      	bne.n	8001fca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	4b11      	ldr	r3, [pc, #68]	@ (8001fd8 <HAL_TIM_MspPostInit+0x6c>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f96:	4a10      	ldr	r2, [pc, #64]	@ (8001fd8 <HAL_TIM_MspPostInit+0x6c>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd8 <HAL_TIM_MspPostInit+0x6c>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
=======
 8001dfa:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8001dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e00:	2302      	movs	r3, #2
 8001e02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e0c:	2305      	movs	r3, #5
 8001e0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e10:	f107 0314 	add.w	r3, r7, #20
 8001e14:	4619      	mov	r1, r3
 8001e16:	4805      	ldr	r0, [pc, #20]	@ (8001e2c <HAL_SPI_MspInit+0x8c>)
 8001e18:	f000 fddc 	bl	80029d4 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001e1c:	bf00      	nop
 8001e1e:	3728      	adds	r7, #40	@ 0x28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40003800 	.word	0x40003800
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40020400 	.word	0x40020400

08001e30 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08c      	sub	sp, #48	@ 0x30
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e38:	f107 031c 	add.w	r3, r7, #28
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e50:	d10e      	bne.n	8001e70 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	61bb      	str	r3, [r7, #24]
 8001e56:	4b33      	ldr	r3, [pc, #204]	@ (8001f24 <HAL_TIM_Base_MspInit+0xf4>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5a:	4a32      	ldr	r2, [pc, #200]	@ (8001f24 <HAL_TIM_Base_MspInit+0xf4>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e62:	4b30      	ldr	r3, [pc, #192]	@ (8001f24 <HAL_TIM_Base_MspInit+0xf4>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	61bb      	str	r3, [r7, #24]
 8001e6c:	69bb      	ldr	r3, [r7, #24]
    /* USER CODE BEGIN TIM11_MspInit 1 */

    /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001e6e:	e054      	b.n	8001f1a <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM3)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a2c      	ldr	r2, [pc, #176]	@ (8001f28 <HAL_TIM_Base_MspInit+0xf8>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d134      	bne.n	8001ee4 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	4b29      	ldr	r3, [pc, #164]	@ (8001f24 <HAL_TIM_Base_MspInit+0xf4>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e82:	4a28      	ldr	r2, [pc, #160]	@ (8001f24 <HAL_TIM_Base_MspInit+0xf4>)
 8001e84:	f043 0302 	orr.w	r3, r3, #2
 8001e88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e8a:	4b26      	ldr	r3, [pc, #152]	@ (8001f24 <HAL_TIM_Base_MspInit+0xf4>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	4b22      	ldr	r3, [pc, #136]	@ (8001f24 <HAL_TIM_Base_MspInit+0xf4>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9e:	4a21      	ldr	r2, [pc, #132]	@ (8001f24 <HAL_TIM_Base_MspInit+0xf4>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea6:	4b1f      	ldr	r3, [pc, #124]	@ (8001f24 <HAL_TIM_Base_MspInit+0xf4>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ECHO_Pin;
 8001eb2:	2380      	movs	r3, #128	@ 0x80
 8001eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8001ec6:	f107 031c 	add.w	r3, r7, #28
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4817      	ldr	r0, [pc, #92]	@ (8001f2c <HAL_TIM_Base_MspInit+0xfc>)
 8001ece:	f000 fd81 	bl	80029d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2105      	movs	r1, #5
 8001ed6:	201d      	movs	r0, #29
 8001ed8:	f000 fcc0 	bl	800285c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001edc:	201d      	movs	r0, #29
 8001ede:	f000 fcd9 	bl	8002894 <HAL_NVIC_EnableIRQ>
}
 8001ee2:	e01a      	b.n	8001f1a <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM11)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a11      	ldr	r2, [pc, #68]	@ (8001f30 <HAL_TIM_Base_MspInit+0x100>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d115      	bne.n	8001f1a <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8001f24 <HAL_TIM_Base_MspInit+0xf4>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef6:	4a0b      	ldr	r2, [pc, #44]	@ (8001f24 <HAL_TIM_Base_MspInit+0xf4>)
 8001ef8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001efc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001efe:	4b09      	ldr	r3, [pc, #36]	@ (8001f24 <HAL_TIM_Base_MspInit+0xf4>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2105      	movs	r1, #5
 8001f0e:	201a      	movs	r0, #26
 8001f10:	f000 fca4 	bl	800285c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001f14:	201a      	movs	r0, #26
 8001f16:	f000 fcbd 	bl	8002894 <HAL_NVIC_EnableIRQ>
}
 8001f1a:	bf00      	nop
 8001f1c:	3730      	adds	r7, #48	@ 0x30
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40023800 	.word	0x40023800
 8001f28:	40000400 	.word	0x40000400
 8001f2c:	40020000 	.word	0x40020000
 8001f30:	40014800 	.word	0x40014800

08001f34 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a0b      	ldr	r2, [pc, #44]	@ (8001f70 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d10d      	bne.n	8001f62 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f74 <HAL_TIM_PWM_MspInit+0x40>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4e:	4a09      	ldr	r2, [pc, #36]	@ (8001f74 <HAL_TIM_PWM_MspInit+0x40>)
 8001f50:	f043 0308 	orr.w	r3, r3, #8
 8001f54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f56:	4b07      	ldr	r3, [pc, #28]	@ (8001f74 <HAL_TIM_PWM_MspInit+0x40>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5a:	f003 0308 	and.w	r3, r3, #8
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM5_MspInit 1 */

  }

}
 8001f62:	bf00      	nop
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	40000c00 	.word	0x40000c00
 8001f74:	40023800 	.word	0x40023800

08001f78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f80:	f107 030c 	add.w	r3, r7, #12
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a12      	ldr	r2, [pc, #72]	@ (8001fe0 <HAL_TIM_MspPostInit+0x68>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d11d      	bne.n	8001fd6 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM5_MspPostInit 0 */

    /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60bb      	str	r3, [r7, #8]
 8001f9e:	4b11      	ldr	r3, [pc, #68]	@ (8001fe4 <HAL_TIM_MspPostInit+0x6c>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa2:	4a10      	ldr	r2, [pc, #64]	@ (8001fe4 <HAL_TIM_MspPostInit+0x6c>)
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001faa:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe4 <HAL_TIM_MspPostInit+0x6c>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	60bb      	str	r3, [r7, #8]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    /**TIM5 GPIO Configuration
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = SERVO_Pin;
<<<<<<< HEAD
 8001faa:	2302      	movs	r3, #2
 8001fac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 8001fbe:	f107 030c 	add.w	r3, r7, #12
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4805      	ldr	r0, [pc, #20]	@ (8001fdc <HAL_TIM_MspPostInit+0x70>)
 8001fc6:	f000 fcf7 	bl	80029b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001fca:	bf00      	nop
 8001fcc:	3720      	adds	r7, #32
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40000c00 	.word	0x40000c00
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40020000 	.word	0x40020000

08001fe0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08c      	sub	sp, #48	@ 0x30
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe8:	f107 031c 	add.w	r3, r7, #28
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a49      	ldr	r2, [pc, #292]	@ (8002124 <HAL_UART_MspInit+0x144>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d152      	bne.n	80020a8 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	61bb      	str	r3, [r7, #24]
 8002006:	4b48      	ldr	r3, [pc, #288]	@ (8002128 <HAL_UART_MspInit+0x148>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200a:	4a47      	ldr	r2, [pc, #284]	@ (8002128 <HAL_UART_MspInit+0x148>)
 800200c:	f043 0310 	orr.w	r3, r3, #16
 8002010:	6453      	str	r3, [r2, #68]	@ 0x44
 8002012:	4b45      	ldr	r3, [pc, #276]	@ (8002128 <HAL_UART_MspInit+0x148>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002016:	f003 0310 	and.w	r3, r3, #16
 800201a:	61bb      	str	r3, [r7, #24]
 800201c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]
 8002022:	4b41      	ldr	r3, [pc, #260]	@ (8002128 <HAL_UART_MspInit+0x148>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002026:	4a40      	ldr	r2, [pc, #256]	@ (8002128 <HAL_UART_MspInit+0x148>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	6313      	str	r3, [r2, #48]	@ 0x30
 800202e:	4b3e      	ldr	r3, [pc, #248]	@ (8002128 <HAL_UART_MspInit+0x148>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	613b      	str	r3, [r7, #16]
 800203e:	4b3a      	ldr	r3, [pc, #232]	@ (8002128 <HAL_UART_MspInit+0x148>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002042:	4a39      	ldr	r2, [pc, #228]	@ (8002128 <HAL_UART_MspInit+0x148>)
 8002044:	f043 0302 	orr.w	r3, r3, #2
 8002048:	6313      	str	r3, [r2, #48]	@ 0x30
 800204a:	4b37      	ldr	r3, [pc, #220]	@ (8002128 <HAL_UART_MspInit+0x148>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	613b      	str	r3, [r7, #16]
 8002054:	693b      	ldr	r3, [r7, #16]
=======
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 8001fca:	f107 030c 	add.w	r3, r7, #12
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4805      	ldr	r0, [pc, #20]	@ (8001fe8 <HAL_TIM_MspPostInit+0x70>)
 8001fd2:	f000 fcff 	bl	80029d4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspPostInit 1 */

    /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001fd6:	bf00      	nop
 8001fd8:	3720      	adds	r7, #32
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40000c00 	.word	0x40000c00
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40020000 	.word	0x40020000

08001fec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08c      	sub	sp, #48	@ 0x30
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	f107 031c 	add.w	r3, r7, #28
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a45      	ldr	r2, [pc, #276]	@ (8002120 <HAL_UART_MspInit+0x134>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d14b      	bne.n	80020a6 <HAL_UART_MspInit+0xba>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	61bb      	str	r3, [r7, #24]
 8002012:	4b44      	ldr	r3, [pc, #272]	@ (8002124 <HAL_UART_MspInit+0x138>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002016:	4a43      	ldr	r2, [pc, #268]	@ (8002124 <HAL_UART_MspInit+0x138>)
 8002018:	f043 0310 	orr.w	r3, r3, #16
 800201c:	6453      	str	r3, [r2, #68]	@ 0x44
 800201e:	4b41      	ldr	r3, [pc, #260]	@ (8002124 <HAL_UART_MspInit+0x138>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002022:	f003 0310 	and.w	r3, r3, #16
 8002026:	61bb      	str	r3, [r7, #24]
 8002028:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	4b3d      	ldr	r3, [pc, #244]	@ (8002124 <HAL_UART_MspInit+0x138>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002032:	4a3c      	ldr	r2, [pc, #240]	@ (8002124 <HAL_UART_MspInit+0x138>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	6313      	str	r3, [r2, #48]	@ 0x30
 800203a:	4b3a      	ldr	r3, [pc, #232]	@ (8002124 <HAL_UART_MspInit+0x138>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	617b      	str	r3, [r7, #20]
 8002044:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	4b36      	ldr	r3, [pc, #216]	@ (8002124 <HAL_UART_MspInit+0x138>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204e:	4a35      	ldr	r2, [pc, #212]	@ (8002124 <HAL_UART_MspInit+0x138>)
 8002050:	f043 0302 	orr.w	r3, r3, #2
 8002054:	6313      	str	r3, [r2, #48]	@ 0x30
 8002056:	4b33      	ldr	r3, [pc, #204]	@ (8002124 <HAL_UART_MspInit+0x138>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	693b      	ldr	r3, [r7, #16]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB3     ------> USART1_RX
    */
<<<<<<< HEAD
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002056:	2340      	movs	r3, #64	@ 0x40
 8002058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205a:	2302      	movs	r3, #2
 800205c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002062:	2303      	movs	r3, #3
 8002064:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002066:	2307      	movs	r3, #7
 8002068:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800206a:	f107 031c 	add.w	r3, r7, #28
 800206e:	4619      	mov	r1, r3
 8002070:	482e      	ldr	r0, [pc, #184]	@ (800212c <HAL_UART_MspInit+0x14c>)
 8002072:	f000 fca1 	bl	80029b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002076:	2308      	movs	r3, #8
 8002078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207a:	2302      	movs	r3, #2
 800207c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002082:	2303      	movs	r3, #3
 8002084:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002086:	2307      	movs	r3, #7
 8002088:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800208a:	f107 031c 	add.w	r3, r7, #28
 800208e:	4619      	mov	r1, r3
 8002090:	4826      	ldr	r0, [pc, #152]	@ (800212c <HAL_UART_MspInit+0x14c>)
 8002092:	f000 fc91 	bl	80029b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002096:	2200      	movs	r2, #0
 8002098:	2105      	movs	r1, #5
 800209a:	2025      	movs	r0, #37	@ 0x25
 800209c:	f000 fbd0 	bl	8002840 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020a0:	2025      	movs	r0, #37	@ 0x25
 80020a2:	f000 fbe9 	bl	8002878 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020a6:	e038      	b.n	800211a <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a20      	ldr	r2, [pc, #128]	@ (8002130 <HAL_UART_MspInit+0x150>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d133      	bne.n	800211a <HAL_UART_MspInit+0x13a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002128 <HAL_UART_MspInit+0x148>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ba:	4a1b      	ldr	r2, [pc, #108]	@ (8002128 <HAL_UART_MspInit+0x148>)
 80020bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020c2:	4b19      	ldr	r3, [pc, #100]	@ (8002128 <HAL_UART_MspInit+0x148>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	4b15      	ldr	r3, [pc, #84]	@ (8002128 <HAL_UART_MspInit+0x148>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d6:	4a14      	ldr	r2, [pc, #80]	@ (8002128 <HAL_UART_MspInit+0x148>)
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020de:	4b12      	ldr	r3, [pc, #72]	@ (8002128 <HAL_UART_MspInit+0x148>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020ea:	230c      	movs	r3, #12
 80020ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ee:	2302      	movs	r3, #2
 80020f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f6:	2303      	movs	r3, #3
 80020f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020fa:	2307      	movs	r3, #7
 80020fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fe:	f107 031c 	add.w	r3, r7, #28
 8002102:	4619      	mov	r1, r3
 8002104:	480b      	ldr	r0, [pc, #44]	@ (8002134 <HAL_UART_MspInit+0x154>)
 8002106:	f000 fc57 	bl	80029b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800210a:	2200      	movs	r2, #0
 800210c:	2105      	movs	r1, #5
 800210e:	2026      	movs	r0, #38	@ 0x26
 8002110:	f000 fb96 	bl	8002840 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002114:	2026      	movs	r0, #38	@ 0x26
 8002116:	f000 fbaf 	bl	8002878 <HAL_NVIC_EnableIRQ>
}
 800211a:	bf00      	nop
 800211c:	3730      	adds	r7, #48	@ 0x30
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40011000 	.word	0x40011000
 8002128:	40023800 	.word	0x40023800
 800212c:	40020400 	.word	0x40020400
 8002130:	40004400 	.word	0x40004400
 8002134:	40020000 	.word	0x40020000

08002138 <HAL_InitTick>:
=======
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002062:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002068:	2302      	movs	r3, #2
 800206a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002070:	2303      	movs	r3, #3
 8002072:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002074:	2307      	movs	r3, #7
 8002076:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002078:	f107 031c 	add.w	r3, r7, #28
 800207c:	4619      	mov	r1, r3
 800207e:	482a      	ldr	r0, [pc, #168]	@ (8002128 <HAL_UART_MspInit+0x13c>)
 8002080:	f000 fca8 	bl	80029d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002084:	2308      	movs	r3, #8
 8002086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002088:	2302      	movs	r3, #2
 800208a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002090:	2303      	movs	r3, #3
 8002092:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002094:	2307      	movs	r3, #7
 8002096:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002098:	f107 031c 	add.w	r3, r7, #28
 800209c:	4619      	mov	r1, r3
 800209e:	4823      	ldr	r0, [pc, #140]	@ (800212c <HAL_UART_MspInit+0x140>)
 80020a0:	f000 fc98 	bl	80029d4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80020a4:	e038      	b.n	8002118 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART2)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a21      	ldr	r2, [pc, #132]	@ (8002130 <HAL_UART_MspInit+0x144>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d133      	bne.n	8002118 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002124 <HAL_UART_MspInit+0x138>)
 80020b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b8:	4a1a      	ldr	r2, [pc, #104]	@ (8002124 <HAL_UART_MspInit+0x138>)
 80020ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020be:	6413      	str	r3, [r2, #64]	@ 0x40
 80020c0:	4b18      	ldr	r3, [pc, #96]	@ (8002124 <HAL_UART_MspInit+0x138>)
 80020c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020cc:	2300      	movs	r3, #0
 80020ce:	60bb      	str	r3, [r7, #8]
 80020d0:	4b14      	ldr	r3, [pc, #80]	@ (8002124 <HAL_UART_MspInit+0x138>)
 80020d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d4:	4a13      	ldr	r2, [pc, #76]	@ (8002124 <HAL_UART_MspInit+0x138>)
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	6313      	str	r3, [r2, #48]	@ 0x30
 80020dc:	4b11      	ldr	r3, [pc, #68]	@ (8002124 <HAL_UART_MspInit+0x138>)
 80020de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020e8:	230c      	movs	r3, #12
 80020ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ec:	2302      	movs	r3, #2
 80020ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f4:	2303      	movs	r3, #3
 80020f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020f8:	2307      	movs	r3, #7
 80020fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fc:	f107 031c 	add.w	r3, r7, #28
 8002100:	4619      	mov	r1, r3
 8002102:	4809      	ldr	r0, [pc, #36]	@ (8002128 <HAL_UART_MspInit+0x13c>)
 8002104:	f000 fc66 	bl	80029d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002108:	2200      	movs	r2, #0
 800210a:	2105      	movs	r1, #5
 800210c:	2026      	movs	r0, #38	@ 0x26
 800210e:	f000 fba5 	bl	800285c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002112:	2026      	movs	r0, #38	@ 0x26
 8002114:	f000 fbbe 	bl	8002894 <HAL_NVIC_EnableIRQ>
}
 8002118:	bf00      	nop
 800211a:	3730      	adds	r7, #48	@ 0x30
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40011000 	.word	0x40011000
 8002124:	40023800 	.word	0x40023800
 8002128:	40020000 	.word	0x40020000
 800212c:	40020400 	.word	0x40020400
 8002130:	40004400 	.word	0x40004400

08002134 <HAL_InitTick>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8002138:	b580      	push	{r7, lr}
 800213a:	b08c      	sub	sp, #48	@ 0x30
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002148:	2200      	movs	r2, #0
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	2019      	movs	r0, #25
 800214e:	f000 fb77 	bl	8002840 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002152:	2019      	movs	r0, #25
 8002154:	f000 fb90 	bl	8002878 <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8002158:	2300      	movs	r3, #0
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	4b1e      	ldr	r3, [pc, #120]	@ (80021d8 <HAL_InitTick+0xa0>)
 800215e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002160:	4a1d      	ldr	r2, [pc, #116]	@ (80021d8 <HAL_InitTick+0xa0>)
 8002162:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002166:	6453      	str	r3, [r2, #68]	@ 0x44
 8002168:	4b1b      	ldr	r3, [pc, #108]	@ (80021d8 <HAL_InitTick+0xa0>)
 800216a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002174:	f107 0210 	add.w	r2, r7, #16
 8002178:	f107 0314 	add.w	r3, r7, #20
 800217c:	4611      	mov	r1, r2
 800217e:	4618      	mov	r0, r3
 8002180:	f001 feb4 	bl	8003eec <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002184:	f001 fe9e 	bl	8003ec4 <HAL_RCC_GetPCLK2Freq>
 8002188:	62f8      	str	r0, [r7, #44]	@ 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800218a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800218c:	4a13      	ldr	r2, [pc, #76]	@ (80021dc <HAL_InitTick+0xa4>)
 800218e:	fba2 2303 	umull	r2, r3, r2, r3
 8002192:	0c9b      	lsrs	r3, r3, #18
 8002194:	3b01      	subs	r3, #1
 8002196:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8002198:	4b11      	ldr	r3, [pc, #68]	@ (80021e0 <HAL_InitTick+0xa8>)
 800219a:	4a12      	ldr	r2, [pc, #72]	@ (80021e4 <HAL_InitTick+0xac>)
 800219c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 800219e:	4b10      	ldr	r3, [pc, #64]	@ (80021e0 <HAL_InitTick+0xa8>)
 80021a0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80021a4:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80021a6:	4a0e      	ldr	r2, [pc, #56]	@ (80021e0 <HAL_InitTick+0xa8>)
 80021a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021aa:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80021ac:	4b0c      	ldr	r3, [pc, #48]	@ (80021e0 <HAL_InitTick+0xa8>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b2:	4b0b      	ldr	r3, [pc, #44]	@ (80021e0 <HAL_InitTick+0xa8>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 80021b8:	4809      	ldr	r0, [pc, #36]	@ (80021e0 <HAL_InitTick+0xa8>)
 80021ba:	f001 ff52 	bl	8004062 <HAL_TIM_Base_Init>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d104      	bne.n	80021ce <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 80021c4:	4806      	ldr	r0, [pc, #24]	@ (80021e0 <HAL_InitTick+0xa8>)
 80021c6:	f001 ff9b 	bl	8004100 <HAL_TIM_Base_Start_IT>
 80021ca:	4603      	mov	r3, r0
 80021cc:	e000      	b.n	80021d0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3730      	adds	r7, #48	@ 0x30
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40023800 	.word	0x40023800
 80021dc:	431bde83 	.word	0x431bde83
 80021e0:	20000488 	.word	0x20000488
 80021e4:	40014400 	.word	0x40014400

080021e8 <NMI_Handler>:
=======
 8002134:	b580      	push	{r7, lr}
 8002136:	b08c      	sub	sp, #48	@ 0x30
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002140:	2300      	movs	r3, #0
 8002142:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8002144:	2300      	movs	r3, #0
 8002146:	60bb      	str	r3, [r7, #8]
 8002148:	4b2e      	ldr	r3, [pc, #184]	@ (8002204 <HAL_InitTick+0xd0>)
 800214a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214c:	4a2d      	ldr	r2, [pc, #180]	@ (8002204 <HAL_InitTick+0xd0>)
 800214e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002152:	6453      	str	r3, [r2, #68]	@ 0x44
 8002154:	4b2b      	ldr	r3, [pc, #172]	@ (8002204 <HAL_InitTick+0xd0>)
 8002156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002158:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002160:	f107 020c 	add.w	r2, r7, #12
 8002164:	f107 0310 	add.w	r3, r7, #16
 8002168:	4611      	mov	r1, r2
 800216a:	4618      	mov	r0, r3
 800216c:	f001 ff1e 	bl	8003fac <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002170:	f001 ff08 	bl	8003f84 <HAL_RCC_GetPCLK2Freq>
 8002174:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002178:	4a23      	ldr	r2, [pc, #140]	@ (8002208 <HAL_InitTick+0xd4>)
 800217a:	fba2 2303 	umull	r2, r3, r2, r3
 800217e:	0c9b      	lsrs	r3, r3, #18
 8002180:	3b01      	subs	r3, #1
 8002182:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8002184:	4b21      	ldr	r3, [pc, #132]	@ (800220c <HAL_InitTick+0xd8>)
 8002186:	4a22      	ldr	r2, [pc, #136]	@ (8002210 <HAL_InitTick+0xdc>)
 8002188:	601a      	str	r2, [r3, #0]
   * Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 800218a:	4b20      	ldr	r3, [pc, #128]	@ (800220c <HAL_InitTick+0xd8>)
 800218c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002190:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8002192:	4a1e      	ldr	r2, [pc, #120]	@ (800220c <HAL_InitTick+0xd8>)
 8002194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002196:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8002198:	4b1c      	ldr	r3, [pc, #112]	@ (800220c <HAL_InitTick+0xd8>)
 800219a:	2200      	movs	r2, #0
 800219c:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800219e:	4b1b      	ldr	r3, [pc, #108]	@ (800220c <HAL_InitTick+0xd8>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021a4:	4b19      	ldr	r3, [pc, #100]	@ (800220c <HAL_InitTick+0xd8>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 80021aa:	4818      	ldr	r0, [pc, #96]	@ (800220c <HAL_InitTick+0xd8>)
 80021ac:	f001 ffb9 	bl	8004122 <HAL_TIM_Base_Init>
 80021b0:	4603      	mov	r3, r0
 80021b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80021b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d11b      	bne.n	80021f6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 80021be:	4813      	ldr	r0, [pc, #76]	@ (800220c <HAL_InitTick+0xd8>)
 80021c0:	f001 fffe 	bl	80041c0 <HAL_TIM_Base_Start_IT>
 80021c4:	4603      	mov	r3, r0
 80021c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80021ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d111      	bne.n	80021f6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80021d2:	2019      	movs	r0, #25
 80021d4:	f000 fb5e 	bl	8002894 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b0f      	cmp	r3, #15
 80021dc:	d808      	bhi.n	80021f0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80021de:	2200      	movs	r2, #0
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	2019      	movs	r0, #25
 80021e4:	f000 fb3a 	bl	800285c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002214 <HAL_InitTick+0xe0>)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	e002      	b.n	80021f6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80021f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3730      	adds	r7, #48	@ 0x30
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40023800 	.word	0x40023800
 8002208:	431bde83 	.word	0x431bde83
 800220c:	20000490 	.word	0x20000490
 8002210:	40014400 	.word	0x40014400
 8002214:	20000004 	.word	0x20000004

08002218 <NMI_Handler>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
=======
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< HEAD
 80021ec:	bf00      	nop
 80021ee:	e7fd      	b.n	80021ec <NMI_Handler+0x4>

080021f0 <HardFault_Handler>:
=======
 800221c:	bf00      	nop
 800221e:	e7fd      	b.n	800221c <NMI_Handler+0x4>

08002220 <HardFault_Handler>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
=======
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80021f4:	bf00      	nop
 80021f6:	e7fd      	b.n	80021f4 <HardFault_Handler+0x4>

080021f8 <MemManage_Handler>:
=======
 8002224:	bf00      	nop
 8002226:	e7fd      	b.n	8002224 <HardFault_Handler+0x4>

08002228 <MemManage_Handler>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
=======
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80021fc:	bf00      	nop
 80021fe:	e7fd      	b.n	80021fc <MemManage_Handler+0x4>

08002200 <BusFault_Handler>:
=======
 800222c:	bf00      	nop
 800222e:	e7fd      	b.n	800222c <MemManage_Handler+0x4>

08002230 <BusFault_Handler>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
=======
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002204:	bf00      	nop
 8002206:	e7fd      	b.n	8002204 <BusFault_Handler+0x4>

08002208 <UsageFault_Handler>:
=======
 8002234:	bf00      	nop
 8002236:	e7fd      	b.n	8002234 <BusFault_Handler+0x4>

08002238 <UsageFault_Handler>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
=======
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 800220c:	bf00      	nop
 800220e:	e7fd      	b.n	800220c <UsageFault_Handler+0x4>

08002210 <DebugMon_Handler>:
=======
 800223c:	bf00      	nop
 800223e:	e7fd      	b.n	800223c <UsageFault_Handler+0x4>

08002240 <DebugMon_Handler>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
=======
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <TIM1_UP_TIM10_IRQHandler>:
=======
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <TIM1_UP_TIM10_IRQHandler>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
<<<<<<< HEAD
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
=======
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
<<<<<<< HEAD
 8002224:	4802      	ldr	r0, [pc, #8]	@ (8002230 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002226:	f002 fa41 	bl	80046ac <HAL_TIM_IRQHandler>
=======
 8002254:	4802      	ldr	r0, [pc, #8]	@ (8002260 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002256:	f002 fa89 	bl	800476c <HAL_TIM_IRQHandler>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
<<<<<<< HEAD
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20000488 	.word	0x20000488

08002234 <TIM1_TRG_COM_TIM11_IRQHandler>:
=======
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20000490 	.word	0x20000490

08002264 <TIM1_TRG_COM_TIM11_IRQHandler>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
<<<<<<< HEAD
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
=======
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
<<<<<<< HEAD
 8002238:	4802      	ldr	r0, [pc, #8]	@ (8002244 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800223a:	f002 fa37 	bl	80046ac <HAL_TIM_IRQHandler>
=======
 8002268:	4802      	ldr	r0, [pc, #8]	@ (8002274 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800226a:	f002 fa7f 	bl	800476c <HAL_TIM_IRQHandler>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
<<<<<<< HEAD
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000380 	.word	0x20000380

08002248 <TIM3_IRQHandler>:
=======
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000380 	.word	0x20000380

08002278 <TIM3_IRQHandler>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
<<<<<<< HEAD
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
=======
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
<<<<<<< HEAD
 800224c:	4802      	ldr	r0, [pc, #8]	@ (8002258 <TIM3_IRQHandler+0x10>)
 800224e:	f002 fa2d 	bl	80046ac <HAL_TIM_IRQHandler>
=======
 800227c:	4802      	ldr	r0, [pc, #8]	@ (8002288 <TIM3_IRQHandler+0x10>)
 800227e:	f002 fa75 	bl	800476c <HAL_TIM_IRQHandler>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
<<<<<<< HEAD
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	200002f0 	.word	0x200002f0

0800225c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002260:	4802      	ldr	r0, [pc, #8]	@ (800226c <USART1_IRQHandler+0x10>)
 8002262:	f003 fb73 	bl	800594c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	200003c8 	.word	0x200003c8

08002270 <USART2_IRQHandler>:
=======
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	200002f0 	.word	0x200002f0

0800228c <USART2_IRQHandler>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
<<<<<<< HEAD
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
=======
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
<<<<<<< HEAD
 8002274:	4802      	ldr	r0, [pc, #8]	@ (8002280 <USART2_IRQHandler+0x10>)
 8002276:	f003 fb69 	bl	800594c <HAL_UART_IRQHandler>
=======
 8002290:	4802      	ldr	r0, [pc, #8]	@ (800229c <USART2_IRQHandler+0x10>)
 8002292:	f003 fb55 	bl	8005940 <HAL_UART_IRQHandler>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
<<<<<<< HEAD
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	2000040c 	.word	0x2000040c

08002284 <_getpid>:
=======
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000410 	.word	0x20000410

080022a0 <_getpid>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
void initialise_monitor_handles()
{
}

int _getpid(void)
{
<<<<<<< HEAD
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
	return 1;
 8002288:	2301      	movs	r3, #1
}
 800228a:	4618      	mov	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <_kill>:

int _kill(int pid, int sig)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800229e:	f007 ff07 	bl	800a0b0 <__errno>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2216      	movs	r2, #22
 80022a6:	601a      	str	r2, [r3, #0]
	return -1;
 80022a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <_exit>:

void _exit (int status)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022bc:	f04f 31ff 	mov.w	r1, #4294967295
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff ffe7 	bl	8002294 <_kill>
	while (1) {}		/* Make sure we hang here */
 80022c6:	bf00      	nop
 80022c8:	e7fd      	b.n	80022c6 <_exit+0x12>

080022ca <_read>:
=======
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
	return 1;
 80022a4:	2301      	movs	r3, #1
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <_kill>:

int _kill(int pid, int sig)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80022ba:	f007 fff3 	bl	800a2a4 <__errno>
 80022be:	4603      	mov	r3, r0
 80022c0:	2216      	movs	r2, #22
 80022c2:	601a      	str	r2, [r3, #0]
	return -1;
 80022c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <_exit>:

void _exit (int status)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022d8:	f04f 31ff 	mov.w	r1, #4294967295
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff ffe7 	bl	80022b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80022e2:	bf00      	nop
 80022e4:	e7fd      	b.n	80022e2 <_exit+0x12>

080022e6 <_read>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
<<<<<<< HEAD
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b086      	sub	sp, #24
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	60f8      	str	r0, [r7, #12]
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d6:	2300      	movs	r3, #0
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	e00a      	b.n	80022f2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022dc:	f3af 8000 	nop.w
 80022e0:	4601      	mov	r1, r0
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	1c5a      	adds	r2, r3, #1
 80022e6:	60ba      	str	r2, [r7, #8]
 80022e8:	b2ca      	uxtb	r2, r1
 80022ea:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	3301      	adds	r3, #1
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	dbf0      	blt.n	80022dc <_read+0x12>
	}

return len;
 80022fa:	687b      	ldr	r3, [r7, #4]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	e009      	b.n	800232a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	1c5a      	adds	r2, r3, #1
 800231a:	60ba      	str	r2, [r7, #8]
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe ffa6 	bl	8001270 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	3301      	adds	r3, #1
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	429a      	cmp	r2, r3
 8002330:	dbf1      	blt.n	8002316 <_write+0x12>
	}
	return len;
 8002332:	687b      	ldr	r3, [r7, #4]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <_close>:

int _close(int file)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
	return -1;
 8002344:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002348:	4618      	mov	r0, r3
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <_fstat>:
=======
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b086      	sub	sp, #24
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	60f8      	str	r0, [r7, #12]
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	e00a      	b.n	800230e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022f8:	f3af 8000 	nop.w
 80022fc:	4601      	mov	r1, r0
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	1c5a      	adds	r2, r3, #1
 8002302:	60ba      	str	r2, [r7, #8]
 8002304:	b2ca      	uxtb	r2, r1
 8002306:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	3301      	adds	r3, #1
 800230c:	617b      	str	r3, [r7, #20]
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	429a      	cmp	r2, r3
 8002314:	dbf0      	blt.n	80022f8 <_read+0x12>
	}

return len;
 8002316:	687b      	ldr	r3, [r7, #4]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
 8002330:	e009      	b.n	8002346 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	1c5a      	adds	r2, r3, #1
 8002336:	60ba      	str	r2, [r7, #8]
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe ff98 	bl	8001270 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	3301      	adds	r3, #1
 8002344:	617b      	str	r3, [r7, #20]
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	429a      	cmp	r2, r3
 800234c:	dbf1      	blt.n	8002332 <_write+0x12>
	}
	return len;
 800234e:	687b      	ldr	r3, [r7, #4]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <_close>:

int _close(int file)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
	return -1;
 8002360:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002364:	4618      	mov	r0, r3
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <_fstat>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0


int _fstat(int file, struct stat *st)
{
<<<<<<< HEAD
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002364:	605a      	str	r2, [r3, #4]
	return 0;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <_isatty>:

int _isatty(int file)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
	return 1;
 800237c:	2301      	movs	r3, #1
}
 800237e:	4618      	mov	r0, r3
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800238a:	b480      	push	{r7}
 800238c:	b085      	sub	sp, #20
 800238e:	af00      	add	r7, sp, #0
 8002390:	60f8      	str	r0, [r7, #12]
 8002392:	60b9      	str	r1, [r7, #8]
 8002394:	607a      	str	r2, [r7, #4]
	return 0;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <_sbrk>:
=======
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002380:	605a      	str	r2, [r3, #4]
	return 0;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <_isatty>:

int _isatty(int file)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
	return 1;
 8002398:	2301      	movs	r3, #1
}
 800239a:	4618      	mov	r0, r3
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b085      	sub	sp, #20
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	60f8      	str	r0, [r7, #12]
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	607a      	str	r2, [r7, #4]
	return 0;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <_sbrk>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
<<<<<<< HEAD
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
=======
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
<<<<<<< HEAD
 80023ac:	4a14      	ldr	r2, [pc, #80]	@ (8002400 <_sbrk+0x5c>)
 80023ae:	4b15      	ldr	r3, [pc, #84]	@ (8002404 <_sbrk+0x60>)
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	613b      	str	r3, [r7, #16]
=======
 80023c8:	4a14      	ldr	r2, [pc, #80]	@ (800241c <_sbrk+0x5c>)
 80023ca:	4b15      	ldr	r3, [pc, #84]	@ (8002420 <_sbrk+0x60>)
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	613b      	str	r3, [r7, #16]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
<<<<<<< HEAD
 80023b8:	4b13      	ldr	r3, [pc, #76]	@ (8002408 <_sbrk+0x64>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d102      	bne.n	80023c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023c0:	4b11      	ldr	r3, [pc, #68]	@ (8002408 <_sbrk+0x64>)
 80023c2:	4a12      	ldr	r2, [pc, #72]	@ (800240c <_sbrk+0x68>)
 80023c4:	601a      	str	r2, [r3, #0]
=======
 80023d4:	4b13      	ldr	r3, [pc, #76]	@ (8002424 <_sbrk+0x64>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d102      	bne.n	80023e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023dc:	4b11      	ldr	r3, [pc, #68]	@ (8002424 <_sbrk+0x64>)
 80023de:	4a12      	ldr	r2, [pc, #72]	@ (8002428 <_sbrk+0x68>)
 80023e0:	601a      	str	r2, [r3, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
<<<<<<< HEAD
 80023c6:	4b10      	ldr	r3, [pc, #64]	@ (8002408 <_sbrk+0x64>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d207      	bcs.n	80023e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023d4:	f007 fe6c 	bl	800a0b0 <__errno>
 80023d8:	4603      	mov	r3, r0
 80023da:	220c      	movs	r2, #12
 80023dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023de:	f04f 33ff 	mov.w	r3, #4294967295
 80023e2:	e009      	b.n	80023f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023e4:	4b08      	ldr	r3, [pc, #32]	@ (8002408 <_sbrk+0x64>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ea:	4b07      	ldr	r3, [pc, #28]	@ (8002408 <_sbrk+0x64>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	4a05      	ldr	r2, [pc, #20]	@ (8002408 <_sbrk+0x64>)
 80023f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023f6:	68fb      	ldr	r3, [r7, #12]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20020000 	.word	0x20020000
 8002404:	00000400 	.word	0x00000400
 8002408:	200004d0 	.word	0x200004d0
 800240c:	20005030 	.word	0x20005030

08002410 <SystemInit>:
=======
 80023e2:	4b10      	ldr	r3, [pc, #64]	@ (8002424 <_sbrk+0x64>)
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4413      	add	r3, r2
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d207      	bcs.n	8002400 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023f0:	f007 ff58 	bl	800a2a4 <__errno>
 80023f4:	4603      	mov	r3, r0
 80023f6:	220c      	movs	r2, #12
 80023f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023fa:	f04f 33ff 	mov.w	r3, #4294967295
 80023fe:	e009      	b.n	8002414 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002400:	4b08      	ldr	r3, [pc, #32]	@ (8002424 <_sbrk+0x64>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002406:	4b07      	ldr	r3, [pc, #28]	@ (8002424 <_sbrk+0x64>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4413      	add	r3, r2
 800240e:	4a05      	ldr	r2, [pc, #20]	@ (8002424 <_sbrk+0x64>)
 8002410:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002412:	68fb      	ldr	r3, [r7, #12]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20020000 	.word	0x20020000
 8002420:	00000400 	.word	0x00000400
 8002424:	200004d8 	.word	0x200004d8
 8002428:	20005038 	.word	0x20005038

0800242c <SystemInit>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< HEAD
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002414:	4b06      	ldr	r3, [pc, #24]	@ (8002430 <SystemInit+0x20>)
 8002416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800241a:	4a05      	ldr	r2, [pc, #20]	@ (8002430 <SystemInit+0x20>)
 800241c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002420:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
=======
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002430:	4b06      	ldr	r3, [pc, #24]	@ (800244c <SystemInit+0x20>)
 8002432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002436:	4a05      	ldr	r2, [pc, #20]	@ (800244c <SystemInit+0x20>)
 8002438:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800243c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	e000ed00 	.word	0xe000ed00

08002434 <delay_us>:
=======
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <delay_us>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

extern TIM_HandleTypeDef htim2;

// 1MHz 타이머(TIM2) 기반 딜레이 함수
void delay_us(int us)
{
<<<<<<< HEAD
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 800243c:	4b08      	ldr	r3, [pc, #32]	@ (8002460 <delay_us+0x2c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2200      	movs	r2, #0
 8002442:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8002444:	bf00      	nop
 8002446:	4b06      	ldr	r3, [pc, #24]	@ (8002460 <delay_us+0x2c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	429a      	cmp	r2, r3
 8002450:	d3f9      	bcc.n	8002446 <delay_us+0x12>
        ;  // 지정 시간까지 대기
}
 8002452:	bf00      	nop
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	200002a8 	.word	0x200002a8

08002464 <set_event>:
#include "uart.h"
=======
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 8002458:	4b08      	ldr	r3, [pc, #32]	@ (800247c <delay_us+0x2c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2200      	movs	r2, #0
 800245e:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8002460:	bf00      	nop
 8002462:	4b06      	ldr	r3, [pc, #24]	@ (800247c <delay_us+0x2c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	429a      	cmp	r2, r3
 800246c:	d3f9      	bcc.n	8002462 <delay_us+0x12>
        ;  // 지정 시간까지 대기
}
 800246e:	bf00      	nop
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	200002a8 	.word	0x200002a8

08002480 <set_event>:

>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
#include <stdio.h>

volatile int event;

void set_event(int _event) {
<<<<<<< HEAD
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]

	event = _event;
 800246c:	4a04      	ldr	r2, [pc, #16]	@ (8002480 <set_event+0x1c>)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6013      	str	r3, [r2, #0]
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	200004d4 	.word	0x200004d4

08002484 <get_event>:

int get_event() {
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0

	return event;
 8002488:	4b03      	ldr	r3, [pc, #12]	@ (8002498 <get_event+0x14>)
 800248a:	681b      	ldr	r3, [r3, #0]
}
 800248c:	4618      	mov	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	200004d4 	.word	0x200004d4

0800249c <ultra_sonic_init>:
=======
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]

	event = _event;
 8002488:	4a04      	ldr	r2, [pc, #16]	@ (800249c <set_event+0x1c>)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6013      	str	r3, [r2, #0]
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	200004dc 	.word	0x200004dc

080024a0 <get_event>:

int get_event() {
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0

	return event;
 80024a4:	4b03      	ldr	r3, [pc, #12]	@ (80024b4 <get_event+0x14>)
 80024a6:	681b      	ldr	r3, [r3, #0]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	200004dc 	.word	0x200004dc

080024b8 <ultra_sonic_init>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
static int index=0;
extern volatile float distance;
extern TIM_HandleTypeDef htim3;

void ultra_sonic_init(void)
{
<<<<<<< HEAD
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
    HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80024a0:	2104      	movs	r1, #4
 80024a2:	4802      	ldr	r0, [pc, #8]	@ (80024ac <ultra_sonic_init+0x10>)
 80024a4:	f001 ffe8 	bl	8004478 <HAL_TIM_IC_Start_IT>
}
 80024a8:	bf00      	nop
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	200002f0 	.word	0x200002f0

080024b0 <ultra_sonic_trigger>:

void ultra_sonic_trigger(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 80024b4:	2201      	movs	r2, #1
 80024b6:	2110      	movs	r1, #16
 80024b8:	4806      	ldr	r0, [pc, #24]	@ (80024d4 <ultra_sonic_trigger+0x24>)
 80024ba:	f000 fc19 	bl	8002cf0 <HAL_GPIO_WritePin>
    delay_us(10);
 80024be:	200a      	movs	r0, #10
 80024c0:	f7ff ffb8 	bl	8002434 <delay_us>
    HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 80024c4:	2200      	movs	r2, #0
 80024c6:	2110      	movs	r1, #16
 80024c8:	4802      	ldr	r0, [pc, #8]	@ (80024d4 <ultra_sonic_trigger+0x24>)
 80024ca:	f000 fc11 	bl	8002cf0 <HAL_GPIO_WritePin>
}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40020000 	.word	0x40020000

080024d8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
    static uint32_t ic_rising = 0, ic_falling = 0;
    if(htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a3c      	ldr	r2, [pc, #240]	@ (80025d8 <HAL_TIM_IC_CaptureCallback+0x100>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d171      	bne.n	80025ce <HAL_TIM_IC_CaptureCallback+0xf6>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	7f1b      	ldrb	r3, [r3, #28]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d16d      	bne.n	80025ce <HAL_TIM_IC_CaptureCallback+0xf6>
    {
        if(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET)
 80024f2:	2180      	movs	r1, #128	@ 0x80
 80024f4:	4839      	ldr	r0, [pc, #228]	@ (80025dc <HAL_TIM_IC_CaptureCallback+0x104>)
 80024f6:	f000 fbe3 	bl	8002cc0 <HAL_GPIO_ReadPin>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d107      	bne.n	8002510 <HAL_TIM_IC_CaptureCallback+0x38>
            ic_rising = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002500:	2104      	movs	r1, #4
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f002 fc00 	bl	8004d08 <HAL_TIM_ReadCapturedValue>
 8002508:	4603      	mov	r3, r0
 800250a:	4a35      	ldr	r2, [pc, #212]	@ (80025e0 <HAL_TIM_IC_CaptureCallback+0x108>)
 800250c:	6013      	str	r3, [r2, #0]
=======
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
    HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80024bc:	2104      	movs	r1, #4
 80024be:	4802      	ldr	r0, [pc, #8]	@ (80024c8 <ultra_sonic_init+0x10>)
 80024c0:	f002 f83a 	bl	8004538 <HAL_TIM_IC_Start_IT>
}
 80024c4:	bf00      	nop
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	200002f0 	.word	0x200002f0

080024cc <ultra_sonic_trigger>:

void ultra_sonic_trigger(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 80024d0:	2201      	movs	r2, #1
 80024d2:	2110      	movs	r1, #16
 80024d4:	4806      	ldr	r0, [pc, #24]	@ (80024f0 <ultra_sonic_trigger+0x24>)
 80024d6:	f000 fc19 	bl	8002d0c <HAL_GPIO_WritePin>
    delay_us(10);
 80024da:	200a      	movs	r0, #10
 80024dc:	f7ff ffb8 	bl	8002450 <delay_us>
    HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 80024e0:	2200      	movs	r2, #0
 80024e2:	2110      	movs	r1, #16
 80024e4:	4802      	ldr	r0, [pc, #8]	@ (80024f0 <ultra_sonic_trigger+0x24>)
 80024e6:	f000 fc11 	bl	8002d0c <HAL_GPIO_WritePin>
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40020000 	.word	0x40020000

080024f4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
    static uint32_t ic_rising = 0, ic_falling = 0;
    if(htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a3c      	ldr	r2, [pc, #240]	@ (80025f4 <HAL_TIM_IC_CaptureCallback+0x100>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d171      	bne.n	80025ea <HAL_TIM_IC_CaptureCallback+0xf6>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	7f1b      	ldrb	r3, [r3, #28]
 800250a:	2b02      	cmp	r3, #2
 800250c:	d16d      	bne.n	80025ea <HAL_TIM_IC_CaptureCallback+0xf6>
    {
        if(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET)
 800250e:	2180      	movs	r1, #128	@ 0x80
 8002510:	4839      	ldr	r0, [pc, #228]	@ (80025f8 <HAL_TIM_IC_CaptureCallback+0x104>)
 8002512:	f000 fbe3 	bl	8002cdc <HAL_GPIO_ReadPin>
 8002516:	4603      	mov	r3, r0
 8002518:	2b01      	cmp	r3, #1
 800251a:	d107      	bne.n	800252c <HAL_TIM_IC_CaptureCallback+0x38>
            ic_rising = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800251c:	2104      	movs	r1, #4
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f002 fc3a 	bl	8004d98 <HAL_TIM_ReadCapturedValue>
 8002524:	4603      	mov	r3, r0
 8002526:	4a35      	ldr	r2, [pc, #212]	@ (80025fc <HAL_TIM_IC_CaptureCallback+0x108>)
 8002528:	6013      	str	r3, [r2, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
            float sum = 0;
            for(int i=0; i<FILTER_SIZE; i++) sum += buffer[i];
            distance = sum / FILTER_SIZE;
        }
    }
}
<<<<<<< HEAD
 800250e:	e05e      	b.n	80025ce <HAL_TIM_IC_CaptureCallback+0xf6>
            ic_falling = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002510:	2104      	movs	r1, #4
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f002 fbf8 	bl	8004d08 <HAL_TIM_ReadCapturedValue>
 8002518:	4603      	mov	r3, r0
 800251a:	4a32      	ldr	r2, [pc, #200]	@ (80025e4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800251c:	6013      	str	r3, [r2, #0]
            uint32_t pulse = (ic_falling >= ic_rising) ? (ic_falling - ic_rising) : (htim->Instance->ARR - ic_rising + ic_falling + 1);
 800251e:	4b31      	ldr	r3, [pc, #196]	@ (80025e4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	4b2f      	ldr	r3, [pc, #188]	@ (80025e0 <HAL_TIM_IC_CaptureCallback+0x108>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d305      	bcc.n	8002536 <HAL_TIM_IC_CaptureCallback+0x5e>
 800252a:	4b2e      	ldr	r3, [pc, #184]	@ (80025e4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	4b2c      	ldr	r3, [pc, #176]	@ (80025e0 <HAL_TIM_IC_CaptureCallback+0x108>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	e009      	b.n	800254a <HAL_TIM_IC_CaptureCallback+0x72>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800253c:	4b28      	ldr	r3, [pc, #160]	@ (80025e0 <HAL_TIM_IC_CaptureCallback+0x108>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	1ad2      	subs	r2, r2, r3
 8002542:	4b28      	ldr	r3, [pc, #160]	@ (80025e4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4413      	add	r3, r2
 8002548:	3301      	adds	r3, #1
 800254a:	60fb      	str	r3, [r7, #12]
            float d = (pulse * 0.0343f) / 2.0f;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	ee07 3a90 	vmov	s15, r3
 8002552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002556:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80025e8 <HAL_TIM_IC_CaptureCallback+0x110>
 800255a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800255e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002562:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002566:	edc7 7a02 	vstr	s15, [r7, #8]
            buffer[index++] = d;
 800256a:	4b20      	ldr	r3, [pc, #128]	@ (80025ec <HAL_TIM_IC_CaptureCallback+0x114>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	491e      	ldr	r1, [pc, #120]	@ (80025ec <HAL_TIM_IC_CaptureCallback+0x114>)
 8002572:	600a      	str	r2, [r1, #0]
 8002574:	4a1e      	ldr	r2, [pc, #120]	@ (80025f0 <HAL_TIM_IC_CaptureCallback+0x118>)
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	601a      	str	r2, [r3, #0]
            if(index >= FILTER_SIZE) index = 0;
 800257e:	4b1b      	ldr	r3, [pc, #108]	@ (80025ec <HAL_TIM_IC_CaptureCallback+0x114>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2b04      	cmp	r3, #4
 8002584:	dd02      	ble.n	800258c <HAL_TIM_IC_CaptureCallback+0xb4>
 8002586:	4b19      	ldr	r3, [pc, #100]	@ (80025ec <HAL_TIM_IC_CaptureCallback+0x114>)
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
            float sum = 0;
 800258c:	f04f 0300 	mov.w	r3, #0
 8002590:	617b      	str	r3, [r7, #20]
            for(int i=0; i<FILTER_SIZE; i++) sum += buffer[i];
 8002592:	2300      	movs	r3, #0
 8002594:	613b      	str	r3, [r7, #16]
 8002596:	e00e      	b.n	80025b6 <HAL_TIM_IC_CaptureCallback+0xde>
 8002598:	4a15      	ldr	r2, [pc, #84]	@ (80025f0 <HAL_TIM_IC_CaptureCallback+0x118>)
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	edd3 7a00 	vldr	s15, [r3]
 80025a4:	ed97 7a05 	vldr	s14, [r7, #20]
 80025a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ac:	edc7 7a05 	vstr	s15, [r7, #20]
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	3301      	adds	r3, #1
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	2b04      	cmp	r3, #4
 80025ba:	dded      	ble.n	8002598 <HAL_TIM_IC_CaptureCallback+0xc0>
            distance = sum / FILTER_SIZE;
 80025bc:	ed97 7a05 	vldr	s14, [r7, #20]
 80025c0:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80025c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025c8:	4b0a      	ldr	r3, [pc, #40]	@ (80025f4 <HAL_TIM_IC_CaptureCallback+0x11c>)
 80025ca:	edc3 7a00 	vstr	s15, [r3]
}
 80025ce:	bf00      	nop
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40000400 	.word	0x40000400
 80025dc:	40020000 	.word	0x40020000
 80025e0:	200004f0 	.word	0x200004f0
 80025e4:	200004f4 	.word	0x200004f4
 80025e8:	3d0c7e28 	.word	0x3d0c7e28
 80025ec:	200004ec 	.word	0x200004ec
 80025f0:	200004d8 	.word	0x200004d8
 80025f4:	20000474 	.word	0x20000474

080025f8 <Reset_Handler>:
=======
 800252a:	e05e      	b.n	80025ea <HAL_TIM_IC_CaptureCallback+0xf6>
            ic_falling = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800252c:	2104      	movs	r1, #4
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f002 fc32 	bl	8004d98 <HAL_TIM_ReadCapturedValue>
 8002534:	4603      	mov	r3, r0
 8002536:	4a32      	ldr	r2, [pc, #200]	@ (8002600 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8002538:	6013      	str	r3, [r2, #0]
            uint32_t pulse = (ic_falling >= ic_rising) ? (ic_falling - ic_rising) : (htim->Instance->ARR - ic_rising + ic_falling + 1);
 800253a:	4b31      	ldr	r3, [pc, #196]	@ (8002600 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	4b2f      	ldr	r3, [pc, #188]	@ (80025fc <HAL_TIM_IC_CaptureCallback+0x108>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d305      	bcc.n	8002552 <HAL_TIM_IC_CaptureCallback+0x5e>
 8002546:	4b2e      	ldr	r3, [pc, #184]	@ (8002600 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	4b2c      	ldr	r3, [pc, #176]	@ (80025fc <HAL_TIM_IC_CaptureCallback+0x108>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	e009      	b.n	8002566 <HAL_TIM_IC_CaptureCallback+0x72>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002558:	4b28      	ldr	r3, [pc, #160]	@ (80025fc <HAL_TIM_IC_CaptureCallback+0x108>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	1ad2      	subs	r2, r2, r3
 800255e:	4b28      	ldr	r3, [pc, #160]	@ (8002600 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4413      	add	r3, r2
 8002564:	3301      	adds	r3, #1
 8002566:	60fb      	str	r3, [r7, #12]
            float d = (pulse * 0.0343f) / 2.0f;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	ee07 3a90 	vmov	s15, r3
 800256e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002572:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8002604 <HAL_TIM_IC_CaptureCallback+0x110>
 8002576:	ee27 7a87 	vmul.f32	s14, s15, s14
 800257a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800257e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002582:	edc7 7a02 	vstr	s15, [r7, #8]
            buffer[index++] = d;
 8002586:	4b20      	ldr	r3, [pc, #128]	@ (8002608 <HAL_TIM_IC_CaptureCallback+0x114>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	1c5a      	adds	r2, r3, #1
 800258c:	491e      	ldr	r1, [pc, #120]	@ (8002608 <HAL_TIM_IC_CaptureCallback+0x114>)
 800258e:	600a      	str	r2, [r1, #0]
 8002590:	4a1e      	ldr	r2, [pc, #120]	@ (800260c <HAL_TIM_IC_CaptureCallback+0x118>)
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	601a      	str	r2, [r3, #0]
            if(index >= FILTER_SIZE) index = 0;
 800259a:	4b1b      	ldr	r3, [pc, #108]	@ (8002608 <HAL_TIM_IC_CaptureCallback+0x114>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2b04      	cmp	r3, #4
 80025a0:	dd02      	ble.n	80025a8 <HAL_TIM_IC_CaptureCallback+0xb4>
 80025a2:	4b19      	ldr	r3, [pc, #100]	@ (8002608 <HAL_TIM_IC_CaptureCallback+0x114>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
            float sum = 0;
 80025a8:	f04f 0300 	mov.w	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
            for(int i=0; i<FILTER_SIZE; i++) sum += buffer[i];
 80025ae:	2300      	movs	r3, #0
 80025b0:	613b      	str	r3, [r7, #16]
 80025b2:	e00e      	b.n	80025d2 <HAL_TIM_IC_CaptureCallback+0xde>
 80025b4:	4a15      	ldr	r2, [pc, #84]	@ (800260c <HAL_TIM_IC_CaptureCallback+0x118>)
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	edd3 7a00 	vldr	s15, [r3]
 80025c0:	ed97 7a05 	vldr	s14, [r7, #20]
 80025c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c8:	edc7 7a05 	vstr	s15, [r7, #20]
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	3301      	adds	r3, #1
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	2b04      	cmp	r3, #4
 80025d6:	dded      	ble.n	80025b4 <HAL_TIM_IC_CaptureCallback+0xc0>
            distance = sum / FILTER_SIZE;
 80025d8:	ed97 7a05 	vldr	s14, [r7, #20]
 80025dc:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80025e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002610 <HAL_TIM_IC_CaptureCallback+0x11c>)
 80025e6:	edc3 7a00 	vstr	s15, [r3]
}
 80025ea:	bf00      	nop
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40000400 	.word	0x40000400
 80025f8:	40020000 	.word	0x40020000
 80025fc:	200004f8 	.word	0x200004f8
 8002600:	200004fc 	.word	0x200004fc
 8002604:	3d0c7e28 	.word	0x3d0c7e28
 8002608:	200004f4 	.word	0x200004f4
 800260c:	200004e0 	.word	0x200004e0
 8002610:	2000047c 	.word	0x2000047c

08002614 <Reset_Handler>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
<<<<<<< HEAD
 80025f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002630 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025fc:	480d      	ldr	r0, [pc, #52]	@ (8002634 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025fe:	490e      	ldr	r1, [pc, #56]	@ (8002638 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002600:	4a0e      	ldr	r2, [pc, #56]	@ (800263c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002604:	e002      	b.n	800260c <LoopCopyDataInit>

08002606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800260a:	3304      	adds	r3, #4

0800260c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800260c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800260e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002610:	d3f9      	bcc.n	8002606 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002612:	4a0b      	ldr	r2, [pc, #44]	@ (8002640 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002614:	4c0b      	ldr	r4, [pc, #44]	@ (8002644 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002618:	e001      	b.n	800261e <LoopFillZerobss>

0800261a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800261a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800261c:	3204      	adds	r2, #4

0800261e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800261e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002620:	d3fb      	bcc.n	800261a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002622:	f7ff fef5 	bl	8002410 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002626:	f007 fd49 	bl	800a0bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800262a:	f7fe fe33 	bl	8001294 <main>
  bx  lr    
 800262e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002630:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002638:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800263c:	0800c6bc 	.word	0x0800c6bc
  ldr r2, =_sbss
 8002640:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002644:	20005030 	.word	0x20005030

08002648 <ADC_IRQHandler>:
=======
 8002614:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800264c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002618:	480d      	ldr	r0, [pc, #52]	@ (8002650 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800261a:	490e      	ldr	r1, [pc, #56]	@ (8002654 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800261c:	4a0e      	ldr	r2, [pc, #56]	@ (8002658 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800261e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002620:	e002      	b.n	8002628 <LoopCopyDataInit>

08002622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002626:	3304      	adds	r3, #4

08002628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800262a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800262c:	d3f9      	bcc.n	8002622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800262e:	4a0b      	ldr	r2, [pc, #44]	@ (800265c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002630:	4c0b      	ldr	r4, [pc, #44]	@ (8002660 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002634:	e001      	b.n	800263a <LoopFillZerobss>

08002636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002638:	3204      	adds	r2, #4

0800263a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800263a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800263c:	d3fb      	bcc.n	8002636 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800263e:	f7ff fef5 	bl	800242c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002642:	f007 fe35 	bl	800a2b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002646:	f7fe fe25 	bl	8001294 <main>
  bx  lr    
 800264a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800264c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002654:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002658:	0800c79c 	.word	0x0800c79c
  ldr r2, =_sbss
 800265c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002660:	20005038 	.word	0x20005038

08002664 <ADC_IRQHandler>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< HEAD
 8002648:	e7fe      	b.n	8002648 <ADC_IRQHandler>
	...

0800264c <HAL_Init>:
=======
 8002664:	e7fe      	b.n	8002664 <ADC_IRQHandler>
	...

08002668 <HAL_Init>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002650:	4b0e      	ldr	r3, [pc, #56]	@ (800268c <HAL_Init+0x40>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a0d      	ldr	r2, [pc, #52]	@ (800268c <HAL_Init+0x40>)
 8002656:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800265a:	6013      	str	r3, [r2, #0]
=======
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800266c:	4b0e      	ldr	r3, [pc, #56]	@ (80026a8 <HAL_Init+0x40>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a0d      	ldr	r2, [pc, #52]	@ (80026a8 <HAL_Init+0x40>)
 8002672:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002676:	6013      	str	r3, [r2, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
<<<<<<< HEAD
 800265c:	4b0b      	ldr	r3, [pc, #44]	@ (800268c <HAL_Init+0x40>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a0a      	ldr	r2, [pc, #40]	@ (800268c <HAL_Init+0x40>)
 8002662:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002666:	6013      	str	r3, [r2, #0]
=======
 8002678:	4b0b      	ldr	r3, [pc, #44]	@ (80026a8 <HAL_Init+0x40>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a0a      	ldr	r2, [pc, #40]	@ (80026a8 <HAL_Init+0x40>)
 800267e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002682:	6013      	str	r3, [r2, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 8002668:	4b08      	ldr	r3, [pc, #32]	@ (800268c <HAL_Init+0x40>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a07      	ldr	r2, [pc, #28]	@ (800268c <HAL_Init+0x40>)
 800266e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002672:	6013      	str	r3, [r2, #0]
=======
 8002684:	4b08      	ldr	r3, [pc, #32]	@ (80026a8 <HAL_Init+0x40>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a07      	ldr	r2, [pc, #28]	@ (80026a8 <HAL_Init+0x40>)
 800268a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800268e:	6013      	str	r3, [r2, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8002674:	2003      	movs	r0, #3
 8002676:	f000 f8d8 	bl	800282a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800267a:	200f      	movs	r0, #15
 800267c:	f7ff fd5c 	bl	8002138 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002680:	f7ff fb14 	bl	8001cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40023c00 	.word	0x40023c00

08002690 <HAL_IncTick>:
=======
 8002690:	2003      	movs	r0, #3
 8002692:	f000 f8d8 	bl	8002846 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002696:	200f      	movs	r0, #15
 8002698:	f7ff fd4c 	bl	8002134 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800269c:	f7ff fb0c 	bl	8001cb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40023c00 	.word	0x40023c00

080026ac <HAL_IncTick>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002694:	4b06      	ldr	r3, [pc, #24]	@ (80026b0 <HAL_IncTick+0x20>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	461a      	mov	r2, r3
 800269a:	4b06      	ldr	r3, [pc, #24]	@ (80026b4 <HAL_IncTick+0x24>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4413      	add	r3, r2
 80026a0:	4a04      	ldr	r2, [pc, #16]	@ (80026b4 <HAL_IncTick+0x24>)
 80026a2:	6013      	str	r3, [r2, #0]
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	20000008 	.word	0x20000008
 80026b4:	200004f8 	.word	0x200004f8

080026b8 <HAL_GetTick>:
=======
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026b0:	4b06      	ldr	r3, [pc, #24]	@ (80026cc <HAL_IncTick+0x20>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	461a      	mov	r2, r3
 80026b6:	4b06      	ldr	r3, [pc, #24]	@ (80026d0 <HAL_IncTick+0x24>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4413      	add	r3, r2
 80026bc:	4a04      	ldr	r2, [pc, #16]	@ (80026d0 <HAL_IncTick+0x24>)
 80026be:	6013      	str	r3, [r2, #0]
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	20000008 	.word	0x20000008
 80026d0:	20000500 	.word	0x20000500

080026d4 <HAL_GetTick>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  return uwTick;
 80026bc:	4b03      	ldr	r3, [pc, #12]	@ (80026cc <HAL_GetTick+0x14>)
 80026be:	681b      	ldr	r3, [r3, #0]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	200004f8 	.word	0x200004f8

080026d0 <__NVIC_SetPriorityGrouping>:
=======
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  return uwTick;
 80026d8:	4b03      	ldr	r3, [pc, #12]	@ (80026e8 <HAL_GetTick+0x14>)
 80026da:	681b      	ldr	r3, [r3, #0]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	20000500 	.word	0x20000500

080026ec <__NVIC_SetPriorityGrouping>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002714 <__NVIC_SetPriorityGrouping+0x44>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026ec:	4013      	ands	r3, r2
 80026ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002702:	4a04      	ldr	r2, [pc, #16]	@ (8002714 <__NVIC_SetPriorityGrouping+0x44>)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	60d3      	str	r3, [r2, #12]
}
 8002708:	bf00      	nop
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	e000ed00 	.word	0xe000ed00

08002718 <__NVIC_GetPriorityGrouping>:
=======
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002730 <__NVIC_SetPriorityGrouping+0x44>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002708:	4013      	ands	r3, r2
 800270a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002714:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002718:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800271c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800271e:	4a04      	ldr	r2, [pc, #16]	@ (8002730 <__NVIC_SetPriorityGrouping+0x44>)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	60d3      	str	r3, [r2, #12]
}
 8002724:	bf00      	nop
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <__NVIC_GetPriorityGrouping>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800271c:	4b04      	ldr	r3, [pc, #16]	@ (8002730 <__NVIC_GetPriorityGrouping+0x18>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	0a1b      	lsrs	r3, r3, #8
 8002722:	f003 0307 	and.w	r3, r3, #7
}
 8002726:	4618      	mov	r0, r3
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <__NVIC_EnableIRQ>:
=======
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002738:	4b04      	ldr	r3, [pc, #16]	@ (800274c <__NVIC_GetPriorityGrouping+0x18>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	0a1b      	lsrs	r3, r3, #8
 800273e:	f003 0307 	and.w	r3, r3, #7
}
 8002742:	4618      	mov	r0, r3
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <__NVIC_EnableIRQ>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800273e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002742:	2b00      	cmp	r3, #0
 8002744:	db0b      	blt.n	800275e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	f003 021f 	and.w	r2, r3, #31
 800274c:	4907      	ldr	r1, [pc, #28]	@ (800276c <__NVIC_EnableIRQ+0x38>)
 800274e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002752:	095b      	lsrs	r3, r3, #5
 8002754:	2001      	movs	r0, #1
 8002756:	fa00 f202 	lsl.w	r2, r0, r2
 800275a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	e000e100 	.word	0xe000e100

08002770 <__NVIC_SetPriority>:
=======
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800275a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275e:	2b00      	cmp	r3, #0
 8002760:	db0b      	blt.n	800277a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	f003 021f 	and.w	r2, r3, #31
 8002768:	4907      	ldr	r1, [pc, #28]	@ (8002788 <__NVIC_EnableIRQ+0x38>)
 800276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	2001      	movs	r0, #1
 8002772:	fa00 f202 	lsl.w	r2, r0, r2
 8002776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	e000e100 	.word	0xe000e100

0800278c <__NVIC_SetPriority>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	6039      	str	r1, [r7, #0]
 800277a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800277c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002780:	2b00      	cmp	r3, #0
 8002782:	db0a      	blt.n	800279a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	b2da      	uxtb	r2, r3
 8002788:	490c      	ldr	r1, [pc, #48]	@ (80027bc <__NVIC_SetPriority+0x4c>)
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	0112      	lsls	r2, r2, #4
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	440b      	add	r3, r1
 8002794:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
=======
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	6039      	str	r1, [r7, #0]
 8002796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279c:	2b00      	cmp	r3, #0
 800279e:	db0a      	blt.n	80027b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	490c      	ldr	r1, [pc, #48]	@ (80027d8 <__NVIC_SetPriority+0x4c>)
 80027a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027aa:	0112      	lsls	r2, r2, #4
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	440b      	add	r3, r1
 80027b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8002798:	e00a      	b.n	80027b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	b2da      	uxtb	r2, r3
 800279e:	4908      	ldr	r1, [pc, #32]	@ (80027c0 <__NVIC_SetPriority+0x50>)
 80027a0:	79fb      	ldrb	r3, [r7, #7]
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	3b04      	subs	r3, #4
 80027a8:	0112      	lsls	r2, r2, #4
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	440b      	add	r3, r1
 80027ae:	761a      	strb	r2, [r3, #24]
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	e000e100 	.word	0xe000e100
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <NVIC_EncodePriority>:
=======
 80027b4:	e00a      	b.n	80027cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	4908      	ldr	r1, [pc, #32]	@ (80027dc <__NVIC_SetPriority+0x50>)
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	3b04      	subs	r3, #4
 80027c4:	0112      	lsls	r2, r2, #4
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	440b      	add	r3, r1
 80027ca:	761a      	strb	r2, [r3, #24]
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	e000e100 	.word	0xe000e100
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <NVIC_EncodePriority>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 80027c4:	b480      	push	{r7}
 80027c6:	b089      	sub	sp, #36	@ 0x24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	61fb      	str	r3, [r7, #28]
=======
 80027e0:	b480      	push	{r7}
 80027e2:	b089      	sub	sp, #36	@ 0x24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	61fb      	str	r3, [r7, #28]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f1c3 0307 	rsb	r3, r3, #7
 80027de:	2b04      	cmp	r3, #4
 80027e0:	bf28      	it	cs
 80027e2:	2304      	movcs	r3, #4
 80027e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	3304      	adds	r3, #4
 80027ea:	2b06      	cmp	r3, #6
 80027ec:	d902      	bls.n	80027f4 <NVIC_EncodePriority+0x30>
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	3b03      	subs	r3, #3
 80027f2:	e000      	b.n	80027f6 <NVIC_EncodePriority+0x32>
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f8:	f04f 32ff 	mov.w	r2, #4294967295
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43da      	mvns	r2, r3
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	401a      	ands	r2, r3
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800280c:	f04f 31ff 	mov.w	r1, #4294967295
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	fa01 f303 	lsl.w	r3, r1, r3
 8002816:	43d9      	mvns	r1, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800281c:	4313      	orrs	r3, r2
         );
}
 800281e:	4618      	mov	r0, r3
 8002820:	3724      	adds	r7, #36	@ 0x24
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <HAL_NVIC_SetPriorityGrouping>:
=======
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	f1c3 0307 	rsb	r3, r3, #7
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	bf28      	it	cs
 80027fe:	2304      	movcs	r3, #4
 8002800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	3304      	adds	r3, #4
 8002806:	2b06      	cmp	r3, #6
 8002808:	d902      	bls.n	8002810 <NVIC_EncodePriority+0x30>
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	3b03      	subs	r3, #3
 800280e:	e000      	b.n	8002812 <NVIC_EncodePriority+0x32>
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002814:	f04f 32ff 	mov.w	r2, #4294967295
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43da      	mvns	r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	401a      	ands	r2, r3
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002828:	f04f 31ff 	mov.w	r1, #4294967295
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	fa01 f303 	lsl.w	r3, r1, r3
 8002832:	43d9      	mvns	r1, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002838:	4313      	orrs	r3, r2
         );
}
 800283a:	4618      	mov	r0, r3
 800283c:	3724      	adds	r7, #36	@ 0x24
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
=======
 8002846:	b580      	push	{r7, lr}
 8002848:	b082      	sub	sp, #8
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7ff ff4c 	bl	80026d0 <__NVIC_SetPriorityGrouping>
}
 8002838:	bf00      	nop
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_NVIC_SetPriority>:
=======
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7ff ff4c 	bl	80026ec <__NVIC_SetPriorityGrouping>
}
 8002854:	bf00      	nop
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <HAL_NVIC_SetPriority>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
 800284c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]
=======
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
 8002868:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800286a:	2300      	movs	r3, #0
 800286c:	617b      	str	r3, [r7, #20]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8002852:	f7ff ff61 	bl	8002718 <__NVIC_GetPriorityGrouping>
 8002856:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	68b9      	ldr	r1, [r7, #8]
 800285c:	6978      	ldr	r0, [r7, #20]
 800285e:	f7ff ffb1 	bl	80027c4 <NVIC_EncodePriority>
 8002862:	4602      	mov	r2, r0
 8002864:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002868:	4611      	mov	r1, r2
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff ff80 	bl	8002770 <__NVIC_SetPriority>
}
 8002870:	bf00      	nop
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_NVIC_EnableIRQ>:
=======
 800286e:	f7ff ff61 	bl	8002734 <__NVIC_GetPriorityGrouping>
 8002872:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	68b9      	ldr	r1, [r7, #8]
 8002878:	6978      	ldr	r0, [r7, #20]
 800287a:	f7ff ffb1 	bl	80027e0 <NVIC_EncodePriority>
 800287e:	4602      	mov	r2, r0
 8002880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002884:	4611      	mov	r1, r2
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff ff80 	bl	800278c <__NVIC_SetPriority>
}
 800288c:	bf00      	nop
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_NVIC_EnableIRQ>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	71fb      	strb	r3, [r7, #7]
=======
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	71fb      	strb	r3, [r7, #7]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8002882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff ff54 	bl	8002734 <__NVIC_EnableIRQ>
}
 800288c:	bf00      	nop
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_DMA_Abort>:
=======
 800289e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff ff54 	bl	8002750 <__NVIC_EnableIRQ>
}
 80028a8:	bf00      	nop
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <HAL_DMA_Abort>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80028a2:	f7ff ff09 	bl	80026b8 <HAL_GetTick>
 80028a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d008      	beq.n	80028c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2280      	movs	r2, #128	@ 0x80
 80028b8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e052      	b.n	800296c <HAL_DMA_Abort+0xd8>
=======
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80028be:	f7ff ff09 	bl	80026d4 <HAL_GetTick>
 80028c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d008      	beq.n	80028e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2280      	movs	r2, #128	@ 0x80
 80028d4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e052      	b.n	8002988 <HAL_DMA_Abort+0xd8>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
<<<<<<< HEAD
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0216 	bic.w	r2, r2, #22
 80028d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	695a      	ldr	r2, [r3, #20]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d103      	bne.n	80028f6 <HAL_DMA_Abort+0x62>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d007      	beq.n	8002906 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 0208 	bic.w	r2, r2, #8
 8002904:	601a      	str	r2, [r3, #0]
=======
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 0216 	bic.w	r2, r2, #22
 80028f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	695a      	ldr	r2, [r3, #20]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002900:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002906:	2b00      	cmp	r3, #0
 8002908:	d103      	bne.n	8002912 <HAL_DMA_Abort+0x62>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800290e:	2b00      	cmp	r3, #0
 8002910:	d007      	beq.n	8002922 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0208 	bic.w	r2, r2, #8
 8002920:	601a      	str	r2, [r3, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
<<<<<<< HEAD
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0201 	bic.w	r2, r2, #1
 8002914:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002916:	e013      	b.n	8002940 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002918:	f7ff fece 	bl	80026b8 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b05      	cmp	r3, #5
 8002924:	d90c      	bls.n	8002940 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2220      	movs	r2, #32
 800292a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2203      	movs	r2, #3
 8002930:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e015      	b.n	800296c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1e4      	bne.n	8002918 <HAL_DMA_Abort+0x84>
=======
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0201 	bic.w	r2, r2, #1
 8002930:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002932:	e013      	b.n	800295c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002934:	f7ff fece 	bl	80026d4 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b05      	cmp	r3, #5
 8002940:	d90c      	bls.n	800295c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2220      	movs	r2, #32
 8002946:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2203      	movs	r2, #3
 800294c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e015      	b.n	8002988 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1e4      	bne.n	8002934 <HAL_DMA_Abort+0x84>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
<<<<<<< HEAD
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002952:	223f      	movs	r2, #63	@ 0x3f
 8002954:	409a      	lsls	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <HAL_DMA_Abort_IT>:
=======
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800296e:	223f      	movs	r2, #63	@ 0x3f
 8002970:	409a      	lsls	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_DMA_Abort_IT>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d004      	beq.n	8002992 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2280      	movs	r2, #128	@ 0x80
 800298c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e00c      	b.n	80029ac <HAL_DMA_Abort_IT+0x38>
=======
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d004      	beq.n	80029ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2280      	movs	r2, #128	@ 0x80
 80029a8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e00c      	b.n	80029c8 <HAL_DMA_Abort_IT+0x38>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
<<<<<<< HEAD
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2205      	movs	r2, #5
 8002996:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0201 	bic.w	r2, r2, #1
 80029a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <HAL_GPIO_Init>:
=======
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2205      	movs	r2, #5
 80029b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0201 	bic.w	r2, r2, #1
 80029c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <HAL_GPIO_Init>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 80029b8:	b480      	push	{r7}
 80029ba:	b089      	sub	sp, #36	@ 0x24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	61bb      	str	r3, [r7, #24]
=======
 80029d4:	b480      	push	{r7}
 80029d6:	b089      	sub	sp, #36	@ 0x24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029de:	2300      	movs	r3, #0
 80029e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	61bb      	str	r3, [r7, #24]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< HEAD
 80029ce:	2300      	movs	r3, #0
 80029d0:	61fb      	str	r3, [r7, #28]
 80029d2:	e159      	b.n	8002c88 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029d4:	2201      	movs	r2, #1
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	4013      	ands	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	f040 8148 	bne.w	8002c82 <HAL_GPIO_Init+0x2ca>
=======
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]
 80029ee:	e159      	b.n	8002ca4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029f0:	2201      	movs	r2, #1
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	4013      	ands	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	f040 8148 	bne.w	8002c9e <HAL_GPIO_Init+0x2ca>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
<<<<<<< HEAD
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d005      	beq.n	8002a0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d130      	bne.n	8002a6c <HAL_GPIO_Init+0xb4>
=======
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d005      	beq.n	8002a26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d130      	bne.n	8002a88 <HAL_GPIO_Init+0xb4>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< HEAD
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	2203      	movs	r2, #3
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a40:	2201      	movs	r2, #1
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	091b      	lsrs	r3, r3, #4
 8002a56:	f003 0201 	and.w	r2, r3, #1
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 0303 	and.w	r3, r3, #3
 8002a74:	2b03      	cmp	r3, #3
 8002a76:	d017      	beq.n	8002aa8 <HAL_GPIO_Init+0xf0>
=======
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	2203      	movs	r2, #3
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43db      	mvns	r3, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	091b      	lsrs	r3, r3, #4
 8002a72:	f003 0201 	and.w	r2, r3, #1
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 0303 	and.w	r3, r3, #3
 8002a90:	2b03      	cmp	r3, #3
 8002a92:	d017      	beq.n	8002ac4 <HAL_GPIO_Init+0xf0>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
<<<<<<< HEAD
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	2203      	movs	r2, #3
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	60da      	str	r2, [r3, #12]
=======
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	60da      	str	r2, [r3, #12]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< HEAD
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 0303 	and.w	r3, r3, #3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d123      	bne.n	8002afc <HAL_GPIO_Init+0x144>
=======
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 0303 	and.w	r3, r3, #3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d123      	bne.n	8002b18 <HAL_GPIO_Init+0x144>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< HEAD
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	08da      	lsrs	r2, r3, #3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3208      	adds	r2, #8
 8002abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	220f      	movs	r2, #15
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	691a      	ldr	r2, [r3, #16]
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	08da      	lsrs	r2, r3, #3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3208      	adds	r2, #8
 8002af6:	69b9      	ldr	r1, [r7, #24]
 8002af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	08da      	lsrs	r2, r3, #3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3208      	adds	r2, #8
 8002ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	220f      	movs	r2, #15
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	691a      	ldr	r2, [r3, #16]
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	08da      	lsrs	r2, r3, #3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3208      	adds	r2, #8
 8002b12:	69b9      	ldr	r1, [r7, #24]
 8002b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	2203      	movs	r2, #3
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 0203 	and.w	r2, r3, #3
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	601a      	str	r2, [r3, #0]
=======
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	2203      	movs	r2, #3
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f003 0203 	and.w	r2, r3, #3
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	601a      	str	r2, [r3, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
<<<<<<< HEAD
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 80a2 	beq.w	8002c82 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	4b57      	ldr	r3, [pc, #348]	@ (8002ca0 <HAL_GPIO_Init+0x2e8>)
 8002b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b46:	4a56      	ldr	r2, [pc, #344]	@ (8002ca0 <HAL_GPIO_Init+0x2e8>)
 8002b48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b4e:	4b54      	ldr	r3, [pc, #336]	@ (8002ca0 <HAL_GPIO_Init+0x2e8>)
 8002b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b5a:	4a52      	ldr	r2, [pc, #328]	@ (8002ca4 <HAL_GPIO_Init+0x2ec>)
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	089b      	lsrs	r3, r3, #2
 8002b60:	3302      	adds	r3, #2
 8002b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	220f      	movs	r2, #15
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43db      	mvns	r3, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a49      	ldr	r2, [pc, #292]	@ (8002ca8 <HAL_GPIO_Init+0x2f0>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d019      	beq.n	8002bba <HAL_GPIO_Init+0x202>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a48      	ldr	r2, [pc, #288]	@ (8002cac <HAL_GPIO_Init+0x2f4>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d013      	beq.n	8002bb6 <HAL_GPIO_Init+0x1fe>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a47      	ldr	r2, [pc, #284]	@ (8002cb0 <HAL_GPIO_Init+0x2f8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d00d      	beq.n	8002bb2 <HAL_GPIO_Init+0x1fa>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a46      	ldr	r2, [pc, #280]	@ (8002cb4 <HAL_GPIO_Init+0x2fc>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d007      	beq.n	8002bae <HAL_GPIO_Init+0x1f6>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a45      	ldr	r2, [pc, #276]	@ (8002cb8 <HAL_GPIO_Init+0x300>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d101      	bne.n	8002baa <HAL_GPIO_Init+0x1f2>
 8002ba6:	2304      	movs	r3, #4
 8002ba8:	e008      	b.n	8002bbc <HAL_GPIO_Init+0x204>
 8002baa:	2307      	movs	r3, #7
 8002bac:	e006      	b.n	8002bbc <HAL_GPIO_Init+0x204>
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e004      	b.n	8002bbc <HAL_GPIO_Init+0x204>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e002      	b.n	8002bbc <HAL_GPIO_Init+0x204>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e000      	b.n	8002bbc <HAL_GPIO_Init+0x204>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	f002 0203 	and.w	r2, r2, #3
 8002bc2:	0092      	lsls	r2, r2, #2
 8002bc4:	4093      	lsls	r3, r2
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bcc:	4935      	ldr	r1, [pc, #212]	@ (8002ca4 <HAL_GPIO_Init+0x2ec>)
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	089b      	lsrs	r3, r3, #2
 8002bd2:	3302      	adds	r3, #2
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bda:	4b38      	ldr	r3, [pc, #224]	@ (8002cbc <HAL_GPIO_Init+0x304>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	43db      	mvns	r3, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4013      	ands	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bfe:	4a2f      	ldr	r2, [pc, #188]	@ (8002cbc <HAL_GPIO_Init+0x304>)
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c04:	4b2d      	ldr	r3, [pc, #180]	@ (8002cbc <HAL_GPIO_Init+0x304>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4013      	ands	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d003      	beq.n	8002c28 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c28:	4a24      	ldr	r2, [pc, #144]	@ (8002cbc <HAL_GPIO_Init+0x304>)
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c2e:	4b23      	ldr	r3, [pc, #140]	@ (8002cbc <HAL_GPIO_Init+0x304>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	43db      	mvns	r3, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c52:	4a1a      	ldr	r2, [pc, #104]	@ (8002cbc <HAL_GPIO_Init+0x304>)
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c58:	4b18      	ldr	r3, [pc, #96]	@ (8002cbc <HAL_GPIO_Init+0x304>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	43db      	mvns	r3, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c7c:	4a0f      	ldr	r2, [pc, #60]	@ (8002cbc <HAL_GPIO_Init+0x304>)
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	3301      	adds	r3, #1
 8002c86:	61fb      	str	r3, [r7, #28]
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	2b0f      	cmp	r3, #15
 8002c8c:	f67f aea2 	bls.w	80029d4 <HAL_GPIO_Init+0x1c>
=======
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 80a2 	beq.w	8002c9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	4b57      	ldr	r3, [pc, #348]	@ (8002cbc <HAL_GPIO_Init+0x2e8>)
 8002b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b62:	4a56      	ldr	r2, [pc, #344]	@ (8002cbc <HAL_GPIO_Init+0x2e8>)
 8002b64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b68:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b6a:	4b54      	ldr	r3, [pc, #336]	@ (8002cbc <HAL_GPIO_Init+0x2e8>)
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b76:	4a52      	ldr	r2, [pc, #328]	@ (8002cc0 <HAL_GPIO_Init+0x2ec>)
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	089b      	lsrs	r3, r3, #2
 8002b7c:	3302      	adds	r3, #2
 8002b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	220f      	movs	r2, #15
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	43db      	mvns	r3, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4013      	ands	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a49      	ldr	r2, [pc, #292]	@ (8002cc4 <HAL_GPIO_Init+0x2f0>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d019      	beq.n	8002bd6 <HAL_GPIO_Init+0x202>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a48      	ldr	r2, [pc, #288]	@ (8002cc8 <HAL_GPIO_Init+0x2f4>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d013      	beq.n	8002bd2 <HAL_GPIO_Init+0x1fe>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a47      	ldr	r2, [pc, #284]	@ (8002ccc <HAL_GPIO_Init+0x2f8>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d00d      	beq.n	8002bce <HAL_GPIO_Init+0x1fa>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a46      	ldr	r2, [pc, #280]	@ (8002cd0 <HAL_GPIO_Init+0x2fc>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d007      	beq.n	8002bca <HAL_GPIO_Init+0x1f6>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a45      	ldr	r2, [pc, #276]	@ (8002cd4 <HAL_GPIO_Init+0x300>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d101      	bne.n	8002bc6 <HAL_GPIO_Init+0x1f2>
 8002bc2:	2304      	movs	r3, #4
 8002bc4:	e008      	b.n	8002bd8 <HAL_GPIO_Init+0x204>
 8002bc6:	2307      	movs	r3, #7
 8002bc8:	e006      	b.n	8002bd8 <HAL_GPIO_Init+0x204>
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e004      	b.n	8002bd8 <HAL_GPIO_Init+0x204>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e002      	b.n	8002bd8 <HAL_GPIO_Init+0x204>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <HAL_GPIO_Init+0x204>
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	69fa      	ldr	r2, [r7, #28]
 8002bda:	f002 0203 	and.w	r2, r2, #3
 8002bde:	0092      	lsls	r2, r2, #2
 8002be0:	4093      	lsls	r3, r2
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002be8:	4935      	ldr	r1, [pc, #212]	@ (8002cc0 <HAL_GPIO_Init+0x2ec>)
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	089b      	lsrs	r3, r3, #2
 8002bee:	3302      	adds	r3, #2
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bf6:	4b38      	ldr	r3, [pc, #224]	@ (8002cd8 <HAL_GPIO_Init+0x304>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4013      	ands	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c1a:	4a2f      	ldr	r2, [pc, #188]	@ (8002cd8 <HAL_GPIO_Init+0x304>)
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c20:	4b2d      	ldr	r3, [pc, #180]	@ (8002cd8 <HAL_GPIO_Init+0x304>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c44:	4a24      	ldr	r2, [pc, #144]	@ (8002cd8 <HAL_GPIO_Init+0x304>)
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c4a:	4b23      	ldr	r3, [pc, #140]	@ (8002cd8 <HAL_GPIO_Init+0x304>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	43db      	mvns	r3, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4013      	ands	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c6e:	4a1a      	ldr	r2, [pc, #104]	@ (8002cd8 <HAL_GPIO_Init+0x304>)
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c74:	4b18      	ldr	r3, [pc, #96]	@ (8002cd8 <HAL_GPIO_Init+0x304>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c98:	4a0f      	ldr	r2, [pc, #60]	@ (8002cd8 <HAL_GPIO_Init+0x304>)
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	61fb      	str	r3, [r7, #28]
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	2b0f      	cmp	r3, #15
 8002ca8:	f67f aea2 	bls.w	80029f0 <HAL_GPIO_Init+0x1c>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      }
    }
  }
}
<<<<<<< HEAD
 8002c90:	bf00      	nop
 8002c92:	bf00      	nop
 8002c94:	3724      	adds	r7, #36	@ 0x24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	40013800 	.word	0x40013800
 8002ca8:	40020000 	.word	0x40020000
 8002cac:	40020400 	.word	0x40020400
 8002cb0:	40020800 	.word	0x40020800
 8002cb4:	40020c00 	.word	0x40020c00
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	40013c00 	.word	0x40013c00

08002cc0 <HAL_GPIO_ReadPin>:
=======
 8002cac:	bf00      	nop
 8002cae:	bf00      	nop
 8002cb0:	3724      	adds	r7, #36	@ 0x24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	40013800 	.word	0x40013800
 8002cc4:	40020000 	.word	0x40020000
 8002cc8:	40020400 	.word	0x40020400
 8002ccc:	40020800 	.word	0x40020800
 8002cd0:	40020c00 	.word	0x40020c00
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	40013c00 	.word	0x40013c00

08002cdc <HAL_GPIO_ReadPin>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	460b      	mov	r3, r1
 8002cca:	807b      	strh	r3, [r7, #2]
=======
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	807b      	strh	r3, [r7, #2]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
<<<<<<< HEAD
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691a      	ldr	r2, [r3, #16]
 8002cd0:	887b      	ldrh	r3, [r7, #2]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d002      	beq.n	8002cde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	73fb      	strb	r3, [r7, #15]
 8002cdc:	e001      	b.n	8002ce2 <HAL_GPIO_ReadPin+0x22>
=======
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	887b      	ldrh	r3, [r7, #2]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	73fb      	strb	r3, [r7, #15]
 8002cf8:	e001      	b.n	8002cfe <HAL_GPIO_ReadPin+0x22>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
<<<<<<< HEAD
 8002cde:	2300      	movs	r3, #0
 8002ce0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <HAL_GPIO_WritePin>:
=======
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_GPIO_WritePin>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	807b      	strh	r3, [r7, #2]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	707b      	strb	r3, [r7, #1]
=======
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	460b      	mov	r3, r1
 8002d16:	807b      	strh	r3, [r7, #2]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	707b      	strb	r3, [r7, #1]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 8002d00:	787b      	ldrb	r3, [r7, #1]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d06:	887a      	ldrh	r2, [r7, #2]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	619a      	str	r2, [r3, #24]
=======
 8002d1c:	787b      	ldrb	r3, [r7, #1]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d22:	887a      	ldrh	r2, [r7, #2]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	619a      	str	r2, [r3, #24]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
<<<<<<< HEAD
 8002d0c:	e003      	b.n	8002d16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d0e:	887b      	ldrh	r3, [r7, #2]
 8002d10:	041a      	lsls	r2, r3, #16
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	619a      	str	r2, [r3, #24]
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
	...

08002d24 <HAL_I2C_Init>:
=======
 8002d28:	e003      	b.n	8002d32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d2a:	887b      	ldrh	r3, [r7, #2]
 8002d2c:	041a      	lsls	r2, r3, #16
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	619a      	str	r2, [r3, #24]
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
	...

08002d40 <HAL_I2C_Init>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
=======
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
<<<<<<< HEAD
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e12b      	b.n	8002f8e <HAL_I2C_Init+0x26a>
=======
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e12b      	b.n	8002faa <HAL_I2C_Init+0x26a>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
<<<<<<< HEAD
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d106      	bne.n	8002d50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d106      	bne.n	8002d6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
<<<<<<< HEAD
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7fe ffda 	bl	8001d04 <HAL_I2C_MspInit>
=======
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7fe ffd2 	bl	8001d10 <HAL_I2C_MspInit>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
<<<<<<< HEAD
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2224      	movs	r2, #36	@ 0x24
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0201 	bic.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d88:	f001 f888 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 8002d8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	4a81      	ldr	r2, [pc, #516]	@ (8002f98 <HAL_I2C_Init+0x274>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d807      	bhi.n	8002da8 <HAL_I2C_Init+0x84>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4a80      	ldr	r2, [pc, #512]	@ (8002f9c <HAL_I2C_Init+0x278>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	bf94      	ite	ls
 8002da0:	2301      	movls	r3, #1
 8002da2:	2300      	movhi	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	e006      	b.n	8002db6 <HAL_I2C_Init+0x92>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4a7d      	ldr	r2, [pc, #500]	@ (8002fa0 <HAL_I2C_Init+0x27c>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	bf94      	ite	ls
 8002db0:	2301      	movls	r3, #1
 8002db2:	2300      	movhi	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e0e7      	b.n	8002f8e <HAL_I2C_Init+0x26a>
=======
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2224      	movs	r2, #36	@ 0x24
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0201 	bic.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002da2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002da4:	f001 f8da 	bl	8003f5c <HAL_RCC_GetPCLK1Freq>
 8002da8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	4a81      	ldr	r2, [pc, #516]	@ (8002fb4 <HAL_I2C_Init+0x274>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d807      	bhi.n	8002dc4 <HAL_I2C_Init+0x84>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4a80      	ldr	r2, [pc, #512]	@ (8002fb8 <HAL_I2C_Init+0x278>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	bf94      	ite	ls
 8002dbc:	2301      	movls	r3, #1
 8002dbe:	2300      	movhi	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	e006      	b.n	8002dd2 <HAL_I2C_Init+0x92>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4a7d      	ldr	r2, [pc, #500]	@ (8002fbc <HAL_I2C_Init+0x27c>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	bf94      	ite	ls
 8002dcc:	2301      	movls	r3, #1
 8002dce:	2300      	movhi	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e0e7      	b.n	8002faa <HAL_I2C_Init+0x26a>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
<<<<<<< HEAD
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	4a78      	ldr	r2, [pc, #480]	@ (8002fa4 <HAL_I2C_Init+0x280>)
 8002dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc6:	0c9b      	lsrs	r3, r3, #18
 8002dc8:	60bb      	str	r3, [r7, #8]
=======
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	4a78      	ldr	r2, [pc, #480]	@ (8002fc0 <HAL_I2C_Init+0x280>)
 8002dde:	fba2 2303 	umull	r2, r3, r2, r3
 8002de2:	0c9b      	lsrs	r3, r3, #18
 8002de4:	60bb      	str	r3, [r7, #8]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
<<<<<<< HEAD
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	605a      	str	r2, [r3, #4]
=======
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	605a      	str	r2, [r3, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
<<<<<<< HEAD
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	4a6a      	ldr	r2, [pc, #424]	@ (8002f98 <HAL_I2C_Init+0x274>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d802      	bhi.n	8002df8 <HAL_I2C_Init+0xd4>
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	3301      	adds	r3, #1
 8002df6:	e009      	b.n	8002e0c <HAL_I2C_Init+0xe8>
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002dfe:	fb02 f303 	mul.w	r3, r2, r3
 8002e02:	4a69      	ldr	r2, [pc, #420]	@ (8002fa8 <HAL_I2C_Init+0x284>)
 8002e04:	fba2 2303 	umull	r2, r3, r2, r3
 8002e08:	099b      	lsrs	r3, r3, #6
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6812      	ldr	r2, [r2, #0]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	6213      	str	r3, [r2, #32]
=======
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	4a6a      	ldr	r2, [pc, #424]	@ (8002fb4 <HAL_I2C_Init+0x274>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d802      	bhi.n	8002e14 <HAL_I2C_Init+0xd4>
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	3301      	adds	r3, #1
 8002e12:	e009      	b.n	8002e28 <HAL_I2C_Init+0xe8>
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002e1a:	fb02 f303 	mul.w	r3, r2, r3
 8002e1e:	4a69      	ldr	r2, [pc, #420]	@ (8002fc4 <HAL_I2C_Init+0x284>)
 8002e20:	fba2 2303 	umull	r2, r3, r2, r3
 8002e24:	099b      	lsrs	r3, r3, #6
 8002e26:	3301      	adds	r3, #1
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6812      	ldr	r2, [r2, #0]
 8002e2c:	430b      	orrs	r3, r1
 8002e2e:	6213      	str	r3, [r2, #32]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
<<<<<<< HEAD
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002e1e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	495c      	ldr	r1, [pc, #368]	@ (8002f98 <HAL_I2C_Init+0x274>)
 8002e28:	428b      	cmp	r3, r1
 8002e2a:	d819      	bhi.n	8002e60 <HAL_I2C_Init+0x13c>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	1e59      	subs	r1, r3, #1
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e3a:	1c59      	adds	r1, r3, #1
 8002e3c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002e40:	400b      	ands	r3, r1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <HAL_I2C_Init+0x138>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	1e59      	subs	r1, r3, #1
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e54:	3301      	adds	r3, #1
 8002e56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e5a:	e051      	b.n	8002f00 <HAL_I2C_Init+0x1dc>
 8002e5c:	2304      	movs	r3, #4
 8002e5e:	e04f      	b.n	8002f00 <HAL_I2C_Init+0x1dc>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d111      	bne.n	8002e8c <HAL_I2C_Init+0x168>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	1e58      	subs	r0, r3, #1
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6859      	ldr	r1, [r3, #4]
 8002e70:	460b      	mov	r3, r1
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	440b      	add	r3, r1
 8002e76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	bf0c      	ite	eq
 8002e84:	2301      	moveq	r3, #1
 8002e86:	2300      	movne	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	e012      	b.n	8002eb2 <HAL_I2C_Init+0x18e>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	1e58      	subs	r0, r3, #1
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6859      	ldr	r1, [r3, #4]
 8002e94:	460b      	mov	r3, r1
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	0099      	lsls	r1, r3, #2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	bf0c      	ite	eq
 8002eac:	2301      	moveq	r3, #1
 8002eae:	2300      	movne	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_I2C_Init+0x196>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e022      	b.n	8002f00 <HAL_I2C_Init+0x1dc>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10e      	bne.n	8002ee0 <HAL_I2C_Init+0x1bc>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1e58      	subs	r0, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6859      	ldr	r1, [r3, #4]
 8002eca:	460b      	mov	r3, r1
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	440b      	add	r3, r1
 8002ed0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ede:	e00f      	b.n	8002f00 <HAL_I2C_Init+0x1dc>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	1e58      	subs	r0, r3, #1
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6859      	ldr	r1, [r3, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	0099      	lsls	r1, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002efc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	6809      	ldr	r1, [r1, #0]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	61cb      	str	r3, [r1, #28]
=======
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002e3a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	495c      	ldr	r1, [pc, #368]	@ (8002fb4 <HAL_I2C_Init+0x274>)
 8002e44:	428b      	cmp	r3, r1
 8002e46:	d819      	bhi.n	8002e7c <HAL_I2C_Init+0x13c>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	1e59      	subs	r1, r3, #1
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e56:	1c59      	adds	r1, r3, #1
 8002e58:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002e5c:	400b      	ands	r3, r1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00a      	beq.n	8002e78 <HAL_I2C_Init+0x138>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	1e59      	subs	r1, r3, #1
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e70:	3301      	adds	r3, #1
 8002e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e76:	e051      	b.n	8002f1c <HAL_I2C_Init+0x1dc>
 8002e78:	2304      	movs	r3, #4
 8002e7a:	e04f      	b.n	8002f1c <HAL_I2C_Init+0x1dc>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d111      	bne.n	8002ea8 <HAL_I2C_Init+0x168>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	1e58      	subs	r0, r3, #1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6859      	ldr	r1, [r3, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	440b      	add	r3, r1
 8002e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e96:	3301      	adds	r3, #1
 8002e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	bf0c      	ite	eq
 8002ea0:	2301      	moveq	r3, #1
 8002ea2:	2300      	movne	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	e012      	b.n	8002ece <HAL_I2C_Init+0x18e>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	1e58      	subs	r0, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6859      	ldr	r1, [r3, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	0099      	lsls	r1, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	bf0c      	ite	eq
 8002ec8:	2301      	moveq	r3, #1
 8002eca:	2300      	movne	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <HAL_I2C_Init+0x196>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e022      	b.n	8002f1c <HAL_I2C_Init+0x1dc>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10e      	bne.n	8002efc <HAL_I2C_Init+0x1bc>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	1e58      	subs	r0, r3, #1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6859      	ldr	r1, [r3, #4]
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	440b      	add	r3, r1
 8002eec:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002efa:	e00f      	b.n	8002f1c <HAL_I2C_Init+0x1dc>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	1e58      	subs	r0, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6859      	ldr	r1, [r3, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	0099      	lsls	r1, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f12:	3301      	adds	r3, #1
 8002f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	6809      	ldr	r1, [r1, #0]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	61cb      	str	r3, [r1, #28]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
<<<<<<< HEAD
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69da      	ldr	r2, [r3, #28]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	430a      	orrs	r2, r1
 8002f22:	601a      	str	r2, [r3, #0]
=======
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69da      	ldr	r2, [r3, #28]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	601a      	str	r2, [r3, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
<<<<<<< HEAD
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002f2e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6911      	ldr	r1, [r2, #16]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	68d2      	ldr	r2, [r2, #12]
 8002f3a:	4311      	orrs	r1, r2
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6812      	ldr	r2, [r2, #0]
 8002f40:	430b      	orrs	r3, r1
 8002f42:	6093      	str	r3, [r2, #8]
=======
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002f4a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6911      	ldr	r1, [r2, #16]
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	68d2      	ldr	r2, [r2, #12]
 8002f56:	4311      	orrs	r1, r2
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	430b      	orrs	r3, r1
 8002f5e:	6093      	str	r3, [r2, #8]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
<<<<<<< HEAD
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695a      	ldr	r2, [r3, #20]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0201 	orr.w	r2, r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	000186a0 	.word	0x000186a0
 8002f9c:	001e847f 	.word	0x001e847f
 8002fa0:	003d08ff 	.word	0x003d08ff
 8002fa4:	431bde83 	.word	0x431bde83
 8002fa8:	10624dd3 	.word	0x10624dd3

08002fac <HAL_I2C_Master_Transmit>:
=======
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695a      	ldr	r2, [r3, #20]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2220      	movs	r2, #32
 8002f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	000186a0 	.word	0x000186a0
 8002fb8:	001e847f 	.word	0x001e847f
 8002fbc:	003d08ff 	.word	0x003d08ff
 8002fc0:	431bde83 	.word	0x431bde83
 8002fc4:	10624dd3 	.word	0x10624dd3

08002fc8 <HAL_I2C_Master_Transmit>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b088      	sub	sp, #32
 8002fb0:	af02      	add	r7, sp, #8
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	607a      	str	r2, [r7, #4]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	460b      	mov	r3, r1
 8002fba:	817b      	strh	r3, [r7, #10]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fc0:	f7ff fb7a 	bl	80026b8 <HAL_GetTick>
 8002fc4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b20      	cmp	r3, #32
 8002fd0:	f040 80e0 	bne.w	8003194 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	2319      	movs	r3, #25
 8002fda:	2201      	movs	r2, #1
 8002fdc:	4970      	ldr	r1, [pc, #448]	@ (80031a0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 f964 	bl	80032ac <I2C_WaitOnFlagUntilTimeout>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002fea:	2302      	movs	r3, #2
 8002fec:	e0d3      	b.n	8003196 <HAL_I2C_Master_Transmit+0x1ea>
=======
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b088      	sub	sp, #32
 8002fcc:	af02      	add	r7, sp, #8
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	607a      	str	r2, [r7, #4]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	817b      	strh	r3, [r7, #10]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fdc:	f7ff fb7a 	bl	80026d4 <HAL_GetTick>
 8002fe0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b20      	cmp	r3, #32
 8002fec:	f040 80e0 	bne.w	80031b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	2319      	movs	r3, #25
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	4970      	ldr	r1, [pc, #448]	@ (80031bc <HAL_I2C_Master_Transmit+0x1f4>)
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 f964 	bl	80032c8 <I2C_WaitOnFlagUntilTimeout>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003006:	2302      	movs	r3, #2
 8003008:	e0d3      	b.n	80031b2 <HAL_I2C_Master_Transmit+0x1ea>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< HEAD
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_I2C_Master_Transmit+0x50>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e0cc      	b.n	8003196 <HAL_I2C_Master_Transmit+0x1ea>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b01      	cmp	r3, #1
 8003010:	d007      	beq.n	8003022 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f042 0201 	orr.w	r2, r2, #1
 8003020:	601a      	str	r2, [r3, #0]
=======
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <HAL_I2C_Master_Transmit+0x50>
 8003014:	2302      	movs	r3, #2
 8003016:	e0cc      	b.n	80031b2 <HAL_I2C_Master_Transmit+0x1ea>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b01      	cmp	r3, #1
 800302c:	d007      	beq.n	800303e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f042 0201 	orr.w	r2, r2, #1
 800303c:	601a      	str	r2, [r3, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
<<<<<<< HEAD
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003030:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2221      	movs	r2, #33	@ 0x21
 8003036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2210      	movs	r2, #16
 800303e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	893a      	ldrh	r2, [r7, #8]
 8003052:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003058:	b29a      	uxth	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	4a50      	ldr	r2, [pc, #320]	@ (80031a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003062:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003064:	8979      	ldrh	r1, [r7, #10]
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	6a3a      	ldr	r2, [r7, #32]
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 f89c 	bl	80031a8 <I2C_MasterRequestWrite>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e08d      	b.n	8003196 <HAL_I2C_Master_Transmit+0x1ea>
=======
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800304c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2221      	movs	r2, #33	@ 0x21
 8003052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2210      	movs	r2, #16
 800305a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	893a      	ldrh	r2, [r7, #8]
 800306e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	4a50      	ldr	r2, [pc, #320]	@ (80031c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800307e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003080:	8979      	ldrh	r1, [r7, #10]
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	6a3a      	ldr	r2, [r7, #32]
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 f89c 	bl	80031c4 <I2C_MasterRequestWrite>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e08d      	b.n	80031b2 <HAL_I2C_Master_Transmit+0x1ea>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
 800307a:	2300      	movs	r3, #0
 800307c:	613b      	str	r3, [r7, #16]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	613b      	str	r3, [r7, #16]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003090:	e066      	b.n	8003160 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	6a39      	ldr	r1, [r7, #32]
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f000 f9de 	bl	8003458 <I2C_WaitOnTXEFlagUntilTimeout>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00d      	beq.n	80030be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d107      	bne.n	80030ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e06b      	b.n	8003196 <HAL_I2C_Master_Transmit+0x1ea>
=======
 8003096:	2300      	movs	r3, #0
 8003098:	613b      	str	r3, [r7, #16]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	613b      	str	r3, [r7, #16]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	613b      	str	r3, [r7, #16]
 80030aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80030ac:	e066      	b.n	800317c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	6a39      	ldr	r1, [r7, #32]
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 fa22 	bl	80034fc <I2C_WaitOnTXEFlagUntilTimeout>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00d      	beq.n	80030da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d107      	bne.n	80030d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e06b      	b.n	80031b2 <HAL_I2C_Master_Transmit+0x1ea>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
<<<<<<< HEAD
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c2:	781a      	ldrb	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d8:	b29b      	uxth	r3, r3
 80030da:	3b01      	subs	r3, #1
 80030dc:	b29a      	uxth	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e6:	3b01      	subs	r3, #1
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d11b      	bne.n	8003134 <HAL_I2C_Master_Transmit+0x188>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003100:	2b00      	cmp	r3, #0
 8003102:	d017      	beq.n	8003134 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003108:	781a      	ldrb	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003114:	1c5a      	adds	r2, r3, #1
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800311e:	b29b      	uxth	r3, r3
 8003120:	3b01      	subs	r3, #1
 8003122:	b29a      	uxth	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800312c:	3b01      	subs	r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	851a      	strh	r2, [r3, #40]	@ 0x28
=======
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030de:	781a      	ldrb	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	3b01      	subs	r3, #1
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003102:	3b01      	subs	r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b04      	cmp	r3, #4
 8003116:	d11b      	bne.n	8003150 <HAL_I2C_Master_Transmit+0x188>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800311c:	2b00      	cmp	r3, #0
 800311e:	d017      	beq.n	8003150 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003124:	781a      	ldrb	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003130:	1c5a      	adds	r2, r3, #1
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800313a:	b29b      	uxth	r3, r3
 800313c:	3b01      	subs	r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003148:	3b01      	subs	r3, #1
 800314a:	b29a      	uxth	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	851a      	strh	r2, [r3, #40]	@ 0x28
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	6a39      	ldr	r1, [r7, #32]
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 f9ce 	bl	80034da <I2C_WaitOnBTFFlagUntilTimeout>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00d      	beq.n	8003160 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003148:	2b04      	cmp	r3, #4
 800314a:	d107      	bne.n	800315c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800315a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e01a      	b.n	8003196 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003164:	2b00      	cmp	r3, #0
 8003166:	d194      	bne.n	8003092 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
=======
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	6a39      	ldr	r1, [r7, #32]
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 fa19 	bl	800358c <I2C_WaitOnBTFFlagUntilTimeout>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00d      	beq.n	800317c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003164:	2b04      	cmp	r3, #4
 8003166:	d107      	bne.n	8003178 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003176:	601a      	str	r2, [r3, #0]
<<<<<<< HEAD

    hi2c->State = HAL_I2C_STATE_READY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003190:	2300      	movs	r3, #0
 8003192:	e000      	b.n	8003196 <HAL_I2C_Master_Transmit+0x1ea>
=======
        }
        return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e01a      	b.n	80031b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003180:	2b00      	cmp	r3, #0
 8003182:	d194      	bne.n	80030ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003192:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2220      	movs	r2, #32
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80031ac:	2300      	movs	r3, #0
 80031ae:	e000      	b.n	80031b2 <HAL_I2C_Master_Transmit+0x1ea>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8003194:	2302      	movs	r3, #2
  }
}
 8003196:	4618      	mov	r0, r3
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	00100002 	.word	0x00100002
 80031a4:	ffff0000 	.word	0xffff0000

080031a8 <I2C_MasterRequestWrite>:
=======
 80031b0:	2302      	movs	r3, #2
  }
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	00100002 	.word	0x00100002
 80031c0:	ffff0000 	.word	0xffff0000

080031c4 <I2C_MasterRequestWrite>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b088      	sub	sp, #32
 80031ac:	af02      	add	r7, sp, #8
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	607a      	str	r2, [r7, #4]
 80031b2:	603b      	str	r3, [r7, #0]
 80031b4:	460b      	mov	r3, r1
 80031b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d006      	beq.n	80031d2 <I2C_MasterRequestWrite+0x2a>
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d003      	beq.n	80031d2 <I2C_MasterRequestWrite+0x2a>
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80031d0:	d108      	bne.n	80031e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	e00b      	b.n	80031fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e8:	2b12      	cmp	r3, #18
 80031ea:	d107      	bne.n	80031fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031fa:	601a      	str	r2, [r3, #0]
=======
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b088      	sub	sp, #32
 80031c8:	af02      	add	r7, sp, #8
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	607a      	str	r2, [r7, #4]
 80031ce:	603b      	str	r3, [r7, #0]
 80031d0:	460b      	mov	r3, r1
 80031d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d006      	beq.n	80031ee <I2C_MasterRequestWrite+0x2a>
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d003      	beq.n	80031ee <I2C_MasterRequestWrite+0x2a>
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80031ec:	d108      	bne.n	8003200 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	e00b      	b.n	8003218 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003204:	2b12      	cmp	r3, #18
 8003206:	d107      	bne.n	8003218 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003216:	601a      	str	r2, [r3, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f000 f84f 	bl	80032ac <I2C_WaitOnFlagUntilTimeout>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00d      	beq.n	8003230 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800321e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003222:	d103      	bne.n	800322c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800322a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e035      	b.n	800329c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003238:	d108      	bne.n	800324c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800323a:	897b      	ldrh	r3, [r7, #10]
 800323c:	b2db      	uxtb	r3, r3
 800323e:	461a      	mov	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003248:	611a      	str	r2, [r3, #16]
 800324a:	e01b      	b.n	8003284 <I2C_MasterRequestWrite+0xdc>
=======
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 f84f 	bl	80032c8 <I2C_WaitOnFlagUntilTimeout>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00d      	beq.n	800324c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800323a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800323e:	d103      	bne.n	8003248 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003246:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e035      	b.n	80032b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003254:	d108      	bne.n	8003268 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003256:	897b      	ldrh	r3, [r7, #10]
 8003258:	b2db      	uxtb	r3, r3
 800325a:	461a      	mov	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003264:	611a      	str	r2, [r3, #16]
 8003266:	e01b      	b.n	80032a0 <I2C_MasterRequestWrite+0xdc>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
<<<<<<< HEAD
 800324c:	897b      	ldrh	r3, [r7, #10]
 800324e:	11db      	asrs	r3, r3, #7
 8003250:	b2db      	uxtb	r3, r3
 8003252:	f003 0306 	and.w	r3, r3, #6
 8003256:	b2db      	uxtb	r3, r3
 8003258:	f063 030f 	orn	r3, r3, #15
 800325c:	b2da      	uxtb	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	490e      	ldr	r1, [pc, #56]	@ (80032a4 <I2C_MasterRequestWrite+0xfc>)
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 f875 	bl	800335a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e010      	b.n	800329c <I2C_MasterRequestWrite+0xf4>
=======
 8003268:	897b      	ldrh	r3, [r7, #10]
 800326a:	11db      	asrs	r3, r3, #7
 800326c:	b2db      	uxtb	r3, r3
 800326e:	f003 0306 	and.w	r3, r3, #6
 8003272:	b2db      	uxtb	r3, r3
 8003274:	f063 030f 	orn	r3, r3, #15
 8003278:	b2da      	uxtb	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	490e      	ldr	r1, [pc, #56]	@ (80032c0 <I2C_MasterRequestWrite+0xfc>)
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 f898 	bl	80033bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e010      	b.n	80032b8 <I2C_MasterRequestWrite+0xf4>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
<<<<<<< HEAD
 800327a:	897b      	ldrh	r3, [r7, #10]
 800327c:	b2da      	uxtb	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	611a      	str	r2, [r3, #16]
=======
 8003296:	897b      	ldrh	r3, [r7, #10]
 8003298:	b2da      	uxtb	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	611a      	str	r2, [r3, #16]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	4907      	ldr	r1, [pc, #28]	@ (80032a8 <I2C_MasterRequestWrite+0x100>)
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 f865 	bl	800335a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e000      	b.n	800329c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3718      	adds	r7, #24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	00010008 	.word	0x00010008
 80032a8:	00010002 	.word	0x00010002

080032ac <I2C_WaitOnFlagUntilTimeout>:
=======
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	4907      	ldr	r1, [pc, #28]	@ (80032c4 <I2C_MasterRequestWrite+0x100>)
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 f888 	bl	80033bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e000      	b.n	80032b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	00010008 	.word	0x00010008
 80032c4:	00010002 	.word	0x00010002

080032c8 <I2C_WaitOnFlagUntilTimeout>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	603b      	str	r3, [r7, #0]
 80032b8:	4613      	mov	r3, r2
 80032ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032bc:	e025      	b.n	800330a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c4:	d021      	beq.n	800330a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c6:	f7ff f9f7 	bl	80026b8 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d302      	bcc.n	80032dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d116      	bne.n	800330a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2220      	movs	r2, #32
 80032e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f6:	f043 0220 	orr.w	r2, r3, #32
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e023      	b.n	8003352 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	0c1b      	lsrs	r3, r3, #16
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b01      	cmp	r3, #1
 8003312:	d10d      	bne.n	8003330 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	43da      	mvns	r2, r3
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	4013      	ands	r3, r2
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	bf0c      	ite	eq
 8003326:	2301      	moveq	r3, #1
 8003328:	2300      	movne	r3, #0
 800332a:	b2db      	uxtb	r3, r3
 800332c:	461a      	mov	r2, r3
 800332e:	e00c      	b.n	800334a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	43da      	mvns	r2, r3
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	4013      	ands	r3, r2
 800333c:	b29b      	uxth	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	bf0c      	ite	eq
 8003342:	2301      	moveq	r3, #1
 8003344:	2300      	movne	r3, #0
 8003346:	b2db      	uxtb	r3, r3
 8003348:	461a      	mov	r2, r3
 800334a:	79fb      	ldrb	r3, [r7, #7]
 800334c:	429a      	cmp	r2, r3
 800334e:	d0b6      	beq.n	80032be <I2C_WaitOnFlagUntilTimeout+0x12>
=======
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	603b      	str	r3, [r7, #0]
 80032d4:	4613      	mov	r3, r2
 80032d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032d8:	e048      	b.n	800336c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e0:	d044      	beq.n	800336c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e2:	f7ff f9f7 	bl	80026d4 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d302      	bcc.n	80032f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d139      	bne.n	800336c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	0c1b      	lsrs	r3, r3, #16
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d10d      	bne.n	800331e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	43da      	mvns	r2, r3
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	4013      	ands	r3, r2
 800330e:	b29b      	uxth	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	bf0c      	ite	eq
 8003314:	2301      	moveq	r3, #1
 8003316:	2300      	movne	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	461a      	mov	r2, r3
 800331c:	e00c      	b.n	8003338 <I2C_WaitOnFlagUntilTimeout+0x70>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	43da      	mvns	r2, r3
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	4013      	ands	r3, r2
 800332a:	b29b      	uxth	r3, r3
 800332c:	2b00      	cmp	r3, #0
 800332e:	bf0c      	ite	eq
 8003330:	2301      	moveq	r3, #1
 8003332:	2300      	movne	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	461a      	mov	r2, r3
 8003338:	79fb      	ldrb	r3, [r7, #7]
 800333a:	429a      	cmp	r2, r3
 800333c:	d116      	bne.n	800336c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003358:	f043 0220 	orr.w	r2, r3, #32
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e023      	b.n	80033b4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	0c1b      	lsrs	r3, r3, #16
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b01      	cmp	r3, #1
 8003374:	d10d      	bne.n	8003392 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	43da      	mvns	r2, r3
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	4013      	ands	r3, r2
 8003382:	b29b      	uxth	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	bf0c      	ite	eq
 8003388:	2301      	moveq	r3, #1
 800338a:	2300      	movne	r3, #0
 800338c:	b2db      	uxtb	r3, r3
 800338e:	461a      	mov	r2, r3
 8003390:	e00c      	b.n	80033ac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	43da      	mvns	r2, r3
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	4013      	ands	r3, r2
 800339e:	b29b      	uxth	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	bf0c      	ite	eq
 80033a4:	2301      	moveq	r3, #1
 80033a6:	2300      	movne	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	461a      	mov	r2, r3
 80033ac:	79fb      	ldrb	r3, [r7, #7]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d093      	beq.n	80032da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
=======
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 800335a:	b580      	push	{r7, lr}
 800335c:	b084      	sub	sp, #16
 800335e:	af00      	add	r7, sp, #0
 8003360:	60f8      	str	r0, [r7, #12]
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	607a      	str	r2, [r7, #4]
 8003366:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003368:	e051      	b.n	800340e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003374:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003378:	d123      	bne.n	80033c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003388:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003392:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2220      	movs	r2, #32
 800339e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ae:	f043 0204 	orr.w	r2, r3, #4
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e046      	b.n	8003450 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
=======
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
 80033c8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033ca:	e071      	b.n	80034b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033da:	d123      	bne.n	8003424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033ea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80033f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003410:	f043 0204 	orr.w	r2, r3, #4
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e067      	b.n	80034f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c8:	d021      	beq.n	800340e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ca:	f7ff f975 	bl	80026b8 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d302      	bcc.n	80033e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d116      	bne.n	800340e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fa:	f043 0220 	orr.w	r2, r3, #32
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e020      	b.n	8003450 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	0c1b      	lsrs	r3, r3, #16
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b01      	cmp	r3, #1
 8003416:	d10c      	bne.n	8003432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	43da      	mvns	r2, r3
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	4013      	ands	r3, r2
 8003424:	b29b      	uxth	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	bf14      	ite	ne
 800342a:	2301      	movne	r3, #1
 800342c:	2300      	moveq	r3, #0
 800342e:	b2db      	uxtb	r3, r3
 8003430:	e00b      	b.n	800344a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	43da      	mvns	r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	4013      	ands	r3, r2
 800343e:	b29b      	uxth	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	bf14      	ite	ne
 8003444:	2301      	movne	r3, #1
 8003446:	2300      	moveq	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d18d      	bne.n	800336a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
=======
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800342a:	d041      	beq.n	80034b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800342c:	f7ff f952 	bl	80026d4 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	429a      	cmp	r2, r3
 800343a:	d302      	bcc.n	8003442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d136      	bne.n	80034b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	0c1b      	lsrs	r3, r3, #16
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b01      	cmp	r3, #1
 800344a:	d10c      	bne.n	8003466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	43da      	mvns	r2, r3
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	4013      	ands	r3, r2
 8003458:	b29b      	uxth	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	bf14      	ite	ne
 800345e:	2301      	movne	r3, #1
 8003460:	2300      	moveq	r3, #0
 8003462:	b2db      	uxtb	r3, r3
 8003464:	e00b      	b.n	800347e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	43da      	mvns	r2, r3
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	4013      	ands	r3, r2
 8003472:	b29b      	uxth	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	bf14      	ite	ne
 8003478:	2301      	movne	r3, #1
 800347a:	2300      	moveq	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d016      	beq.n	80034b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2220      	movs	r2, #32
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349c:	f043 0220 	orr.w	r2, r3, #32
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e021      	b.n	80034f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	0c1b      	lsrs	r3, r3, #16
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d10c      	bne.n	80034d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	43da      	mvns	r2, r3
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	4013      	ands	r3, r2
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	bf14      	ite	ne
 80034cc:	2301      	movne	r3, #1
 80034ce:	2300      	moveq	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	e00b      	b.n	80034ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	43da      	mvns	r2, r3
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	4013      	ands	r3, r2
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	bf14      	ite	ne
 80034e6:	2301      	movne	r3, #1
 80034e8:	2300      	moveq	r3, #0
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f47f af6d 	bne.w	80033cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <I2C_WaitOnTXEFlagUntilTimeout>:
=======
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <I2C_WaitOnTXEFlagUntilTimeout>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003464:	e02d      	b.n	80034c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 f878 	bl	800355c <I2C_IsAcknowledgeFailed>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e02d      	b.n	80034d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
=======
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003508:	e034      	b.n	8003574 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f000 f886 	bl	800361c <I2C_IsAcknowledgeFailed>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e034      	b.n	8003584 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347c:	d021      	beq.n	80034c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800347e:	f7ff f91b 	bl	80026b8 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	429a      	cmp	r2, r3
 800348c:	d302      	bcc.n	8003494 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d116      	bne.n	80034c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2220      	movs	r2, #32
 800349e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ae:	f043 0220 	orr.w	r2, r3, #32
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e007      	b.n	80034d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034cc:	2b80      	cmp	r3, #128	@ 0x80
 80034ce:	d1ca      	bne.n	8003466 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
=======
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003520:	d028      	beq.n	8003574 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003522:	f7ff f8d7 	bl	80026d4 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	429a      	cmp	r2, r3
 8003530:	d302      	bcc.n	8003538 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d11d      	bne.n	8003574 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003542:	2b80      	cmp	r3, #128	@ 0x80
 8003544:	d016      	beq.n	8003574 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003560:	f043 0220 	orr.w	r2, r3, #32
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e007      	b.n	8003584 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800357e:	2b80      	cmp	r3, #128	@ 0x80
 8003580:	d1c3      	bne.n	800350a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <I2C_WaitOnBTFFlagUntilTimeout>:
=======
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <I2C_WaitOnBTFFlagUntilTimeout>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 80034da:	b580      	push	{r7, lr}
 80034dc:	b084      	sub	sp, #16
 80034de:	af00      	add	r7, sp, #0
 80034e0:	60f8      	str	r0, [r7, #12]
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034e6:	e02d      	b.n	8003544 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 f837 	bl	800355c <I2C_IsAcknowledgeFailed>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e02d      	b.n	8003554 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
=======
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003598:	e034      	b.n	8003604 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 f83e 	bl	800361c <I2C_IsAcknowledgeFailed>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e034      	b.n	8003614 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fe:	d021      	beq.n	8003544 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003500:	f7ff f8da 	bl	80026b8 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	429a      	cmp	r2, r3
 800350e:	d302      	bcc.n	8003516 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d116      	bne.n	8003544 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2220      	movs	r2, #32
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003530:	f043 0220 	orr.w	r2, r3, #32
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e007      	b.n	8003554 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	f003 0304 	and.w	r3, r3, #4
 800354e:	2b04      	cmp	r3, #4
 8003550:	d1ca      	bne.n	80034e8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
=======
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b0:	d028      	beq.n	8003604 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b2:	f7ff f88f 	bl	80026d4 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d302      	bcc.n	80035c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d11d      	bne.n	8003604 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	f003 0304 	and.w	r3, r3, #4
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d016      	beq.n	8003604 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2220      	movs	r2, #32
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f0:	f043 0220 	orr.w	r2, r3, #32
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e007      	b.n	8003614 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	f003 0304 	and.w	r3, r3, #4
 800360e:	2b04      	cmp	r3, #4
 8003610:	d1c3      	bne.n	800359a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <I2C_IsAcknowledgeFailed>:
=======
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <I2C_IsAcknowledgeFailed>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800356e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003572:	d11b      	bne.n	80035ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800357c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2220      	movs	r2, #32
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003598:	f043 0204 	orr.w	r2, r3, #4
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e000      	b.n	80035ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
	...

080035bc <HAL_RCC_OscConfig>:
=======
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800362e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003632:	d11b      	bne.n	800366c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800363c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003658:	f043 0204 	orr.w	r2, r3, #4
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e000      	b.n	800366e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
	...

0800367c <HAL_RCC_OscConfig>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
<<<<<<< HEAD
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e267      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
=======
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e267      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
<<<<<<< HEAD
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d075      	beq.n	80036c6 <HAL_RCC_OscConfig+0x10a>
=======
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d075      	beq.n	8003786 <HAL_RCC_OscConfig+0x10a>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
<<<<<<< HEAD
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035da:	4b88      	ldr	r3, [pc, #544]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 030c 	and.w	r3, r3, #12
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	d00c      	beq.n	8003600 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035e6:	4b85      	ldr	r3, [pc, #532]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035ee:	2b08      	cmp	r3, #8
 80035f0:	d112      	bne.n	8003618 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035f2:	4b82      	ldr	r3, [pc, #520]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035fe:	d10b      	bne.n	8003618 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003600:	4b7e      	ldr	r3, [pc, #504]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d05b      	beq.n	80036c4 <HAL_RCC_OscConfig+0x108>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d157      	bne.n	80036c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e242      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
=======
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800369a:	4b88      	ldr	r3, [pc, #544]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d00c      	beq.n	80036c0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036a6:	4b85      	ldr	r3, [pc, #532]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d112      	bne.n	80036d8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036b2:	4b82      	ldr	r3, [pc, #520]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036be:	d10b      	bne.n	80036d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c0:	4b7e      	ldr	r3, [pc, #504]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d05b      	beq.n	8003784 <HAL_RCC_OscConfig+0x108>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d157      	bne.n	8003784 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e242      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003620:	d106      	bne.n	8003630 <HAL_RCC_OscConfig+0x74>
 8003622:	4b76      	ldr	r3, [pc, #472]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a75      	ldr	r2, [pc, #468]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 8003628:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	e01d      	b.n	800366c <HAL_RCC_OscConfig+0xb0>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003638:	d10c      	bne.n	8003654 <HAL_RCC_OscConfig+0x98>
 800363a:	4b70      	ldr	r3, [pc, #448]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a6f      	ldr	r2, [pc, #444]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 8003640:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003644:	6013      	str	r3, [r2, #0]
 8003646:	4b6d      	ldr	r3, [pc, #436]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a6c      	ldr	r2, [pc, #432]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 800364c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	e00b      	b.n	800366c <HAL_RCC_OscConfig+0xb0>
 8003654:	4b69      	ldr	r3, [pc, #420]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a68      	ldr	r2, [pc, #416]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 800365a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800365e:	6013      	str	r3, [r2, #0]
 8003660:	4b66      	ldr	r3, [pc, #408]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a65      	ldr	r2, [pc, #404]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 8003666:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800366a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d013      	beq.n	800369c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003674:	f7ff f820 	bl	80026b8 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800367c:	f7ff f81c 	bl	80026b8 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b64      	cmp	r3, #100	@ 0x64
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e207      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800368e:	4b5b      	ldr	r3, [pc, #364]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d0f0      	beq.n	800367c <HAL_RCC_OscConfig+0xc0>
 800369a:	e014      	b.n	80036c6 <HAL_RCC_OscConfig+0x10a>
=======
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036e0:	d106      	bne.n	80036f0 <HAL_RCC_OscConfig+0x74>
 80036e2:	4b76      	ldr	r3, [pc, #472]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a75      	ldr	r2, [pc, #468]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80036e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	e01d      	b.n	800372c <HAL_RCC_OscConfig+0xb0>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036f8:	d10c      	bne.n	8003714 <HAL_RCC_OscConfig+0x98>
 80036fa:	4b70      	ldr	r3, [pc, #448]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a6f      	ldr	r2, [pc, #444]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003700:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	4b6d      	ldr	r3, [pc, #436]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a6c      	ldr	r2, [pc, #432]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 800370c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	e00b      	b.n	800372c <HAL_RCC_OscConfig+0xb0>
 8003714:	4b69      	ldr	r3, [pc, #420]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a68      	ldr	r2, [pc, #416]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 800371a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800371e:	6013      	str	r3, [r2, #0]
 8003720:	4b66      	ldr	r3, [pc, #408]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a65      	ldr	r2, [pc, #404]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003726:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800372a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d013      	beq.n	800375c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003734:	f7fe ffce 	bl	80026d4 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800373c:	f7fe ffca 	bl	80026d4 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b64      	cmp	r3, #100	@ 0x64
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e207      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800374e:	4b5b      	ldr	r3, [pc, #364]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0f0      	beq.n	800373c <HAL_RCC_OscConfig+0xc0>
 800375a:	e014      	b.n	8003786 <HAL_RCC_OscConfig+0x10a>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 800369c:	f7ff f80c 	bl	80026b8 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036a4:	f7ff f808 	bl	80026b8 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b64      	cmp	r3, #100	@ 0x64
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e1f3      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036b6:	4b51      	ldr	r3, [pc, #324]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f0      	bne.n	80036a4 <HAL_RCC_OscConfig+0xe8>
 80036c2:	e000      	b.n	80036c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c4:	bf00      	nop
=======
 800375c:	f7fe ffba 	bl	80026d4 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003764:	f7fe ffb6 	bl	80026d4 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b64      	cmp	r3, #100	@ 0x64
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e1f3      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003776:	4b51      	ldr	r3, [pc, #324]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1f0      	bne.n	8003764 <HAL_RCC_OscConfig+0xe8>
 8003782:	e000      	b.n	8003786 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003784:	bf00      	nop
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
<<<<<<< HEAD
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d063      	beq.n	800379a <HAL_RCC_OscConfig+0x1de>
=======
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d063      	beq.n	800385a <HAL_RCC_OscConfig+0x1de>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
<<<<<<< HEAD
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036d2:	4b4a      	ldr	r3, [pc, #296]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 030c 	and.w	r3, r3, #12
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00b      	beq.n	80036f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036de:	4b47      	ldr	r3, [pc, #284]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036e6:	2b08      	cmp	r3, #8
 80036e8:	d11c      	bne.n	8003724 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ea:	4b44      	ldr	r3, [pc, #272]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d116      	bne.n	8003724 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036f6:	4b41      	ldr	r3, [pc, #260]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d005      	beq.n	800370e <HAL_RCC_OscConfig+0x152>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d001      	beq.n	800370e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e1c7      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
=======
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003792:	4b4a      	ldr	r3, [pc, #296]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 030c 	and.w	r3, r3, #12
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00b      	beq.n	80037b6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800379e:	4b47      	ldr	r3, [pc, #284]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80037a6:	2b08      	cmp	r3, #8
 80037a8:	d11c      	bne.n	80037e4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037aa:	4b44      	ldr	r3, [pc, #272]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d116      	bne.n	80037e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037b6:	4b41      	ldr	r3, [pc, #260]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d005      	beq.n	80037ce <HAL_RCC_OscConfig+0x152>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d001      	beq.n	80037ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e1c7      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 800370e:	4b3b      	ldr	r3, [pc, #236]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	4937      	ldr	r1, [pc, #220]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 800371e:	4313      	orrs	r3, r2
 8003720:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003722:	e03a      	b.n	800379a <HAL_RCC_OscConfig+0x1de>
=======
 80037ce:	4b3b      	ldr	r3, [pc, #236]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	4937      	ldr	r1, [pc, #220]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037e2:	e03a      	b.n	800385a <HAL_RCC_OscConfig+0x1de>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      }
    }
    else
    {
      /* Check the HSI State */
<<<<<<< HEAD
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d020      	beq.n	800376e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800372c:	4b34      	ldr	r3, [pc, #208]	@ (8003800 <HAL_RCC_OscConfig+0x244>)
 800372e:	2201      	movs	r2, #1
 8003730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003732:	f7fe ffc1 	bl	80026b8 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800373a:	f7fe ffbd 	bl	80026b8 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e1a8      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800374c:	4b2b      	ldr	r3, [pc, #172]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0f0      	beq.n	800373a <HAL_RCC_OscConfig+0x17e>
=======
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d020      	beq.n	800382e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037ec:	4b34      	ldr	r3, [pc, #208]	@ (80038c0 <HAL_RCC_OscConfig+0x244>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f2:	f7fe ff6f 	bl	80026d4 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037fa:	f7fe ff6b 	bl	80026d4 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e1a8      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800380c:	4b2b      	ldr	r3, [pc, #172]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0f0      	beq.n	80037fa <HAL_RCC_OscConfig+0x17e>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8003758:	4b28      	ldr	r3, [pc, #160]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	4925      	ldr	r1, [pc, #148]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 8003768:	4313      	orrs	r3, r2
 800376a:	600b      	str	r3, [r1, #0]
 800376c:	e015      	b.n	800379a <HAL_RCC_OscConfig+0x1de>
=======
 8003818:	4b28      	ldr	r3, [pc, #160]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	4925      	ldr	r1, [pc, #148]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003828:	4313      	orrs	r3, r2
 800382a:	600b      	str	r3, [r1, #0]
 800382c:	e015      	b.n	800385a <HAL_RCC_OscConfig+0x1de>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 800376e:	4b24      	ldr	r3, [pc, #144]	@ (8003800 <HAL_RCC_OscConfig+0x244>)
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003774:	f7fe ffa0 	bl	80026b8 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800377c:	f7fe ff9c 	bl	80026b8 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e187      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800378e:	4b1b      	ldr	r3, [pc, #108]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1f0      	bne.n	800377c <HAL_RCC_OscConfig+0x1c0>
=======
 800382e:	4b24      	ldr	r3, [pc, #144]	@ (80038c0 <HAL_RCC_OscConfig+0x244>)
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003834:	f7fe ff4e 	bl	80026d4 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800383c:	f7fe ff4a 	bl	80026d4 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e187      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800384e:	4b1b      	ldr	r3, [pc, #108]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1f0      	bne.n	800383c <HAL_RCC_OscConfig+0x1c0>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
<<<<<<< HEAD
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d036      	beq.n	8003814 <HAL_RCC_OscConfig+0x258>
=======
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	d036      	beq.n	80038d4 <HAL_RCC_OscConfig+0x258>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
<<<<<<< HEAD
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d016      	beq.n	80037dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ae:	4b15      	ldr	r3, [pc, #84]	@ (8003804 <HAL_RCC_OscConfig+0x248>)
 80037b0:	2201      	movs	r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b4:	f7fe ff80 	bl	80026b8 <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037bc:	f7fe ff7c 	bl	80026b8 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e167      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ce:	4b0b      	ldr	r3, [pc, #44]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 80037d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0f0      	beq.n	80037bc <HAL_RCC_OscConfig+0x200>
 80037da:	e01b      	b.n	8003814 <HAL_RCC_OscConfig+0x258>
=======
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d016      	beq.n	800389c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800386e:	4b15      	ldr	r3, [pc, #84]	@ (80038c4 <HAL_RCC_OscConfig+0x248>)
 8003870:	2201      	movs	r2, #1
 8003872:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003874:	f7fe ff2e 	bl	80026d4 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800387c:	f7fe ff2a 	bl	80026d4 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e167      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800388e:	4b0b      	ldr	r3, [pc, #44]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003890:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0f0      	beq.n	800387c <HAL_RCC_OscConfig+0x200>
 800389a:	e01b      	b.n	80038d4 <HAL_RCC_OscConfig+0x258>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 80037dc:	4b09      	ldr	r3, [pc, #36]	@ (8003804 <HAL_RCC_OscConfig+0x248>)
 80037de:	2200      	movs	r2, #0
 80037e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037e2:	f7fe ff69 	bl	80026b8 <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037e8:	e00e      	b.n	8003808 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037ea:	f7fe ff65 	bl	80026b8 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d907      	bls.n	8003808 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e150      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
 80037fc:	40023800 	.word	0x40023800
 8003800:	42470000 	.word	0x42470000
 8003804:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003808:	4b88      	ldr	r3, [pc, #544]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 800380a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1ea      	bne.n	80037ea <HAL_RCC_OscConfig+0x22e>
=======
 800389c:	4b09      	ldr	r3, [pc, #36]	@ (80038c4 <HAL_RCC_OscConfig+0x248>)
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a2:	f7fe ff17 	bl	80026d4 <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a8:	e00e      	b.n	80038c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038aa:	f7fe ff13 	bl	80026d4 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d907      	bls.n	80038c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e150      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
 80038bc:	40023800 	.word	0x40023800
 80038c0:	42470000 	.word	0x42470000
 80038c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038c8:	4b88      	ldr	r3, [pc, #544]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 80038ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1ea      	bne.n	80038aa <HAL_RCC_OscConfig+0x22e>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
<<<<<<< HEAD
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 8097 	beq.w	8003950 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003822:	2300      	movs	r3, #0
 8003824:	75fb      	strb	r3, [r7, #23]
=======
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 8097 	beq.w	8003a10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038e2:	2300      	movs	r3, #0
 80038e4:	75fb      	strb	r3, [r7, #23]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
<<<<<<< HEAD
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003826:	4b81      	ldr	r3, [pc, #516]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 8003828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10f      	bne.n	8003852 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003832:	2300      	movs	r3, #0
 8003834:	60bb      	str	r3, [r7, #8]
 8003836:	4b7d      	ldr	r3, [pc, #500]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 8003838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383a:	4a7c      	ldr	r2, [pc, #496]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 800383c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003840:	6413      	str	r3, [r2, #64]	@ 0x40
 8003842:	4b7a      	ldr	r3, [pc, #488]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 8003844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800384a:	60bb      	str	r3, [r7, #8]
 800384c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800384e:	2301      	movs	r3, #1
 8003850:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003852:	4b77      	ldr	r3, [pc, #476]	@ (8003a30 <HAL_RCC_OscConfig+0x474>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800385a:	2b00      	cmp	r3, #0
 800385c:	d118      	bne.n	8003890 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800385e:	4b74      	ldr	r3, [pc, #464]	@ (8003a30 <HAL_RCC_OscConfig+0x474>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a73      	ldr	r2, [pc, #460]	@ (8003a30 <HAL_RCC_OscConfig+0x474>)
 8003864:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003868:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800386a:	f7fe ff25 	bl	80026b8 <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003872:	f7fe ff21 	bl	80026b8 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e10c      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003884:	4b6a      	ldr	r3, [pc, #424]	@ (8003a30 <HAL_RCC_OscConfig+0x474>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0f0      	beq.n	8003872 <HAL_RCC_OscConfig+0x2b6>
=======
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038e6:	4b81      	ldr	r3, [pc, #516]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 80038e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10f      	bne.n	8003912 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038f2:	2300      	movs	r3, #0
 80038f4:	60bb      	str	r3, [r7, #8]
 80038f6:	4b7d      	ldr	r3, [pc, #500]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 80038f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fa:	4a7c      	ldr	r2, [pc, #496]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 80038fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003900:	6413      	str	r3, [r2, #64]	@ 0x40
 8003902:	4b7a      	ldr	r3, [pc, #488]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800390a:	60bb      	str	r3, [r7, #8]
 800390c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800390e:	2301      	movs	r3, #1
 8003910:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003912:	4b77      	ldr	r3, [pc, #476]	@ (8003af0 <HAL_RCC_OscConfig+0x474>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800391a:	2b00      	cmp	r3, #0
 800391c:	d118      	bne.n	8003950 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800391e:	4b74      	ldr	r3, [pc, #464]	@ (8003af0 <HAL_RCC_OscConfig+0x474>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a73      	ldr	r2, [pc, #460]	@ (8003af0 <HAL_RCC_OscConfig+0x474>)
 8003924:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003928:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800392a:	f7fe fed3 	bl	80026d4 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003932:	f7fe fecf 	bl	80026d4 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e10c      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003944:	4b6a      	ldr	r3, [pc, #424]	@ (8003af0 <HAL_RCC_OscConfig+0x474>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0f0      	beq.n	8003932 <HAL_RCC_OscConfig+0x2b6>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d106      	bne.n	80038a6 <HAL_RCC_OscConfig+0x2ea>
 8003898:	4b64      	ldr	r3, [pc, #400]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 800389a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800389c:	4a63      	ldr	r2, [pc, #396]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 800389e:	f043 0301 	orr.w	r3, r3, #1
 80038a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80038a4:	e01c      	b.n	80038e0 <HAL_RCC_OscConfig+0x324>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	2b05      	cmp	r3, #5
 80038ac:	d10c      	bne.n	80038c8 <HAL_RCC_OscConfig+0x30c>
 80038ae:	4b5f      	ldr	r3, [pc, #380]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 80038b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b2:	4a5e      	ldr	r2, [pc, #376]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 80038b4:	f043 0304 	orr.w	r3, r3, #4
 80038b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80038ba:	4b5c      	ldr	r3, [pc, #368]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 80038bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038be:	4a5b      	ldr	r2, [pc, #364]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 80038c0:	f043 0301 	orr.w	r3, r3, #1
 80038c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80038c6:	e00b      	b.n	80038e0 <HAL_RCC_OscConfig+0x324>
 80038c8:	4b58      	ldr	r3, [pc, #352]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 80038ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038cc:	4a57      	ldr	r2, [pc, #348]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 80038ce:	f023 0301 	bic.w	r3, r3, #1
 80038d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80038d4:	4b55      	ldr	r3, [pc, #340]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 80038d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038d8:	4a54      	ldr	r2, [pc, #336]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 80038da:	f023 0304 	bic.w	r3, r3, #4
 80038de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d015      	beq.n	8003914 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e8:	f7fe fee6 	bl	80026b8 <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ee:	e00a      	b.n	8003906 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038f0:	f7fe fee2 	bl	80026b8 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038fe:	4293      	cmp	r3, r2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e0cb      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003906:	4b49      	ldr	r3, [pc, #292]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 8003908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0ee      	beq.n	80038f0 <HAL_RCC_OscConfig+0x334>
 8003912:	e014      	b.n	800393e <HAL_RCC_OscConfig+0x382>
=======
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d106      	bne.n	8003966 <HAL_RCC_OscConfig+0x2ea>
 8003958:	4b64      	ldr	r3, [pc, #400]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 800395a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800395c:	4a63      	ldr	r2, [pc, #396]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 800395e:	f043 0301 	orr.w	r3, r3, #1
 8003962:	6713      	str	r3, [r2, #112]	@ 0x70
 8003964:	e01c      	b.n	80039a0 <HAL_RCC_OscConfig+0x324>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	2b05      	cmp	r3, #5
 800396c:	d10c      	bne.n	8003988 <HAL_RCC_OscConfig+0x30c>
 800396e:	4b5f      	ldr	r3, [pc, #380]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003972:	4a5e      	ldr	r2, [pc, #376]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003974:	f043 0304 	orr.w	r3, r3, #4
 8003978:	6713      	str	r3, [r2, #112]	@ 0x70
 800397a:	4b5c      	ldr	r3, [pc, #368]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 800397c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800397e:	4a5b      	ldr	r2, [pc, #364]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003980:	f043 0301 	orr.w	r3, r3, #1
 8003984:	6713      	str	r3, [r2, #112]	@ 0x70
 8003986:	e00b      	b.n	80039a0 <HAL_RCC_OscConfig+0x324>
 8003988:	4b58      	ldr	r3, [pc, #352]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 800398a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800398c:	4a57      	ldr	r2, [pc, #348]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 800398e:	f023 0301 	bic.w	r3, r3, #1
 8003992:	6713      	str	r3, [r2, #112]	@ 0x70
 8003994:	4b55      	ldr	r3, [pc, #340]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003998:	4a54      	ldr	r2, [pc, #336]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 800399a:	f023 0304 	bic.w	r3, r3, #4
 800399e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d015      	beq.n	80039d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a8:	f7fe fe94 	bl	80026d4 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ae:	e00a      	b.n	80039c6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b0:	f7fe fe90 	bl	80026d4 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039be:	4293      	cmp	r3, r2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e0cb      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c6:	4b49      	ldr	r3, [pc, #292]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 80039c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0ee      	beq.n	80039b0 <HAL_RCC_OscConfig+0x334>
 80039d2:	e014      	b.n	80039fe <HAL_RCC_OscConfig+0x382>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8003914:	f7fe fed0 	bl	80026b8 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800391a:	e00a      	b.n	8003932 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800391c:	f7fe fecc 	bl	80026b8 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	f241 3288 	movw	r2, #5000	@ 0x1388
 800392a:	4293      	cmp	r3, r2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e0b5      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003932:	4b3e      	ldr	r3, [pc, #248]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 8003934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1ee      	bne.n	800391c <HAL_RCC_OscConfig+0x360>
=======
 80039d4:	f7fe fe7e 	bl	80026d4 <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039da:	e00a      	b.n	80039f2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039dc:	f7fe fe7a 	bl	80026d4 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e0b5      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039f2:	4b3e      	ldr	r3, [pc, #248]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 80039f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1ee      	bne.n	80039dc <HAL_RCC_OscConfig+0x360>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
        }
      }
    }

    /* Restore clock configuration if changed */
<<<<<<< HEAD
    if(pwrclkchanged == SET)
 800393e:	7dfb      	ldrb	r3, [r7, #23]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d105      	bne.n	8003950 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003944:	4b39      	ldr	r3, [pc, #228]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 8003946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003948:	4a38      	ldr	r2, [pc, #224]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 800394a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800394e:	6413      	str	r3, [r2, #64]	@ 0x40
=======
    if (pwrclkchanged == SET)
 80039fe:	7dfb      	ldrb	r3, [r7, #23]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d105      	bne.n	8003a10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a04:	4b39      	ldr	r3, [pc, #228]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a08:	4a38      	ldr	r2, [pc, #224]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003a0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a0e:	6413      	str	r3, [r2, #64]	@ 0x40
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 80a1 	beq.w	8003a9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800395a:	4b34      	ldr	r3, [pc, #208]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 030c 	and.w	r3, r3, #12
 8003962:	2b08      	cmp	r3, #8
 8003964:	d05c      	beq.n	8003a20 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	2b02      	cmp	r3, #2
 800396c:	d141      	bne.n	80039f2 <HAL_RCC_OscConfig+0x436>
=======
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 80a1 	beq.w	8003b5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a1a:	4b34      	ldr	r3, [pc, #208]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 030c 	and.w	r3, r3, #12
 8003a22:	2b08      	cmp	r3, #8
 8003a24:	d05c      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d141      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x436>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 800396e:	4b31      	ldr	r3, [pc, #196]	@ (8003a34 <HAL_RCC_OscConfig+0x478>)
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003974:	f7fe fea0 	bl	80026b8 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800397c:	f7fe fe9c 	bl	80026b8 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e087      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800398e:	4b27      	ldr	r3, [pc, #156]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1f0      	bne.n	800397c <HAL_RCC_OscConfig+0x3c0>
=======
 8003a2e:	4b31      	ldr	r3, [pc, #196]	@ (8003af4 <HAL_RCC_OscConfig+0x478>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a34:	f7fe fe4e 	bl	80026d4 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a3c:	f7fe fe4a 	bl	80026d4 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e087      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a4e:	4b27      	ldr	r3, [pc, #156]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0x3c0>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
<<<<<<< HEAD
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69da      	ldr	r2, [r3, #28]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a8:	019b      	lsls	r3, r3, #6
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b0:	085b      	lsrs	r3, r3, #1
 80039b2:	3b01      	subs	r3, #1
 80039b4:	041b      	lsls	r3, r3, #16
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039bc:	061b      	lsls	r3, r3, #24
 80039be:	491b      	ldr	r1, [pc, #108]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	604b      	str	r3, [r1, #4]
=======
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69da      	ldr	r2, [r3, #28]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a68:	019b      	lsls	r3, r3, #6
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a70:	085b      	lsrs	r3, r3, #1
 8003a72:	3b01      	subs	r3, #1
 8003a74:	041b      	lsls	r3, r3, #16
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7c:	061b      	lsls	r3, r3, #24
 8003a7e:	491b      	ldr	r1, [pc, #108]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	604b      	str	r3, [r1, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 80039c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003a34 <HAL_RCC_OscConfig+0x478>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ca:	f7fe fe75 	bl	80026b8 <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039d0:	e008      	b.n	80039e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039d2:	f7fe fe71 	bl	80026b8 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d901      	bls.n	80039e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e05c      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039e4:	4b11      	ldr	r3, [pc, #68]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d0f0      	beq.n	80039d2 <HAL_RCC_OscConfig+0x416>
 80039f0:	e054      	b.n	8003a9c <HAL_RCC_OscConfig+0x4e0>
=======
 8003a84:	4b1b      	ldr	r3, [pc, #108]	@ (8003af4 <HAL_RCC_OscConfig+0x478>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8a:	f7fe fe23 	bl	80026d4 <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a92:	f7fe fe1f 	bl	80026d4 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e05c      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa4:	4b11      	ldr	r3, [pc, #68]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0f0      	beq.n	8003a92 <HAL_RCC_OscConfig+0x416>
 8003ab0:	e054      	b.n	8003b5c <HAL_RCC_OscConfig+0x4e0>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 80039f2:	4b10      	ldr	r3, [pc, #64]	@ (8003a34 <HAL_RCC_OscConfig+0x478>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f8:	f7fe fe5e 	bl	80026b8 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a00:	f7fe fe5a 	bl	80026b8 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e045      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a12:	4b06      	ldr	r3, [pc, #24]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0x444>
 8003a1e:	e03d      	b.n	8003a9c <HAL_RCC_OscConfig+0x4e0>
=======
 8003ab2:	4b10      	ldr	r3, [pc, #64]	@ (8003af4 <HAL_RCC_OscConfig+0x478>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab8:	f7fe fe0c 	bl	80026d4 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac0:	f7fe fe08 	bl	80026d4 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e045      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad2:	4b06      	ldr	r3, [pc, #24]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x444>
 8003ade:	e03d      	b.n	8003b5c <HAL_RCC_OscConfig+0x4e0>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
<<<<<<< HEAD
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d107      	bne.n	8003a38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e038      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	40007000 	.word	0x40007000
 8003a34:	42470060 	.word	0x42470060
=======
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d107      	bne.n	8003af8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e038      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
 8003aec:	40023800 	.word	0x40023800
 8003af0:	40007000 	.word	0x40007000
 8003af4:	42470060 	.word	0x42470060
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
<<<<<<< HEAD
 8003a38:	4b1b      	ldr	r3, [pc, #108]	@ (8003aa8 <HAL_RCC_OscConfig+0x4ec>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	60fb      	str	r3, [r7, #12]
=======
 8003af8:	4b1b      	ldr	r3, [pc, #108]	@ (8003b68 <HAL_RCC_OscConfig+0x4ec>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	60fb      	str	r3, [r7, #12]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
<<<<<<< HEAD
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d028      	beq.n	8003a98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d121      	bne.n	8003a98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d11a      	bne.n	8003a98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a68:	4013      	ands	r3, r2
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d111      	bne.n	8003a98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a7e:	085b      	lsrs	r3, r3, #1
 8003a80:	3b01      	subs	r3, #1
 8003a82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d107      	bne.n	8003a98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d001      	beq.n	8003a9c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e000      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
=======
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d028      	beq.n	8003b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d121      	bne.n	8003b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d11a      	bne.n	8003b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003b28:	4013      	ands	r3, r2
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d111      	bne.n	8003b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3e:	085b      	lsrs	r3, r3, #1
 8003b40:	3b01      	subs	r3, #1
 8003b42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d107      	bne.n	8003b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d001      	beq.n	8003b5c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e000      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40023800 	.word	0x40023800

08003aac <HAL_RCC_ClockConfig>:
=======
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3718      	adds	r7, #24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40023800 	.word	0x40023800

08003b6c <HAL_RCC_ClockConfig>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
<<<<<<< HEAD
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e0cc      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1ae>
=======
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e0cc      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
<<<<<<< HEAD
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ac0:	4b68      	ldr	r3, [pc, #416]	@ (8003c64 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d90c      	bls.n	8003ae8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ace:	4b65      	ldr	r3, [pc, #404]	@ (8003c64 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	b2d2      	uxtb	r2, r2
 8003ad4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ad6:	4b63      	ldr	r3, [pc, #396]	@ (8003c64 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d001      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e0b8      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1ae>
=======
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b80:	4b68      	ldr	r3, [pc, #416]	@ (8003d24 <HAL_RCC_ClockConfig+0x1b8>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d90c      	bls.n	8003ba8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b8e:	4b65      	ldr	r3, [pc, #404]	@ (8003d24 <HAL_RCC_ClockConfig+0x1b8>)
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b96:	4b63      	ldr	r3, [pc, #396]	@ (8003d24 <HAL_RCC_ClockConfig+0x1b8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d001      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e0b8      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
<<<<<<< HEAD
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d020      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0304 	and.w	r3, r3, #4
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d005      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b00:	4b59      	ldr	r3, [pc, #356]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	4a58      	ldr	r2, [pc, #352]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0308 	and.w	r3, r3, #8
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d005      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b18:	4b53      	ldr	r3, [pc, #332]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	4a52      	ldr	r2, [pc, #328]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b22:	6093      	str	r3, [r2, #8]
=======
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d020      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d005      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bc0:	4b59      	ldr	r3, [pc, #356]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	4a58      	ldr	r2, [pc, #352]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003bca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0308 	and.w	r3, r3, #8
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d005      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bd8:	4b53      	ldr	r3, [pc, #332]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	4a52      	ldr	r2, [pc, #328]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bde:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003be2:	6093      	str	r3, [r2, #8]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 8003b24:	4b50      	ldr	r3, [pc, #320]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	494d      	ldr	r1, [pc, #308]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d044      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x120>
=======
 8003be4:	4b50      	ldr	r3, [pc, #320]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	494d      	ldr	r1, [pc, #308]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d044      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x120>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
<<<<<<< HEAD
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d107      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b4a:	4b47      	ldr	r3, [pc, #284]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d119      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e07f      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d003      	beq.n	8003b6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b66:	2b03      	cmp	r3, #3
 8003b68:	d107      	bne.n	8003b7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b6a:	4b3f      	ldr	r3, [pc, #252]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d109      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e06f      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1ae>
=======
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d107      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c0a:	4b47      	ldr	r3, [pc, #284]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d119      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e07f      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d003      	beq.n	8003c2a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c26:	2b03      	cmp	r3, #3
 8003c28:	d107      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c2a:	4b3f      	ldr	r3, [pc, #252]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d109      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e06f      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
<<<<<<< HEAD
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b7a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e067      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1ae>
=======
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c3a:	4b3b      	ldr	r3, [pc, #236]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e067      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
 8003b8a:	4b37      	ldr	r3, [pc, #220]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f023 0203 	bic.w	r2, r3, #3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	4934      	ldr	r1, [pc, #208]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b9c:	f7fe fd8c 	bl	80026b8 <HAL_GetTick>
 8003ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba2:	e00a      	b.n	8003bba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba4:	f7fe fd88 	bl	80026b8 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e04f      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bba:	4b2b      	ldr	r3, [pc, #172]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 020c 	and.w	r2, r3, #12
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d1eb      	bne.n	8003ba4 <HAL_RCC_ClockConfig+0xf8>
=======
 8003c4a:	4b37      	ldr	r3, [pc, #220]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f023 0203 	bic.w	r2, r3, #3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	4934      	ldr	r1, [pc, #208]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c5c:	f7fe fd3a 	bl	80026d4 <HAL_GetTick>
 8003c60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c62:	e00a      	b.n	8003c7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c64:	f7fe fd36 	bl	80026d4 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e04f      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c7a:	4b2b      	ldr	r3, [pc, #172]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 020c 	and.w	r2, r3, #12
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d1eb      	bne.n	8003c64 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
<<<<<<< HEAD
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bcc:	4b25      	ldr	r3, [pc, #148]	@ (8003c64 <HAL_RCC_ClockConfig+0x1b8>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d20c      	bcs.n	8003bf4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bda:	4b22      	ldr	r3, [pc, #136]	@ (8003c64 <HAL_RCC_ClockConfig+0x1b8>)
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be2:	4b20      	ldr	r3, [pc, #128]	@ (8003c64 <HAL_RCC_ClockConfig+0x1b8>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0307 	and.w	r3, r3, #7
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d001      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e032      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1ae>
=======
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c8c:	4b25      	ldr	r3, [pc, #148]	@ (8003d24 <HAL_RCC_ClockConfig+0x1b8>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d20c      	bcs.n	8003cb4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c9a:	4b22      	ldr	r3, [pc, #136]	@ (8003d24 <HAL_RCC_ClockConfig+0x1b8>)
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca2:	4b20      	ldr	r3, [pc, #128]	@ (8003d24 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0307 	and.w	r3, r3, #7
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d001      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e032      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
<<<<<<< HEAD
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d008      	beq.n	8003c12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c00:	4b19      	ldr	r3, [pc, #100]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	4916      	ldr	r1, [pc, #88]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0308 	and.w	r3, r3, #8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d009      	beq.n	8003c32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c1e:	4b12      	ldr	r3, [pc, #72]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	490e      	ldr	r1, [pc, #56]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c32:	f000 f821 	bl	8003c78 <HAL_RCC_GetSysClockFreq>
 8003c36:	4602      	mov	r2, r0
 8003c38:	4b0b      	ldr	r3, [pc, #44]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	091b      	lsrs	r3, r3, #4
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	490a      	ldr	r1, [pc, #40]	@ (8003c6c <HAL_RCC_ClockConfig+0x1c0>)
 8003c44:	5ccb      	ldrb	r3, [r1, r3]
 8003c46:	fa22 f303 	lsr.w	r3, r2, r3
 8003c4a:	4a09      	ldr	r2, [pc, #36]	@ (8003c70 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c4e:	4b09      	ldr	r3, [pc, #36]	@ (8003c74 <HAL_RCC_ClockConfig+0x1c8>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fe fa70 	bl	8002138 <HAL_InitTick>

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	40023c00 	.word	0x40023c00
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	0800c31c 	.word	0x0800c31c
 8003c70:	20000000 	.word	0x20000000
 8003c74:	20000004 	.word	0x20000004

08003c78 <HAL_RCC_GetSysClockFreq>:
=======
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d008      	beq.n	8003cd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cc0:	4b19      	ldr	r3, [pc, #100]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	4916      	ldr	r1, [pc, #88]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0308 	and.w	r3, r3, #8
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d009      	beq.n	8003cf2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cde:	4b12      	ldr	r3, [pc, #72]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	490e      	ldr	r1, [pc, #56]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cf2:	f000 f821 	bl	8003d38 <HAL_RCC_GetSysClockFreq>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	091b      	lsrs	r3, r3, #4
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	490a      	ldr	r1, [pc, #40]	@ (8003d2c <HAL_RCC_ClockConfig+0x1c0>)
 8003d04:	5ccb      	ldrb	r3, [r1, r3]
 8003d06:	fa22 f303 	lsr.w	r3, r2, r3
 8003d0a:	4a09      	ldr	r2, [pc, #36]	@ (8003d30 <HAL_RCC_ClockConfig+0x1c4>)
 8003d0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003d0e:	4b09      	ldr	r3, [pc, #36]	@ (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fe fa0e 	bl	8002134 <HAL_InitTick>

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	40023c00 	.word	0x40023c00
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	0800c3fc 	.word	0x0800c3fc
 8003d30:	20000000 	.word	0x20000000
 8003d34:	20000004 	.word	0x20000004

08003d38 <HAL_RCC_GetSysClockFreq>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 8003c78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c7c:	b094      	sub	sp, #80	@ 0x50
 8003c7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c80:	2300      	movs	r3, #0
 8003c82:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c84:	2300      	movs	r3, #0
 8003c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c88:	2300      	movs	r3, #0
 8003c8a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c90:	4b79      	ldr	r3, [pc, #484]	@ (8003e78 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 030c 	and.w	r3, r3, #12
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d00d      	beq.n	8003cb8 <HAL_RCC_GetSysClockFreq+0x40>
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	f200 80e1 	bhi.w	8003e64 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d002      	beq.n	8003cac <HAL_RCC_GetSysClockFreq+0x34>
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d003      	beq.n	8003cb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003caa:	e0db      	b.n	8003e64 <HAL_RCC_GetSysClockFreq+0x1ec>
=======
 8003d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d3c:	b094      	sub	sp, #80	@ 0x50
 8003d3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003d44:	2300      	movs	r3, #0
 8003d46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d50:	4b79      	ldr	r3, [pc, #484]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 030c 	and.w	r3, r3, #12
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d00d      	beq.n	8003d78 <HAL_RCC_GetSysClockFreq+0x40>
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	f200 80e1 	bhi.w	8003f24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d002      	beq.n	8003d6c <HAL_RCC_GetSysClockFreq+0x34>
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d003      	beq.n	8003d72 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d6a:	e0db      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0x1ec>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8003cac:	4b73      	ldr	r3, [pc, #460]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x204>)
 8003cae:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003cb0:	e0db      	b.n	8003e6a <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 8003d6c:	4b73      	ldr	r3, [pc, #460]	@ (8003f3c <HAL_RCC_GetSysClockFreq+0x204>)
 8003d6e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d70:	e0db      	b.n	8003f2a <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 8003cb2:	4b73      	ldr	r3, [pc, #460]	@ (8003e80 <HAL_RCC_GetSysClockFreq+0x208>)
 8003cb4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003cb6:	e0d8      	b.n	8003e6a <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 8003d72:	4b73      	ldr	r3, [pc, #460]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d74:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d76:	e0d8      	b.n	8003f2a <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< HEAD
 8003cb8:	4b6f      	ldr	r3, [pc, #444]	@ (8003e78 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cc0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cc2:	4b6d      	ldr	r3, [pc, #436]	@ (8003e78 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d063      	beq.n	8003d96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cce:	4b6a      	ldr	r3, [pc, #424]	@ (8003e78 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	099b      	lsrs	r3, r3, #6
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cd8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ce0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ce6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003cea:	4622      	mov	r2, r4
 8003cec:	462b      	mov	r3, r5
 8003cee:	f04f 0000 	mov.w	r0, #0
 8003cf2:	f04f 0100 	mov.w	r1, #0
 8003cf6:	0159      	lsls	r1, r3, #5
 8003cf8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cfc:	0150      	lsls	r0, r2, #5
 8003cfe:	4602      	mov	r2, r0
 8003d00:	460b      	mov	r3, r1
 8003d02:	4621      	mov	r1, r4
 8003d04:	1a51      	subs	r1, r2, r1
 8003d06:	6139      	str	r1, [r7, #16]
 8003d08:	4629      	mov	r1, r5
 8003d0a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d0e:	617b      	str	r3, [r7, #20]
 8003d10:	f04f 0200 	mov.w	r2, #0
 8003d14:	f04f 0300 	mov.w	r3, #0
 8003d18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d1c:	4659      	mov	r1, fp
 8003d1e:	018b      	lsls	r3, r1, #6
 8003d20:	4651      	mov	r1, sl
 8003d22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d26:	4651      	mov	r1, sl
 8003d28:	018a      	lsls	r2, r1, #6
 8003d2a:	4651      	mov	r1, sl
 8003d2c:	ebb2 0801 	subs.w	r8, r2, r1
 8003d30:	4659      	mov	r1, fp
 8003d32:	eb63 0901 	sbc.w	r9, r3, r1
 8003d36:	f04f 0200 	mov.w	r2, #0
 8003d3a:	f04f 0300 	mov.w	r3, #0
 8003d3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d4a:	4690      	mov	r8, r2
 8003d4c:	4699      	mov	r9, r3
 8003d4e:	4623      	mov	r3, r4
 8003d50:	eb18 0303 	adds.w	r3, r8, r3
 8003d54:	60bb      	str	r3, [r7, #8]
 8003d56:	462b      	mov	r3, r5
 8003d58:	eb49 0303 	adc.w	r3, r9, r3
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	f04f 0200 	mov.w	r2, #0
 8003d62:	f04f 0300 	mov.w	r3, #0
 8003d66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d6a:	4629      	mov	r1, r5
 8003d6c:	024b      	lsls	r3, r1, #9
 8003d6e:	4621      	mov	r1, r4
 8003d70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d74:	4621      	mov	r1, r4
 8003d76:	024a      	lsls	r2, r1, #9
 8003d78:	4610      	mov	r0, r2
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d7e:	2200      	movs	r2, #0
 8003d80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d88:	f7fc ff16 	bl	8000bb8 <__aeabi_uldivmod>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4613      	mov	r3, r2
 8003d92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d94:	e058      	b.n	8003e48 <HAL_RCC_GetSysClockFreq+0x1d0>
=======
 8003d78:	4b6f      	ldr	r3, [pc, #444]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d80:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d82:	4b6d      	ldr	r3, [pc, #436]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d063      	beq.n	8003e56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d8e:	4b6a      	ldr	r3, [pc, #424]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	099b      	lsrs	r3, r3, #6
 8003d94:	2200      	movs	r2, #0
 8003d96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d98:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003da2:	2300      	movs	r3, #0
 8003da4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003da6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003daa:	4622      	mov	r2, r4
 8003dac:	462b      	mov	r3, r5
 8003dae:	f04f 0000 	mov.w	r0, #0
 8003db2:	f04f 0100 	mov.w	r1, #0
 8003db6:	0159      	lsls	r1, r3, #5
 8003db8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dbc:	0150      	lsls	r0, r2, #5
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	4621      	mov	r1, r4
 8003dc4:	1a51      	subs	r1, r2, r1
 8003dc6:	6139      	str	r1, [r7, #16]
 8003dc8:	4629      	mov	r1, r5
 8003dca:	eb63 0301 	sbc.w	r3, r3, r1
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ddc:	4659      	mov	r1, fp
 8003dde:	018b      	lsls	r3, r1, #6
 8003de0:	4651      	mov	r1, sl
 8003de2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003de6:	4651      	mov	r1, sl
 8003de8:	018a      	lsls	r2, r1, #6
 8003dea:	4651      	mov	r1, sl
 8003dec:	ebb2 0801 	subs.w	r8, r2, r1
 8003df0:	4659      	mov	r1, fp
 8003df2:	eb63 0901 	sbc.w	r9, r3, r1
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	f04f 0300 	mov.w	r3, #0
 8003dfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e0a:	4690      	mov	r8, r2
 8003e0c:	4699      	mov	r9, r3
 8003e0e:	4623      	mov	r3, r4
 8003e10:	eb18 0303 	adds.w	r3, r8, r3
 8003e14:	60bb      	str	r3, [r7, #8]
 8003e16:	462b      	mov	r3, r5
 8003e18:	eb49 0303 	adc.w	r3, r9, r3
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	f04f 0200 	mov.w	r2, #0
 8003e22:	f04f 0300 	mov.w	r3, #0
 8003e26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e2a:	4629      	mov	r1, r5
 8003e2c:	024b      	lsls	r3, r1, #9
 8003e2e:	4621      	mov	r1, r4
 8003e30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e34:	4621      	mov	r1, r4
 8003e36:	024a      	lsls	r2, r1, #9
 8003e38:	4610      	mov	r0, r2
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e3e:	2200      	movs	r2, #0
 8003e40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e48:	f7fc feb6 	bl	8000bb8 <__aeabi_uldivmod>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4613      	mov	r3, r2
 8003e52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e54:	e058      	b.n	8003f08 <HAL_RCC_GetSysClockFreq+0x1d0>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      }
      else
      {
        /* HSI used as PLL clock source */
<<<<<<< HEAD
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d96:	4b38      	ldr	r3, [pc, #224]	@ (8003e78 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	099b      	lsrs	r3, r3, #6
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	4618      	mov	r0, r3
 8003da0:	4611      	mov	r1, r2
 8003da2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003da6:	623b      	str	r3, [r7, #32]
 8003da8:	2300      	movs	r3, #0
 8003daa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003db0:	4642      	mov	r2, r8
 8003db2:	464b      	mov	r3, r9
 8003db4:	f04f 0000 	mov.w	r0, #0
 8003db8:	f04f 0100 	mov.w	r1, #0
 8003dbc:	0159      	lsls	r1, r3, #5
 8003dbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dc2:	0150      	lsls	r0, r2, #5
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	4641      	mov	r1, r8
 8003dca:	ebb2 0a01 	subs.w	sl, r2, r1
 8003dce:	4649      	mov	r1, r9
 8003dd0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003dd4:	f04f 0200 	mov.w	r2, #0
 8003dd8:	f04f 0300 	mov.w	r3, #0
 8003ddc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003de0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003de4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003de8:	ebb2 040a 	subs.w	r4, r2, sl
 8003dec:	eb63 050b 	sbc.w	r5, r3, fp
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	f04f 0300 	mov.w	r3, #0
 8003df8:	00eb      	lsls	r3, r5, #3
 8003dfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dfe:	00e2      	lsls	r2, r4, #3
 8003e00:	4614      	mov	r4, r2
 8003e02:	461d      	mov	r5, r3
 8003e04:	4643      	mov	r3, r8
 8003e06:	18e3      	adds	r3, r4, r3
 8003e08:	603b      	str	r3, [r7, #0]
 8003e0a:	464b      	mov	r3, r9
 8003e0c:	eb45 0303 	adc.w	r3, r5, r3
 8003e10:	607b      	str	r3, [r7, #4]
 8003e12:	f04f 0200 	mov.w	r2, #0
 8003e16:	f04f 0300 	mov.w	r3, #0
 8003e1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e1e:	4629      	mov	r1, r5
 8003e20:	028b      	lsls	r3, r1, #10
 8003e22:	4621      	mov	r1, r4
 8003e24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e28:	4621      	mov	r1, r4
 8003e2a:	028a      	lsls	r2, r1, #10
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	4619      	mov	r1, r3
 8003e30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e32:	2200      	movs	r2, #0
 8003e34:	61bb      	str	r3, [r7, #24]
 8003e36:	61fa      	str	r2, [r7, #28]
 8003e38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e3c:	f7fc febc 	bl	8000bb8 <__aeabi_uldivmod>
 8003e40:	4602      	mov	r2, r0
 8003e42:	460b      	mov	r3, r1
 8003e44:	4613      	mov	r3, r2
 8003e46:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e48:	4b0b      	ldr	r3, [pc, #44]	@ (8003e78 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	0c1b      	lsrs	r3, r3, #16
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	3301      	adds	r3, #1
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003e58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e62:	e002      	b.n	8003e6a <HAL_RCC_GetSysClockFreq+0x1f2>
=======
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e56:	4b38      	ldr	r3, [pc, #224]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	099b      	lsrs	r3, r3, #6
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	4618      	mov	r0, r3
 8003e60:	4611      	mov	r1, r2
 8003e62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e66:	623b      	str	r3, [r7, #32]
 8003e68:	2300      	movs	r3, #0
 8003e6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e70:	4642      	mov	r2, r8
 8003e72:	464b      	mov	r3, r9
 8003e74:	f04f 0000 	mov.w	r0, #0
 8003e78:	f04f 0100 	mov.w	r1, #0
 8003e7c:	0159      	lsls	r1, r3, #5
 8003e7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e82:	0150      	lsls	r0, r2, #5
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	4641      	mov	r1, r8
 8003e8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e8e:	4649      	mov	r1, r9
 8003e90:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e94:	f04f 0200 	mov.w	r2, #0
 8003e98:	f04f 0300 	mov.w	r3, #0
 8003e9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ea0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ea4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ea8:	ebb2 040a 	subs.w	r4, r2, sl
 8003eac:	eb63 050b 	sbc.w	r5, r3, fp
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	00eb      	lsls	r3, r5, #3
 8003eba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ebe:	00e2      	lsls	r2, r4, #3
 8003ec0:	4614      	mov	r4, r2
 8003ec2:	461d      	mov	r5, r3
 8003ec4:	4643      	mov	r3, r8
 8003ec6:	18e3      	adds	r3, r4, r3
 8003ec8:	603b      	str	r3, [r7, #0]
 8003eca:	464b      	mov	r3, r9
 8003ecc:	eb45 0303 	adc.w	r3, r5, r3
 8003ed0:	607b      	str	r3, [r7, #4]
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	f04f 0300 	mov.w	r3, #0
 8003eda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ede:	4629      	mov	r1, r5
 8003ee0:	028b      	lsls	r3, r1, #10
 8003ee2:	4621      	mov	r1, r4
 8003ee4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ee8:	4621      	mov	r1, r4
 8003eea:	028a      	lsls	r2, r1, #10
 8003eec:	4610      	mov	r0, r2
 8003eee:	4619      	mov	r1, r3
 8003ef0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	61bb      	str	r3, [r7, #24]
 8003ef6:	61fa      	str	r2, [r7, #28]
 8003ef8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003efc:	f7fc fe5c 	bl	8000bb8 <__aeabi_uldivmod>
 8003f00:	4602      	mov	r2, r0
 8003f02:	460b      	mov	r3, r1
 8003f04:	4613      	mov	r3, r2
 8003f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003f08:	4b0b      	ldr	r3, [pc, #44]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	0c1b      	lsrs	r3, r3, #16
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	3301      	adds	r3, #1
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003f18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f20:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f22:	e002      	b.n	8003f2a <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8003e64:	4b05      	ldr	r3, [pc, #20]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x204>)
 8003e66:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3750      	adds	r7, #80	@ 0x50
 8003e70:	46bd      	mov	sp, r7
 8003e72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e76:	bf00      	nop
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	00f42400 	.word	0x00f42400
 8003e80:	007a1200 	.word	0x007a1200

08003e84 <HAL_RCC_GetHCLKFreq>:
=======
 8003f24:	4b05      	ldr	r3, [pc, #20]	@ (8003f3c <HAL_RCC_GetSysClockFreq+0x204>)
 8003f26:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3750      	adds	r7, #80	@ 0x50
 8003f30:	46bd      	mov	sp, r7
 8003f32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f36:	bf00      	nop
 8003f38:	40023800 	.word	0x40023800
 8003f3c:	00f42400 	.word	0x00f42400
 8003f40:	007a1200 	.word	0x007a1200

08003f44 <HAL_RCC_GetHCLKFreq>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e88:	4b03      	ldr	r3, [pc, #12]	@ (8003e98 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	20000000 	.word	0x20000000

08003e9c <HAL_RCC_GetPCLK1Freq>:
=======
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f48:	4b03      	ldr	r3, [pc, #12]	@ (8003f58 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	20000000 	.word	0x20000000

08003f5c <HAL_RCC_GetPCLK1Freq>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ea0:	f7ff fff0 	bl	8003e84 <HAL_RCC_GetHCLKFreq>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	4b05      	ldr	r3, [pc, #20]	@ (8003ebc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	0a9b      	lsrs	r3, r3, #10
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	4903      	ldr	r1, [pc, #12]	@ (8003ec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eb2:	5ccb      	ldrb	r3, [r1, r3]
 8003eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	0800c32c 	.word	0x0800c32c

08003ec4 <HAL_RCC_GetPCLK2Freq>:
=======
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f60:	f7ff fff0 	bl	8003f44 <HAL_RCC_GetHCLKFreq>
 8003f64:	4602      	mov	r2, r0
 8003f66:	4b05      	ldr	r3, [pc, #20]	@ (8003f7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	0a9b      	lsrs	r3, r3, #10
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	4903      	ldr	r1, [pc, #12]	@ (8003f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f72:	5ccb      	ldrb	r3, [r1, r3]
 8003f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	0800c40c 	.word	0x0800c40c

08003f84 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ec8:	f7ff ffdc 	bl	8003e84 <HAL_RCC_GetHCLKFreq>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	4b05      	ldr	r3, [pc, #20]	@ (8003ee4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	0b5b      	lsrs	r3, r3, #13
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	4903      	ldr	r1, [pc, #12]	@ (8003ee8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eda:	5ccb      	ldrb	r3, [r1, r3]
 8003edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	0800c32c 	.word	0x0800c32c

08003eec <HAL_RCC_GetClockConfig>:
=======
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f88:	f7ff ffdc 	bl	8003f44 <HAL_RCC_GetHCLKFreq>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	4b05      	ldr	r3, [pc, #20]	@ (8003fa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	0b5b      	lsrs	r3, r3, #13
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	4903      	ldr	r1, [pc, #12]	@ (8003fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f9a:	5ccb      	ldrb	r3, [r1, r3]
 8003f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	0800c40c 	.word	0x0800c40c

08003fac <HAL_RCC_GetClockConfig>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
<<<<<<< HEAD
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	220f      	movs	r2, #15
 8003efa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003efc:	4b12      	ldr	r3, [pc, #72]	@ (8003f48 <HAL_RCC_GetClockConfig+0x5c>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f003 0203 	and.w	r2, r3, #3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f08:	4b0f      	ldr	r3, [pc, #60]	@ (8003f48 <HAL_RCC_GetClockConfig+0x5c>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f14:	4b0c      	ldr	r3, [pc, #48]	@ (8003f48 <HAL_RCC_GetClockConfig+0x5c>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003f20:	4b09      	ldr	r3, [pc, #36]	@ (8003f48 <HAL_RCC_GetClockConfig+0x5c>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	08db      	lsrs	r3, r3, #3
 8003f26:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f2e:	4b07      	ldr	r3, [pc, #28]	@ (8003f4c <HAL_RCC_GetClockConfig+0x60>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0207 	and.w	r2, r3, #7
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	601a      	str	r2, [r3, #0]
}
 8003f3a:	bf00      	nop
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	40023c00 	.word	0x40023c00

08003f50 <HAL_SPI_Init>:
=======
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	220f      	movs	r2, #15
 8003fba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003fbc:	4b12      	ldr	r3, [pc, #72]	@ (8004008 <HAL_RCC_GetClockConfig+0x5c>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f003 0203 	and.w	r2, r3, #3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8004008 <HAL_RCC_GetClockConfig+0x5c>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8004008 <HAL_RCC_GetClockConfig+0x5c>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003fe0:	4b09      	ldr	r3, [pc, #36]	@ (8004008 <HAL_RCC_GetClockConfig+0x5c>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	08db      	lsrs	r3, r3, #3
 8003fe6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003fee:	4b07      	ldr	r3, [pc, #28]	@ (800400c <HAL_RCC_GetClockConfig+0x60>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0207 	and.w	r2, r3, #7
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	601a      	str	r2, [r3, #0]
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	40023800 	.word	0x40023800
 800400c:	40023c00 	.word	0x40023c00

08004010 <HAL_SPI_Init>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e07b      	b.n	800405a <HAL_SPI_Init+0x10a>
=======
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e07b      	b.n	800411a <HAL_SPI_Init+0x10a>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
<<<<<<< HEAD
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d108      	bne.n	8003f7c <HAL_SPI_Init+0x2c>
=======
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004026:	2b00      	cmp	r3, #0
 8004028:	d108      	bne.n	800403c <HAL_SPI_Init+0x2c>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
<<<<<<< HEAD
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f72:	d009      	beq.n	8003f88 <HAL_SPI_Init+0x38>
=======
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004032:	d009      	beq.n	8004048 <HAL_SPI_Init+0x38>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
<<<<<<< HEAD
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	61da      	str	r2, [r3, #28]
 8003f7a:	e005      	b.n	8003f88 <HAL_SPI_Init+0x38>
=======
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	61da      	str	r2, [r3, #28]
 800403a:	e005      	b.n	8004048 <HAL_SPI_Init+0x38>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
<<<<<<< HEAD
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	615a      	str	r2, [r3, #20]
=======
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	615a      	str	r2, [r3, #20]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
<<<<<<< HEAD
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
=======
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d106      	bne.n	8004068 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
<<<<<<< HEAD
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7fd fef6 	bl	8001d94 <HAL_SPI_MspInit>
=======
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fd fe9c 	bl	8001da0 <HAL_SPI_MspInit>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
<<<<<<< HEAD
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fbe:	601a      	str	r2, [r3, #0]
=======
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800407e:	601a      	str	r2, [r3, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
<<<<<<< HEAD
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004002:	431a      	orrs	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800400c:	ea42 0103 	orr.w	r1, r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004014:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	601a      	str	r2, [r3, #0]
=======
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004090:	431a      	orrs	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	431a      	orrs	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040b8:	431a      	orrs	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040cc:	ea42 0103 	orr.w	r1, r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	601a      	str	r2, [r3, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
<<<<<<< HEAD
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	0c1b      	lsrs	r3, r3, #16
 8004026:	f003 0104 	and.w	r1, r3, #4
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402e:	f003 0210 	and.w	r2, r3, #16
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	605a      	str	r2, [r3, #4]
=======
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	0c1b      	lsrs	r3, r3, #16
 80040e6:	f003 0104 	and.w	r1, r3, #4
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ee:	f003 0210 	and.w	r2, r3, #16
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	605a      	str	r2, [r3, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
<<<<<<< HEAD
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	69da      	ldr	r2, [r3, #28]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004048:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_TIM_Base_Init>:
=======
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	69da      	ldr	r2, [r3, #28]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004108:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <HAL_TIM_Base_Init>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004062:	b580      	push	{r7, lr}
 8004064:	b082      	sub	sp, #8
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e041      	b.n	80040f8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d106      	bne.n	800408e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8004122:	b580      	push	{r7, lr}
 8004124:	b082      	sub	sp, #8
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e041      	b.n	80041b8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d106      	bne.n	800414e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f7fd fecb 	bl	8001e24 <HAL_TIM_Base_MspInit>
=======
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f7fd fe71 	bl	8001e30 <HAL_TIM_Base_MspInit>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2202      	movs	r2, #2
 8004092:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3304      	adds	r3, #4
 800409e:	4619      	mov	r1, r3
 80040a0:	4610      	mov	r0, r2
 80040a2:	f000 fe93 	bl	8004dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_TIM_Base_Start_IT>:
=======
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2202      	movs	r2, #2
 8004152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	3304      	adds	r3, #4
 800415e:	4619      	mov	r1, r3
 8004160:	4610      	mov	r0, r2
 8004162:	f000 fe7b 	bl	8004e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3708      	adds	r7, #8
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_TIM_Base_Start_IT>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
=======
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< HEAD
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b01      	cmp	r3, #1
 8004112:	d001      	beq.n	8004118 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e044      	b.n	80041a2 <HAL_TIM_Base_Start_IT+0xa2>
=======
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d001      	beq.n	80041d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e044      	b.n	8004262 <HAL_TIM_Base_Start_IT+0xa2>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0201 	orr.w	r2, r2, #1
 800412e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a1e      	ldr	r2, [pc, #120]	@ (80041b0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d018      	beq.n	800416c <HAL_TIM_Base_Start_IT+0x6c>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004142:	d013      	beq.n	800416c <HAL_TIM_Base_Start_IT+0x6c>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a1a      	ldr	r2, [pc, #104]	@ (80041b4 <HAL_TIM_Base_Start_IT+0xb4>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d00e      	beq.n	800416c <HAL_TIM_Base_Start_IT+0x6c>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a19      	ldr	r2, [pc, #100]	@ (80041b8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d009      	beq.n	800416c <HAL_TIM_Base_Start_IT+0x6c>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a17      	ldr	r2, [pc, #92]	@ (80041bc <HAL_TIM_Base_Start_IT+0xbc>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d004      	beq.n	800416c <HAL_TIM_Base_Start_IT+0x6c>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a16      	ldr	r2, [pc, #88]	@ (80041c0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d111      	bne.n	8004190 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 0307 	and.w	r3, r3, #7
 8004176:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2b06      	cmp	r3, #6
 800417c:	d010      	beq.n	80041a0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f042 0201 	orr.w	r2, r2, #1
 800418c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800418e:	e007      	b.n	80041a0 <HAL_TIM_Base_Start_IT+0xa0>
=======
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68da      	ldr	r2, [r3, #12]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0201 	orr.w	r2, r2, #1
 80041ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a1e      	ldr	r2, [pc, #120]	@ (8004270 <HAL_TIM_Base_Start_IT+0xb0>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d018      	beq.n	800422c <HAL_TIM_Base_Start_IT+0x6c>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004202:	d013      	beq.n	800422c <HAL_TIM_Base_Start_IT+0x6c>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a1a      	ldr	r2, [pc, #104]	@ (8004274 <HAL_TIM_Base_Start_IT+0xb4>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d00e      	beq.n	800422c <HAL_TIM_Base_Start_IT+0x6c>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a19      	ldr	r2, [pc, #100]	@ (8004278 <HAL_TIM_Base_Start_IT+0xb8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d009      	beq.n	800422c <HAL_TIM_Base_Start_IT+0x6c>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a17      	ldr	r2, [pc, #92]	@ (800427c <HAL_TIM_Base_Start_IT+0xbc>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d004      	beq.n	800422c <HAL_TIM_Base_Start_IT+0x6c>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a16      	ldr	r2, [pc, #88]	@ (8004280 <HAL_TIM_Base_Start_IT+0xc0>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d111      	bne.n	8004250 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2b06      	cmp	r3, #6
 800423c:	d010      	beq.n	8004260 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f042 0201 	orr.w	r2, r2, #1
 800424c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800424e:	e007      	b.n	8004260 <HAL_TIM_Base_Start_IT+0xa0>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f042 0201 	orr.w	r2, r2, #1
 800419e:	601a      	str	r2, [r3, #0]
=======
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0201 	orr.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	40010000 	.word	0x40010000
 80041b4:	40000400 	.word	0x40000400
 80041b8:	40000800 	.word	0x40000800
 80041bc:	40000c00 	.word	0x40000c00
 80041c0:	40014000 	.word	0x40014000

080041c4 <HAL_TIM_PWM_Init>:
=======
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	40010000 	.word	0x40010000
 8004274:	40000400 	.word	0x40000400
 8004278:	40000800 	.word	0x40000800
 800427c:	40000c00 	.word	0x40000c00
 8004280:	40014000 	.word	0x40014000

08004284 <HAL_TIM_PWM_Init>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e041      	b.n	800425a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d106      	bne.n	80041f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e041      	b.n	800431a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
<<<<<<< HEAD
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fd fe9c 	bl	8001f28 <HAL_TIM_PWM_MspInit>
=======
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7fd fe42 	bl	8001f34 <HAL_TIM_PWM_MspInit>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2202      	movs	r2, #2
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	3304      	adds	r3, #4
 8004200:	4619      	mov	r1, r3
 8004202:	4610      	mov	r0, r2
 8004204:	f000 fde2 	bl	8004dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
	...

08004264 <HAL_TIM_PWM_Start>:
=======
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3304      	adds	r3, #4
 80042c0:	4619      	mov	r1, r3
 80042c2:	4610      	mov	r0, r2
 80042c4:	f000 fdca 	bl	8004e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <HAL_TIM_PWM_Start>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
=======
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
<<<<<<< HEAD
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d109      	bne.n	8004288 <HAL_TIM_PWM_Start+0x24>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b01      	cmp	r3, #1
 800427e:	bf14      	ite	ne
 8004280:	2301      	movne	r3, #1
 8004282:	2300      	moveq	r3, #0
 8004284:	b2db      	uxtb	r3, r3
 8004286:	e022      	b.n	80042ce <HAL_TIM_PWM_Start+0x6a>
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	2b04      	cmp	r3, #4
 800428c:	d109      	bne.n	80042a2 <HAL_TIM_PWM_Start+0x3e>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b01      	cmp	r3, #1
 8004298:	bf14      	ite	ne
 800429a:	2301      	movne	r3, #1
 800429c:	2300      	moveq	r3, #0
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	e015      	b.n	80042ce <HAL_TIM_PWM_Start+0x6a>
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d109      	bne.n	80042bc <HAL_TIM_PWM_Start+0x58>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	bf14      	ite	ne
 80042b4:	2301      	movne	r3, #1
 80042b6:	2300      	moveq	r3, #0
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	e008      	b.n	80042ce <HAL_TIM_PWM_Start+0x6a>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	bf14      	ite	ne
 80042c8:	2301      	movne	r3, #1
 80042ca:	2300      	moveq	r3, #0
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e068      	b.n	80043a8 <HAL_TIM_PWM_Start+0x144>
=======
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d109      	bne.n	8004348 <HAL_TIM_PWM_Start+0x24>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b01      	cmp	r3, #1
 800433e:	bf14      	ite	ne
 8004340:	2301      	movne	r3, #1
 8004342:	2300      	moveq	r3, #0
 8004344:	b2db      	uxtb	r3, r3
 8004346:	e022      	b.n	800438e <HAL_TIM_PWM_Start+0x6a>
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	2b04      	cmp	r3, #4
 800434c:	d109      	bne.n	8004362 <HAL_TIM_PWM_Start+0x3e>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b01      	cmp	r3, #1
 8004358:	bf14      	ite	ne
 800435a:	2301      	movne	r3, #1
 800435c:	2300      	moveq	r3, #0
 800435e:	b2db      	uxtb	r3, r3
 8004360:	e015      	b.n	800438e <HAL_TIM_PWM_Start+0x6a>
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	2b08      	cmp	r3, #8
 8004366:	d109      	bne.n	800437c <HAL_TIM_PWM_Start+0x58>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b01      	cmp	r3, #1
 8004372:	bf14      	ite	ne
 8004374:	2301      	movne	r3, #1
 8004376:	2300      	moveq	r3, #0
 8004378:	b2db      	uxtb	r3, r3
 800437a:	e008      	b.n	800438e <HAL_TIM_PWM_Start+0x6a>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2b01      	cmp	r3, #1
 8004386:	bf14      	ite	ne
 8004388:	2301      	movne	r3, #1
 800438a:	2300      	moveq	r3, #0
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e068      	b.n	8004468 <HAL_TIM_PWM_Start+0x144>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< HEAD
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d104      	bne.n	80042e6 <HAL_TIM_PWM_Start+0x82>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2202      	movs	r2, #2
 80042e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042e4:	e013      	b.n	800430e <HAL_TIM_PWM_Start+0xaa>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2b04      	cmp	r3, #4
 80042ea:	d104      	bne.n	80042f6 <HAL_TIM_PWM_Start+0x92>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042f4:	e00b      	b.n	800430e <HAL_TIM_PWM_Start+0xaa>
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d104      	bne.n	8004306 <HAL_TIM_PWM_Start+0xa2>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2202      	movs	r2, #2
 8004300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004304:	e003      	b.n	800430e <HAL_TIM_PWM_Start+0xaa>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2202      	movs	r2, #2
 800430a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2201      	movs	r2, #1
 8004314:	6839      	ldr	r1, [r7, #0]
 8004316:	4618      	mov	r0, r3
 8004318:	f001 f91c 	bl	8005554 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a23      	ldr	r2, [pc, #140]	@ (80043b0 <HAL_TIM_PWM_Start+0x14c>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d107      	bne.n	8004336 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004334:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d104      	bne.n	80043a6 <HAL_TIM_PWM_Start+0x82>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043a4:	e013      	b.n	80043ce <HAL_TIM_PWM_Start+0xaa>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b04      	cmp	r3, #4
 80043aa:	d104      	bne.n	80043b6 <HAL_TIM_PWM_Start+0x92>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043b4:	e00b      	b.n	80043ce <HAL_TIM_PWM_Start+0xaa>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	2b08      	cmp	r3, #8
 80043ba:	d104      	bne.n	80043c6 <HAL_TIM_PWM_Start+0xa2>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2202      	movs	r2, #2
 80043c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043c4:	e003      	b.n	80043ce <HAL_TIM_PWM_Start+0xaa>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2202      	movs	r2, #2
 80043ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2201      	movs	r2, #1
 80043d4:	6839      	ldr	r1, [r7, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f001 f90a 	bl	80055f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a23      	ldr	r2, [pc, #140]	@ (8004470 <HAL_TIM_PWM_Start+0x14c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d107      	bne.n	80043f6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80043f4:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
<<<<<<< HEAD
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a1d      	ldr	r2, [pc, #116]	@ (80043b0 <HAL_TIM_PWM_Start+0x14c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d018      	beq.n	8004372 <HAL_TIM_PWM_Start+0x10e>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004348:	d013      	beq.n	8004372 <HAL_TIM_PWM_Start+0x10e>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a19      	ldr	r2, [pc, #100]	@ (80043b4 <HAL_TIM_PWM_Start+0x150>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d00e      	beq.n	8004372 <HAL_TIM_PWM_Start+0x10e>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a17      	ldr	r2, [pc, #92]	@ (80043b8 <HAL_TIM_PWM_Start+0x154>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d009      	beq.n	8004372 <HAL_TIM_PWM_Start+0x10e>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a16      	ldr	r2, [pc, #88]	@ (80043bc <HAL_TIM_PWM_Start+0x158>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d004      	beq.n	8004372 <HAL_TIM_PWM_Start+0x10e>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a14      	ldr	r2, [pc, #80]	@ (80043c0 <HAL_TIM_PWM_Start+0x15c>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d111      	bne.n	8004396 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2b06      	cmp	r3, #6
 8004382:	d010      	beq.n	80043a6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0201 	orr.w	r2, r2, #1
 8004392:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004394:	e007      	b.n	80043a6 <HAL_TIM_PWM_Start+0x142>
=======
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a1d      	ldr	r2, [pc, #116]	@ (8004470 <HAL_TIM_PWM_Start+0x14c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d018      	beq.n	8004432 <HAL_TIM_PWM_Start+0x10e>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004408:	d013      	beq.n	8004432 <HAL_TIM_PWM_Start+0x10e>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a19      	ldr	r2, [pc, #100]	@ (8004474 <HAL_TIM_PWM_Start+0x150>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d00e      	beq.n	8004432 <HAL_TIM_PWM_Start+0x10e>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a17      	ldr	r2, [pc, #92]	@ (8004478 <HAL_TIM_PWM_Start+0x154>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d009      	beq.n	8004432 <HAL_TIM_PWM_Start+0x10e>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a16      	ldr	r2, [pc, #88]	@ (800447c <HAL_TIM_PWM_Start+0x158>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d004      	beq.n	8004432 <HAL_TIM_PWM_Start+0x10e>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a14      	ldr	r2, [pc, #80]	@ (8004480 <HAL_TIM_PWM_Start+0x15c>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d111      	bne.n	8004456 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2b06      	cmp	r3, #6
 8004442:	d010      	beq.n	8004466 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 0201 	orr.w	r2, r2, #1
 8004452:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004454:	e007      	b.n	8004466 <HAL_TIM_PWM_Start+0x142>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f042 0201 	orr.w	r2, r2, #1
 80043a4:	601a      	str	r2, [r3, #0]
=======
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f042 0201 	orr.w	r2, r2, #1
 8004464:	601a      	str	r2, [r3, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	40010000 	.word	0x40010000
 80043b4:	40000400 	.word	0x40000400
 80043b8:	40000800 	.word	0x40000800
 80043bc:	40000c00 	.word	0x40000c00
 80043c0:	40014000 	.word	0x40014000

080043c4 <HAL_TIM_IC_Init>:
=======
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	40010000 	.word	0x40010000
 8004474:	40000400 	.word	0x40000400
 8004478:	40000800 	.word	0x40000800
 800447c:	40000c00 	.word	0x40000c00
 8004480:	40014000 	.word	0x40014000

08004484 <HAL_TIM_IC_Init>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e041      	b.n	800445a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d106      	bne.n	80043f0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e041      	b.n	800451a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d106      	bne.n	80044b0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
<<<<<<< HEAD
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f839 	bl	8004462 <HAL_TIM_IC_MspInit>
=======
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f839 	bl	8004522 <HAL_TIM_IC_MspInit>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2202      	movs	r2, #2
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	3304      	adds	r3, #4
 8004400:	4619      	mov	r1, r3
 8004402:	4610      	mov	r0, r2
 8004404:	f000 fce2 	bl	8004dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <HAL_TIM_IC_MspInit>:
=======
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2202      	movs	r2, #2
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	3304      	adds	r3, #4
 80044c0:	4619      	mov	r1, r3
 80044c2:	4610      	mov	r0, r2
 80044c4:	f000 fcca 	bl	8004e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_TIM_IC_MspInit>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
=======
 8004522:	b480      	push	{r7}
 8004524:	b083      	sub	sp, #12
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
<<<<<<< HEAD
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
	...

08004478 <HAL_TIM_IC_Start_IT>:
=======
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
	...

08004538 <HAL_TIM_IC_Start_IT>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004482:	2300      	movs	r3, #0
 8004484:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d104      	bne.n	8004496 <HAL_TIM_IC_Start_IT+0x1e>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004492:	b2db      	uxtb	r3, r3
 8004494:	e013      	b.n	80044be <HAL_TIM_IC_Start_IT+0x46>
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b04      	cmp	r3, #4
 800449a:	d104      	bne.n	80044a6 <HAL_TIM_IC_Start_IT+0x2e>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	e00b      	b.n	80044be <HAL_TIM_IC_Start_IT+0x46>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	d104      	bne.n	80044b6 <HAL_TIM_IC_Start_IT+0x3e>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	e003      	b.n	80044be <HAL_TIM_IC_Start_IT+0x46>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d104      	bne.n	80044d0 <HAL_TIM_IC_Start_IT+0x58>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	e013      	b.n	80044f8 <HAL_TIM_IC_Start_IT+0x80>
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	d104      	bne.n	80044e0 <HAL_TIM_IC_Start_IT+0x68>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	e00b      	b.n	80044f8 <HAL_TIM_IC_Start_IT+0x80>
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	2b08      	cmp	r3, #8
 80044e4:	d104      	bne.n	80044f0 <HAL_TIM_IC_Start_IT+0x78>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	e003      	b.n	80044f8 <HAL_TIM_IC_Start_IT+0x80>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	737b      	strb	r3, [r7, #13]
=======
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004542:	2300      	movs	r3, #0
 8004544:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d104      	bne.n	8004556 <HAL_TIM_IC_Start_IT+0x1e>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004552:	b2db      	uxtb	r3, r3
 8004554:	e013      	b.n	800457e <HAL_TIM_IC_Start_IT+0x46>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	2b04      	cmp	r3, #4
 800455a:	d104      	bne.n	8004566 <HAL_TIM_IC_Start_IT+0x2e>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004562:	b2db      	uxtb	r3, r3
 8004564:	e00b      	b.n	800457e <HAL_TIM_IC_Start_IT+0x46>
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2b08      	cmp	r3, #8
 800456a:	d104      	bne.n	8004576 <HAL_TIM_IC_Start_IT+0x3e>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004572:	b2db      	uxtb	r3, r3
 8004574:	e003      	b.n	800457e <HAL_TIM_IC_Start_IT+0x46>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800457c:	b2db      	uxtb	r3, r3
 800457e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d104      	bne.n	8004590 <HAL_TIM_IC_Start_IT+0x58>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800458c:	b2db      	uxtb	r3, r3
 800458e:	e013      	b.n	80045b8 <HAL_TIM_IC_Start_IT+0x80>
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	2b04      	cmp	r3, #4
 8004594:	d104      	bne.n	80045a0 <HAL_TIM_IC_Start_IT+0x68>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800459c:	b2db      	uxtb	r3, r3
 800459e:	e00b      	b.n	80045b8 <HAL_TIM_IC_Start_IT+0x80>
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	2b08      	cmp	r3, #8
 80045a4:	d104      	bne.n	80045b0 <HAL_TIM_IC_Start_IT+0x78>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	e003      	b.n	80045b8 <HAL_TIM_IC_Start_IT+0x80>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	737b      	strb	r3, [r7, #13]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
<<<<<<< HEAD
 80044fa:	7bbb      	ldrb	r3, [r7, #14]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d102      	bne.n	8004506 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004500:	7b7b      	ldrb	r3, [r7, #13]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d001      	beq.n	800450a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e0c2      	b.n	8004690 <HAL_TIM_IC_Start_IT+0x218>
=======
 80045ba:	7bbb      	ldrb	r3, [r7, #14]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d102      	bne.n	80045c6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80045c0:	7b7b      	ldrb	r3, [r7, #13]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d001      	beq.n	80045ca <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e0c2      	b.n	8004750 <HAL_TIM_IC_Start_IT+0x218>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< HEAD
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d104      	bne.n	800451a <HAL_TIM_IC_Start_IT+0xa2>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2202      	movs	r2, #2
 8004514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004518:	e013      	b.n	8004542 <HAL_TIM_IC_Start_IT+0xca>
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2b04      	cmp	r3, #4
 800451e:	d104      	bne.n	800452a <HAL_TIM_IC_Start_IT+0xb2>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004528:	e00b      	b.n	8004542 <HAL_TIM_IC_Start_IT+0xca>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	2b08      	cmp	r3, #8
 800452e:	d104      	bne.n	800453a <HAL_TIM_IC_Start_IT+0xc2>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004538:	e003      	b.n	8004542 <HAL_TIM_IC_Start_IT+0xca>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2202      	movs	r2, #2
 800453e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d104      	bne.n	8004552 <HAL_TIM_IC_Start_IT+0xda>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2202      	movs	r2, #2
 800454c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004550:	e013      	b.n	800457a <HAL_TIM_IC_Start_IT+0x102>
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b04      	cmp	r3, #4
 8004556:	d104      	bne.n	8004562 <HAL_TIM_IC_Start_IT+0xea>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004560:	e00b      	b.n	800457a <HAL_TIM_IC_Start_IT+0x102>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b08      	cmp	r3, #8
 8004566:	d104      	bne.n	8004572 <HAL_TIM_IC_Start_IT+0xfa>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2202      	movs	r2, #2
 800456c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004570:	e003      	b.n	800457a <HAL_TIM_IC_Start_IT+0x102>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2202      	movs	r2, #2
 8004576:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b0c      	cmp	r3, #12
 800457e:	d841      	bhi.n	8004604 <HAL_TIM_IC_Start_IT+0x18c>
 8004580:	a201      	add	r2, pc, #4	@ (adr r2, 8004588 <HAL_TIM_IC_Start_IT+0x110>)
 8004582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004586:	bf00      	nop
 8004588:	080045bd 	.word	0x080045bd
 800458c:	08004605 	.word	0x08004605
 8004590:	08004605 	.word	0x08004605
 8004594:	08004605 	.word	0x08004605
 8004598:	080045cf 	.word	0x080045cf
 800459c:	08004605 	.word	0x08004605
 80045a0:	08004605 	.word	0x08004605
 80045a4:	08004605 	.word	0x08004605
 80045a8:	080045e1 	.word	0x080045e1
 80045ac:	08004605 	.word	0x08004605
 80045b0:	08004605 	.word	0x08004605
 80045b4:	08004605 	.word	0x08004605
 80045b8:	080045f3 	.word	0x080045f3
=======
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d104      	bne.n	80045da <HAL_TIM_IC_Start_IT+0xa2>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045d8:	e013      	b.n	8004602 <HAL_TIM_IC_Start_IT+0xca>
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2b04      	cmp	r3, #4
 80045de:	d104      	bne.n	80045ea <HAL_TIM_IC_Start_IT+0xb2>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045e8:	e00b      	b.n	8004602 <HAL_TIM_IC_Start_IT+0xca>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d104      	bne.n	80045fa <HAL_TIM_IC_Start_IT+0xc2>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045f8:	e003      	b.n	8004602 <HAL_TIM_IC_Start_IT+0xca>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2202      	movs	r2, #2
 80045fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d104      	bne.n	8004612 <HAL_TIM_IC_Start_IT+0xda>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004610:	e013      	b.n	800463a <HAL_TIM_IC_Start_IT+0x102>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b04      	cmp	r3, #4
 8004616:	d104      	bne.n	8004622 <HAL_TIM_IC_Start_IT+0xea>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004620:	e00b      	b.n	800463a <HAL_TIM_IC_Start_IT+0x102>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b08      	cmp	r3, #8
 8004626:	d104      	bne.n	8004632 <HAL_TIM_IC_Start_IT+0xfa>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004630:	e003      	b.n	800463a <HAL_TIM_IC_Start_IT+0x102>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2202      	movs	r2, #2
 8004636:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b0c      	cmp	r3, #12
 800463e:	d841      	bhi.n	80046c4 <HAL_TIM_IC_Start_IT+0x18c>
 8004640:	a201      	add	r2, pc, #4	@ (adr r2, 8004648 <HAL_TIM_IC_Start_IT+0x110>)
 8004642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004646:	bf00      	nop
 8004648:	0800467d 	.word	0x0800467d
 800464c:	080046c5 	.word	0x080046c5
 8004650:	080046c5 	.word	0x080046c5
 8004654:	080046c5 	.word	0x080046c5
 8004658:	0800468f 	.word	0x0800468f
 800465c:	080046c5 	.word	0x080046c5
 8004660:	080046c5 	.word	0x080046c5
 8004664:	080046c5 	.word	0x080046c5
 8004668:	080046a1 	.word	0x080046a1
 800466c:	080046c5 	.word	0x080046c5
 8004670:	080046c5 	.word	0x080046c5
 8004674:	080046c5 	.word	0x080046c5
 8004678:	080046b3 	.word	0x080046b3
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
<<<<<<< HEAD
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68da      	ldr	r2, [r3, #12]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0202 	orr.w	r2, r2, #2
 80045ca:	60da      	str	r2, [r3, #12]
      break;
 80045cc:	e01d      	b.n	800460a <HAL_TIM_IC_Start_IT+0x192>
=======
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68da      	ldr	r2, [r3, #12]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f042 0202 	orr.w	r2, r2, #2
 800468a:	60da      	str	r2, [r3, #12]
      break;
 800468c:	e01d      	b.n	80046ca <HAL_TIM_IC_Start_IT+0x192>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
<<<<<<< HEAD
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68da      	ldr	r2, [r3, #12]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f042 0204 	orr.w	r2, r2, #4
 80045dc:	60da      	str	r2, [r3, #12]
      break;
 80045de:	e014      	b.n	800460a <HAL_TIM_IC_Start_IT+0x192>
=======
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68da      	ldr	r2, [r3, #12]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f042 0204 	orr.w	r2, r2, #4
 800469c:	60da      	str	r2, [r3, #12]
      break;
 800469e:	e014      	b.n	80046ca <HAL_TIM_IC_Start_IT+0x192>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
<<<<<<< HEAD
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68da      	ldr	r2, [r3, #12]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f042 0208 	orr.w	r2, r2, #8
 80045ee:	60da      	str	r2, [r3, #12]
      break;
 80045f0:	e00b      	b.n	800460a <HAL_TIM_IC_Start_IT+0x192>
=======
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0208 	orr.w	r2, r2, #8
 80046ae:	60da      	str	r2, [r3, #12]
      break;
 80046b0:	e00b      	b.n	80046ca <HAL_TIM_IC_Start_IT+0x192>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
<<<<<<< HEAD
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68da      	ldr	r2, [r3, #12]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f042 0210 	orr.w	r2, r2, #16
 8004600:	60da      	str	r2, [r3, #12]
      break;
 8004602:	e002      	b.n	800460a <HAL_TIM_IC_Start_IT+0x192>
=======
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68da      	ldr	r2, [r3, #12]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f042 0210 	orr.w	r2, r2, #16
 80046c0:	60da      	str	r2, [r3, #12]
      break;
 80046c2:	e002      	b.n	80046ca <HAL_TIM_IC_Start_IT+0x192>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 8004604:	2301      	movs	r3, #1
 8004606:	73fb      	strb	r3, [r7, #15]
      break;
 8004608:	bf00      	nop
  }

  if (status == HAL_OK)
 800460a:	7bfb      	ldrb	r3, [r7, #15]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d13e      	bne.n	800468e <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2201      	movs	r2, #1
 8004616:	6839      	ldr	r1, [r7, #0]
 8004618:	4618      	mov	r0, r3
 800461a:	f000 ff9b 	bl	8005554 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a1d      	ldr	r2, [pc, #116]	@ (8004698 <HAL_TIM_IC_Start_IT+0x220>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d018      	beq.n	800465a <HAL_TIM_IC_Start_IT+0x1e2>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004630:	d013      	beq.n	800465a <HAL_TIM_IC_Start_IT+0x1e2>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a19      	ldr	r2, [pc, #100]	@ (800469c <HAL_TIM_IC_Start_IT+0x224>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d00e      	beq.n	800465a <HAL_TIM_IC_Start_IT+0x1e2>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a17      	ldr	r2, [pc, #92]	@ (80046a0 <HAL_TIM_IC_Start_IT+0x228>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d009      	beq.n	800465a <HAL_TIM_IC_Start_IT+0x1e2>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a16      	ldr	r2, [pc, #88]	@ (80046a4 <HAL_TIM_IC_Start_IT+0x22c>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d004      	beq.n	800465a <HAL_TIM_IC_Start_IT+0x1e2>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a14      	ldr	r2, [pc, #80]	@ (80046a8 <HAL_TIM_IC_Start_IT+0x230>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d111      	bne.n	800467e <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	2b06      	cmp	r3, #6
 800466a:	d010      	beq.n	800468e <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f042 0201 	orr.w	r2, r2, #1
 800467a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800467c:	e007      	b.n	800468e <HAL_TIM_IC_Start_IT+0x216>
=======
 80046c4:	2301      	movs	r3, #1
 80046c6:	73fb      	strb	r3, [r7, #15]
      break;
 80046c8:	bf00      	nop
  }

  if (status == HAL_OK)
 80046ca:	7bfb      	ldrb	r3, [r7, #15]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d13e      	bne.n	800474e <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2201      	movs	r2, #1
 80046d6:	6839      	ldr	r1, [r7, #0]
 80046d8:	4618      	mov	r0, r3
 80046da:	f000 ff89 	bl	80055f0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a1d      	ldr	r2, [pc, #116]	@ (8004758 <HAL_TIM_IC_Start_IT+0x220>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d018      	beq.n	800471a <HAL_TIM_IC_Start_IT+0x1e2>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046f0:	d013      	beq.n	800471a <HAL_TIM_IC_Start_IT+0x1e2>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a19      	ldr	r2, [pc, #100]	@ (800475c <HAL_TIM_IC_Start_IT+0x224>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d00e      	beq.n	800471a <HAL_TIM_IC_Start_IT+0x1e2>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a17      	ldr	r2, [pc, #92]	@ (8004760 <HAL_TIM_IC_Start_IT+0x228>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d009      	beq.n	800471a <HAL_TIM_IC_Start_IT+0x1e2>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a16      	ldr	r2, [pc, #88]	@ (8004764 <HAL_TIM_IC_Start_IT+0x22c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d004      	beq.n	800471a <HAL_TIM_IC_Start_IT+0x1e2>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a14      	ldr	r2, [pc, #80]	@ (8004768 <HAL_TIM_IC_Start_IT+0x230>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d111      	bne.n	800473e <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2b06      	cmp	r3, #6
 800472a:	d010      	beq.n	800474e <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0201 	orr.w	r2, r2, #1
 800473a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800473c:	e007      	b.n	800474e <HAL_TIM_IC_Start_IT+0x216>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f042 0201 	orr.w	r2, r2, #1
 800468c:	601a      	str	r2, [r3, #0]
=======
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f042 0201 	orr.w	r2, r2, #1
 800474c:	601a      	str	r2, [r3, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }
  }

  /* Return function status */
  return status;
<<<<<<< HEAD
 800468e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004690:	4618      	mov	r0, r3
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	40010000 	.word	0x40010000
 800469c:	40000400 	.word	0x40000400
 80046a0:	40000800 	.word	0x40000800
 80046a4:	40000c00 	.word	0x40000c00
 80046a8:	40014000 	.word	0x40014000

080046ac <HAL_TIM_IRQHandler>:
=======
 800474e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004750:	4618      	mov	r0, r3
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	40010000 	.word	0x40010000
 800475c:	40000400 	.word	0x40000400
 8004760:	40000800 	.word	0x40000800
 8004764:	40000c00 	.word	0x40000c00
 8004768:	40014000 	.word	0x40014000

0800476c <HAL_TIM_IRQHandler>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d122      	bne.n	8004708 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d11b      	bne.n	8004708 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f06f 0202 	mvn.w	r2, #2
 80046d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	f003 0303 	and.w	r3, r3, #3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_TIM_IRQHandler+0x4a>
=======
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d020      	beq.n	80047d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d01b      	beq.n	80047d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f06f 0202 	mvn.w	r2, #2
 80047a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	f003 0303 	and.w	r3, r3, #3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <HAL_TIM_IRQHandler+0x52>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7fd fef2 	bl	80024d8 <HAL_TIM_IC_CaptureCallback>
 80046f4:	e005      	b.n	8004702 <HAL_TIM_IRQHandler+0x56>
=======
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7fd fe9c 	bl	80024f4 <HAL_TIM_IC_CaptureCallback>
 80047bc:	e005      	b.n	80047ca <HAL_TIM_IRQHandler+0x5e>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 fb4a 	bl	8004d90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 fb51 	bl	8004da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	771a      	strb	r2, [r3, #28]
=======
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 fb2e 	bl	8004e20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 fb35 	bl	8004e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	771a      	strb	r2, [r3, #28]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      }
    }
  }
  /* Capture compare 2 event */
<<<<<<< HEAD
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	f003 0304 	and.w	r3, r3, #4
 8004712:	2b04      	cmp	r3, #4
 8004714:	d122      	bne.n	800475c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f003 0304 	and.w	r3, r3, #4
 8004720:	2b04      	cmp	r3, #4
 8004722:	d11b      	bne.n	800475c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f06f 0204 	mvn.w	r2, #4
 800472c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2202      	movs	r2, #2
 8004732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_TIM_IRQHandler+0x9e>
=======
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	f003 0304 	and.w	r3, r3, #4
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d020      	beq.n	800481c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d01b      	beq.n	800481c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f06f 0204 	mvn.w	r2, #4
 80047ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2202      	movs	r2, #2
 80047f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <HAL_TIM_IRQHandler+0x9e>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7fd fec8 	bl	80024d8 <HAL_TIM_IC_CaptureCallback>
 8004748:	e005      	b.n	8004756 <HAL_TIM_IRQHandler+0xaa>
=======
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7fd fe76 	bl	80024f4 <HAL_TIM_IC_CaptureCallback>
 8004808:	e005      	b.n	8004816 <HAL_TIM_IRQHandler+0xaa>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 fb20 	bl	8004d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 fb27 	bl	8004da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	f003 0308 	and.w	r3, r3, #8
 8004766:	2b08      	cmp	r3, #8
 8004768:	d122      	bne.n	80047b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f003 0308 	and.w	r3, r3, #8
 8004774:	2b08      	cmp	r3, #8
 8004776:	d11b      	bne.n	80047b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f06f 0208 	mvn.w	r2, #8
 8004780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2204      	movs	r2, #4
 8004786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	f003 0303 	and.w	r3, r3, #3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <HAL_TIM_IRQHandler+0xf2>
=======
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 fb08 	bl	8004e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 fb0f 	bl	8004e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	f003 0308 	and.w	r3, r3, #8
 8004822:	2b00      	cmp	r3, #0
 8004824:	d020      	beq.n	8004868 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f003 0308 	and.w	r3, r3, #8
 800482c:	2b00      	cmp	r3, #0
 800482e:	d01b      	beq.n	8004868 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f06f 0208 	mvn.w	r2, #8
 8004838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2204      	movs	r2, #4
 800483e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <HAL_TIM_IRQHandler+0xea>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7fd fe9e 	bl	80024d8 <HAL_TIM_IC_CaptureCallback>
 800479c:	e005      	b.n	80047aa <HAL_TIM_IRQHandler+0xfe>
=======
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7fd fe50 	bl	80024f4 <HAL_TIM_IC_CaptureCallback>
 8004854:	e005      	b.n	8004862 <HAL_TIM_IRQHandler+0xf6>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 faf6 	bl	8004d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 fafd 	bl	8004da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	f003 0310 	and.w	r3, r3, #16
 80047ba:	2b10      	cmp	r3, #16
 80047bc:	d122      	bne.n	8004804 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	f003 0310 	and.w	r3, r3, #16
 80047c8:	2b10      	cmp	r3, #16
 80047ca:	d11b      	bne.n	8004804 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f06f 0210 	mvn.w	r2, #16
 80047d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2208      	movs	r2, #8
 80047da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <HAL_TIM_IRQHandler+0x146>
=======
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 fae2 	bl	8004e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 fae9 	bl	8004e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f003 0310 	and.w	r3, r3, #16
 800486e:	2b00      	cmp	r3, #0
 8004870:	d020      	beq.n	80048b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f003 0310 	and.w	r3, r3, #16
 8004878:	2b00      	cmp	r3, #0
 800487a:	d01b      	beq.n	80048b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f06f 0210 	mvn.w	r2, #16
 8004884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2208      	movs	r2, #8
 800488a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <HAL_TIM_IRQHandler+0x136>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7fd fe74 	bl	80024d8 <HAL_TIM_IC_CaptureCallback>
 80047f0:	e005      	b.n	80047fe <HAL_TIM_IRQHandler+0x152>
=======
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7fd fe2a 	bl	80024f4 <HAL_TIM_IC_CaptureCallback>
 80048a0:	e005      	b.n	80048ae <HAL_TIM_IRQHandler+0x142>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 facc 	bl	8004d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 fad3 	bl	8004da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b01      	cmp	r3, #1
 8004810:	d10e      	bne.n	8004830 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b01      	cmp	r3, #1
 800481e:	d107      	bne.n	8004830 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f06f 0201 	mvn.w	r2, #1
 8004828:	611a      	str	r2, [r3, #16]
=======
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 fabc 	bl	8004e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 fac3 	bl	8004e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00c      	beq.n	80048d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d007      	beq.n	80048d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f06f 0201 	mvn.w	r2, #1
 80048d0:	611a      	str	r2, [r3, #16]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7fd f992 	bl	8001b54 <HAL_TIM_PeriodElapsedCallback>
=======
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7fd f944 	bl	8001b60 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
<<<<<<< HEAD
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800483a:	2b80      	cmp	r3, #128	@ 0x80
 800483c:	d10e      	bne.n	800485c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004848:	2b80      	cmp	r3, #128	@ 0x80
 800484a:	d107      	bne.n	800485c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004854:	611a      	str	r2, [r3, #16]
=======
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00c      	beq.n	80048fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d007      	beq.n	80048fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80048f4:	611a      	str	r2, [r3, #16]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 ff1a 	bl	8005690 <HAL_TIMEx_BreakCallback>
=======
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 ff18 	bl	800572c <HAL_TIMEx_BreakCallback>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
<<<<<<< HEAD
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004866:	2b40      	cmp	r3, #64	@ 0x40
 8004868:	d10e      	bne.n	8004888 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004874:	2b40      	cmp	r3, #64	@ 0x40
 8004876:	d107      	bne.n	8004888 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004880:	611a      	str	r2, [r3, #16]
=======
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00c      	beq.n	8004920 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800490c:	2b00      	cmp	r3, #0
 800490e:	d007      	beq.n	8004920 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004918:	611a      	str	r2, [r3, #16]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 fa98 	bl	8004db8 <HAL_TIM_TriggerCallback>
=======
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 fa94 	bl	8004e48 <HAL_TIM_TriggerCallback>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
<<<<<<< HEAD
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f003 0320 	and.w	r3, r3, #32
 8004892:	2b20      	cmp	r3, #32
 8004894:	d10e      	bne.n	80048b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f003 0320 	and.w	r3, r3, #32
 80048a0:	2b20      	cmp	r3, #32
 80048a2:	d107      	bne.n	80048b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f06f 0220 	mvn.w	r2, #32
 80048ac:	611a      	str	r2, [r3, #16]
=======
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f003 0320 	and.w	r3, r3, #32
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00c      	beq.n	8004944 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f003 0320 	and.w	r3, r3, #32
 8004930:	2b00      	cmp	r3, #0
 8004932:	d007      	beq.n	8004944 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f06f 0220 	mvn.w	r2, #32
 800493c:	611a      	str	r2, [r3, #16]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 fee4 	bl	800567c <HAL_TIMEx_CommutCallback>
=======
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 feea 	bl	8005718 <HAL_TIMEx_CommutCallback>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 80048b4:	bf00      	nop
 80048b6:	3708      	adds	r7, #8
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <HAL_TIM_IC_ConfigChannel>:
=======
 8004944:	bf00      	nop
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <HAL_TIM_IC_ConfigChannel>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
<<<<<<< HEAD
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048c8:	2300      	movs	r3, #0
 80048ca:	75fb      	strb	r3, [r7, #23]
=======
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004958:	2300      	movs	r3, #0
 800495a:	75fb      	strb	r3, [r7, #23]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d101      	bne.n	80048da <HAL_TIM_IC_ConfigChannel+0x1e>
 80048d6:	2302      	movs	r3, #2
 80048d8:	e088      	b.n	80049ec <HAL_TIM_IC_ConfigChannel+0x130>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d11b      	bne.n	8004920 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6818      	ldr	r0, [r3, #0]
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	6819      	ldr	r1, [r3, #0]
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f000 fc74 	bl	80051e4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699a      	ldr	r2, [r3, #24]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 020c 	bic.w	r2, r2, #12
 800490a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6999      	ldr	r1, [r3, #24]
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	689a      	ldr	r2, [r3, #8]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	430a      	orrs	r2, r1
 800491c:	619a      	str	r2, [r3, #24]
 800491e:	e060      	b.n	80049e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b04      	cmp	r3, #4
 8004924:	d11c      	bne.n	8004960 <HAL_TIM_IC_ConfigChannel+0xa4>
=======
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004962:	2b01      	cmp	r3, #1
 8004964:	d101      	bne.n	800496a <HAL_TIM_IC_ConfigChannel+0x1e>
 8004966:	2302      	movs	r3, #2
 8004968:	e088      	b.n	8004a7c <HAL_TIM_IC_ConfigChannel+0x130>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d11b      	bne.n	80049b0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004988:	f000 fc7a 	bl	8005280 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699a      	ldr	r2, [r3, #24]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 020c 	bic.w	r2, r2, #12
 800499a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6999      	ldr	r1, [r3, #24]
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	689a      	ldr	r2, [r3, #8]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	619a      	str	r2, [r3, #24]
 80049ae:	e060      	b.n	8004a72 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b04      	cmp	r3, #4
 80049b4:	d11c      	bne.n	80049f0 <HAL_TIM_IC_ConfigChannel+0xa4>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
<<<<<<< HEAD
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6818      	ldr	r0, [r3, #0]
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	6819      	ldr	r1, [r3, #0]
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f000 fcec 	bl	8005312 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	699a      	ldr	r2, [r3, #24]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004948:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	6999      	ldr	r1, [r3, #24]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	021a      	lsls	r2, r3, #8
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	430a      	orrs	r2, r1
 800495c:	619a      	str	r2, [r3, #24]
 800495e:	e040      	b.n	80049e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b08      	cmp	r3, #8
 8004964:	d11b      	bne.n	800499e <HAL_TIM_IC_ConfigChannel+0xe2>
=======
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80049c6:	f000 fcf2 	bl	80053ae <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	699a      	ldr	r2, [r3, #24]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80049d8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6999      	ldr	r1, [r3, #24]
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	021a      	lsls	r2, r3, #8
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	619a      	str	r2, [r3, #24]
 80049ee:	e040      	b.n	8004a72 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b08      	cmp	r3, #8
 80049f4:	d11b      	bne.n	8004a2e <HAL_TIM_IC_ConfigChannel+0xe2>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
<<<<<<< HEAD
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6818      	ldr	r0, [r3, #0]
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	6819      	ldr	r1, [r3, #0]
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f000 fd39 	bl	80053ec <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	69da      	ldr	r2, [r3, #28]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 020c 	bic.w	r2, r2, #12
 8004988:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	69d9      	ldr	r1, [r3, #28]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	430a      	orrs	r2, r1
 800499a:	61da      	str	r2, [r3, #28]
 800499c:	e021      	b.n	80049e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b0c      	cmp	r3, #12
 80049a2:	d11c      	bne.n	80049de <HAL_TIM_IC_ConfigChannel+0x122>
=======
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004a06:	f000 fd3f 	bl	8005488 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	69da      	ldr	r2, [r3, #28]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 020c 	bic.w	r2, r2, #12
 8004a18:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	69d9      	ldr	r1, [r3, #28]
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	61da      	str	r2, [r3, #28]
 8004a2c:	e021      	b.n	8004a72 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b0c      	cmp	r3, #12
 8004a32:	d11c      	bne.n	8004a6e <HAL_TIM_IC_ConfigChannel+0x122>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
<<<<<<< HEAD
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6818      	ldr	r0, [r3, #0]
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	6819      	ldr	r1, [r3, #0]
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f000 fd56 	bl	8005464 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	69da      	ldr	r2, [r3, #28]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80049c6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	69d9      	ldr	r1, [r3, #28]
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	021a      	lsls	r2, r3, #8
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	61da      	str	r2, [r3, #28]
 80049dc:	e001      	b.n	80049e2 <HAL_TIM_IC_ConfigChannel+0x126>
=======
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004a44:	f000 fd5c 	bl	8005500 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	69da      	ldr	r2, [r3, #28]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004a56:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	69d9      	ldr	r1, [r3, #28]
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	021a      	lsls	r2, r3, #8
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	61da      	str	r2, [r3, #28]
 8004a6c:	e001      	b.n	8004a72 <HAL_TIM_IC_ConfigChannel+0x126>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }
  else
  {
    status = HAL_ERROR;
<<<<<<< HEAD
 80049de:	2301      	movs	r3, #1
 80049e0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3718      	adds	r7, #24
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a00:	2300      	movs	r3, #0
 8004a02:	75fb      	strb	r3, [r7, #23]
=======
 8004a6e:	2301      	movs	r3, #1
 8004a70:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3718      	adds	r7, #24
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a90:	2300      	movs	r3, #0
 8004a92:	75fb      	strb	r3, [r7, #23]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d101      	bne.n	8004a12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a0e:	2302      	movs	r3, #2
 8004a10:	e0ae      	b.n	8004b70 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b0c      	cmp	r3, #12
 8004a1e:	f200 809f 	bhi.w	8004b60 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a22:	a201      	add	r2, pc, #4	@ (adr r2, 8004a28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a28:	08004a5d 	.word	0x08004a5d
 8004a2c:	08004b61 	.word	0x08004b61
 8004a30:	08004b61 	.word	0x08004b61
 8004a34:	08004b61 	.word	0x08004b61
 8004a38:	08004a9d 	.word	0x08004a9d
 8004a3c:	08004b61 	.word	0x08004b61
 8004a40:	08004b61 	.word	0x08004b61
 8004a44:	08004b61 	.word	0x08004b61
 8004a48:	08004adf 	.word	0x08004adf
 8004a4c:	08004b61 	.word	0x08004b61
 8004a50:	08004b61 	.word	0x08004b61
 8004a54:	08004b61 	.word	0x08004b61
 8004a58:	08004b1f 	.word	0x08004b1f
=======
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d101      	bne.n	8004aa2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	e0ae      	b.n	8004c00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b0c      	cmp	r3, #12
 8004aae:	f200 809f 	bhi.w	8004bf0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ab8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab8:	08004aed 	.word	0x08004aed
 8004abc:	08004bf1 	.word	0x08004bf1
 8004ac0:	08004bf1 	.word	0x08004bf1
 8004ac4:	08004bf1 	.word	0x08004bf1
 8004ac8:	08004b2d 	.word	0x08004b2d
 8004acc:	08004bf1 	.word	0x08004bf1
 8004ad0:	08004bf1 	.word	0x08004bf1
 8004ad4:	08004bf1 	.word	0x08004bf1
 8004ad8:	08004b6f 	.word	0x08004b6f
 8004adc:	08004bf1 	.word	0x08004bf1
 8004ae0:	08004bf1 	.word	0x08004bf1
 8004ae4:	08004bf1 	.word	0x08004bf1
 8004ae8:	08004baf 	.word	0x08004baf
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68b9      	ldr	r1, [r7, #8]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fa32 	bl	8004ecc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699a      	ldr	r2, [r3, #24]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f042 0208 	orr.w	r2, r2, #8
 8004a76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699a      	ldr	r2, [r3, #24]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 0204 	bic.w	r2, r2, #4
 8004a86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6999      	ldr	r1, [r3, #24]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	691a      	ldr	r2, [r3, #16]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	619a      	str	r2, [r3, #24]
      break;
 8004a9a:	e064      	b.n	8004b66 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68b9      	ldr	r1, [r7, #8]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 fa38 	bl	8004f68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	699a      	ldr	r2, [r3, #24]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0208 	orr.w	r2, r2, #8
 8004b06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699a      	ldr	r2, [r3, #24]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 0204 	bic.w	r2, r2, #4
 8004b16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6999      	ldr	r1, [r3, #24]
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	691a      	ldr	r2, [r3, #16]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	619a      	str	r2, [r3, #24]
      break;
 8004b2a:	e064      	b.n	8004bf6 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68b9      	ldr	r1, [r7, #8]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 fa78 	bl	8004f98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	699a      	ldr	r2, [r3, #24]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ab6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	699a      	ldr	r2, [r3, #24]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ac6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6999      	ldr	r1, [r3, #24]
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	021a      	lsls	r2, r3, #8
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	619a      	str	r2, [r3, #24]
      break;
 8004adc:	e043      	b.n	8004b66 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68b9      	ldr	r1, [r7, #8]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 fa7e 	bl	8005034 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	699a      	ldr	r2, [r3, #24]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699a      	ldr	r2, [r3, #24]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	6999      	ldr	r1, [r3, #24]
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	021a      	lsls	r2, r3, #8
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	619a      	str	r2, [r3, #24]
      break;
 8004b6c:	e043      	b.n	8004bf6 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68b9      	ldr	r1, [r7, #8]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 fac3 	bl	8005070 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	69da      	ldr	r2, [r3, #28]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f042 0208 	orr.w	r2, r2, #8
 8004af8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	69da      	ldr	r2, [r3, #28]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 0204 	bic.w	r2, r2, #4
 8004b08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	69d9      	ldr	r1, [r3, #28]
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	61da      	str	r2, [r3, #28]
      break;
 8004b1c:	e023      	b.n	8004b66 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68b9      	ldr	r1, [r7, #8]
 8004b74:	4618      	mov	r0, r3
 8004b76:	f000 fac9 	bl	800510c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69da      	ldr	r2, [r3, #28]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f042 0208 	orr.w	r2, r2, #8
 8004b88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69da      	ldr	r2, [r3, #28]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f022 0204 	bic.w	r2, r2, #4
 8004b98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	69d9      	ldr	r1, [r3, #28]
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	691a      	ldr	r2, [r3, #16]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	61da      	str	r2, [r3, #28]
      break;
 8004bac:	e023      	b.n	8004bf6 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68b9      	ldr	r1, [r7, #8]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 fb0d 	bl	8005144 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	69da      	ldr	r2, [r3, #28]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69da      	ldr	r2, [r3, #28]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	69d9      	ldr	r1, [r3, #28]
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	021a      	lsls	r2, r3, #8
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	61da      	str	r2, [r3, #28]
      break;
 8004b5e:	e002      	b.n	8004b66 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68b9      	ldr	r1, [r7, #8]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f000 fb13 	bl	80051e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	69da      	ldr	r2, [r3, #28]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	69da      	ldr	r2, [r3, #28]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	69d9      	ldr	r1, [r3, #28]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	021a      	lsls	r2, r3, #8
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	61da      	str	r2, [r3, #28]
      break;
 8004bee:	e002      	b.n	8004bf6 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 8004b60:	2301      	movs	r3, #1
 8004b62:	75fb      	strb	r3, [r7, #23]
      break;
 8004b64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3718      	adds	r7, #24
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <HAL_TIM_ConfigClockSource>:
=======
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	75fb      	strb	r3, [r7, #23]
      break;
 8004bf4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3718      	adds	r7, #24
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <HAL_TIM_ConfigClockSource>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
<<<<<<< HEAD
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b82:	2300      	movs	r3, #0
 8004b84:	73fb      	strb	r3, [r7, #15]
=======
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c12:	2300      	movs	r3, #0
 8004c14:	73fb      	strb	r3, [r7, #15]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d101      	bne.n	8004b94 <HAL_TIM_ConfigClockSource+0x1c>
 8004b90:	2302      	movs	r3, #2
 8004b92:	e0b4      	b.n	8004cfe <HAL_TIM_ConfigClockSource+0x186>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2202      	movs	r2, #2
 8004ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
=======
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d101      	bne.n	8004c24 <HAL_TIM_ConfigClockSource+0x1c>
 8004c20:	2302      	movs	r3, #2
 8004c22:	e0b4      	b.n	8004d8e <HAL_TIM_ConfigClockSource+0x186>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004bb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bcc:	d03e      	beq.n	8004c4c <HAL_TIM_ConfigClockSource+0xd4>
 8004bce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bd2:	f200 8087 	bhi.w	8004ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bda:	f000 8086 	beq.w	8004cea <HAL_TIM_ConfigClockSource+0x172>
 8004bde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004be2:	d87f      	bhi.n	8004ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8004be4:	2b70      	cmp	r3, #112	@ 0x70
 8004be6:	d01a      	beq.n	8004c1e <HAL_TIM_ConfigClockSource+0xa6>
 8004be8:	2b70      	cmp	r3, #112	@ 0x70
 8004bea:	d87b      	bhi.n	8004ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bec:	2b60      	cmp	r3, #96	@ 0x60
 8004bee:	d050      	beq.n	8004c92 <HAL_TIM_ConfigClockSource+0x11a>
 8004bf0:	2b60      	cmp	r3, #96	@ 0x60
 8004bf2:	d877      	bhi.n	8004ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf4:	2b50      	cmp	r3, #80	@ 0x50
 8004bf6:	d03c      	beq.n	8004c72 <HAL_TIM_ConfigClockSource+0xfa>
 8004bf8:	2b50      	cmp	r3, #80	@ 0x50
 8004bfa:	d873      	bhi.n	8004ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bfc:	2b40      	cmp	r3, #64	@ 0x40
 8004bfe:	d058      	beq.n	8004cb2 <HAL_TIM_ConfigClockSource+0x13a>
 8004c00:	2b40      	cmp	r3, #64	@ 0x40
 8004c02:	d86f      	bhi.n	8004ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8004c04:	2b30      	cmp	r3, #48	@ 0x30
 8004c06:	d064      	beq.n	8004cd2 <HAL_TIM_ConfigClockSource+0x15a>
 8004c08:	2b30      	cmp	r3, #48	@ 0x30
 8004c0a:	d86b      	bhi.n	8004ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8004c0c:	2b20      	cmp	r3, #32
 8004c0e:	d060      	beq.n	8004cd2 <HAL_TIM_ConfigClockSource+0x15a>
 8004c10:	2b20      	cmp	r3, #32
 8004c12:	d867      	bhi.n	8004ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d05c      	beq.n	8004cd2 <HAL_TIM_ConfigClockSource+0x15a>
 8004c18:	2b10      	cmp	r3, #16
 8004c1a:	d05a      	beq.n	8004cd2 <HAL_TIM_ConfigClockSource+0x15a>
 8004c1c:	e062      	b.n	8004ce4 <HAL_TIM_ConfigClockSource+0x16c>
=======
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c5c:	d03e      	beq.n	8004cdc <HAL_TIM_ConfigClockSource+0xd4>
 8004c5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c62:	f200 8087 	bhi.w	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004c66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c6a:	f000 8086 	beq.w	8004d7a <HAL_TIM_ConfigClockSource+0x172>
 8004c6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c72:	d87f      	bhi.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004c74:	2b70      	cmp	r3, #112	@ 0x70
 8004c76:	d01a      	beq.n	8004cae <HAL_TIM_ConfigClockSource+0xa6>
 8004c78:	2b70      	cmp	r3, #112	@ 0x70
 8004c7a:	d87b      	bhi.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004c7c:	2b60      	cmp	r3, #96	@ 0x60
 8004c7e:	d050      	beq.n	8004d22 <HAL_TIM_ConfigClockSource+0x11a>
 8004c80:	2b60      	cmp	r3, #96	@ 0x60
 8004c82:	d877      	bhi.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004c84:	2b50      	cmp	r3, #80	@ 0x50
 8004c86:	d03c      	beq.n	8004d02 <HAL_TIM_ConfigClockSource+0xfa>
 8004c88:	2b50      	cmp	r3, #80	@ 0x50
 8004c8a:	d873      	bhi.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004c8c:	2b40      	cmp	r3, #64	@ 0x40
 8004c8e:	d058      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x13a>
 8004c90:	2b40      	cmp	r3, #64	@ 0x40
 8004c92:	d86f      	bhi.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004c94:	2b30      	cmp	r3, #48	@ 0x30
 8004c96:	d064      	beq.n	8004d62 <HAL_TIM_ConfigClockSource+0x15a>
 8004c98:	2b30      	cmp	r3, #48	@ 0x30
 8004c9a:	d86b      	bhi.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004c9c:	2b20      	cmp	r3, #32
 8004c9e:	d060      	beq.n	8004d62 <HAL_TIM_ConfigClockSource+0x15a>
 8004ca0:	2b20      	cmp	r3, #32
 8004ca2:	d867      	bhi.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d05c      	beq.n	8004d62 <HAL_TIM_ConfigClockSource+0x15a>
 8004ca8:	2b10      	cmp	r3, #16
 8004caa:	d05a      	beq.n	8004d62 <HAL_TIM_ConfigClockSource+0x15a>
 8004cac:	e062      	b.n	8004d74 <HAL_TIM_ConfigClockSource+0x16c>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< HEAD
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6818      	ldr	r0, [r3, #0]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	6899      	ldr	r1, [r3, #8]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	685a      	ldr	r2, [r3, #4]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	f000 fc71 	bl	8005514 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	609a      	str	r2, [r3, #8]
      break;
 8004c4a:	e04f      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x174>
=======
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cbe:	f000 fc77 	bl	80055b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004cd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	609a      	str	r2, [r3, #8]
      break;
 8004cda:	e04f      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< HEAD
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6818      	ldr	r0, [r3, #0]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	6899      	ldr	r1, [r3, #8]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	f000 fc5a 	bl	8005514 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689a      	ldr	r2, [r3, #8]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c6e:	609a      	str	r2, [r3, #8]
      break;
 8004c70:	e03c      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x174>
=======
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cec:	f000 fc60 	bl	80055b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004cfe:	609a      	str	r2, [r3, #8]
      break;
 8004d00:	e03c      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6818      	ldr	r0, [r3, #0]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	6859      	ldr	r1, [r3, #4]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	f000 fb18 	bl	80052b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2150      	movs	r1, #80	@ 0x50
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 fc27 	bl	80054de <TIM_ITRx_SetConfig>
      break;
 8004c90:	e02c      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x174>
=======
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d0e:	461a      	mov	r2, r3
 8004d10:	f000 fb1e 	bl	8005350 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2150      	movs	r1, #80	@ 0x50
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 fc2d 	bl	800557a <TIM_ITRx_SetConfig>
      break;
 8004d20:	e02c      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6818      	ldr	r0, [r3, #0]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	6859      	ldr	r1, [r3, #4]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	f000 fb74 	bl	800538c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2160      	movs	r1, #96	@ 0x60
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fc17 	bl	80054de <TIM_ITRx_SetConfig>
      break;
 8004cb0:	e01c      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x174>
=======
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d2e:	461a      	mov	r2, r3
 8004d30:	f000 fb7a 	bl	8005428 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2160      	movs	r1, #96	@ 0x60
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 fc1d 	bl	800557a <TIM_ITRx_SetConfig>
      break;
 8004d40:	e01c      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6818      	ldr	r0, [r3, #0]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	6859      	ldr	r1, [r3, #4]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	f000 faf8 	bl	80052b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2140      	movs	r1, #64	@ 0x40
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 fc07 	bl	80054de <TIM_ITRx_SetConfig>
      break;
 8004cd0:	e00c      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x174>
=======
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d4e:	461a      	mov	r2, r3
 8004d50:	f000 fafe 	bl	8005350 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2140      	movs	r1, #64	@ 0x40
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 fc0d 	bl	800557a <TIM_ITRx_SetConfig>
      break;
 8004d60:	e00c      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
<<<<<<< HEAD
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4619      	mov	r1, r3
 8004cdc:	4610      	mov	r0, r2
 8004cde:	f000 fbfe 	bl	80054de <TIM_ITRx_SetConfig>
      break;
 8004ce2:	e003      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x174>
=======
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	4610      	mov	r0, r2
 8004d6e:	f000 fc04 	bl	800557a <TIM_ITRx_SetConfig>
      break;
 8004d72:	e003      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ce8:	e000      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004cea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
	...

08004d08 <HAL_TIM_ReadCapturedValue>:
=======
 8004d74:	2301      	movs	r3, #1
 8004d76:	73fb      	strb	r3, [r7, #15]
      break;
 8004d78:	e000      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
	...

08004d98 <HAL_TIM_ReadCapturedValue>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
<<<<<<< HEAD
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	2b0c      	cmp	r3, #12
 8004d1a:	d831      	bhi.n	8004d80 <HAL_TIM_ReadCapturedValue+0x78>
 8004d1c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d24 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d22:	bf00      	nop
 8004d24:	08004d59 	.word	0x08004d59
 8004d28:	08004d81 	.word	0x08004d81
 8004d2c:	08004d81 	.word	0x08004d81
 8004d30:	08004d81 	.word	0x08004d81
 8004d34:	08004d63 	.word	0x08004d63
 8004d38:	08004d81 	.word	0x08004d81
 8004d3c:	08004d81 	.word	0x08004d81
 8004d40:	08004d81 	.word	0x08004d81
 8004d44:	08004d6d 	.word	0x08004d6d
 8004d48:	08004d81 	.word	0x08004d81
 8004d4c:	08004d81 	.word	0x08004d81
 8004d50:	08004d81 	.word	0x08004d81
 8004d54:	08004d77 	.word	0x08004d77
=======
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b0c      	cmp	r3, #12
 8004daa:	d831      	bhi.n	8004e10 <HAL_TIM_ReadCapturedValue+0x78>
 8004dac:	a201      	add	r2, pc, #4	@ (adr r2, 8004db4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db2:	bf00      	nop
 8004db4:	08004de9 	.word	0x08004de9
 8004db8:	08004e11 	.word	0x08004e11
 8004dbc:	08004e11 	.word	0x08004e11
 8004dc0:	08004e11 	.word	0x08004e11
 8004dc4:	08004df3 	.word	0x08004df3
 8004dc8:	08004e11 	.word	0x08004e11
 8004dcc:	08004e11 	.word	0x08004e11
 8004dd0:	08004e11 	.word	0x08004e11
 8004dd4:	08004dfd 	.word	0x08004dfd
 8004dd8:	08004e11 	.word	0x08004e11
 8004ddc:	08004e11 	.word	0x08004e11
 8004de0:	08004e11 	.word	0x08004e11
 8004de4:	08004e07 	.word	0x08004e07
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
<<<<<<< HEAD
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d5e:	60fb      	str	r3, [r7, #12]

      break;
 8004d60:	e00f      	b.n	8004d82 <HAL_TIM_ReadCapturedValue+0x7a>
=======
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dee:	60fb      	str	r3, [r7, #12]

      break;
 8004df0:	e00f      	b.n	8004e12 <HAL_TIM_ReadCapturedValue+0x7a>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
<<<<<<< HEAD
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d68:	60fb      	str	r3, [r7, #12]

      break;
 8004d6a:	e00a      	b.n	8004d82 <HAL_TIM_ReadCapturedValue+0x7a>
=======
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df8:	60fb      	str	r3, [r7, #12]

      break;
 8004dfa:	e00a      	b.n	8004e12 <HAL_TIM_ReadCapturedValue+0x7a>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
<<<<<<< HEAD
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d72:	60fb      	str	r3, [r7, #12]

      break;
 8004d74:	e005      	b.n	8004d82 <HAL_TIM_ReadCapturedValue+0x7a>
=======
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e02:	60fb      	str	r3, [r7, #12]

      break;
 8004e04:	e005      	b.n	8004e12 <HAL_TIM_ReadCapturedValue+0x7a>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
<<<<<<< HEAD
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7c:	60fb      	str	r3, [r7, #12]

      break;
 8004d7e:	e000      	b.n	8004d82 <HAL_TIM_ReadCapturedValue+0x7a>
=======
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0c:	60fb      	str	r3, [r7, #12]

      break;
 8004e0e:	e000      	b.n	8004e12 <HAL_TIM_ReadCapturedValue+0x7a>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }

    default:
      break;
<<<<<<< HEAD
 8004d80:	bf00      	nop
  }

  return tmpreg;
 8004d82:	68fb      	ldr	r3, [r7, #12]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 8004e10:	bf00      	nop
  }

  return tmpreg;
 8004e12:	68fb      	ldr	r3, [r7, #12]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
=======
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
=======
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_TIM_TriggerCallback>:
=======
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <HAL_TIM_TriggerCallback>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
=======
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <TIM_Base_SetConfig>:
=======
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <TIM_Base_SetConfig>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
<<<<<<< HEAD
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a34      	ldr	r2, [pc, #208]	@ (8004eb0 <TIM_Base_SetConfig+0xe4>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d00f      	beq.n	8004e04 <TIM_Base_SetConfig+0x38>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dea:	d00b      	beq.n	8004e04 <TIM_Base_SetConfig+0x38>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a31      	ldr	r2, [pc, #196]	@ (8004eb4 <TIM_Base_SetConfig+0xe8>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d007      	beq.n	8004e04 <TIM_Base_SetConfig+0x38>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a30      	ldr	r2, [pc, #192]	@ (8004eb8 <TIM_Base_SetConfig+0xec>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d003      	beq.n	8004e04 <TIM_Base_SetConfig+0x38>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a2f      	ldr	r2, [pc, #188]	@ (8004ebc <TIM_Base_SetConfig+0xf0>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d108      	bne.n	8004e16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a25      	ldr	r2, [pc, #148]	@ (8004eb0 <TIM_Base_SetConfig+0xe4>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d01b      	beq.n	8004e56 <TIM_Base_SetConfig+0x8a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e24:	d017      	beq.n	8004e56 <TIM_Base_SetConfig+0x8a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a22      	ldr	r2, [pc, #136]	@ (8004eb4 <TIM_Base_SetConfig+0xe8>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d013      	beq.n	8004e56 <TIM_Base_SetConfig+0x8a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a21      	ldr	r2, [pc, #132]	@ (8004eb8 <TIM_Base_SetConfig+0xec>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d00f      	beq.n	8004e56 <TIM_Base_SetConfig+0x8a>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a20      	ldr	r2, [pc, #128]	@ (8004ebc <TIM_Base_SetConfig+0xf0>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d00b      	beq.n	8004e56 <TIM_Base_SetConfig+0x8a>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a1f      	ldr	r2, [pc, #124]	@ (8004ec0 <TIM_Base_SetConfig+0xf4>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d007      	beq.n	8004e56 <TIM_Base_SetConfig+0x8a>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a1e      	ldr	r2, [pc, #120]	@ (8004ec4 <TIM_Base_SetConfig+0xf8>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d003      	beq.n	8004e56 <TIM_Base_SetConfig+0x8a>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a1d      	ldr	r2, [pc, #116]	@ (8004ec8 <TIM_Base_SetConfig+0xfc>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d108      	bne.n	8004e68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]
=======
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a37      	ldr	r2, [pc, #220]	@ (8004f4c <TIM_Base_SetConfig+0xf0>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d00f      	beq.n	8004e94 <TIM_Base_SetConfig+0x38>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e7a:	d00b      	beq.n	8004e94 <TIM_Base_SetConfig+0x38>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a34      	ldr	r2, [pc, #208]	@ (8004f50 <TIM_Base_SetConfig+0xf4>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d007      	beq.n	8004e94 <TIM_Base_SetConfig+0x38>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a33      	ldr	r2, [pc, #204]	@ (8004f54 <TIM_Base_SetConfig+0xf8>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d003      	beq.n	8004e94 <TIM_Base_SetConfig+0x38>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a32      	ldr	r2, [pc, #200]	@ (8004f58 <TIM_Base_SetConfig+0xfc>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d108      	bne.n	8004ea6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a28      	ldr	r2, [pc, #160]	@ (8004f4c <TIM_Base_SetConfig+0xf0>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d01b      	beq.n	8004ee6 <TIM_Base_SetConfig+0x8a>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eb4:	d017      	beq.n	8004ee6 <TIM_Base_SetConfig+0x8a>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a25      	ldr	r2, [pc, #148]	@ (8004f50 <TIM_Base_SetConfig+0xf4>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d013      	beq.n	8004ee6 <TIM_Base_SetConfig+0x8a>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a24      	ldr	r2, [pc, #144]	@ (8004f54 <TIM_Base_SetConfig+0xf8>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d00f      	beq.n	8004ee6 <TIM_Base_SetConfig+0x8a>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a23      	ldr	r2, [pc, #140]	@ (8004f58 <TIM_Base_SetConfig+0xfc>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d00b      	beq.n	8004ee6 <TIM_Base_SetConfig+0x8a>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a22      	ldr	r2, [pc, #136]	@ (8004f5c <TIM_Base_SetConfig+0x100>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d007      	beq.n	8004ee6 <TIM_Base_SetConfig+0x8a>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a21      	ldr	r2, [pc, #132]	@ (8004f60 <TIM_Base_SetConfig+0x104>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d003      	beq.n	8004ee6 <TIM_Base_SetConfig+0x8a>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a20      	ldr	r2, [pc, #128]	@ (8004f64 <TIM_Base_SetConfig+0x108>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d108      	bne.n	8004ef8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	60fb      	str	r3, [r7, #12]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	689a      	ldr	r2, [r3, #8]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a08      	ldr	r2, [pc, #32]	@ (8004eb0 <TIM_Base_SetConfig+0xe4>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d103      	bne.n	8004e9c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	691a      	ldr	r2, [r3, #16]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	615a      	str	r2, [r3, #20]
}
 8004ea2:	bf00      	nop
 8004ea4:	3714      	adds	r7, #20
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	40010000 	.word	0x40010000
 8004eb4:	40000400 	.word	0x40000400
 8004eb8:	40000800 	.word	0x40000800
 8004ebc:	40000c00 	.word	0x40000c00
 8004ec0:	40014000 	.word	0x40014000
 8004ec4:	40014400 	.word	0x40014400
 8004ec8:	40014800 	.word	0x40014800

08004ecc <TIM_OC1_SetConfig>:
=======
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	689a      	ldr	r2, [r3, #8]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a0c      	ldr	r2, [pc, #48]	@ (8004f4c <TIM_Base_SetConfig+0xf0>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d103      	bne.n	8004f26 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	691a      	ldr	r2, [r3, #16]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f043 0204 	orr.w	r2, r3, #4
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	601a      	str	r2, [r3, #0]
}
 8004f3e:	bf00      	nop
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	40010000 	.word	0x40010000
 8004f50:	40000400 	.word	0x40000400
 8004f54:	40000800 	.word	0x40000800
 8004f58:	40000c00 	.word	0x40000c00
 8004f5c:	40014000 	.word	0x40014000
 8004f60:	40014400 	.word	0x40014400
 8004f64:	40014800 	.word	0x40014800

08004f68 <TIM_OC1_SetConfig>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
<<<<<<< HEAD
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
=======
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b087      	sub	sp, #28
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

<<<<<<< HEAD
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	f023 0201 	bic.w	r2, r3, #1
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 0303 	bic.w	r3, r3, #3
 8004f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f023 0302 	bic.w	r3, r3, #2
 8004f14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a1c      	ldr	r2, [pc, #112]	@ (8004f94 <TIM_OC1_SetConfig+0xc8>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d10c      	bne.n	8004f42 <TIM_OC1_SetConfig+0x76>
=======
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	f023 0201 	bic.w	r2, r3, #1
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f023 0303 	bic.w	r3, r3, #3
 8004f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f023 0302 	bic.w	r3, r3, #2
 8004fb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a1c      	ldr	r2, [pc, #112]	@ (8005030 <TIM_OC1_SetConfig+0xc8>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d10c      	bne.n	8004fde <TIM_OC1_SetConfig+0x76>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
<<<<<<< HEAD
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	f023 0308 	bic.w	r3, r3, #8
 8004f2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f023 0304 	bic.w	r3, r3, #4
 8004f40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a13      	ldr	r2, [pc, #76]	@ (8004f94 <TIM_OC1_SetConfig+0xc8>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d111      	bne.n	8004f6e <TIM_OC1_SetConfig+0xa2>
=======
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f023 0308 	bic.w	r3, r3, #8
 8004fca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f023 0304 	bic.w	r3, r3, #4
 8004fdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a13      	ldr	r2, [pc, #76]	@ (8005030 <TIM_OC1_SetConfig+0xc8>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d111      	bne.n	800500a <TIM_OC1_SetConfig+0xa2>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
<<<<<<< HEAD
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	613b      	str	r3, [r7, #16]
=======
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	4313      	orrs	r3, r2
 8005008:	613b      	str	r3, [r7, #16]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	621a      	str	r2, [r3, #32]
}
 8004f88:	bf00      	nop
 8004f8a:	371c      	adds	r7, #28
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr
 8004f94:	40010000 	.word	0x40010000

08004f98 <TIM_OC2_SetConfig>:
=======
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	621a      	str	r2, [r3, #32]
}
 8005024:	bf00      	nop
 8005026:	371c      	adds	r7, #28
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	40010000 	.word	0x40010000

08005034 <TIM_OC2_SetConfig>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
<<<<<<< HEAD
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b087      	sub	sp, #28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
=======
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005034:	b480      	push	{r7}
 8005036:	b087      	sub	sp, #28
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

<<<<<<< HEAD
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	f023 0210 	bic.w	r2, r3, #16
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	021b      	lsls	r3, r3, #8
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	f023 0320 	bic.w	r3, r3, #32
 8004fe2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	011b      	lsls	r3, r3, #4
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a1e      	ldr	r2, [pc, #120]	@ (800506c <TIM_OC2_SetConfig+0xd4>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d10d      	bne.n	8005014 <TIM_OC2_SetConfig+0x7c>
=======
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	f023 0210 	bic.w	r2, r3, #16
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800506a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	021b      	lsls	r3, r3, #8
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	4313      	orrs	r3, r2
 8005076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f023 0320 	bic.w	r3, r3, #32
 800507e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	011b      	lsls	r3, r3, #4
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	4313      	orrs	r3, r2
 800508a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a1e      	ldr	r2, [pc, #120]	@ (8005108 <TIM_OC2_SetConfig+0xd4>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d10d      	bne.n	80050b0 <TIM_OC2_SetConfig+0x7c>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
<<<<<<< HEAD
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ffe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	011b      	lsls	r3, r3, #4
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	4313      	orrs	r3, r2
 800500a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005012:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a15      	ldr	r2, [pc, #84]	@ (800506c <TIM_OC2_SetConfig+0xd4>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d113      	bne.n	8005044 <TIM_OC2_SetConfig+0xac>
=======
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800509a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	011b      	lsls	r3, r3, #4
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a15      	ldr	r2, [pc, #84]	@ (8005108 <TIM_OC2_SetConfig+0xd4>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d113      	bne.n	80050e0 <TIM_OC2_SetConfig+0xac>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
<<<<<<< HEAD
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005022:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800502a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	4313      	orrs	r3, r2
 8005036:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	4313      	orrs	r3, r2
 8005042:	613b      	str	r3, [r7, #16]
=======
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	4313      	orrs	r3, r2
 80050de:	613b      	str	r3, [r7, #16]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	621a      	str	r2, [r3, #32]
}
 800505e:	bf00      	nop
 8005060:	371c      	adds	r7, #28
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	40010000 	.word	0x40010000

08005070 <TIM_OC3_SetConfig>:
=======
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	685a      	ldr	r2, [r3, #4]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	621a      	str	r2, [r3, #32]
}
 80050fa:	bf00      	nop
 80050fc:	371c      	adds	r7, #28
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	40010000 	.word	0x40010000

0800510c <TIM_OC3_SetConfig>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
<<<<<<< HEAD
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005070:	b480      	push	{r7}
 8005072:	b087      	sub	sp, #28
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
=======
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800510c:	b480      	push	{r7}
 800510e:	b087      	sub	sp, #28
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

<<<<<<< HEAD
  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800509e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f023 0303 	bic.w	r3, r3, #3
 80050a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	021b      	lsls	r3, r3, #8
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005140 <TIM_OC3_SetConfig+0xd0>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d10d      	bne.n	80050ea <TIM_OC3_SetConfig+0x7a>
=======
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800513a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f023 0303 	bic.w	r3, r3, #3
 8005142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	4313      	orrs	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005154:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	021b      	lsls	r3, r3, #8
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	4313      	orrs	r3, r2
 8005160:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a1d      	ldr	r2, [pc, #116]	@ (80051dc <TIM_OC3_SetConfig+0xd0>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d10d      	bne.n	8005186 <TIM_OC3_SetConfig+0x7a>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
<<<<<<< HEAD
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	021b      	lsls	r3, r3, #8
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	4313      	orrs	r3, r2
 80050e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a14      	ldr	r2, [pc, #80]	@ (8005140 <TIM_OC3_SetConfig+0xd0>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d113      	bne.n	800511a <TIM_OC3_SetConfig+0xaa>
=======
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005170:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	021b      	lsls	r3, r3, #8
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	4313      	orrs	r3, r2
 800517c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005184:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a14      	ldr	r2, [pc, #80]	@ (80051dc <TIM_OC3_SetConfig+0xd0>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d113      	bne.n	80051b6 <TIM_OC3_SetConfig+0xaa>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
<<<<<<< HEAD
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005100:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	011b      	lsls	r3, r3, #4
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	4313      	orrs	r3, r2
 800510c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	011b      	lsls	r3, r3, #4
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	4313      	orrs	r3, r2
 8005118:	613b      	str	r3, [r7, #16]
=======
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005194:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800519c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	011b      	lsls	r3, r3, #4
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	613b      	str	r3, [r7, #16]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	685a      	ldr	r2, [r3, #4]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	621a      	str	r2, [r3, #32]
}
 8005134:	bf00      	nop
 8005136:	371c      	adds	r7, #28
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr
 8005140:	40010000 	.word	0x40010000

08005144 <TIM_OC4_SetConfig>:
=======
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	621a      	str	r2, [r3, #32]
}
 80051d0:	bf00      	nop
 80051d2:	371c      	adds	r7, #28
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	40010000 	.word	0x40010000

080051e0 <TIM_OC4_SetConfig>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
<<<<<<< HEAD
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005144:	b480      	push	{r7}
 8005146:	b087      	sub	sp, #28
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
=======
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b087      	sub	sp, #28
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

<<<<<<< HEAD
  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800517a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	021b      	lsls	r3, r3, #8
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	4313      	orrs	r3, r2
 8005186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800518e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	031b      	lsls	r3, r3, #12
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	4313      	orrs	r3, r2
 800519a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a10      	ldr	r2, [pc, #64]	@ (80051e0 <TIM_OC4_SetConfig+0x9c>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d109      	bne.n	80051b8 <TIM_OC4_SetConfig+0x74>
=======
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800520e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005216:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	021b      	lsls	r3, r3, #8
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	4313      	orrs	r3, r2
 8005222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800522a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	031b      	lsls	r3, r3, #12
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	4313      	orrs	r3, r2
 8005236:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a10      	ldr	r2, [pc, #64]	@ (800527c <TIM_OC4_SetConfig+0x9c>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d109      	bne.n	8005254 <TIM_OC4_SetConfig+0x74>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
<<<<<<< HEAD
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	019b      	lsls	r3, r3, #6
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	617b      	str	r3, [r7, #20]
=======
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005246:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	019b      	lsls	r3, r3, #6
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	4313      	orrs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685a      	ldr	r2, [r3, #4]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	621a      	str	r2, [r3, #32]
}
 80051d2:	bf00      	nop
 80051d4:	371c      	adds	r7, #28
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	40010000 	.word	0x40010000

080051e4 <TIM_TI1_SetConfig>:
=======
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	621a      	str	r2, [r3, #32]
}
 800526e:	bf00      	nop
 8005270:	371c      	adds	r7, #28
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	40010000 	.word	0x40010000

08005280 <TIM_TI1_SetConfig>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 80051e4:	b480      	push	{r7}
 80051e6:	b087      	sub	sp, #28
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
 80051f0:	603b      	str	r3, [r7, #0]
=======
 8005280:	b480      	push	{r7}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
 800528c:	603b      	str	r3, [r7, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
<<<<<<< HEAD
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	f023 0201 	bic.w	r2, r3, #1
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	4a24      	ldr	r2, [pc, #144]	@ (80052a0 <TIM_TI1_SetConfig+0xbc>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d013      	beq.n	800523a <TIM_TI1_SetConfig+0x56>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005218:	d00f      	beq.n	800523a <TIM_TI1_SetConfig+0x56>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	4a21      	ldr	r2, [pc, #132]	@ (80052a4 <TIM_TI1_SetConfig+0xc0>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d00b      	beq.n	800523a <TIM_TI1_SetConfig+0x56>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	4a20      	ldr	r2, [pc, #128]	@ (80052a8 <TIM_TI1_SetConfig+0xc4>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d007      	beq.n	800523a <TIM_TI1_SetConfig+0x56>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4a1f      	ldr	r2, [pc, #124]	@ (80052ac <TIM_TI1_SetConfig+0xc8>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d003      	beq.n	800523a <TIM_TI1_SetConfig+0x56>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	4a1e      	ldr	r2, [pc, #120]	@ (80052b0 <TIM_TI1_SetConfig+0xcc>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d101      	bne.n	800523e <TIM_TI1_SetConfig+0x5a>
 800523a:	2301      	movs	r3, #1
 800523c:	e000      	b.n	8005240 <TIM_TI1_SetConfig+0x5c>
 800523e:	2300      	movs	r3, #0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d008      	beq.n	8005256 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f023 0303 	bic.w	r3, r3, #3
 800524a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4313      	orrs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]
 8005254:	e003      	b.n	800525e <TIM_TI1_SetConfig+0x7a>
=======
  tmpccer = TIMx->CCER;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6a1b      	ldr	r3, [r3, #32]
 8005298:	f023 0201 	bic.w	r2, r3, #1
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	4a24      	ldr	r2, [pc, #144]	@ (800533c <TIM_TI1_SetConfig+0xbc>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d013      	beq.n	80052d6 <TIM_TI1_SetConfig+0x56>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052b4:	d00f      	beq.n	80052d6 <TIM_TI1_SetConfig+0x56>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	4a21      	ldr	r2, [pc, #132]	@ (8005340 <TIM_TI1_SetConfig+0xc0>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d00b      	beq.n	80052d6 <TIM_TI1_SetConfig+0x56>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4a20      	ldr	r2, [pc, #128]	@ (8005344 <TIM_TI1_SetConfig+0xc4>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d007      	beq.n	80052d6 <TIM_TI1_SetConfig+0x56>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	4a1f      	ldr	r2, [pc, #124]	@ (8005348 <TIM_TI1_SetConfig+0xc8>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d003      	beq.n	80052d6 <TIM_TI1_SetConfig+0x56>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	4a1e      	ldr	r2, [pc, #120]	@ (800534c <TIM_TI1_SetConfig+0xcc>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d101      	bne.n	80052da <TIM_TI1_SetConfig+0x5a>
 80052d6:	2301      	movs	r3, #1
 80052d8:	e000      	b.n	80052dc <TIM_TI1_SetConfig+0x5c>
 80052da:	2300      	movs	r3, #0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d008      	beq.n	80052f2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f023 0303 	bic.w	r3, r3, #3
 80052e6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	617b      	str	r3, [r7, #20]
 80052f0:	e003      	b.n	80052fa <TIM_TI1_SetConfig+0x7a>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
<<<<<<< HEAD
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f043 0301 	orr.w	r3, r3, #1
 800525c:	617b      	str	r3, [r7, #20]
=======
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f043 0301 	orr.w	r3, r3, #1
 80052f8:	617b      	str	r3, [r7, #20]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
<<<<<<< HEAD
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005264:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	011b      	lsls	r3, r3, #4
 800526a:	b2db      	uxtb	r3, r3
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	4313      	orrs	r3, r2
 8005270:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	f023 030a 	bic.w	r3, r3, #10
 8005278:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	f003 030a 	and.w	r3, r3, #10
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	4313      	orrs	r3, r2
 8005284:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	621a      	str	r2, [r3, #32]
}
 8005292:	bf00      	nop
 8005294:	371c      	adds	r7, #28
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	40010000 	.word	0x40010000
 80052a4:	40000400 	.word	0x40000400
 80052a8:	40000800 	.word	0x40000800
 80052ac:	40000c00 	.word	0x40000c00
 80052b0:	40014000 	.word	0x40014000

080052b4 <TIM_TI1_ConfigInputStage>:
=======
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005300:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	011b      	lsls	r3, r3, #4
 8005306:	b2db      	uxtb	r3, r3
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	4313      	orrs	r3, r2
 800530c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	f023 030a 	bic.w	r3, r3, #10
 8005314:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	f003 030a 	and.w	r3, r3, #10
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	4313      	orrs	r3, r2
 8005320:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	621a      	str	r2, [r3, #32]
}
 800532e:	bf00      	nop
 8005330:	371c      	adds	r7, #28
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	40010000 	.word	0x40010000
 8005340:	40000400 	.word	0x40000400
 8005344:	40000800 	.word	0x40000800
 8005348:	40000c00 	.word	0x40000c00
 800534c:	40014000 	.word	0x40014000

08005350 <TIM_TI1_ConfigInputStage>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 80052b4:	b480      	push	{r7}
 80052b6:	b087      	sub	sp, #28
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
=======
 8005350:	b480      	push	{r7}
 8005352:	b087      	sub	sp, #28
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	f023 0201 	bic.w	r2, r3, #1
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	011b      	lsls	r3, r3, #4
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f023 030a 	bic.w	r3, r3, #10
 80052f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	621a      	str	r2, [r3, #32]
}
 8005306:	bf00      	nop
 8005308:	371c      	adds	r7, #28
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <TIM_TI2_SetConfig>:
=======
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	f023 0201 	bic.w	r2, r3, #1
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800537a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	011b      	lsls	r3, r3, #4
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	4313      	orrs	r3, r2
 8005384:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f023 030a 	bic.w	r3, r3, #10
 800538c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	4313      	orrs	r3, r2
 8005394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	621a      	str	r2, [r3, #32]
}
 80053a2:	bf00      	nop
 80053a4:	371c      	adds	r7, #28
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <TIM_TI2_SetConfig>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8005312:	b480      	push	{r7}
 8005314:	b087      	sub	sp, #28
 8005316:	af00      	add	r7, sp, #0
 8005318:	60f8      	str	r0, [r7, #12]
 800531a:	60b9      	str	r1, [r7, #8]
 800531c:	607a      	str	r2, [r7, #4]
 800531e:	603b      	str	r3, [r7, #0]
=======
 80053ae:	b480      	push	{r7}
 80053b0:	b087      	sub	sp, #28
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	60f8      	str	r0, [r7, #12]
 80053b6:	60b9      	str	r1, [r7, #8]
 80053b8:	607a      	str	r2, [r7, #4]
 80053ba:	603b      	str	r3, [r7, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
<<<<<<< HEAD
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6a1b      	ldr	r3, [r3, #32]
 8005324:	f023 0210 	bic.w	r2, r3, #16
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800533e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	021b      	lsls	r3, r3, #8
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	4313      	orrs	r3, r2
 8005348:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005350:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	031b      	lsls	r3, r3, #12
 8005356:	b29b      	uxth	r3, r3
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	4313      	orrs	r3, r2
 800535c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005364:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	011b      	lsls	r3, r3, #4
 800536a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	4313      	orrs	r3, r2
 8005372:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	621a      	str	r2, [r3, #32]
}
 8005380:	bf00      	nop
 8005382:	371c      	adds	r7, #28
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <TIM_TI2_ConfigInputStage>:
=======
  tmpccer = TIMx->CCER;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6a1b      	ldr	r3, [r3, #32]
 80053c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	f023 0210 	bic.w	r2, r3, #16
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	021b      	lsls	r3, r3, #8
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80053ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	031b      	lsls	r3, r3, #12
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005400:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	011b      	lsls	r3, r3, #4
 8005406:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	4313      	orrs	r3, r2
 800540e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	621a      	str	r2, [r3, #32]
}
 800541c:	bf00      	nop
 800541e:	371c      	adds	r7, #28
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <TIM_TI2_ConfigInputStage>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
=======
 8005428:	b480      	push	{r7}
 800542a:	b087      	sub	sp, #28
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
<<<<<<< HEAD
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	f023 0210 	bic.w	r2, r3, #16
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80053b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	031b      	lsls	r3, r3, #12
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	4313      	orrs	r3, r2
 80053c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80053c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	011b      	lsls	r3, r3, #4
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	621a      	str	r2, [r3, #32]
}
 80053e0:	bf00      	nop
 80053e2:	371c      	adds	r7, #28
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <TIM_TI3_SetConfig>:
=======
  tmpccer = TIMx->CCER;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	f023 0210 	bic.w	r2, r3, #16
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005452:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	031b      	lsls	r3, r3, #12
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	4313      	orrs	r3, r2
 800545c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005464:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	011b      	lsls	r3, r3, #4
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	4313      	orrs	r3, r2
 800546e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	693a      	ldr	r2, [r7, #16]
 8005474:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	621a      	str	r2, [r3, #32]
}
 800547c:	bf00      	nop
 800547e:	371c      	adds	r7, #28
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <TIM_TI3_SetConfig>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
 80053f8:	603b      	str	r3, [r7, #0]
=======
 8005488:	b480      	push	{r7}
 800548a:	b087      	sub	sp, #28
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
 8005494:	603b      	str	r3, [r7, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
<<<<<<< HEAD
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f023 0303 	bic.w	r3, r3, #3
 8005418:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4313      	orrs	r3, r2
 8005420:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005428:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	011b      	lsls	r3, r3, #4
 800542e:	b2db      	uxtb	r3, r3
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	4313      	orrs	r3, r2
 8005434:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800543c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	021b      	lsls	r3, r3, #8
 8005442:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	4313      	orrs	r3, r2
 800544a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	621a      	str	r2, [r3, #32]
}
 8005458:	bf00      	nop
 800545a:	371c      	adds	r7, #28
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <TIM_TI4_SetConfig>:
=======
  tmpccer = TIMx->CCER;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6a1b      	ldr	r3, [r3, #32]
 80054a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	69db      	ldr	r3, [r3, #28]
 80054ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	f023 0303 	bic.w	r3, r3, #3
 80054b4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054c4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	011b      	lsls	r3, r3, #4
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80054d8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	021b      	lsls	r3, r3, #8
 80054de:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	621a      	str	r2, [r3, #32]
}
 80054f4:	bf00      	nop
 80054f6:	371c      	adds	r7, #28
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <TIM_TI4_SetConfig>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8005464:	b480      	push	{r7}
 8005466:	b087      	sub	sp, #28
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
 8005470:	603b      	str	r3, [r7, #0]
=======
 8005500:	b480      	push	{r7}
 8005502:	b087      	sub	sp, #28
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
 800550c:	603b      	str	r3, [r7, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
<<<<<<< HEAD
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6a1b      	ldr	r3, [r3, #32]
 8005488:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005490:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	021b      	lsls	r3, r3, #8
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	4313      	orrs	r3, r2
 800549a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054a2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	031b      	lsls	r3, r3, #12
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80054b6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	031b      	lsls	r3, r3, #12
 80054bc:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	621a      	str	r2, [r3, #32]
}
 80054d2:	bf00      	nop
 80054d4:	371c      	adds	r7, #28
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <TIM_ITRx_SetConfig>:
=======
  tmpccer = TIMx->CCER;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6a1b      	ldr	r3, [r3, #32]
 8005518:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800552c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	021b      	lsls	r3, r3, #8
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	4313      	orrs	r3, r2
 8005536:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800553e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	031b      	lsls	r3, r3, #12
 8005544:	b29b      	uxth	r3, r3
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	4313      	orrs	r3, r2
 800554a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005552:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	031b      	lsls	r3, r3, #12
 8005558:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	4313      	orrs	r3, r2
 8005560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	621a      	str	r2, [r3, #32]
}
 800556e:	bf00      	nop
 8005570:	371c      	adds	r7, #28
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <TIM_ITRx_SetConfig>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< HEAD
 80054de:	b480      	push	{r7}
 80054e0:	b085      	sub	sp, #20
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
 80054e6:	6039      	str	r1, [r7, #0]
=======
 800557a:	b480      	push	{r7}
 800557c:	b085      	sub	sp, #20
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	6039      	str	r1, [r7, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< HEAD
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	f043 0307 	orr.w	r3, r3, #7
 8005500:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	609a      	str	r2, [r3, #8]
}
 8005508:	bf00      	nop
 800550a:	3714      	adds	r7, #20
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <TIM_ETR_SetConfig>:
=======
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005590:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005592:	683a      	ldr	r2, [r7, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	4313      	orrs	r3, r2
 8005598:	f043 0307 	orr.w	r3, r3, #7
 800559c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	609a      	str	r2, [r3, #8]
}
 80055a4:	bf00      	nop
 80055a6:	3714      	adds	r7, #20
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <TIM_ETR_SetConfig>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< HEAD
 8005514:	b480      	push	{r7}
 8005516:	b087      	sub	sp, #28
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
 8005520:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800552e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	021a      	lsls	r2, r3, #8
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	431a      	orrs	r2, r3
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	4313      	orrs	r3, r2
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	4313      	orrs	r3, r2
 8005540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	609a      	str	r2, [r3, #8]
}
 8005548:	bf00      	nop
 800554a:	371c      	adds	r7, #28
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <TIM_CCxChannelCmd>:
=======
 80055b0:	b480      	push	{r7}
 80055b2:	b087      	sub	sp, #28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
 80055bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	021a      	lsls	r2, r3, #8
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	431a      	orrs	r2, r3
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	4313      	orrs	r3, r2
 80055dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	609a      	str	r2, [r3, #8]
}
 80055e4:	bf00      	nop
 80055e6:	371c      	adds	r7, #28
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <TIM_CCxChannelCmd>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
<<<<<<< HEAD
 8005554:	b480      	push	{r7}
 8005556:	b087      	sub	sp, #28
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
=======
 80055f0:	b480      	push	{r7}
 80055f2:	b087      	sub	sp, #28
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
<<<<<<< HEAD
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f003 031f 	and.w	r3, r3, #31
 8005566:	2201      	movs	r2, #1
 8005568:	fa02 f303 	lsl.w	r3, r2, r3
 800556c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6a1a      	ldr	r2, [r3, #32]
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	43db      	mvns	r3, r3
 8005576:	401a      	ands	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6a1a      	ldr	r2, [r3, #32]
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	f003 031f 	and.w	r3, r3, #31
 8005586:	6879      	ldr	r1, [r7, #4]
 8005588:	fa01 f303 	lsl.w	r3, r1, r3
 800558c:	431a      	orrs	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	621a      	str	r2, [r3, #32]
}
 8005592:	bf00      	nop
 8005594:	371c      	adds	r7, #28
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
	...

080055a0 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	f003 031f 	and.w	r3, r3, #31
 8005602:	2201      	movs	r2, #1
 8005604:	fa02 f303 	lsl.w	r3, r2, r3
 8005608:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6a1a      	ldr	r2, [r3, #32]
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	43db      	mvns	r3, r3
 8005612:	401a      	ands	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6a1a      	ldr	r2, [r3, #32]
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f003 031f 	and.w	r3, r3, #31
 8005622:	6879      	ldr	r1, [r7, #4]
 8005624:	fa01 f303 	lsl.w	r3, r1, r3
 8005628:	431a      	orrs	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	621a      	str	r2, [r3, #32]
}
 800562e:	bf00      	nop
 8005630:	371c      	adds	r7, #28
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
	...

0800563c <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
<<<<<<< HEAD
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
=======
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d101      	bne.n	80055b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055b4:	2302      	movs	r3, #2
 80055b6:	e050      	b.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2202      	movs	r2, #2
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a1c      	ldr	r2, [pc, #112]	@ (8005668 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d018      	beq.n	800562e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005604:	d013      	beq.n	800562e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a18      	ldr	r2, [pc, #96]	@ (800566c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d00e      	beq.n	800562e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a16      	ldr	r2, [pc, #88]	@ (8005670 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d009      	beq.n	800562e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a15      	ldr	r2, [pc, #84]	@ (8005674 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d004      	beq.n	800562e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a13      	ldr	r2, [pc, #76]	@ (8005678 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d10c      	bne.n	8005648 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005634:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	4313      	orrs	r3, r2
 800563e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68ba      	ldr	r2, [r7, #8]
 8005646:	609a      	str	r2, [r3, #8]
=======
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800564c:	2b01      	cmp	r3, #1
 800564e:	d101      	bne.n	8005654 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005650:	2302      	movs	r3, #2
 8005652:	e050      	b.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2202      	movs	r2, #2
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800567a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	4313      	orrs	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a1c      	ldr	r2, [pc, #112]	@ (8005704 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d018      	beq.n	80056ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056a0:	d013      	beq.n	80056ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a18      	ldr	r2, [pc, #96]	@ (8005708 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d00e      	beq.n	80056ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a16      	ldr	r2, [pc, #88]	@ (800570c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d009      	beq.n	80056ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a15      	ldr	r2, [pc, #84]	@ (8005710 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d004      	beq.n	80056ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a13      	ldr	r2, [pc, #76]	@ (8005714 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d10c      	bne.n	80056e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	4313      	orrs	r3, r2
 80056da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	609a      	str	r2, [r3, #8]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	40010000 	.word	0x40010000
 800566c:	40000400 	.word	0x40000400
 8005670:	40000800 	.word	0x40000800
 8005674:	40000c00 	.word	0x40000c00
 8005678:	40014000 	.word	0x40014000

0800567c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
=======
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	40010000 	.word	0x40010000
 8005708:	40000400 	.word	0x40000400
 800570c:	40000800 	.word	0x40000800
 8005710:	40000c00 	.word	0x40000c00
 8005714:	40014000 	.word	0x40014000

08005718 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
=======
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
=======
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
=======
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <HAL_UART_Init>:
=======
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_UART_Init>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e03f      	b.n	8005736 <HAL_UART_Init+0x92>
=======
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e042      	b.n	80057d8 <HAL_UART_Init+0x98>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d106      	bne.n	80056d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d106      	bne.n	800576c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7fc fc88 	bl	8001fe0 <HAL_UART_MspInit>
=======
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7fc fc40 	bl	8001fec <HAL_UART_MspInit>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2224      	movs	r2, #36	@ 0x24
 80056d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68da      	ldr	r2, [r3, #12]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80056e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 fe29 	bl	8006340 <UART_SetConfig>
=======
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2224      	movs	r2, #36	@ 0x24
 8005770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68da      	ldr	r2, [r3, #12]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005782:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 fddd 	bl	8006344 <UART_SetConfig>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	691a      	ldr	r2, [r3, #16]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80056fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	695a      	ldr	r2, [r3, #20]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800570c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68da      	ldr	r2, [r3, #12]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800571c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2220      	movs	r2, #32
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2220      	movs	r2, #32
 8005730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3708      	adds	r7, #8
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <HAL_UART_Transmit>:
=======
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	691a      	ldr	r2, [r3, #16]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005798:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	695a      	ldr	r2, [r3, #20]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80057a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68da      	ldr	r2, [r3, #12]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80057b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2220      	movs	r2, #32
 80057c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2220      	movs	r2, #32
 80057cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3708      	adds	r7, #8
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <HAL_UART_Transmit>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
<<<<<<< HEAD
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b08a      	sub	sp, #40	@ 0x28
 8005742:	af02      	add	r7, sp, #8
 8005744:	60f8      	str	r0, [r7, #12]
 8005746:	60b9      	str	r1, [r7, #8]
 8005748:	603b      	str	r3, [r7, #0]
 800574a:	4613      	mov	r3, r2
 800574c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800574e:	2300      	movs	r3, #0
 8005750:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b20      	cmp	r3, #32
 800575c:	d17c      	bne.n	8005858 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <HAL_UART_Transmit+0x2c>
 8005764:	88fb      	ldrh	r3, [r7, #6]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e075      	b.n	800585a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005774:	2b01      	cmp	r3, #1
 8005776:	d101      	bne.n	800577c <HAL_UART_Transmit+0x3e>
 8005778:	2302      	movs	r3, #2
 800577a:	e06e      	b.n	800585a <HAL_UART_Transmit+0x11c>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2221      	movs	r2, #33	@ 0x21
 800578e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005792:	f7fc ff91 	bl	80026b8 <HAL_GetTick>
 8005796:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	88fa      	ldrh	r2, [r7, #6]
 800579c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	88fa      	ldrh	r2, [r7, #6]
 80057a2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057ac:	d108      	bne.n	80057c0 <HAL_UART_Transmit+0x82>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d104      	bne.n	80057c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80057b6:	2300      	movs	r3, #0
 80057b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	61bb      	str	r3, [r7, #24]
 80057be:	e003      	b.n	80057c8 <HAL_UART_Transmit+0x8a>
=======
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b08a      	sub	sp, #40	@ 0x28
 80057e4:	af02      	add	r7, sp, #8
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	603b      	str	r3, [r7, #0]
 80057ec:	4613      	mov	r3, r2
 80057ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057f0:	2300      	movs	r3, #0
 80057f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	2b20      	cmp	r3, #32
 80057fe:	d175      	bne.n	80058ec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d002      	beq.n	800580c <HAL_UART_Transmit+0x2c>
 8005806:	88fb      	ldrh	r3, [r7, #6]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d101      	bne.n	8005810 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e06e      	b.n	80058ee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2221      	movs	r2, #33	@ 0x21
 800581a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800581e:	f7fc ff59 	bl	80026d4 <HAL_GetTick>
 8005822:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	88fa      	ldrh	r2, [r7, #6]
 8005828:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	88fa      	ldrh	r2, [r7, #6]
 800582e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005838:	d108      	bne.n	800584c <HAL_UART_Transmit+0x6c>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d104      	bne.n	800584c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005842:	2300      	movs	r3, #0
 8005844:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	61bb      	str	r3, [r7, #24]
 800584a:	e003      	b.n	8005854 <HAL_UART_Transmit+0x74>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }
    else
    {
      pdata8bits  = pData;
<<<<<<< HEAD
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057c4:	2300      	movs	r3, #0
 80057c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80057d0:	e02a      	b.n	8005828 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	9300      	str	r3, [sp, #0]
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	2200      	movs	r2, #0
 80057da:	2180      	movs	r1, #128	@ 0x80
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f000 fb6d 	bl	8005ebc <UART_WaitOnFlagUntilTimeout>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e036      	b.n	800585a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10b      	bne.n	800580a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	881b      	ldrh	r3, [r3, #0]
 80057f6:	461a      	mov	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005800:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	3302      	adds	r3, #2
 8005806:	61bb      	str	r3, [r7, #24]
 8005808:	e007      	b.n	800581a <HAL_UART_Transmit+0xdc>
=======
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005850:	2300      	movs	r3, #0
 8005852:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005854:	e02e      	b.n	80058b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2200      	movs	r2, #0
 800585e:	2180      	movs	r1, #128	@ 0x80
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 fb41 	bl	8005ee8 <UART_WaitOnFlagUntilTimeout>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d005      	beq.n	8005878 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2220      	movs	r2, #32
 8005870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e03a      	b.n	80058ee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10b      	bne.n	8005896 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	881b      	ldrh	r3, [r3, #0]
 8005882:	461a      	mov	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800588c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	3302      	adds	r3, #2
 8005892:	61bb      	str	r3, [r7, #24]
 8005894:	e007      	b.n	80058a6 <HAL_UART_Transmit+0xc6>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
<<<<<<< HEAD
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	781a      	ldrb	r2, [r3, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	3301      	adds	r3, #1
 8005818:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800581e:	b29b      	uxth	r3, r3
 8005820:	3b01      	subs	r3, #1
 8005822:	b29a      	uxth	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800582c:	b29b      	uxth	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1cf      	bne.n	80057d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	2200      	movs	r2, #0
 800583a:	2140      	movs	r1, #64	@ 0x40
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f000 fb3d 	bl	8005ebc <UART_WaitOnFlagUntilTimeout>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d001      	beq.n	800584c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e006      	b.n	800585a <HAL_UART_Transmit+0x11c>
=======
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	781a      	ldrb	r2, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	3301      	adds	r3, #1
 80058a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	3b01      	subs	r3, #1
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1cb      	bne.n	8005856 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	2200      	movs	r2, #0
 80058c6:	2140      	movs	r1, #64	@ 0x40
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 fb0d 	bl	8005ee8 <UART_WaitOnFlagUntilTimeout>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d005      	beq.n	80058e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2220      	movs	r2, #32
 80058d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e006      	b.n	80058ee <HAL_UART_Transmit+0x10e>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2220      	movs	r2, #32
 8005850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005854:	2300      	movs	r3, #0
 8005856:	e000      	b.n	800585a <HAL_UART_Transmit+0x11c>
=======
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2220      	movs	r2, #32
 80058e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80058e8:	2300      	movs	r3, #0
 80058ea:	e000      	b.n	80058ee <HAL_UART_Transmit+0x10e>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8005858:	2302      	movs	r3, #2
  }
}
 800585a:	4618      	mov	r0, r3
 800585c:	3720      	adds	r7, #32
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005862:	b480      	push	{r7}
 8005864:	b085      	sub	sp, #20
 8005866:	af00      	add	r7, sp, #0
 8005868:	60f8      	str	r0, [r7, #12]
 800586a:	60b9      	str	r1, [r7, #8]
 800586c:	4613      	mov	r3, r2
 800586e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b20      	cmp	r3, #32
 800587a:	d130      	bne.n	80058de <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d002      	beq.n	8005888 <HAL_UART_Transmit_IT+0x26>
 8005882:	88fb      	ldrh	r3, [r7, #6]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e029      	b.n	80058e0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005892:	2b01      	cmp	r3, #1
 8005894:	d101      	bne.n	800589a <HAL_UART_Transmit_IT+0x38>
 8005896:	2302      	movs	r3, #2
 8005898:	e022      	b.n	80058e0 <HAL_UART_Transmit_IT+0x7e>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2201      	movs	r2, #1
 800589e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	88fa      	ldrh	r2, [r7, #6]
 80058ac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	88fa      	ldrh	r2, [r7, #6]
 80058b2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2221      	movs	r2, #33	@ 0x21
 80058be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68da      	ldr	r2, [r3, #12]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80058d8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80058da:	2300      	movs	r3, #0
 80058dc:	e000      	b.n	80058e0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80058de:	2302      	movs	r3, #2
  }
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <HAL_UART_Receive_IT>:
=======
 80058ec:	2302      	movs	r3, #2
  }
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3720      	adds	r7, #32
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <HAL_UART_Receive_IT>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	4613      	mov	r3, r2
 80058f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b20      	cmp	r3, #32
 8005904:	d11d      	bne.n	8005942 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d002      	beq.n	8005912 <HAL_UART_Receive_IT+0x26>
 800590c:	88fb      	ldrh	r3, [r7, #6]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e016      	b.n	8005944 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800591c:	2b01      	cmp	r3, #1
 800591e:	d101      	bne.n	8005924 <HAL_UART_Receive_IT+0x38>
 8005920:	2302      	movs	r3, #2
 8005922:	e00f      	b.n	8005944 <HAL_UART_Receive_IT+0x58>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005932:	88fb      	ldrh	r3, [r7, #6]
 8005934:	461a      	mov	r2, r3
 8005936:	68b9      	ldr	r1, [r7, #8]
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f000 fb2d 	bl	8005f98 <UART_Start_Receive_IT>
 800593e:	4603      	mov	r3, r0
 8005940:	e000      	b.n	8005944 <HAL_UART_Receive_IT+0x58>
=======
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b084      	sub	sp, #16
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	60f8      	str	r0, [r7, #12]
 80058fe:	60b9      	str	r1, [r7, #8]
 8005900:	4613      	mov	r3, r2
 8005902:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b20      	cmp	r3, #32
 800590e:	d112      	bne.n	8005936 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d002      	beq.n	800591c <HAL_UART_Receive_IT+0x26>
 8005916:	88fb      	ldrh	r3, [r7, #6]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d101      	bne.n	8005920 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e00b      	b.n	8005938 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005926:	88fb      	ldrh	r3, [r7, #6]
 8005928:	461a      	mov	r2, r3
 800592a:	68b9      	ldr	r1, [r7, #8]
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f000 fb34 	bl	8005f9a <UART_Start_Receive_IT>
 8005932:	4603      	mov	r3, r0
 8005934:	e000      	b.n	8005938 <HAL_UART_Receive_IT+0x42>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8005942:	2302      	movs	r3, #2
  }
}
 8005944:	4618      	mov	r0, r3
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <HAL_UART_IRQHandler>:
=======
 8005936:	2302      	movs	r3, #2
  }
}
 8005938:	4618      	mov	r0, r3
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <HAL_UART_IRQHandler>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800594c:	b580      	push	{r7, lr}
 800594e:	b0ba      	sub	sp, #232	@ 0xe8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005972:	2300      	movs	r3, #0
 8005974:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005978:	2300      	movs	r3, #0
 800597a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800597e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005982:	f003 030f 	and.w	r3, r3, #15
 8005986:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800598a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10f      	bne.n	80059b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005996:	f003 0320 	and.w	r3, r3, #32
 800599a:	2b00      	cmp	r3, #0
 800599c:	d009      	beq.n	80059b2 <HAL_UART_IRQHandler+0x66>
 800599e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059a2:	f003 0320 	and.w	r3, r3, #32
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d003      	beq.n	80059b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fc0d 	bl	80061ca <UART_Receive_IT>
      return;
 80059b0:	e256      	b.n	8005e60 <HAL_UART_IRQHandler+0x514>
=======
 8005940:	b580      	push	{r7, lr}
 8005942:	b0ba      	sub	sp, #232	@ 0xe8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005966:	2300      	movs	r3, #0
 8005968:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800596c:	2300      	movs	r3, #0
 800596e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005976:	f003 030f 	and.w	r3, r3, #15
 800597a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800597e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10f      	bne.n	80059a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800598a:	f003 0320 	and.w	r3, r3, #32
 800598e:	2b00      	cmp	r3, #0
 8005990:	d009      	beq.n	80059a6 <HAL_UART_IRQHandler+0x66>
 8005992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005996:	f003 0320 	and.w	r3, r3, #32
 800599a:	2b00      	cmp	r3, #0
 800599c:	d003      	beq.n	80059a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fc11 	bl	80061c6 <UART_Receive_IT>
      return;
 80059a4:	e273      	b.n	8005e8e <HAL_UART_IRQHandler+0x54e>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
<<<<<<< HEAD
 80059b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 80de 	beq.w	8005b78 <HAL_UART_IRQHandler+0x22c>
 80059bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d106      	bne.n	80059d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059cc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f000 80d1 	beq.w	8005b78 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00b      	beq.n	80059fa <HAL_UART_IRQHandler+0xae>
 80059e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d005      	beq.n	80059fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f2:	f043 0201 	orr.w	r2, r3, #1
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 80059a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f000 80de 	beq.w	8005b6c <HAL_UART_IRQHandler+0x22c>
 80059b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d106      	bne.n	80059ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059c0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 80d1 	beq.w	8005b6c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00b      	beq.n	80059ee <HAL_UART_IRQHandler+0xae>
 80059d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d005      	beq.n	80059ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059e6:	f043 0201 	orr.w	r2, r3, #1
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< HEAD
 80059fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059fe:	f003 0304 	and.w	r3, r3, #4
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00b      	beq.n	8005a1e <HAL_UART_IRQHandler+0xd2>
 8005a06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d005      	beq.n	8005a1e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a16:	f043 0202 	orr.w	r2, r3, #2
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 80059ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059f2:	f003 0304 	and.w	r3, r3, #4
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00b      	beq.n	8005a12 <HAL_UART_IRQHandler+0xd2>
 80059fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d005      	beq.n	8005a12 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a0a:	f043 0202 	orr.w	r2, r3, #2
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< HEAD
 8005a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00b      	beq.n	8005a42 <HAL_UART_IRQHandler+0xf6>
 8005a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d005      	beq.n	8005a42 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a3a:	f043 0204 	orr.w	r2, r3, #4
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 8005a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00b      	beq.n	8005a36 <HAL_UART_IRQHandler+0xf6>
 8005a1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d005      	beq.n	8005a36 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a2e:	f043 0204 	orr.w	r2, r3, #4
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
<<<<<<< HEAD
 8005a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a46:	f003 0308 	and.w	r3, r3, #8
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d011      	beq.n	8005a72 <HAL_UART_IRQHandler+0x126>
 8005a4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a52:	f003 0320 	and.w	r3, r3, #32
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d105      	bne.n	8005a66 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d005      	beq.n	8005a72 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a6a:	f043 0208 	orr.w	r2, r3, #8
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 8005a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a3a:	f003 0308 	and.w	r3, r3, #8
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d011      	beq.n	8005a66 <HAL_UART_IRQHandler+0x126>
 8005a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a46:	f003 0320 	and.w	r3, r3, #32
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d105      	bne.n	8005a5a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a52:	f003 0301 	and.w	r3, r3, #1
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d005      	beq.n	8005a66 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a5e:	f043 0208 	orr.w	r2, r3, #8
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< HEAD
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f000 81ed 	beq.w	8005e56 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a80:	f003 0320 	and.w	r3, r3, #32
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d008      	beq.n	8005a9a <HAL_UART_IRQHandler+0x14e>
 8005a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a8c:	f003 0320 	and.w	r3, r3, #32
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 fb98 	bl	80061ca <UART_Receive_IT>
=======
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f000 820a 	beq.w	8005e84 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a74:	f003 0320 	and.w	r3, r3, #32
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d008      	beq.n	8005a8e <HAL_UART_IRQHandler+0x14e>
 8005a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a80:	f003 0320 	and.w	r3, r3, #32
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 fb9c 	bl	80061c6 <UART_Receive_IT>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aa4:	2b40      	cmp	r3, #64	@ 0x40
 8005aa6:	bf0c      	ite	eq
 8005aa8:	2301      	moveq	r3, #1
 8005aaa:	2300      	movne	r3, #0
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab6:	f003 0308 	and.w	r3, r3, #8
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d103      	bne.n	8005ac6 <HAL_UART_IRQHandler+0x17a>
 8005abe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d04f      	beq.n	8005b66 <HAL_UART_IRQHandler+0x21a>
=======
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a98:	2b40      	cmp	r3, #64	@ 0x40
 8005a9a:	bf0c      	ite	eq
 8005a9c:	2301      	moveq	r3, #1
 8005a9e:	2300      	movne	r3, #0
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aaa:	f003 0308 	and.w	r3, r3, #8
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d103      	bne.n	8005aba <HAL_UART_IRQHandler+0x17a>
 8005ab2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d04f      	beq.n	8005b5a <HAL_UART_IRQHandler+0x21a>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< HEAD
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 faa0 	bl	800600c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ad6:	2b40      	cmp	r3, #64	@ 0x40
 8005ad8:	d141      	bne.n	8005b5e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	3314      	adds	r3, #20
 8005ae0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ae8:	e853 3f00 	ldrex	r3, [r3]
 8005aec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005af0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005af4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005af8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	3314      	adds	r3, #20
 8005b02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005b06:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005b0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005b12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005b16:	e841 2300 	strex	r3, r2, [r1]
 8005b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005b1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1d9      	bne.n	8005ada <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d013      	beq.n	8005b56 <HAL_UART_IRQHandler+0x20a>
=======
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 faa7 	bl	800600e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aca:	2b40      	cmp	r3, #64	@ 0x40
 8005acc:	d141      	bne.n	8005b52 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	3314      	adds	r3, #20
 8005ad4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005adc:	e853 3f00 	ldrex	r3, [r3]
 8005ae0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005ae4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ae8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005aec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	3314      	adds	r3, #20
 8005af6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005afa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005afe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005b06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005b0a:	e841 2300 	strex	r3, r2, [r1]
 8005b0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005b12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1d9      	bne.n	8005ace <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d013      	beq.n	8005b4a <HAL_UART_IRQHandler+0x20a>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< HEAD
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b32:	4a7d      	ldr	r2, [pc, #500]	@ (8005d28 <HAL_UART_IRQHandler+0x3dc>)
 8005b34:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7fc ff1a 	bl	8002974 <HAL_DMA_Abort_IT>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d016      	beq.n	8005b74 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005b50:	4610      	mov	r0, r2
 8005b52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b54:	e00e      	b.n	8005b74 <HAL_UART_IRQHandler+0x228>
=======
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b26:	4a8a      	ldr	r2, [pc, #552]	@ (8005d50 <HAL_UART_IRQHandler+0x410>)
 8005b28:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7fc ff2e 	bl	8002990 <HAL_DMA_Abort_IT>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d016      	beq.n	8005b68 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005b44:	4610      	mov	r0, r2
 8005b46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b48:	e00e      	b.n	8005b68 <HAL_UART_IRQHandler+0x228>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f99a 	bl	8005e90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b5c:	e00a      	b.n	8005b74 <HAL_UART_IRQHandler+0x228>
=======
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f9b6 	bl	8005ebc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b50:	e00a      	b.n	8005b68 <HAL_UART_IRQHandler+0x228>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f996 	bl	8005e90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b64:	e006      	b.n	8005b74 <HAL_UART_IRQHandler+0x228>
=======
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f9b2 	bl	8005ebc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b58:	e006      	b.n	8005b68 <HAL_UART_IRQHandler+0x228>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f992 	bl	8005e90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8005b72:	e170      	b.n	8005e56 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b74:	bf00      	nop
    return;
 8005b76:	e16e      	b.n	8005e56 <HAL_UART_IRQHandler+0x50a>
=======
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f9ae 	bl	8005ebc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005b66:	e18d      	b.n	8005e84 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b68:	bf00      	nop
    return;
 8005b6a:	e18b      	b.n	8005e84 <HAL_UART_IRQHandler+0x544>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	f040 814a 	bne.w	8005e16 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b86:	f003 0310 	and.w	r3, r3, #16
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f000 8143 	beq.w	8005e16 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b94:	f003 0310 	and.w	r3, r3, #16
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f000 813c 	beq.w	8005e16 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	60bb      	str	r3, [r7, #8]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	60bb      	str	r3, [r7, #8]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	60bb      	str	r3, [r7, #8]
 8005bb2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bbe:	2b40      	cmp	r3, #64	@ 0x40
 8005bc0:	f040 80b4 	bne.w	8005d2c <HAL_UART_IRQHandler+0x3e0>
=======
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	f040 8167 	bne.w	8005e44 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b7a:	f003 0310 	and.w	r3, r3, #16
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f000 8160 	beq.w	8005e44 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b88:	f003 0310 	and.w	r3, r3, #16
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f000 8159 	beq.w	8005e44 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b92:	2300      	movs	r3, #0
 8005b94:	60bb      	str	r3, [r7, #8]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	60bb      	str	r3, [r7, #8]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	60bb      	str	r3, [r7, #8]
 8005ba6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb2:	2b40      	cmp	r3, #64	@ 0x40
 8005bb4:	f040 80ce 	bne.w	8005d54 <HAL_UART_IRQHandler+0x414>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
<<<<<<< HEAD
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bd0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 8140 	beq.w	8005e5a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005bde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005be2:	429a      	cmp	r2, r3
 8005be4:	f080 8139 	bcs.w	8005e5a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005bee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bfa:	f000 8088 	beq.w	8005d0e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	330c      	adds	r3, #12
 8005c04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005c0c:	e853 3f00 	ldrex	r3, [r3]
 8005c10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005c14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	330c      	adds	r3, #12
 8005c26:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005c2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c32:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005c36:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005c3a:	e841 2300 	strex	r3, r2, [r1]
 8005c3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005c42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1d9      	bne.n	8005bfe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	3314      	adds	r3, #20
 8005c50:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c54:	e853 3f00 	ldrex	r3, [r3]
 8005c58:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005c5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c5c:	f023 0301 	bic.w	r3, r3, #1
 8005c60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	3314      	adds	r3, #20
 8005c6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005c6e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005c72:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c74:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005c76:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005c7a:	e841 2300 	strex	r3, r2, [r1]
 8005c7e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005c80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1e1      	bne.n	8005c4a <HAL_UART_IRQHandler+0x2fe>
=======
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bc4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f000 80a9 	beq.w	8005d20 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005bd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	f080 80a2 	bcs.w	8005d20 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005be2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005be8:	69db      	ldr	r3, [r3, #28]
 8005bea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bee:	f000 8088 	beq.w	8005d02 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	330c      	adds	r3, #12
 8005bf8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005c00:	e853 3f00 	ldrex	r3, [r3]
 8005c04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005c08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	330c      	adds	r3, #12
 8005c1a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005c1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c26:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005c2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005c2e:	e841 2300 	strex	r3, r2, [r1]
 8005c32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005c36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1d9      	bne.n	8005bf2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	3314      	adds	r3, #20
 8005c44:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c48:	e853 3f00 	ldrex	r3, [r3]
 8005c4c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005c4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c50:	f023 0301 	bic.w	r3, r3, #1
 8005c54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3314      	adds	r3, #20
 8005c5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005c62:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005c66:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c68:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005c6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005c6e:	e841 2300 	strex	r3, r2, [r1]
 8005c72:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005c74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1e1      	bne.n	8005c3e <HAL_UART_IRQHandler+0x2fe>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	3314      	adds	r3, #20
 8005c8c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c90:	e853 3f00 	ldrex	r3, [r3]
 8005c94:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005c96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	3314      	adds	r3, #20
 8005ca6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005caa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005cac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005cb0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005cb2:	e841 2300 	strex	r3, r2, [r1]
 8005cb6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005cb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1e3      	bne.n	8005c86 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2220      	movs	r2, #32
 8005cc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	330c      	adds	r3, #12
 8005cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cd6:	e853 3f00 	ldrex	r3, [r3]
 8005cda:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005cdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cde:	f023 0310 	bic.w	r3, r3, #16
 8005ce2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	330c      	adds	r3, #12
 8005cec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005cf0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005cf2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005cf6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005cf8:	e841 2300 	strex	r3, r2, [r1]
 8005cfc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005cfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1e3      	bne.n	8005ccc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7fc fdc3 	bl	8002894 <HAL_DMA_Abort>
=======
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	3314      	adds	r3, #20
 8005c80:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c84:	e853 3f00 	ldrex	r3, [r3]
 8005c88:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005c8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	3314      	adds	r3, #20
 8005c9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005c9e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005ca0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005ca4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005ca6:	e841 2300 	strex	r3, r2, [r1]
 8005caa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005cac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1e3      	bne.n	8005c7a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	330c      	adds	r3, #12
 8005cc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cca:	e853 3f00 	ldrex	r3, [r3]
 8005cce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005cd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cd2:	f023 0310 	bic.w	r3, r3, #16
 8005cd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	330c      	adds	r3, #12
 8005ce0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005ce4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005ce6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005cea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005cec:	e841 2300 	strex	r3, r2, [r1]
 8005cf0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005cf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1e3      	bne.n	8005cc0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7fc fdd7 	bl	80028b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2202      	movs	r2, #2
 8005d06:	635a      	str	r2, [r3, #52]	@ 0x34
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
<<<<<<< HEAD
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f8c0 	bl	8005ea4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d24:	e099      	b.n	8005e5a <HAL_UART_IRQHandler+0x50e>
 8005d26:	bf00      	nop
 8005d28:	080060d3 	.word	0x080060d3
=======
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	4619      	mov	r1, r3
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 f8d9 	bl	8005ed0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005d1e:	e0b3      	b.n	8005e88 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d24:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	f040 80ad 	bne.w	8005e88 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d32:	69db      	ldr	r3, [r3, #28]
 8005d34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d38:	f040 80a6 	bne.w	8005e88 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d46:	4619      	mov	r1, r3
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f8c1 	bl	8005ed0 <HAL_UARTEx_RxEventCallback>
      return;
 8005d4e:	e09b      	b.n	8005e88 <HAL_UART_IRQHandler+0x548>
 8005d50:	080060d5 	.word	0x080060d5
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
<<<<<<< HEAD
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f000 808b 	beq.w	8005e5e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005d48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f000 8086 	beq.w	8005e5e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	330c      	adds	r3, #12
 8005d58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d5c:	e853 3f00 	ldrex	r3, [r3]
 8005d60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	330c      	adds	r3, #12
 8005d72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005d76:	647a      	str	r2, [r7, #68]	@ 0x44
 8005d78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d7e:	e841 2300 	strex	r3, r2, [r1]
 8005d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1e3      	bne.n	8005d52 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	3314      	adds	r3, #20
 8005d90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d94:	e853 3f00 	ldrex	r3, [r3]
 8005d98:	623b      	str	r3, [r7, #32]
   return(result);
 8005d9a:	6a3b      	ldr	r3, [r7, #32]
 8005d9c:	f023 0301 	bic.w	r3, r3, #1
 8005da0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	3314      	adds	r3, #20
 8005daa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005dae:	633a      	str	r2, [r7, #48]	@ 0x30
 8005db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005db4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005db6:	e841 2300 	strex	r3, r2, [r1]
 8005dba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1e3      	bne.n	8005d8a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	330c      	adds	r3, #12
 8005dd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	e853 3f00 	ldrex	r3, [r3]
 8005dde:	60fb      	str	r3, [r7, #12]
   return(result);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f023 0310 	bic.w	r3, r3, #16
 8005de6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	330c      	adds	r3, #12
 8005df0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005df4:	61fa      	str	r2, [r7, #28]
 8005df6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df8:	69b9      	ldr	r1, [r7, #24]
 8005dfa:	69fa      	ldr	r2, [r7, #28]
 8005dfc:	e841 2300 	strex	r3, r2, [r1]
 8005e00:	617b      	str	r3, [r7, #20]
   return(result);
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1e3      	bne.n	8005dd0 <HAL_UART_IRQHandler+0x484>
=======
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 808e 	beq.w	8005e8c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005d70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	f000 8089 	beq.w	8005e8c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	330c      	adds	r3, #12
 8005d80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d84:	e853 3f00 	ldrex	r3, [r3]
 8005d88:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	330c      	adds	r3, #12
 8005d9a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005d9e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005da0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005da4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005da6:	e841 2300 	strex	r3, r2, [r1]
 8005daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005dac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1e3      	bne.n	8005d7a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	3314      	adds	r3, #20
 8005db8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dbc:	e853 3f00 	ldrex	r3, [r3]
 8005dc0:	623b      	str	r3, [r7, #32]
   return(result);
 8005dc2:	6a3b      	ldr	r3, [r7, #32]
 8005dc4:	f023 0301 	bic.w	r3, r3, #1
 8005dc8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	3314      	adds	r3, #20
 8005dd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005dd6:	633a      	str	r2, [r7, #48]	@ 0x30
 8005dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ddc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dde:	e841 2300 	strex	r3, r2, [r1]
 8005de2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1e3      	bne.n	8005db2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2220      	movs	r2, #32
 8005dee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	330c      	adds	r3, #12
 8005dfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	e853 3f00 	ldrex	r3, [r3]
 8005e06:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f023 0310 	bic.w	r3, r3, #16
 8005e0e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	330c      	adds	r3, #12
 8005e18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005e1c:	61fa      	str	r2, [r7, #28]
 8005e1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e20:	69b9      	ldr	r1, [r7, #24]
 8005e22:	69fa      	ldr	r2, [r7, #28]
 8005e24:	e841 2300 	strex	r3, r2, [r1]
 8005e28:	617b      	str	r3, [r7, #20]
   return(result);
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d1e3      	bne.n	8005df8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2202      	movs	r2, #2
 8005e34:	635a      	str	r2, [r3, #52]	@ 0x34
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
<<<<<<< HEAD
 8005e08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 f848 	bl	8005ea4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e14:	e023      	b.n	8005e5e <HAL_UART_IRQHandler+0x512>
=======
 8005e36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f847 	bl	8005ed0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e42:	e023      	b.n	8005e8c <HAL_UART_IRQHandler+0x54c>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
<<<<<<< HEAD
 8005e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d009      	beq.n	8005e36 <HAL_UART_IRQHandler+0x4ea>
 8005e22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d003      	beq.n	8005e36 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f963 	bl	80060fa <UART_Transmit_IT>
    return;
 8005e34:	e014      	b.n	8005e60 <HAL_UART_IRQHandler+0x514>
=======
 8005e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d009      	beq.n	8005e64 <HAL_UART_IRQHandler+0x524>
 8005e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d003      	beq.n	8005e64 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 f94a 	bl	80060f6 <UART_Transmit_IT>
    return;
 8005e62:	e014      	b.n	8005e8e <HAL_UART_IRQHandler+0x54e>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
<<<<<<< HEAD
 8005e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00e      	beq.n	8005e60 <HAL_UART_IRQHandler+0x514>
 8005e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d008      	beq.n	8005e60 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f9a3 	bl	800619a <UART_EndTransmit_IT>
    return;
 8005e54:	e004      	b.n	8005e60 <HAL_UART_IRQHandler+0x514>
    return;
 8005e56:	bf00      	nop
 8005e58:	e002      	b.n	8005e60 <HAL_UART_IRQHandler+0x514>
      return;
 8005e5a:	bf00      	nop
 8005e5c:	e000      	b.n	8005e60 <HAL_UART_IRQHandler+0x514>
      return;
 8005e5e:	bf00      	nop
  }
}
 8005e60:	37e8      	adds	r7, #232	@ 0xe8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop

08005e68 <HAL_UART_TxCpltCallback>:
=======
 8005e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00e      	beq.n	8005e8e <HAL_UART_IRQHandler+0x54e>
 8005e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d008      	beq.n	8005e8e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 f98a 	bl	8006196 <UART_EndTransmit_IT>
    return;
 8005e82:	e004      	b.n	8005e8e <HAL_UART_IRQHandler+0x54e>
    return;
 8005e84:	bf00      	nop
 8005e86:	e002      	b.n	8005e8e <HAL_UART_IRQHandler+0x54e>
      return;
 8005e88:	bf00      	nop
 8005e8a:	e000      	b.n	8005e8e <HAL_UART_IRQHandler+0x54e>
      return;
 8005e8c:	bf00      	nop
  }
}
 8005e8e:	37e8      	adds	r7, #232	@ 0xe8
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <HAL_UART_TxCpltCallback>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
=======
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <HAL_UART_RxCpltCallback>:
=======
 8005e9c:	bf00      	nop
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <HAL_UART_RxCpltCallback>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
=======
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	460b      	mov	r3, r1
 8005eae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
=======
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

<<<<<<< HEAD
08005ebc <UART_WaitOnFlagUntilTimeout>:
=======
08005ebc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ec4:	bf00      	nop
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	460b      	mov	r3, r1
 8005eda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005edc:	bf00      	nop
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< HEAD
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b090      	sub	sp, #64	@ 0x40
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	603b      	str	r3, [r7, #0]
 8005ec8:	4613      	mov	r3, r2
 8005eca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ecc:	e050      	b.n	8005f70 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ece:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed4:	d04c      	beq.n	8005f70 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ed6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d007      	beq.n	8005eec <UART_WaitOnFlagUntilTimeout+0x30>
 8005edc:	f7fc fbec 	bl	80026b8 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d241      	bcs.n	8005f70 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	330c      	adds	r3, #12
 8005ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef6:	e853 3f00 	ldrex	r3, [r3]
 8005efa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efe:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	330c      	adds	r3, #12
 8005f0a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005f0c:	637a      	str	r2, [r7, #52]	@ 0x34
 8005f0e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f10:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005f12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f14:	e841 2300 	strex	r3, r2, [r1]
 8005f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d1e5      	bne.n	8005eec <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	3314      	adds	r3, #20
 8005f26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	e853 3f00 	ldrex	r3, [r3]
 8005f2e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	f023 0301 	bic.w	r3, r3, #1
 8005f36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3314      	adds	r3, #20
 8005f3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005f40:	623a      	str	r2, [r7, #32]
 8005f42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f44:	69f9      	ldr	r1, [r7, #28]
 8005f46:	6a3a      	ldr	r2, [r7, #32]
 8005f48:	e841 2300 	strex	r3, r2, [r1]
 8005f4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1e5      	bne.n	8005f20 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2220      	movs	r2, #32
 8005f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2220      	movs	r2, #32
 8005f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e00f      	b.n	8005f90 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	4013      	ands	r3, r2
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	bf0c      	ite	eq
 8005f80:	2301      	moveq	r3, #1
 8005f82:	2300      	movne	r3, #0
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	461a      	mov	r2, r3
 8005f88:	79fb      	ldrb	r3, [r7, #7]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d09f      	beq.n	8005ece <UART_WaitOnFlagUntilTimeout+0x12>
=======
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b086      	sub	sp, #24
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	603b      	str	r3, [r7, #0]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ef8:	e03b      	b.n	8005f72 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005efa:	6a3b      	ldr	r3, [r7, #32]
 8005efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f00:	d037      	beq.n	8005f72 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f02:	f7fc fbe7 	bl	80026d4 <HAL_GetTick>
 8005f06:	4602      	mov	r2, r0
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	6a3a      	ldr	r2, [r7, #32]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d302      	bcc.n	8005f18 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f12:	6a3b      	ldr	r3, [r7, #32]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d101      	bne.n	8005f1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	e03a      	b.n	8005f92 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	f003 0304 	and.w	r3, r3, #4
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d023      	beq.n	8005f72 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	2b80      	cmp	r3, #128	@ 0x80
 8005f2e:	d020      	beq.n	8005f72 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	2b40      	cmp	r3, #64	@ 0x40
 8005f34:	d01d      	beq.n	8005f72 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0308 	and.w	r3, r3, #8
 8005f40:	2b08      	cmp	r3, #8
 8005f42:	d116      	bne.n	8005f72 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005f44:	2300      	movs	r3, #0
 8005f46:	617b      	str	r3, [r7, #20]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	617b      	str	r3, [r7, #20]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	617b      	str	r3, [r7, #20]
 8005f58:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f000 f857 	bl	800600e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2208      	movs	r2, #8
 8005f64:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e00f      	b.n	8005f92 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	68ba      	ldr	r2, [r7, #8]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	bf0c      	ite	eq
 8005f82:	2301      	moveq	r3, #1
 8005f84:	2300      	movne	r3, #0
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	461a      	mov	r2, r3
 8005f8a:	79fb      	ldrb	r3, [r7, #7]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d0b4      	beq.n	8005efa <UART_WaitOnFlagUntilTimeout+0x12>
        }
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3740      	adds	r7, #64	@ 0x40
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <UART_Start_Receive_IT>:
=======
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3718      	adds	r7, #24
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <UART_Start_Receive_IT>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	88fa      	ldrh	r2, [r7, #6]
 8005fb0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	88fa      	ldrh	r2, [r7, #6]
 8005fb6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2222      	movs	r2, #34	@ 0x22
 8005fc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68da      	ldr	r2, [r3, #12]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fdc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	695a      	ldr	r2, [r3, #20]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f042 0201 	orr.w	r2, r2, #1
 8005fec:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68da      	ldr	r2, [r3, #12]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f042 0220 	orr.w	r2, r2, #32
 8005ffc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3714      	adds	r7, #20
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <UART_EndRxTransfer>:
=======
 8005f9a:	b480      	push	{r7}
 8005f9c:	b085      	sub	sp, #20
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	60f8      	str	r0, [r7, #12]
 8005fa2:	60b9      	str	r1, [r7, #8]
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	88fa      	ldrh	r2, [r7, #6]
 8005fb2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	88fa      	ldrh	r2, [r7, #6]
 8005fb8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2222      	movs	r2, #34	@ 0x22
 8005fc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d007      	beq.n	8005fe0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68da      	ldr	r2, [r3, #12]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fde:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	695a      	ldr	r2, [r3, #20]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f042 0201 	orr.w	r2, r2, #1
 8005fee:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68da      	ldr	r2, [r3, #12]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f042 0220 	orr.w	r2, r2, #32
 8005ffe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <UART_EndRxTransfer>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800600c:	b480      	push	{r7}
 800600e:	b095      	sub	sp, #84	@ 0x54
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	330c      	adds	r3, #12
 800601a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800601e:	e853 3f00 	ldrex	r3, [r3]
 8006022:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006026:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800602a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	330c      	adds	r3, #12
 8006032:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006034:	643a      	str	r2, [r7, #64]	@ 0x40
 8006036:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006038:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800603a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800603c:	e841 2300 	strex	r3, r2, [r1]
 8006040:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1e5      	bne.n	8006014 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3314      	adds	r3, #20
 800604e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006050:	6a3b      	ldr	r3, [r7, #32]
 8006052:	e853 3f00 	ldrex	r3, [r3]
 8006056:	61fb      	str	r3, [r7, #28]
   return(result);
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	f023 0301 	bic.w	r3, r3, #1
 800605e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	3314      	adds	r3, #20
 8006066:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006068:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800606a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800606e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006070:	e841 2300 	strex	r3, r2, [r1]
 8006074:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1e5      	bne.n	8006048 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006080:	2b01      	cmp	r3, #1
 8006082:	d119      	bne.n	80060b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	330c      	adds	r3, #12
 800608a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	e853 3f00 	ldrex	r3, [r3]
 8006092:	60bb      	str	r3, [r7, #8]
   return(result);
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	f023 0310 	bic.w	r3, r3, #16
 800609a:	647b      	str	r3, [r7, #68]	@ 0x44
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	330c      	adds	r3, #12
 80060a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060a4:	61ba      	str	r2, [r7, #24]
 80060a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a8:	6979      	ldr	r1, [r7, #20]
 80060aa:	69ba      	ldr	r2, [r7, #24]
 80060ac:	e841 2300 	strex	r3, r2, [r1]
 80060b0:	613b      	str	r3, [r7, #16]
   return(result);
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1e5      	bne.n	8006084 <UART_EndRxTransfer+0x78>
=======
 800600e:	b480      	push	{r7}
 8006010:	b095      	sub	sp, #84	@ 0x54
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	330c      	adds	r3, #12
 800601c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006020:	e853 3f00 	ldrex	r3, [r3]
 8006024:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006028:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800602c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	330c      	adds	r3, #12
 8006034:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006036:	643a      	str	r2, [r7, #64]	@ 0x40
 8006038:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800603c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800603e:	e841 2300 	strex	r3, r2, [r1]
 8006042:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1e5      	bne.n	8006016 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	3314      	adds	r3, #20
 8006050:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006052:	6a3b      	ldr	r3, [r7, #32]
 8006054:	e853 3f00 	ldrex	r3, [r3]
 8006058:	61fb      	str	r3, [r7, #28]
   return(result);
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	f023 0301 	bic.w	r3, r3, #1
 8006060:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	3314      	adds	r3, #20
 8006068:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800606a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800606c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006070:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006072:	e841 2300 	strex	r3, r2, [r1]
 8006076:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1e5      	bne.n	800604a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006082:	2b01      	cmp	r3, #1
 8006084:	d119      	bne.n	80060ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	330c      	adds	r3, #12
 800608c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	e853 3f00 	ldrex	r3, [r3]
 8006094:	60bb      	str	r3, [r7, #8]
   return(result);
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	f023 0310 	bic.w	r3, r3, #16
 800609c:	647b      	str	r3, [r7, #68]	@ 0x44
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	330c      	adds	r3, #12
 80060a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060a6:	61ba      	str	r2, [r7, #24]
 80060a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060aa:	6979      	ldr	r1, [r7, #20]
 80060ac:	69ba      	ldr	r2, [r7, #24]
 80060ae:	e841 2300 	strex	r3, r2, [r1]
 80060b2:	613b      	str	r3, [r7, #16]
   return(result);
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1e5      	bne.n	8006086 <UART_EndRxTransfer+0x78>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2220      	movs	r2, #32
 80060bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80060c6:	bf00      	nop
 80060c8:	3754      	adds	r7, #84	@ 0x54
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr

080060d2 <UART_DMAAbortOnError>:
=======
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2220      	movs	r2, #32
 80060be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80060c8:	bf00      	nop
 80060ca:	3754      	adds	r7, #84	@ 0x54
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <UART_DMAAbortOnError>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b084      	sub	sp, #16
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	84da      	strh	r2, [r3, #38]	@ 0x26
=======
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	85da      	strh	r2, [r3, #46]	@ 0x2e
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f7ff fecf 	bl	8005e90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060f2:	bf00      	nop
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <UART_Transmit_IT>:
=======
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f7ff fee7 	bl	8005ebc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060ee:	bf00      	nop
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <UART_Transmit_IT>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80060fa:	b480      	push	{r7}
 80060fc:	b085      	sub	sp, #20
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b21      	cmp	r3, #33	@ 0x21
 800610c:	d13e      	bne.n	800618c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006116:	d114      	bne.n	8006142 <UART_Transmit_IT+0x48>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d110      	bne.n	8006142 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a1b      	ldr	r3, [r3, #32]
 8006124:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	881b      	ldrh	r3, [r3, #0]
 800612a:	461a      	mov	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006134:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	1c9a      	adds	r2, r3, #2
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	621a      	str	r2, [r3, #32]
 8006140:	e008      	b.n	8006154 <UART_Transmit_IT+0x5a>
=======
 80060f6:	b480      	push	{r7}
 80060f8:	b085      	sub	sp, #20
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b21      	cmp	r3, #33	@ 0x21
 8006108:	d13e      	bne.n	8006188 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006112:	d114      	bne.n	800613e <UART_Transmit_IT+0x48>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d110      	bne.n	800613e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a1b      	ldr	r3, [r3, #32]
 8006120:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	881b      	ldrh	r3, [r3, #0]
 8006126:	461a      	mov	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006130:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	1c9a      	adds	r2, r3, #2
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	621a      	str	r2, [r3, #32]
 800613c:	e008      	b.n	8006150 <UART_Transmit_IT+0x5a>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
<<<<<<< HEAD
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	1c59      	adds	r1, r3, #1
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	6211      	str	r1, [r2, #32]
 800614c:	781a      	ldrb	r2, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006158:	b29b      	uxth	r3, r3
 800615a:	3b01      	subs	r3, #1
 800615c:	b29b      	uxth	r3, r3
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	4619      	mov	r1, r3
 8006162:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10f      	bne.n	8006188 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68da      	ldr	r2, [r3, #12]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006176:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68da      	ldr	r2, [r3, #12]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006186:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006188:	2300      	movs	r3, #0
 800618a:	e000      	b.n	800618e <UART_Transmit_IT+0x94>
=======
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	1c59      	adds	r1, r3, #1
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	6211      	str	r1, [r2, #32]
 8006148:	781a      	ldrb	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006154:	b29b      	uxth	r3, r3
 8006156:	3b01      	subs	r3, #1
 8006158:	b29b      	uxth	r3, r3
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	4619      	mov	r1, r3
 800615e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10f      	bne.n	8006184 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68da      	ldr	r2, [r3, #12]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006172:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68da      	ldr	r2, [r3, #12]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006182:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006184:	2300      	movs	r3, #0
 8006186:	e000      	b.n	800618a <UART_Transmit_IT+0x94>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 800618c:	2302      	movs	r3, #2
  }
}
 800618e:	4618      	mov	r0, r3
 8006190:	3714      	adds	r7, #20
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <UART_EndTransmit_IT>:
=======
 8006188:	2302      	movs	r3, #2
  }
}
 800618a:	4618      	mov	r0, r3
 800618c:	3714      	adds	r7, #20
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <UART_EndTransmit_IT>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800619a:	b580      	push	{r7, lr}
 800619c:	b082      	sub	sp, #8
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68da      	ldr	r2, [r3, #12]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2220      	movs	r2, #32
 80061b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
=======
 8006196:	b580      	push	{r7, lr}
 8006198:	b082      	sub	sp, #8
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68da      	ldr	r2, [r3, #12]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2220      	movs	r2, #32
 80061b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
<<<<<<< HEAD
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f7ff fe54 	bl	8005e68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <UART_Receive_IT>:
=======
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f7ff fe6c 	bl	8005e94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3708      	adds	r7, #8
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}

080061c6 <UART_Receive_IT>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b08c      	sub	sp, #48	@ 0x30
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b22      	cmp	r3, #34	@ 0x22
 80061dc:	f040 80ab 	bne.w	8006336 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061e8:	d117      	bne.n	800621a <UART_Receive_IT+0x50>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d113      	bne.n	800621a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80061f2:	2300      	movs	r3, #0
 80061f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
=======
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b08c      	sub	sp, #48	@ 0x30
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80061ce:	2300      	movs	r3, #0
 80061d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80061d2:	2300      	movs	r3, #0
 80061d4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b22      	cmp	r3, #34	@ 0x22
 80061e0:	f040 80aa 	bne.w	8006338 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061ec:	d115      	bne.n	800621a <UART_Receive_IT+0x54>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d111      	bne.n	800621a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061fa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	b29b      	uxth	r3, r3
 8006204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006208:	b29a      	uxth	r2, r3
 800620a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800620c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006212:	1c9a      	adds	r2, r3, #2
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	629a      	str	r2, [r3, #40]	@ 0x28
<<<<<<< HEAD
 8006218:	e026      	b.n	8006268 <UART_Receive_IT+0x9e>
=======
 8006218:	e024      	b.n	8006264 <UART_Receive_IT+0x9e>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800621e:	62fb      	str	r3, [r7, #44]	@ 0x2c
<<<<<<< HEAD
      pdata16bits  = NULL;
 8006220:	2300      	movs	r3, #0
 8006222:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800622c:	d007      	beq.n	800623e <UART_Receive_IT+0x74>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10a      	bne.n	800624c <UART_Receive_IT+0x82>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d106      	bne.n	800624c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	b2da      	uxtb	r2, r3
 8006246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006248:	701a      	strb	r2, [r3, #0]
 800624a:	e008      	b.n	800625e <UART_Receive_IT+0x94>
=======
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006228:	d007      	beq.n	800623a <UART_Receive_IT+0x74>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10a      	bne.n	8006248 <UART_Receive_IT+0x82>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d106      	bne.n	8006248 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	b2da      	uxtb	r2, r3
 8006242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006244:	701a      	strb	r2, [r3, #0]
 8006246:	e008      	b.n	800625a <UART_Receive_IT+0x94>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
<<<<<<< HEAD
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	b2db      	uxtb	r3, r3
 8006254:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006258:	b2da      	uxtb	r2, r3
 800625a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800625c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006262:	1c5a      	adds	r2, r3, #1
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800626c:	b29b      	uxth	r3, r3
 800626e:	3b01      	subs	r3, #1
 8006270:	b29b      	uxth	r3, r3
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	4619      	mov	r1, r3
 8006276:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006278:	2b00      	cmp	r3, #0
 800627a:	d15a      	bne.n	8006332 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68da      	ldr	r2, [r3, #12]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f022 0220 	bic.w	r2, r2, #32
 800628a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68da      	ldr	r2, [r3, #12]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800629a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	695a      	ldr	r2, [r3, #20]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f022 0201 	bic.w	r2, r2, #1
 80062aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2220      	movs	r2, #32
 80062b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
=======
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	b2db      	uxtb	r3, r3
 8006250:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006254:	b2da      	uxtb	r2, r3
 8006256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006258:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800625e:	1c5a      	adds	r2, r3, #1
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006268:	b29b      	uxth	r3, r3
 800626a:	3b01      	subs	r3, #1
 800626c:	b29b      	uxth	r3, r3
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	4619      	mov	r1, r3
 8006272:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006274:	2b00      	cmp	r3, #0
 8006276:	d15d      	bne.n	8006334 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68da      	ldr	r2, [r3, #12]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 0220 	bic.w	r2, r2, #32
 8006286:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68da      	ldr	r2, [r3, #12]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006296:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	695a      	ldr	r2, [r3, #20]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f022 0201 	bic.w	r2, r2, #1
 80062a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2220      	movs	r2, #32
 80062ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	635a      	str	r2, [r3, #52]	@ 0x34
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d135      	bne.n	8006328 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	330c      	adds	r3, #12
 80062c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	e853 3f00 	ldrex	r3, [r3]
 80062d0:	613b      	str	r3, [r7, #16]
   return(result);
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	f023 0310 	bic.w	r3, r3, #16
 80062d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	330c      	adds	r3, #12
 80062e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062e2:	623a      	str	r2, [r7, #32]
 80062e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e6:	69f9      	ldr	r1, [r7, #28]
 80062e8:	6a3a      	ldr	r2, [r7, #32]
 80062ea:	e841 2300 	strex	r3, r2, [r1]
 80062ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1e5      	bne.n	80062c2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0310 	and.w	r3, r3, #16
 8006300:	2b10      	cmp	r3, #16
 8006302:	d10a      	bne.n	800631a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006304:	2300      	movs	r3, #0
 8006306:	60fb      	str	r3, [r7, #12]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	60fb      	str	r3, [r7, #12]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	60fb      	str	r3, [r7, #12]
 8006318:	68fb      	ldr	r3, [r7, #12]
=======
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d135      	bne.n	800632a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	330c      	adds	r3, #12
 80062ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	e853 3f00 	ldrex	r3, [r3]
 80062d2:	613b      	str	r3, [r7, #16]
   return(result);
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	f023 0310 	bic.w	r3, r3, #16
 80062da:	627b      	str	r3, [r7, #36]	@ 0x24
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	330c      	adds	r3, #12
 80062e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062e4:	623a      	str	r2, [r7, #32]
 80062e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e8:	69f9      	ldr	r1, [r7, #28]
 80062ea:	6a3a      	ldr	r2, [r7, #32]
 80062ec:	e841 2300 	strex	r3, r2, [r1]
 80062f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1e5      	bne.n	80062c4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0310 	and.w	r3, r3, #16
 8006302:	2b10      	cmp	r3, #16
 8006304:	d10a      	bne.n	800631c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006306:	2300      	movs	r3, #0
 8006308:	60fb      	str	r3, [r7, #12]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	60fb      	str	r3, [r7, #12]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	60fb      	str	r3, [r7, #12]
 800631a:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800631e:	4619      	mov	r1, r3
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f7ff fdbf 	bl	8005ea4 <HAL_UARTEx_RxEventCallback>
 8006326:	e002      	b.n	800632e <UART_Receive_IT+0x164>
=======
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006320:	4619      	mov	r1, r3
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f7ff fdd4 	bl	8005ed0 <HAL_UARTEx_RxEventCallback>
 8006328:	e002      	b.n	8006330 <UART_Receive_IT+0x16a>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
<<<<<<< HEAD
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f7ff fda7 	bl	8005e7c <HAL_UART_RxCpltCallback>
=======
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f7ff fdbc 	bl	8005ea8 <HAL_UART_RxCpltCallback>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
<<<<<<< HEAD
 800632e:	2300      	movs	r3, #0
 8006330:	e002      	b.n	8006338 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006332:	2300      	movs	r3, #0
 8006334:	e000      	b.n	8006338 <UART_Receive_IT+0x16e>
=======
 8006330:	2300      	movs	r3, #0
 8006332:	e002      	b.n	800633a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006334:	2300      	movs	r3, #0
 8006336:	e000      	b.n	800633a <UART_Receive_IT+0x174>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8006336:	2302      	movs	r3, #2
  }
}
 8006338:	4618      	mov	r0, r3
 800633a:	3730      	adds	r7, #48	@ 0x30
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <UART_SetConfig>:
=======
 8006338:	2302      	movs	r3, #2
  }
}
 800633a:	4618      	mov	r0, r3
 800633c:	3730      	adds	r7, #48	@ 0x30
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
	...

08006344 <UART_SetConfig>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8006340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006344:	b0c0      	sub	sp, #256	@ 0x100
 8006346:	af00      	add	r7, sp, #0
 8006348:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
=======
 8006344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006348:	b0c0      	sub	sp, #256	@ 0x100
 800634a:	af00      	add	r7, sp, #0
 800634c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 800634c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800635c:	68d9      	ldr	r1, [r3, #12]
 800635e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	ea40 0301 	orr.w	r3, r0, r1
 8006368:	6113      	str	r3, [r2, #16]
=======
 8006350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800635c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006360:	68d9      	ldr	r1, [r3, #12]
 8006362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	ea40 0301 	orr.w	r3, r0, r1
 800636c:	6113      	str	r3, [r2, #16]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
<<<<<<< HEAD
 800636a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800636e:	689a      	ldr	r2, [r3, #8]
 8006370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	431a      	orrs	r2, r3
 8006378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	431a      	orrs	r2, r3
 8006380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	4313      	orrs	r3, r2
 8006388:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800638c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006398:	f021 010c 	bic.w	r1, r1, #12
 800639c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80063a6:	430b      	orrs	r3, r1
 80063a8:	60d3      	str	r3, [r2, #12]
=======
 800636e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006372:	689a      	ldr	r2, [r3, #8]
 8006374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	431a      	orrs	r2, r3
 800637c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	431a      	orrs	r2, r3
 8006384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006388:	69db      	ldr	r3, [r3, #28]
 800638a:	4313      	orrs	r3, r2
 800638c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800639c:	f021 010c 	bic.w	r1, r1, #12
 80063a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80063aa:	430b      	orrs	r3, r1
 80063ac:	60d3      	str	r3, [r2, #12]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
<<<<<<< HEAD
 80063aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80063b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ba:	6999      	ldr	r1, [r3, #24]
 80063bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	ea40 0301 	orr.w	r3, r0, r1
 80063c6:	6153      	str	r3, [r2, #20]
=======
 80063ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80063ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063be:	6999      	ldr	r1, [r3, #24]
 80063c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	ea40 0301 	orr.w	r3, r0, r1
 80063ca:	6153      	str	r3, [r2, #20]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
<<<<<<< HEAD
 80063c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	4b8f      	ldr	r3, [pc, #572]	@ (800660c <UART_SetConfig+0x2cc>)
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d005      	beq.n	80063e0 <UART_SetConfig+0xa0>
 80063d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	4b8d      	ldr	r3, [pc, #564]	@ (8006610 <UART_SetConfig+0x2d0>)
 80063dc:	429a      	cmp	r2, r3
 80063de:	d104      	bne.n	80063ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80063e0:	f7fd fd70 	bl	8003ec4 <HAL_RCC_GetPCLK2Freq>
 80063e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80063e8:	e003      	b.n	80063f2 <UART_SetConfig+0xb2>
=======
 80063cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	4b8f      	ldr	r3, [pc, #572]	@ (8006610 <UART_SetConfig+0x2cc>)
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d005      	beq.n	80063e4 <UART_SetConfig+0xa0>
 80063d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	4b8d      	ldr	r3, [pc, #564]	@ (8006614 <UART_SetConfig+0x2d0>)
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d104      	bne.n	80063ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80063e4:	f7fd fdce 	bl	8003f84 <HAL_RCC_GetPCLK2Freq>
 80063e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80063ec:	e003      	b.n	80063f6 <UART_SetConfig+0xb2>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
 80063ea:	f7fd fd57 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 80063ee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063f6:	69db      	ldr	r3, [r3, #28]
 80063f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063fc:	f040 810c 	bne.w	8006618 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006400:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006404:	2200      	movs	r2, #0
 8006406:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800640a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800640e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006412:	4622      	mov	r2, r4
 8006414:	462b      	mov	r3, r5
 8006416:	1891      	adds	r1, r2, r2
 8006418:	65b9      	str	r1, [r7, #88]	@ 0x58
 800641a:	415b      	adcs	r3, r3
 800641c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800641e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006422:	4621      	mov	r1, r4
 8006424:	eb12 0801 	adds.w	r8, r2, r1
 8006428:	4629      	mov	r1, r5
 800642a:	eb43 0901 	adc.w	r9, r3, r1
 800642e:	f04f 0200 	mov.w	r2, #0
 8006432:	f04f 0300 	mov.w	r3, #0
 8006436:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800643a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800643e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006442:	4690      	mov	r8, r2
 8006444:	4699      	mov	r9, r3
 8006446:	4623      	mov	r3, r4
 8006448:	eb18 0303 	adds.w	r3, r8, r3
 800644c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006450:	462b      	mov	r3, r5
 8006452:	eb49 0303 	adc.w	r3, r9, r3
 8006456:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800645a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006466:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800646a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800646e:	460b      	mov	r3, r1
 8006470:	18db      	adds	r3, r3, r3
 8006472:	653b      	str	r3, [r7, #80]	@ 0x50
 8006474:	4613      	mov	r3, r2
 8006476:	eb42 0303 	adc.w	r3, r2, r3
 800647a:	657b      	str	r3, [r7, #84]	@ 0x54
 800647c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006480:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006484:	f7fa fb98 	bl	8000bb8 <__aeabi_uldivmod>
 8006488:	4602      	mov	r2, r0
 800648a:	460b      	mov	r3, r1
 800648c:	4b61      	ldr	r3, [pc, #388]	@ (8006614 <UART_SetConfig+0x2d4>)
 800648e:	fba3 2302 	umull	r2, r3, r3, r2
 8006492:	095b      	lsrs	r3, r3, #5
 8006494:	011c      	lsls	r4, r3, #4
 8006496:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800649a:	2200      	movs	r2, #0
 800649c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80064a0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80064a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80064a8:	4642      	mov	r2, r8
 80064aa:	464b      	mov	r3, r9
 80064ac:	1891      	adds	r1, r2, r2
 80064ae:	64b9      	str	r1, [r7, #72]	@ 0x48
 80064b0:	415b      	adcs	r3, r3
 80064b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80064b8:	4641      	mov	r1, r8
 80064ba:	eb12 0a01 	adds.w	sl, r2, r1
 80064be:	4649      	mov	r1, r9
 80064c0:	eb43 0b01 	adc.w	fp, r3, r1
 80064c4:	f04f 0200 	mov.w	r2, #0
 80064c8:	f04f 0300 	mov.w	r3, #0
 80064cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80064d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80064d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064d8:	4692      	mov	sl, r2
 80064da:	469b      	mov	fp, r3
 80064dc:	4643      	mov	r3, r8
 80064de:	eb1a 0303 	adds.w	r3, sl, r3
 80064e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80064e6:	464b      	mov	r3, r9
 80064e8:	eb4b 0303 	adc.w	r3, fp, r3
 80064ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80064f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80064fc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006500:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006504:	460b      	mov	r3, r1
 8006506:	18db      	adds	r3, r3, r3
 8006508:	643b      	str	r3, [r7, #64]	@ 0x40
 800650a:	4613      	mov	r3, r2
 800650c:	eb42 0303 	adc.w	r3, r2, r3
 8006510:	647b      	str	r3, [r7, #68]	@ 0x44
 8006512:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006516:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800651a:	f7fa fb4d 	bl	8000bb8 <__aeabi_uldivmod>
 800651e:	4602      	mov	r2, r0
 8006520:	460b      	mov	r3, r1
 8006522:	4611      	mov	r1, r2
 8006524:	4b3b      	ldr	r3, [pc, #236]	@ (8006614 <UART_SetConfig+0x2d4>)
 8006526:	fba3 2301 	umull	r2, r3, r3, r1
 800652a:	095b      	lsrs	r3, r3, #5
 800652c:	2264      	movs	r2, #100	@ 0x64
 800652e:	fb02 f303 	mul.w	r3, r2, r3
 8006532:	1acb      	subs	r3, r1, r3
 8006534:	00db      	lsls	r3, r3, #3
 8006536:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800653a:	4b36      	ldr	r3, [pc, #216]	@ (8006614 <UART_SetConfig+0x2d4>)
 800653c:	fba3 2302 	umull	r2, r3, r3, r2
 8006540:	095b      	lsrs	r3, r3, #5
 8006542:	005b      	lsls	r3, r3, #1
 8006544:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006548:	441c      	add	r4, r3
 800654a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800654e:	2200      	movs	r2, #0
 8006550:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006554:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006558:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800655c:	4642      	mov	r2, r8
 800655e:	464b      	mov	r3, r9
 8006560:	1891      	adds	r1, r2, r2
 8006562:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006564:	415b      	adcs	r3, r3
 8006566:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006568:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800656c:	4641      	mov	r1, r8
 800656e:	1851      	adds	r1, r2, r1
 8006570:	6339      	str	r1, [r7, #48]	@ 0x30
 8006572:	4649      	mov	r1, r9
 8006574:	414b      	adcs	r3, r1
 8006576:	637b      	str	r3, [r7, #52]	@ 0x34
 8006578:	f04f 0200 	mov.w	r2, #0
 800657c:	f04f 0300 	mov.w	r3, #0
 8006580:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006584:	4659      	mov	r1, fp
 8006586:	00cb      	lsls	r3, r1, #3
 8006588:	4651      	mov	r1, sl
 800658a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800658e:	4651      	mov	r1, sl
 8006590:	00ca      	lsls	r2, r1, #3
 8006592:	4610      	mov	r0, r2
 8006594:	4619      	mov	r1, r3
 8006596:	4603      	mov	r3, r0
 8006598:	4642      	mov	r2, r8
 800659a:	189b      	adds	r3, r3, r2
 800659c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065a0:	464b      	mov	r3, r9
 80065a2:	460a      	mov	r2, r1
 80065a4:	eb42 0303 	adc.w	r3, r2, r3
 80065a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80065b8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80065bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80065c0:	460b      	mov	r3, r1
 80065c2:	18db      	adds	r3, r3, r3
 80065c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065c6:	4613      	mov	r3, r2
 80065c8:	eb42 0303 	adc.w	r3, r2, r3
 80065cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80065d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80065d6:	f7fa faef 	bl	8000bb8 <__aeabi_uldivmod>
 80065da:	4602      	mov	r2, r0
 80065dc:	460b      	mov	r3, r1
 80065de:	4b0d      	ldr	r3, [pc, #52]	@ (8006614 <UART_SetConfig+0x2d4>)
 80065e0:	fba3 1302 	umull	r1, r3, r3, r2
 80065e4:	095b      	lsrs	r3, r3, #5
 80065e6:	2164      	movs	r1, #100	@ 0x64
 80065e8:	fb01 f303 	mul.w	r3, r1, r3
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	00db      	lsls	r3, r3, #3
 80065f0:	3332      	adds	r3, #50	@ 0x32
 80065f2:	4a08      	ldr	r2, [pc, #32]	@ (8006614 <UART_SetConfig+0x2d4>)
 80065f4:	fba2 2303 	umull	r2, r3, r2, r3
 80065f8:	095b      	lsrs	r3, r3, #5
 80065fa:	f003 0207 	and.w	r2, r3, #7
 80065fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4422      	add	r2, r4
 8006606:	609a      	str	r2, [r3, #8]
=======
 80063ee:	f7fd fdb5 	bl	8003f5c <HAL_RCC_GetPCLK1Freq>
 80063f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063fa:	69db      	ldr	r3, [r3, #28]
 80063fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006400:	f040 810c 	bne.w	800661c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006404:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006408:	2200      	movs	r2, #0
 800640a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800640e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006412:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006416:	4622      	mov	r2, r4
 8006418:	462b      	mov	r3, r5
 800641a:	1891      	adds	r1, r2, r2
 800641c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800641e:	415b      	adcs	r3, r3
 8006420:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006422:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006426:	4621      	mov	r1, r4
 8006428:	eb12 0801 	adds.w	r8, r2, r1
 800642c:	4629      	mov	r1, r5
 800642e:	eb43 0901 	adc.w	r9, r3, r1
 8006432:	f04f 0200 	mov.w	r2, #0
 8006436:	f04f 0300 	mov.w	r3, #0
 800643a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800643e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006442:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006446:	4690      	mov	r8, r2
 8006448:	4699      	mov	r9, r3
 800644a:	4623      	mov	r3, r4
 800644c:	eb18 0303 	adds.w	r3, r8, r3
 8006450:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006454:	462b      	mov	r3, r5
 8006456:	eb49 0303 	adc.w	r3, r9, r3
 800645a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800645e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800646a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800646e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006472:	460b      	mov	r3, r1
 8006474:	18db      	adds	r3, r3, r3
 8006476:	653b      	str	r3, [r7, #80]	@ 0x50
 8006478:	4613      	mov	r3, r2
 800647a:	eb42 0303 	adc.w	r3, r2, r3
 800647e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006480:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006484:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006488:	f7fa fb96 	bl	8000bb8 <__aeabi_uldivmod>
 800648c:	4602      	mov	r2, r0
 800648e:	460b      	mov	r3, r1
 8006490:	4b61      	ldr	r3, [pc, #388]	@ (8006618 <UART_SetConfig+0x2d4>)
 8006492:	fba3 2302 	umull	r2, r3, r3, r2
 8006496:	095b      	lsrs	r3, r3, #5
 8006498:	011c      	lsls	r4, r3, #4
 800649a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800649e:	2200      	movs	r2, #0
 80064a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80064a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80064a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80064ac:	4642      	mov	r2, r8
 80064ae:	464b      	mov	r3, r9
 80064b0:	1891      	adds	r1, r2, r2
 80064b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80064b4:	415b      	adcs	r3, r3
 80064b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80064bc:	4641      	mov	r1, r8
 80064be:	eb12 0a01 	adds.w	sl, r2, r1
 80064c2:	4649      	mov	r1, r9
 80064c4:	eb43 0b01 	adc.w	fp, r3, r1
 80064c8:	f04f 0200 	mov.w	r2, #0
 80064cc:	f04f 0300 	mov.w	r3, #0
 80064d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80064d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80064d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064dc:	4692      	mov	sl, r2
 80064de:	469b      	mov	fp, r3
 80064e0:	4643      	mov	r3, r8
 80064e2:	eb1a 0303 	adds.w	r3, sl, r3
 80064e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80064ea:	464b      	mov	r3, r9
 80064ec:	eb4b 0303 	adc.w	r3, fp, r3
 80064f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80064f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006500:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006504:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006508:	460b      	mov	r3, r1
 800650a:	18db      	adds	r3, r3, r3
 800650c:	643b      	str	r3, [r7, #64]	@ 0x40
 800650e:	4613      	mov	r3, r2
 8006510:	eb42 0303 	adc.w	r3, r2, r3
 8006514:	647b      	str	r3, [r7, #68]	@ 0x44
 8006516:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800651a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800651e:	f7fa fb4b 	bl	8000bb8 <__aeabi_uldivmod>
 8006522:	4602      	mov	r2, r0
 8006524:	460b      	mov	r3, r1
 8006526:	4611      	mov	r1, r2
 8006528:	4b3b      	ldr	r3, [pc, #236]	@ (8006618 <UART_SetConfig+0x2d4>)
 800652a:	fba3 2301 	umull	r2, r3, r3, r1
 800652e:	095b      	lsrs	r3, r3, #5
 8006530:	2264      	movs	r2, #100	@ 0x64
 8006532:	fb02 f303 	mul.w	r3, r2, r3
 8006536:	1acb      	subs	r3, r1, r3
 8006538:	00db      	lsls	r3, r3, #3
 800653a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800653e:	4b36      	ldr	r3, [pc, #216]	@ (8006618 <UART_SetConfig+0x2d4>)
 8006540:	fba3 2302 	umull	r2, r3, r3, r2
 8006544:	095b      	lsrs	r3, r3, #5
 8006546:	005b      	lsls	r3, r3, #1
 8006548:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800654c:	441c      	add	r4, r3
 800654e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006552:	2200      	movs	r2, #0
 8006554:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006558:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800655c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006560:	4642      	mov	r2, r8
 8006562:	464b      	mov	r3, r9
 8006564:	1891      	adds	r1, r2, r2
 8006566:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006568:	415b      	adcs	r3, r3
 800656a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800656c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006570:	4641      	mov	r1, r8
 8006572:	1851      	adds	r1, r2, r1
 8006574:	6339      	str	r1, [r7, #48]	@ 0x30
 8006576:	4649      	mov	r1, r9
 8006578:	414b      	adcs	r3, r1
 800657a:	637b      	str	r3, [r7, #52]	@ 0x34
 800657c:	f04f 0200 	mov.w	r2, #0
 8006580:	f04f 0300 	mov.w	r3, #0
 8006584:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006588:	4659      	mov	r1, fp
 800658a:	00cb      	lsls	r3, r1, #3
 800658c:	4651      	mov	r1, sl
 800658e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006592:	4651      	mov	r1, sl
 8006594:	00ca      	lsls	r2, r1, #3
 8006596:	4610      	mov	r0, r2
 8006598:	4619      	mov	r1, r3
 800659a:	4603      	mov	r3, r0
 800659c:	4642      	mov	r2, r8
 800659e:	189b      	adds	r3, r3, r2
 80065a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065a4:	464b      	mov	r3, r9
 80065a6:	460a      	mov	r2, r1
 80065a8:	eb42 0303 	adc.w	r3, r2, r3
 80065ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80065bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80065c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80065c4:	460b      	mov	r3, r1
 80065c6:	18db      	adds	r3, r3, r3
 80065c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065ca:	4613      	mov	r3, r2
 80065cc:	eb42 0303 	adc.w	r3, r2, r3
 80065d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80065d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80065da:	f7fa faed 	bl	8000bb8 <__aeabi_uldivmod>
 80065de:	4602      	mov	r2, r0
 80065e0:	460b      	mov	r3, r1
 80065e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006618 <UART_SetConfig+0x2d4>)
 80065e4:	fba3 1302 	umull	r1, r3, r3, r2
 80065e8:	095b      	lsrs	r3, r3, #5
 80065ea:	2164      	movs	r1, #100	@ 0x64
 80065ec:	fb01 f303 	mul.w	r3, r1, r3
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	00db      	lsls	r3, r3, #3
 80065f4:	3332      	adds	r3, #50	@ 0x32
 80065f6:	4a08      	ldr	r2, [pc, #32]	@ (8006618 <UART_SetConfig+0x2d4>)
 80065f8:	fba2 2303 	umull	r2, r3, r2, r3
 80065fc:	095b      	lsrs	r3, r3, #5
 80065fe:	f003 0207 	and.w	r2, r3, #7
 8006602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4422      	add	r2, r4
 800660a:	609a      	str	r2, [r3, #8]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
<<<<<<< HEAD
 8006608:	e106      	b.n	8006818 <UART_SetConfig+0x4d8>
 800660a:	bf00      	nop
 800660c:	40011000 	.word	0x40011000
 8006610:	40011400 	.word	0x40011400
 8006614:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006618:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800661c:	2200      	movs	r2, #0
 800661e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006622:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006626:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800662a:	4642      	mov	r2, r8
 800662c:	464b      	mov	r3, r9
 800662e:	1891      	adds	r1, r2, r2
 8006630:	6239      	str	r1, [r7, #32]
 8006632:	415b      	adcs	r3, r3
 8006634:	627b      	str	r3, [r7, #36]	@ 0x24
 8006636:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800663a:	4641      	mov	r1, r8
 800663c:	1854      	adds	r4, r2, r1
 800663e:	4649      	mov	r1, r9
 8006640:	eb43 0501 	adc.w	r5, r3, r1
 8006644:	f04f 0200 	mov.w	r2, #0
 8006648:	f04f 0300 	mov.w	r3, #0
 800664c:	00eb      	lsls	r3, r5, #3
 800664e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006652:	00e2      	lsls	r2, r4, #3
 8006654:	4614      	mov	r4, r2
 8006656:	461d      	mov	r5, r3
 8006658:	4643      	mov	r3, r8
 800665a:	18e3      	adds	r3, r4, r3
 800665c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006660:	464b      	mov	r3, r9
 8006662:	eb45 0303 	adc.w	r3, r5, r3
 8006666:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800666a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006676:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800667a:	f04f 0200 	mov.w	r2, #0
 800667e:	f04f 0300 	mov.w	r3, #0
 8006682:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006686:	4629      	mov	r1, r5
 8006688:	008b      	lsls	r3, r1, #2
 800668a:	4621      	mov	r1, r4
 800668c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006690:	4621      	mov	r1, r4
 8006692:	008a      	lsls	r2, r1, #2
 8006694:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006698:	f7fa fa8e 	bl	8000bb8 <__aeabi_uldivmod>
 800669c:	4602      	mov	r2, r0
 800669e:	460b      	mov	r3, r1
 80066a0:	4b60      	ldr	r3, [pc, #384]	@ (8006824 <UART_SetConfig+0x4e4>)
 80066a2:	fba3 2302 	umull	r2, r3, r3, r2
 80066a6:	095b      	lsrs	r3, r3, #5
 80066a8:	011c      	lsls	r4, r3, #4
 80066aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066ae:	2200      	movs	r2, #0
 80066b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80066b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80066b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80066bc:	4642      	mov	r2, r8
 80066be:	464b      	mov	r3, r9
 80066c0:	1891      	adds	r1, r2, r2
 80066c2:	61b9      	str	r1, [r7, #24]
 80066c4:	415b      	adcs	r3, r3
 80066c6:	61fb      	str	r3, [r7, #28]
 80066c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066cc:	4641      	mov	r1, r8
 80066ce:	1851      	adds	r1, r2, r1
 80066d0:	6139      	str	r1, [r7, #16]
 80066d2:	4649      	mov	r1, r9
 80066d4:	414b      	adcs	r3, r1
 80066d6:	617b      	str	r3, [r7, #20]
 80066d8:	f04f 0200 	mov.w	r2, #0
 80066dc:	f04f 0300 	mov.w	r3, #0
 80066e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80066e4:	4659      	mov	r1, fp
 80066e6:	00cb      	lsls	r3, r1, #3
 80066e8:	4651      	mov	r1, sl
 80066ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066ee:	4651      	mov	r1, sl
 80066f0:	00ca      	lsls	r2, r1, #3
 80066f2:	4610      	mov	r0, r2
 80066f4:	4619      	mov	r1, r3
 80066f6:	4603      	mov	r3, r0
 80066f8:	4642      	mov	r2, r8
 80066fa:	189b      	adds	r3, r3, r2
 80066fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006700:	464b      	mov	r3, r9
 8006702:	460a      	mov	r2, r1
 8006704:	eb42 0303 	adc.w	r3, r2, r3
 8006708:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800670c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006716:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006718:	f04f 0200 	mov.w	r2, #0
 800671c:	f04f 0300 	mov.w	r3, #0
 8006720:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006724:	4649      	mov	r1, r9
 8006726:	008b      	lsls	r3, r1, #2
 8006728:	4641      	mov	r1, r8
 800672a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800672e:	4641      	mov	r1, r8
 8006730:	008a      	lsls	r2, r1, #2
 8006732:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006736:	f7fa fa3f 	bl	8000bb8 <__aeabi_uldivmod>
 800673a:	4602      	mov	r2, r0
 800673c:	460b      	mov	r3, r1
 800673e:	4611      	mov	r1, r2
 8006740:	4b38      	ldr	r3, [pc, #224]	@ (8006824 <UART_SetConfig+0x4e4>)
 8006742:	fba3 2301 	umull	r2, r3, r3, r1
 8006746:	095b      	lsrs	r3, r3, #5
 8006748:	2264      	movs	r2, #100	@ 0x64
 800674a:	fb02 f303 	mul.w	r3, r2, r3
 800674e:	1acb      	subs	r3, r1, r3
 8006750:	011b      	lsls	r3, r3, #4
 8006752:	3332      	adds	r3, #50	@ 0x32
 8006754:	4a33      	ldr	r2, [pc, #204]	@ (8006824 <UART_SetConfig+0x4e4>)
 8006756:	fba2 2303 	umull	r2, r3, r2, r3
 800675a:	095b      	lsrs	r3, r3, #5
 800675c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006760:	441c      	add	r4, r3
 8006762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006766:	2200      	movs	r2, #0
 8006768:	673b      	str	r3, [r7, #112]	@ 0x70
 800676a:	677a      	str	r2, [r7, #116]	@ 0x74
 800676c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006770:	4642      	mov	r2, r8
 8006772:	464b      	mov	r3, r9
 8006774:	1891      	adds	r1, r2, r2
 8006776:	60b9      	str	r1, [r7, #8]
 8006778:	415b      	adcs	r3, r3
 800677a:	60fb      	str	r3, [r7, #12]
 800677c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006780:	4641      	mov	r1, r8
 8006782:	1851      	adds	r1, r2, r1
 8006784:	6039      	str	r1, [r7, #0]
 8006786:	4649      	mov	r1, r9
 8006788:	414b      	adcs	r3, r1
 800678a:	607b      	str	r3, [r7, #4]
 800678c:	f04f 0200 	mov.w	r2, #0
 8006790:	f04f 0300 	mov.w	r3, #0
 8006794:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006798:	4659      	mov	r1, fp
 800679a:	00cb      	lsls	r3, r1, #3
 800679c:	4651      	mov	r1, sl
 800679e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067a2:	4651      	mov	r1, sl
 80067a4:	00ca      	lsls	r2, r1, #3
 80067a6:	4610      	mov	r0, r2
 80067a8:	4619      	mov	r1, r3
 80067aa:	4603      	mov	r3, r0
 80067ac:	4642      	mov	r2, r8
 80067ae:	189b      	adds	r3, r3, r2
 80067b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067b2:	464b      	mov	r3, r9
 80067b4:	460a      	mov	r2, r1
 80067b6:	eb42 0303 	adc.w	r3, r2, r3
 80067ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80067bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80067c6:	667a      	str	r2, [r7, #100]	@ 0x64
 80067c8:	f04f 0200 	mov.w	r2, #0
 80067cc:	f04f 0300 	mov.w	r3, #0
 80067d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80067d4:	4649      	mov	r1, r9
 80067d6:	008b      	lsls	r3, r1, #2
 80067d8:	4641      	mov	r1, r8
 80067da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067de:	4641      	mov	r1, r8
 80067e0:	008a      	lsls	r2, r1, #2
 80067e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80067e6:	f7fa f9e7 	bl	8000bb8 <__aeabi_uldivmod>
 80067ea:	4602      	mov	r2, r0
 80067ec:	460b      	mov	r3, r1
 80067ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006824 <UART_SetConfig+0x4e4>)
 80067f0:	fba3 1302 	umull	r1, r3, r3, r2
 80067f4:	095b      	lsrs	r3, r3, #5
 80067f6:	2164      	movs	r1, #100	@ 0x64
 80067f8:	fb01 f303 	mul.w	r3, r1, r3
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	011b      	lsls	r3, r3, #4
 8006800:	3332      	adds	r3, #50	@ 0x32
 8006802:	4a08      	ldr	r2, [pc, #32]	@ (8006824 <UART_SetConfig+0x4e4>)
 8006804:	fba2 2303 	umull	r2, r3, r2, r3
 8006808:	095b      	lsrs	r3, r3, #5
 800680a:	f003 020f 	and.w	r2, r3, #15
 800680e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4422      	add	r2, r4
 8006816:	609a      	str	r2, [r3, #8]
}
 8006818:	bf00      	nop
 800681a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800681e:	46bd      	mov	sp, r7
 8006820:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006824:	51eb851f 	.word	0x51eb851f

08006828 <__NVIC_SetPriority>:
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	4603      	mov	r3, r0
 8006830:	6039      	str	r1, [r7, #0]
 8006832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006838:	2b00      	cmp	r3, #0
 800683a:	db0a      	blt.n	8006852 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	b2da      	uxtb	r2, r3
 8006840:	490c      	ldr	r1, [pc, #48]	@ (8006874 <__NVIC_SetPriority+0x4c>)
 8006842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006846:	0112      	lsls	r2, r2, #4
 8006848:	b2d2      	uxtb	r2, r2
 800684a:	440b      	add	r3, r1
 800684c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006850:	e00a      	b.n	8006868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	b2da      	uxtb	r2, r3
 8006856:	4908      	ldr	r1, [pc, #32]	@ (8006878 <__NVIC_SetPriority+0x50>)
 8006858:	79fb      	ldrb	r3, [r7, #7]
 800685a:	f003 030f 	and.w	r3, r3, #15
 800685e:	3b04      	subs	r3, #4
 8006860:	0112      	lsls	r2, r2, #4
 8006862:	b2d2      	uxtb	r2, r2
 8006864:	440b      	add	r3, r1
 8006866:	761a      	strb	r2, [r3, #24]
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr
 8006874:	e000e100 	.word	0xe000e100
 8006878:	e000ed00 	.word	0xe000ed00

0800687c <SysTick_Handler>:
=======
 800660c:	e106      	b.n	800681c <UART_SetConfig+0x4d8>
 800660e:	bf00      	nop
 8006610:	40011000 	.word	0x40011000
 8006614:	40011400 	.word	0x40011400
 8006618:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800661c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006620:	2200      	movs	r2, #0
 8006622:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006626:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800662a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800662e:	4642      	mov	r2, r8
 8006630:	464b      	mov	r3, r9
 8006632:	1891      	adds	r1, r2, r2
 8006634:	6239      	str	r1, [r7, #32]
 8006636:	415b      	adcs	r3, r3
 8006638:	627b      	str	r3, [r7, #36]	@ 0x24
 800663a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800663e:	4641      	mov	r1, r8
 8006640:	1854      	adds	r4, r2, r1
 8006642:	4649      	mov	r1, r9
 8006644:	eb43 0501 	adc.w	r5, r3, r1
 8006648:	f04f 0200 	mov.w	r2, #0
 800664c:	f04f 0300 	mov.w	r3, #0
 8006650:	00eb      	lsls	r3, r5, #3
 8006652:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006656:	00e2      	lsls	r2, r4, #3
 8006658:	4614      	mov	r4, r2
 800665a:	461d      	mov	r5, r3
 800665c:	4643      	mov	r3, r8
 800665e:	18e3      	adds	r3, r4, r3
 8006660:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006664:	464b      	mov	r3, r9
 8006666:	eb45 0303 	adc.w	r3, r5, r3
 800666a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800666e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800667a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800667e:	f04f 0200 	mov.w	r2, #0
 8006682:	f04f 0300 	mov.w	r3, #0
 8006686:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800668a:	4629      	mov	r1, r5
 800668c:	008b      	lsls	r3, r1, #2
 800668e:	4621      	mov	r1, r4
 8006690:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006694:	4621      	mov	r1, r4
 8006696:	008a      	lsls	r2, r1, #2
 8006698:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800669c:	f7fa fa8c 	bl	8000bb8 <__aeabi_uldivmod>
 80066a0:	4602      	mov	r2, r0
 80066a2:	460b      	mov	r3, r1
 80066a4:	4b60      	ldr	r3, [pc, #384]	@ (8006828 <UART_SetConfig+0x4e4>)
 80066a6:	fba3 2302 	umull	r2, r3, r3, r2
 80066aa:	095b      	lsrs	r3, r3, #5
 80066ac:	011c      	lsls	r4, r3, #4
 80066ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066b2:	2200      	movs	r2, #0
 80066b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80066b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80066bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80066c0:	4642      	mov	r2, r8
 80066c2:	464b      	mov	r3, r9
 80066c4:	1891      	adds	r1, r2, r2
 80066c6:	61b9      	str	r1, [r7, #24]
 80066c8:	415b      	adcs	r3, r3
 80066ca:	61fb      	str	r3, [r7, #28]
 80066cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066d0:	4641      	mov	r1, r8
 80066d2:	1851      	adds	r1, r2, r1
 80066d4:	6139      	str	r1, [r7, #16]
 80066d6:	4649      	mov	r1, r9
 80066d8:	414b      	adcs	r3, r1
 80066da:	617b      	str	r3, [r7, #20]
 80066dc:	f04f 0200 	mov.w	r2, #0
 80066e0:	f04f 0300 	mov.w	r3, #0
 80066e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80066e8:	4659      	mov	r1, fp
 80066ea:	00cb      	lsls	r3, r1, #3
 80066ec:	4651      	mov	r1, sl
 80066ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066f2:	4651      	mov	r1, sl
 80066f4:	00ca      	lsls	r2, r1, #3
 80066f6:	4610      	mov	r0, r2
 80066f8:	4619      	mov	r1, r3
 80066fa:	4603      	mov	r3, r0
 80066fc:	4642      	mov	r2, r8
 80066fe:	189b      	adds	r3, r3, r2
 8006700:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006704:	464b      	mov	r3, r9
 8006706:	460a      	mov	r2, r1
 8006708:	eb42 0303 	adc.w	r3, r2, r3
 800670c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	67bb      	str	r3, [r7, #120]	@ 0x78
 800671a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800671c:	f04f 0200 	mov.w	r2, #0
 8006720:	f04f 0300 	mov.w	r3, #0
 8006724:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006728:	4649      	mov	r1, r9
 800672a:	008b      	lsls	r3, r1, #2
 800672c:	4641      	mov	r1, r8
 800672e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006732:	4641      	mov	r1, r8
 8006734:	008a      	lsls	r2, r1, #2
 8006736:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800673a:	f7fa fa3d 	bl	8000bb8 <__aeabi_uldivmod>
 800673e:	4602      	mov	r2, r0
 8006740:	460b      	mov	r3, r1
 8006742:	4611      	mov	r1, r2
 8006744:	4b38      	ldr	r3, [pc, #224]	@ (8006828 <UART_SetConfig+0x4e4>)
 8006746:	fba3 2301 	umull	r2, r3, r3, r1
 800674a:	095b      	lsrs	r3, r3, #5
 800674c:	2264      	movs	r2, #100	@ 0x64
 800674e:	fb02 f303 	mul.w	r3, r2, r3
 8006752:	1acb      	subs	r3, r1, r3
 8006754:	011b      	lsls	r3, r3, #4
 8006756:	3332      	adds	r3, #50	@ 0x32
 8006758:	4a33      	ldr	r2, [pc, #204]	@ (8006828 <UART_SetConfig+0x4e4>)
 800675a:	fba2 2303 	umull	r2, r3, r2, r3
 800675e:	095b      	lsrs	r3, r3, #5
 8006760:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006764:	441c      	add	r4, r3
 8006766:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800676a:	2200      	movs	r2, #0
 800676c:	673b      	str	r3, [r7, #112]	@ 0x70
 800676e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006770:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006774:	4642      	mov	r2, r8
 8006776:	464b      	mov	r3, r9
 8006778:	1891      	adds	r1, r2, r2
 800677a:	60b9      	str	r1, [r7, #8]
 800677c:	415b      	adcs	r3, r3
 800677e:	60fb      	str	r3, [r7, #12]
 8006780:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006784:	4641      	mov	r1, r8
 8006786:	1851      	adds	r1, r2, r1
 8006788:	6039      	str	r1, [r7, #0]
 800678a:	4649      	mov	r1, r9
 800678c:	414b      	adcs	r3, r1
 800678e:	607b      	str	r3, [r7, #4]
 8006790:	f04f 0200 	mov.w	r2, #0
 8006794:	f04f 0300 	mov.w	r3, #0
 8006798:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800679c:	4659      	mov	r1, fp
 800679e:	00cb      	lsls	r3, r1, #3
 80067a0:	4651      	mov	r1, sl
 80067a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067a6:	4651      	mov	r1, sl
 80067a8:	00ca      	lsls	r2, r1, #3
 80067aa:	4610      	mov	r0, r2
 80067ac:	4619      	mov	r1, r3
 80067ae:	4603      	mov	r3, r0
 80067b0:	4642      	mov	r2, r8
 80067b2:	189b      	adds	r3, r3, r2
 80067b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067b6:	464b      	mov	r3, r9
 80067b8:	460a      	mov	r2, r1
 80067ba:	eb42 0303 	adc.w	r3, r2, r3
 80067be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80067c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80067ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80067cc:	f04f 0200 	mov.w	r2, #0
 80067d0:	f04f 0300 	mov.w	r3, #0
 80067d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80067d8:	4649      	mov	r1, r9
 80067da:	008b      	lsls	r3, r1, #2
 80067dc:	4641      	mov	r1, r8
 80067de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067e2:	4641      	mov	r1, r8
 80067e4:	008a      	lsls	r2, r1, #2
 80067e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80067ea:	f7fa f9e5 	bl	8000bb8 <__aeabi_uldivmod>
 80067ee:	4602      	mov	r2, r0
 80067f0:	460b      	mov	r3, r1
 80067f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006828 <UART_SetConfig+0x4e4>)
 80067f4:	fba3 1302 	umull	r1, r3, r3, r2
 80067f8:	095b      	lsrs	r3, r3, #5
 80067fa:	2164      	movs	r1, #100	@ 0x64
 80067fc:	fb01 f303 	mul.w	r3, r1, r3
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	011b      	lsls	r3, r3, #4
 8006804:	3332      	adds	r3, #50	@ 0x32
 8006806:	4a08      	ldr	r2, [pc, #32]	@ (8006828 <UART_SetConfig+0x4e4>)
 8006808:	fba2 2303 	umull	r2, r3, r2, r3
 800680c:	095b      	lsrs	r3, r3, #5
 800680e:	f003 020f 	and.w	r2, r3, #15
 8006812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4422      	add	r2, r4
 800681a:	609a      	str	r2, [r3, #8]
}
 800681c:	bf00      	nop
 800681e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006822:	46bd      	mov	sp, r7
 8006824:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006828:	51eb851f 	.word	0x51eb851f

0800682c <__NVIC_SetPriority>:
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	4603      	mov	r3, r0
 8006834:	6039      	str	r1, [r7, #0]
 8006836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800683c:	2b00      	cmp	r3, #0
 800683e:	db0a      	blt.n	8006856 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	b2da      	uxtb	r2, r3
 8006844:	490c      	ldr	r1, [pc, #48]	@ (8006878 <__NVIC_SetPriority+0x4c>)
 8006846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800684a:	0112      	lsls	r2, r2, #4
 800684c:	b2d2      	uxtb	r2, r2
 800684e:	440b      	add	r3, r1
 8006850:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006854:	e00a      	b.n	800686c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	b2da      	uxtb	r2, r3
 800685a:	4908      	ldr	r1, [pc, #32]	@ (800687c <__NVIC_SetPriority+0x50>)
 800685c:	79fb      	ldrb	r3, [r7, #7]
 800685e:	f003 030f 	and.w	r3, r3, #15
 8006862:	3b04      	subs	r3, #4
 8006864:	0112      	lsls	r2, r2, #4
 8006866:	b2d2      	uxtb	r2, r2
 8006868:	440b      	add	r3, r1
 800686a:	761a      	strb	r2, [r3, #24]
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr
 8006878:	e000e100 	.word	0xe000e100
 800687c:	e000ed00 	.word	0xe000ed00

08006880 <SysTick_Handler>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
<<<<<<< HEAD
 800687c:	b580      	push	{r7, lr}
 800687e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006880:	4b05      	ldr	r3, [pc, #20]	@ (8006898 <SysTick_Handler+0x1c>)
 8006882:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006884:	f001 fd46 	bl	8008314 <xTaskGetSchedulerState>
 8006888:	4603      	mov	r3, r0
 800688a:	2b01      	cmp	r3, #1
 800688c:	d001      	beq.n	8006892 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800688e:	f002 fb3b 	bl	8008f08 <xPortSysTickHandler>
  }
}
 8006892:	bf00      	nop
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	e000e010 	.word	0xe000e010

0800689c <SVC_Setup>:
=======
 8006880:	b580      	push	{r7, lr}
 8006882:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006884:	4b05      	ldr	r3, [pc, #20]	@ (800689c <SysTick_Handler+0x1c>)
 8006886:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006888:	f001 fd46 	bl	8008318 <xTaskGetSchedulerState>
 800688c:	4603      	mov	r3, r0
 800688e:	2b01      	cmp	r3, #1
 8006890:	d001      	beq.n	8006896 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006892:	f002 fb41 	bl	8008f18 <xPortSysTickHandler>
  }
}
 8006896:	bf00      	nop
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	e000e010 	.word	0xe000e010

080068a0 <SVC_Setup>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
<<<<<<< HEAD
 800689c:	b580      	push	{r7, lr}
 800689e:	af00      	add	r7, sp, #0
=======
 80068a0:	b580      	push	{r7, lr}
 80068a2:	af00      	add	r7, sp, #0
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
<<<<<<< HEAD
 80068a0:	2100      	movs	r1, #0
 80068a2:	f06f 0004 	mvn.w	r0, #4
 80068a6:	f7ff ffbf 	bl	8006828 <__NVIC_SetPriority>
#endif
}
 80068aa:	bf00      	nop
 80068ac:	bd80      	pop	{r7, pc}
	...

080068b0 <osKernelInitialize>:
=======
 80068a4:	2100      	movs	r1, #0
 80068a6:	f06f 0004 	mvn.w	r0, #4
 80068aa:	f7ff ffbf 	bl	800682c <__NVIC_SetPriority>
#endif
}
 80068ae:	bf00      	nop
 80068b0:	bd80      	pop	{r7, pc}
	...

080068b4 <osKernelInitialize>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
<<<<<<< HEAD
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068b6:	f3ef 8305 	mrs	r3, IPSR
 80068ba:	603b      	str	r3, [r7, #0]
  return(result);
 80068bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d003      	beq.n	80068ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80068c2:	f06f 0305 	mvn.w	r3, #5
 80068c6:	607b      	str	r3, [r7, #4]
 80068c8:	e00c      	b.n	80068e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80068ca:	4b0a      	ldr	r3, [pc, #40]	@ (80068f4 <osKernelInitialize+0x44>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d105      	bne.n	80068de <osKernelInitialize+0x2e>
=======
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068ba:	f3ef 8305 	mrs	r3, IPSR
 80068be:	603b      	str	r3, [r7, #0]
  return(result);
 80068c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d003      	beq.n	80068ce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80068c6:	f06f 0305 	mvn.w	r3, #5
 80068ca:	607b      	str	r3, [r7, #4]
 80068cc:	e00c      	b.n	80068e8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80068ce:	4b0a      	ldr	r3, [pc, #40]	@ (80068f8 <osKernelInitialize+0x44>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d105      	bne.n	80068e2 <osKernelInitialize+0x2e>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
<<<<<<< HEAD
 80068d2:	4b08      	ldr	r3, [pc, #32]	@ (80068f4 <osKernelInitialize+0x44>)
 80068d4:	2201      	movs	r2, #1
 80068d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80068d8:	2300      	movs	r3, #0
 80068da:	607b      	str	r3, [r7, #4]
 80068dc:	e002      	b.n	80068e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80068de:	f04f 33ff 	mov.w	r3, #4294967295
 80068e2:	607b      	str	r3, [r7, #4]
=======
 80068d6:	4b08      	ldr	r3, [pc, #32]	@ (80068f8 <osKernelInitialize+0x44>)
 80068d8:	2201      	movs	r2, #1
 80068da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80068dc:	2300      	movs	r3, #0
 80068de:	607b      	str	r3, [r7, #4]
 80068e0:	e002      	b.n	80068e8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80068e2:	f04f 33ff 	mov.w	r3, #4294967295
 80068e6:	607b      	str	r3, [r7, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }
  }

  return (stat);
<<<<<<< HEAD
 80068e4:	687b      	ldr	r3, [r7, #4]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	370c      	adds	r7, #12
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	200004fc 	.word	0x200004fc

080068f8 <osKernelStart>:
=======
 80068e8:	687b      	ldr	r3, [r7, #4]
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	370c      	adds	r7, #12
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	20000504 	.word	0x20000504

080068fc <osKernelStart>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  }

  return (state);
}

osStatus_t osKernelStart (void) {
<<<<<<< HEAD
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068fe:	f3ef 8305 	mrs	r3, IPSR
 8006902:	603b      	str	r3, [r7, #0]
  return(result);
 8006904:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <osKernelStart+0x1a>
    stat = osErrorISR;
 800690a:	f06f 0305 	mvn.w	r3, #5
 800690e:	607b      	str	r3, [r7, #4]
 8006910:	e010      	b.n	8006934 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006912:	4b0b      	ldr	r3, [pc, #44]	@ (8006940 <osKernelStart+0x48>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d109      	bne.n	800692e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800691a:	f7ff ffbf 	bl	800689c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800691e:	4b08      	ldr	r3, [pc, #32]	@ (8006940 <osKernelStart+0x48>)
 8006920:	2202      	movs	r2, #2
 8006922:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006924:	f001 f892 	bl	8007a4c <vTaskStartScheduler>
      stat = osOK;
 8006928:	2300      	movs	r3, #0
 800692a:	607b      	str	r3, [r7, #4]
 800692c:	e002      	b.n	8006934 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800692e:	f04f 33ff 	mov.w	r3, #4294967295
 8006932:	607b      	str	r3, [r7, #4]
=======
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006902:	f3ef 8305 	mrs	r3, IPSR
 8006906:	603b      	str	r3, [r7, #0]
  return(result);
 8006908:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800690a:	2b00      	cmp	r3, #0
 800690c:	d003      	beq.n	8006916 <osKernelStart+0x1a>
    stat = osErrorISR;
 800690e:	f06f 0305 	mvn.w	r3, #5
 8006912:	607b      	str	r3, [r7, #4]
 8006914:	e010      	b.n	8006938 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006916:	4b0b      	ldr	r3, [pc, #44]	@ (8006944 <osKernelStart+0x48>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d109      	bne.n	8006932 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800691e:	f7ff ffbf 	bl	80068a0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006922:	4b08      	ldr	r3, [pc, #32]	@ (8006944 <osKernelStart+0x48>)
 8006924:	2202      	movs	r2, #2
 8006926:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006928:	f001 f892 	bl	8007a50 <vTaskStartScheduler>
      stat = osOK;
 800692c:	2300      	movs	r3, #0
 800692e:	607b      	str	r3, [r7, #4]
 8006930:	e002      	b.n	8006938 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006932:	f04f 33ff 	mov.w	r3, #4294967295
 8006936:	607b      	str	r3, [r7, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }
  }

  return (stat);
<<<<<<< HEAD
 8006934:	687b      	ldr	r3, [r7, #4]
}
 8006936:	4618      	mov	r0, r3
 8006938:	3708      	adds	r7, #8
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	200004fc 	.word	0x200004fc

08006944 <osThreadNew>:
=======
 8006938:	687b      	ldr	r3, [r7, #4]
}
 800693a:	4618      	mov	r0, r3
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	20000504 	.word	0x20000504

08006948 <osThreadNew>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
<<<<<<< HEAD
 8006944:	b580      	push	{r7, lr}
 8006946:	b08e      	sub	sp, #56	@ 0x38
 8006948:	af04      	add	r7, sp, #16
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
=======
 8006948:	b580      	push	{r7, lr}
 800694a:	b08e      	sub	sp, #56	@ 0x38
 800694c:	af04      	add	r7, sp, #16
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
<<<<<<< HEAD
 8006950:	2300      	movs	r3, #0
 8006952:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006954:	f3ef 8305 	mrs	r3, IPSR
 8006958:	617b      	str	r3, [r7, #20]
  return(result);
 800695a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800695c:	2b00      	cmp	r3, #0
 800695e:	d17e      	bne.n	8006a5e <osThreadNew+0x11a>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d07b      	beq.n	8006a5e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006966:	2380      	movs	r3, #128	@ 0x80
 8006968:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800696a:	2318      	movs	r3, #24
 800696c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800696e:	2300      	movs	r3, #0
 8006970:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006972:	f04f 33ff 	mov.w	r3, #4294967295
 8006976:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d045      	beq.n	8006a0a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d002      	beq.n	800698c <osThreadNew+0x48>
        name = attr->name;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d002      	beq.n	800699a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d008      	beq.n	80069b2 <osThreadNew+0x6e>
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	2b38      	cmp	r3, #56	@ 0x38
 80069a4:	d805      	bhi.n	80069b2 <osThreadNew+0x6e>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <osThreadNew+0x72>
        return (NULL);
 80069b2:	2300      	movs	r3, #0
 80069b4:	e054      	b.n	8006a60 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d003      	beq.n	80069c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	089b      	lsrs	r3, r3, #2
 80069c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00e      	beq.n	80069ec <osThreadNew+0xa8>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	2ba7      	cmp	r3, #167	@ 0xa7
 80069d4:	d90a      	bls.n	80069ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d006      	beq.n	80069ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d002      	beq.n	80069ec <osThreadNew+0xa8>
        mem = 1;
 80069e6:	2301      	movs	r3, #1
 80069e8:	61bb      	str	r3, [r7, #24]
 80069ea:	e010      	b.n	8006a0e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d10c      	bne.n	8006a0e <osThreadNew+0xca>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d108      	bne.n	8006a0e <osThreadNew+0xca>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d104      	bne.n	8006a0e <osThreadNew+0xca>
          mem = 0;
 8006a04:	2300      	movs	r3, #0
 8006a06:	61bb      	str	r3, [r7, #24]
 8006a08:	e001      	b.n	8006a0e <osThreadNew+0xca>
=======
 8006954:	2300      	movs	r3, #0
 8006956:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006958:	f3ef 8305 	mrs	r3, IPSR
 800695c:	617b      	str	r3, [r7, #20]
  return(result);
 800695e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006960:	2b00      	cmp	r3, #0
 8006962:	d17e      	bne.n	8006a62 <osThreadNew+0x11a>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d07b      	beq.n	8006a62 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800696a:	2380      	movs	r3, #128	@ 0x80
 800696c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800696e:	2318      	movs	r3, #24
 8006970:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006972:	2300      	movs	r3, #0
 8006974:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006976:	f04f 33ff 	mov.w	r3, #4294967295
 800697a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d045      	beq.n	8006a0e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d002      	beq.n	8006990 <osThreadNew+0x48>
        name = attr->name;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d002      	beq.n	800699e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d008      	beq.n	80069b6 <osThreadNew+0x6e>
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	2b38      	cmp	r3, #56	@ 0x38
 80069a8:	d805      	bhi.n	80069b6 <osThreadNew+0x6e>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f003 0301 	and.w	r3, r3, #1
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d001      	beq.n	80069ba <osThreadNew+0x72>
        return (NULL);
 80069b6:	2300      	movs	r3, #0
 80069b8:	e054      	b.n	8006a64 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d003      	beq.n	80069ca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	089b      	lsrs	r3, r3, #2
 80069c8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00e      	beq.n	80069f0 <osThreadNew+0xa8>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	2ba7      	cmp	r3, #167	@ 0xa7
 80069d8:	d90a      	bls.n	80069f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d006      	beq.n	80069f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d002      	beq.n	80069f0 <osThreadNew+0xa8>
        mem = 1;
 80069ea:	2301      	movs	r3, #1
 80069ec:	61bb      	str	r3, [r7, #24]
 80069ee:	e010      	b.n	8006a12 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10c      	bne.n	8006a12 <osThreadNew+0xca>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d108      	bne.n	8006a12 <osThreadNew+0xca>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d104      	bne.n	8006a12 <osThreadNew+0xca>
          mem = 0;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	61bb      	str	r3, [r7, #24]
 8006a0c:	e001      	b.n	8006a12 <osThreadNew+0xca>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
        }
      }
    }
    else {
      mem = 0;
<<<<<<< HEAD
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d110      	bne.n	8006a36 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a1c:	9202      	str	r2, [sp, #8]
 8006a1e:	9301      	str	r3, [sp, #4]
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	9300      	str	r3, [sp, #0]
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	6a3a      	ldr	r2, [r7, #32]
 8006a28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f000 fe1a 	bl	8007664 <xTaskCreateStatic>
 8006a30:	4603      	mov	r3, r0
 8006a32:	613b      	str	r3, [r7, #16]
 8006a34:	e013      	b.n	8006a5e <osThreadNew+0x11a>
=======
 8006a0e:	2300      	movs	r3, #0
 8006a10:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d110      	bne.n	8006a3a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a20:	9202      	str	r2, [sp, #8]
 8006a22:	9301      	str	r3, [sp, #4]
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	9300      	str	r3, [sp, #0]
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	6a3a      	ldr	r2, [r7, #32]
 8006a2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f000 fe1a 	bl	8007668 <xTaskCreateStatic>
 8006a34:	4603      	mov	r3, r0
 8006a36:	613b      	str	r3, [r7, #16]
 8006a38:	e013      	b.n	8006a62 <osThreadNew+0x11a>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
      #endif
    }
    else {
      if (mem == 0) {
<<<<<<< HEAD
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d110      	bne.n	8006a5e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006a3c:	6a3b      	ldr	r3, [r7, #32]
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	f107 0310 	add.w	r3, r7, #16
 8006a44:	9301      	str	r3, [sp, #4]
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	9300      	str	r3, [sp, #0]
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f000 fe68 	bl	8007724 <xTaskCreate>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d001      	beq.n	8006a5e <osThreadNew+0x11a>
            hTask = NULL;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	613b      	str	r3, [r7, #16]
=======
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d110      	bne.n	8006a62 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006a40:	6a3b      	ldr	r3, [r7, #32]
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	f107 0310 	add.w	r3, r7, #16
 8006a48:	9301      	str	r3, [sp, #4]
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	9300      	str	r3, [sp, #0]
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f000 fe68 	bl	8007728 <xTaskCreate>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d001      	beq.n	8006a62 <osThreadNew+0x11a>
            hTask = NULL;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	613b      	str	r3, [r7, #16]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
<<<<<<< HEAD
 8006a5e:	693b      	ldr	r3, [r7, #16]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3728      	adds	r7, #40	@ 0x28
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <osDelay>:
=======
 8006a62:	693b      	ldr	r3, [r7, #16]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3728      	adds	r7, #40	@ 0x28
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <osDelay>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
<<<<<<< HEAD
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a70:	f3ef 8305 	mrs	r3, IPSR
 8006a74:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a76:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d003      	beq.n	8006a84 <osDelay+0x1c>
    stat = osErrorISR;
 8006a7c:	f06f 0305 	mvn.w	r3, #5
 8006a80:	60fb      	str	r3, [r7, #12]
 8006a82:	e007      	b.n	8006a94 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006a84:	2300      	movs	r3, #0
 8006a86:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d002      	beq.n	8006a94 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 ffa6 	bl	80079e0 <vTaskDelay>
=======
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a74:	f3ef 8305 	mrs	r3, IPSR
 8006a78:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a7a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d003      	beq.n	8006a88 <osDelay+0x1c>
    stat = osErrorISR;
 8006a80:	f06f 0305 	mvn.w	r3, #5
 8006a84:	60fb      	str	r3, [r7, #12]
 8006a86:	e007      	b.n	8006a98 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d002      	beq.n	8006a98 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 ffa6 	bl	80079e4 <vTaskDelay>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
    }
  }

  return (stat);
<<<<<<< HEAD
 8006a94:	68fb      	ldr	r3, [r7, #12]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
	...

08006aa0 <vApplicationGetIdleTaskMemory>:
=======
 8006a98:	68fb      	ldr	r3, [r7, #12]
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
	...

08006aa4 <vApplicationGetIdleTaskMemory>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
<<<<<<< HEAD
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
=======
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
<<<<<<< HEAD
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	4a07      	ldr	r2, [pc, #28]	@ (8006acc <vApplicationGetIdleTaskMemory+0x2c>)
 8006ab0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	4a06      	ldr	r2, [pc, #24]	@ (8006ad0 <vApplicationGetIdleTaskMemory+0x30>)
 8006ab6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2280      	movs	r2, #128	@ 0x80
 8006abc:	601a      	str	r2, [r3, #0]
}
 8006abe:	bf00      	nop
 8006ac0:	3714      	adds	r7, #20
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	20000500 	.word	0x20000500
 8006ad0:	200005a8 	.word	0x200005a8

08006ad4 <vApplicationGetTimerTaskMemory>:
=======
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	4a07      	ldr	r2, [pc, #28]	@ (8006ad0 <vApplicationGetIdleTaskMemory+0x2c>)
 8006ab4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	4a06      	ldr	r2, [pc, #24]	@ (8006ad4 <vApplicationGetIdleTaskMemory+0x30>)
 8006aba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2280      	movs	r2, #128	@ 0x80
 8006ac0:	601a      	str	r2, [r3, #0]
}
 8006ac2:	bf00      	nop
 8006ac4:	3714      	adds	r7, #20
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	20000508 	.word	0x20000508
 8006ad4:	200005b0 	.word	0x200005b0

08006ad8 <vApplicationGetTimerTaskMemory>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
<<<<<<< HEAD
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]
=======
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
<<<<<<< HEAD
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	4a07      	ldr	r2, [pc, #28]	@ (8006b00 <vApplicationGetTimerTaskMemory+0x2c>)
 8006ae4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	4a06      	ldr	r2, [pc, #24]	@ (8006b04 <vApplicationGetTimerTaskMemory+0x30>)
 8006aea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006af2:	601a      	str	r2, [r3, #0]
}
 8006af4:	bf00      	nop
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	200007a8 	.word	0x200007a8
 8006b04:	20000850 	.word	0x20000850

08006b08 <vListInitialise>:
=======
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	4a07      	ldr	r2, [pc, #28]	@ (8006b04 <vApplicationGetTimerTaskMemory+0x2c>)
 8006ae8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	4a06      	ldr	r2, [pc, #24]	@ (8006b08 <vApplicationGetTimerTaskMemory+0x30>)
 8006aee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006af6:	601a      	str	r2, [r3, #0]
}
 8006af8:	bf00      	nop
 8006afa:	3714      	adds	r7, #20
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr
 8006b04:	200007b0 	.word	0x200007b0
 8006b08:	20000858 	.word	0x20000858

08006b0c <vListInitialise>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
<<<<<<< HEAD
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
=======
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f103 0208 	add.w	r2, r3, #8
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	605a      	str	r2, [r3, #4]
=======
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f103 0208 	add.w	r2, r3, #8
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	605a      	str	r2, [r3, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
<<<<<<< HEAD
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b20:	609a      	str	r2, [r3, #8]
=======
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f04f 32ff 	mov.w	r2, #4294967295
 8006b24:	609a      	str	r2, [r3, #8]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f103 0208 	add.w	r2, r3, #8
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f103 0208 	add.w	r2, r3, #8
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	601a      	str	r2, [r3, #0]
=======
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f103 0208 	add.w	r2, r3, #8
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f103 0208 	add.w	r2, r3, #8
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	601a      	str	r2, [r3, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
<<<<<<< HEAD
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <vListInitialiseItem>:
=======
 8006b40:	bf00      	nop
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <vListInitialiseItem>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
<<<<<<< HEAD
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	611a      	str	r2, [r3, #16]
=======
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	611a      	str	r2, [r3, #16]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
<<<<<<< HEAD
 8006b56:	bf00      	nop
 8006b58:	370c      	adds	r7, #12
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <vListInsertEnd>:
=======
 8006b5a:	bf00      	nop
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr

08006b66 <vListInsertEnd>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< HEAD
 8006b62:	b480      	push	{r7}
 8006b64:	b085      	sub	sp, #20
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
 8006b6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	60fb      	str	r3, [r7, #12]
=======
 8006b66:	b480      	push	{r7}
 8006b68:	b085      	sub	sp, #20
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
 8006b6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	60fb      	str	r3, [r7, #12]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
<<<<<<< HEAD
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	689a      	ldr	r2, [r3, #8]
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	609a      	str	r2, [r3, #8]
=======
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	689a      	ldr	r2, [r3, #8]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	609a      	str	r2, [r3, #8]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
<<<<<<< HEAD
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	683a      	ldr	r2, [r7, #0]
 8006b8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	1c5a      	adds	r2, r3, #1
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	601a      	str	r2, [r3, #0]
}
 8006b9e:	bf00      	nop
 8006ba0:	3714      	adds	r7, #20
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr

08006baa <vListInsert>:
=======
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	683a      	ldr	r2, [r7, #0]
 8006b8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	683a      	ldr	r2, [r7, #0]
 8006b90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	601a      	str	r2, [r3, #0]
}
 8006ba2:	bf00      	nop
 8006ba4:	3714      	adds	r7, #20
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <vListInsert>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< HEAD
 8006baa:	b480      	push	{r7}
 8006bac:	b085      	sub	sp, #20
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
 8006bb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	60bb      	str	r3, [r7, #8]
=======
 8006bae:	b480      	push	{r7}
 8006bb0:	b085      	sub	sp, #20
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
 8006bb6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	60bb      	str	r3, [r7, #8]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
<<<<<<< HEAD
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc0:	d103      	bne.n	8006bca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	60fb      	str	r3, [r7, #12]
 8006bc8:	e00c      	b.n	8006be4 <vListInsert+0x3a>
=======
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc4:	d103      	bne.n	8006bce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	60fb      	str	r3, [r7, #12]
 8006bcc:	e00c      	b.n	8006be8 <vListInsert+0x3a>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
<<<<<<< HEAD
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	3308      	adds	r3, #8
 8006bce:	60fb      	str	r3, [r7, #12]
 8006bd0:	e002      	b.n	8006bd8 <vListInsert+0x2e>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	60fb      	str	r3, [r7, #12]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d2f6      	bcs.n	8006bd2 <vListInsert+0x28>
=======
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	3308      	adds	r3, #8
 8006bd2:	60fb      	str	r3, [r7, #12]
 8006bd4:	e002      	b.n	8006bdc <vListInsert+0x2e>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	60fb      	str	r3, [r7, #12]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68ba      	ldr	r2, [r7, #8]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d2f6      	bcs.n	8006bd6 <vListInsert+0x28>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
<<<<<<< HEAD
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	685a      	ldr	r2, [r3, #4]
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	683a      	ldr	r2, [r7, #0]
 8006bf2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	683a      	ldr	r2, [r7, #0]
 8006bfe:	605a      	str	r2, [r3, #4]
=======
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	683a      	ldr	r2, [r7, #0]
 8006bf6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	683a      	ldr	r2, [r7, #0]
 8006c02:	605a      	str	r2, [r3, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
<<<<<<< HEAD
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	1c5a      	adds	r2, r3, #1
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	601a      	str	r2, [r3, #0]
}
 8006c10:	bf00      	nop
 8006c12:	3714      	adds	r7, #20
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <uxListRemove>:
=======
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	1c5a      	adds	r2, r3, #1
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	601a      	str	r2, [r3, #0]
}
 8006c14:	bf00      	nop
 8006c16:	3714      	adds	r7, #20
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <uxListRemove>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
<<<<<<< HEAD
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	6892      	ldr	r2, [r2, #8]
 8006c32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	6852      	ldr	r2, [r2, #4]
 8006c3c:	605a      	str	r2, [r3, #4]
=======
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	6892      	ldr	r2, [r2, #8]
 8006c36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	6852      	ldr	r2, [r2, #4]
 8006c40:	605a      	str	r2, [r3, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
<<<<<<< HEAD
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d103      	bne.n	8006c50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	689a      	ldr	r2, [r3, #8]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	605a      	str	r2, [r3, #4]
=======
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d103      	bne.n	8006c54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	689a      	ldr	r2, [r3, #8]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	605a      	str	r2, [r3, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
<<<<<<< HEAD
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	1e5a      	subs	r2, r3, #1
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3714      	adds	r7, #20
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <xQueueGenericReset>:
=======
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	1e5a      	subs	r2, r3, #1
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3714      	adds	r7, #20
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <xQueueGenericReset>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
<<<<<<< HEAD
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10b      	bne.n	8006c9c <xQueueGenericReset+0x2c>
=======
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d10b      	bne.n	8006ca0 <xQueueGenericReset+0x2c>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
<<<<<<< HEAD
 8006c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	60bb      	str	r3, [r7, #8]
=======
 8006c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c8c:	f383 8811 	msr	BASEPRI, r3
 8006c90:	f3bf 8f6f 	isb	sy
 8006c94:	f3bf 8f4f 	dsb	sy
 8006c98:	60bb      	str	r3, [r7, #8]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
<<<<<<< HEAD
 8006c96:	bf00      	nop
 8006c98:	bf00      	nop
 8006c9a:	e7fd      	b.n	8006c98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006c9c:	f002 f8a4 	bl	8008de8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ca8:	68f9      	ldr	r1, [r7, #12]
 8006caa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006cac:	fb01 f303 	mul.w	r3, r1, r3
 8006cb0:	441a      	add	r2, r3
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	68f9      	ldr	r1, [r7, #12]
 8006cd0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006cd2:	fb01 f303 	mul.w	r3, r1, r3
 8006cd6:	441a      	add	r2, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	22ff      	movs	r2, #255	@ 0xff
 8006ce0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	22ff      	movs	r2, #255	@ 0xff
 8006ce8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d114      	bne.n	8006d1c <xQueueGenericReset+0xac>
=======
 8006c9a:	bf00      	nop
 8006c9c:	bf00      	nop
 8006c9e:	e7fd      	b.n	8006c9c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006ca0:	f002 f8aa 	bl	8008df8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cac:	68f9      	ldr	r1, [r7, #12]
 8006cae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006cb0:	fb01 f303 	mul.w	r3, r1, r3
 8006cb4:	441a      	add	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	68f9      	ldr	r1, [r7, #12]
 8006cd4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006cd6:	fb01 f303 	mul.w	r3, r1, r3
 8006cda:	441a      	add	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	22ff      	movs	r2, #255	@ 0xff
 8006ce4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	22ff      	movs	r2, #255	@ 0xff
 8006cec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d114      	bne.n	8006d20 <xQueueGenericReset+0xac>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< HEAD
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d01a      	beq.n	8006d30 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	3310      	adds	r3, #16
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f001 f942 	bl	8007f88 <xTaskRemoveFromEventList>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d012      	beq.n	8006d30 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d40 <xQueueGenericReset+0xd0>)
 8006d0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d10:	601a      	str	r2, [r3, #0]
 8006d12:	f3bf 8f4f 	dsb	sy
 8006d16:	f3bf 8f6f 	isb	sy
 8006d1a:	e009      	b.n	8006d30 <xQueueGenericReset+0xc0>
=======
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d01a      	beq.n	8006d34 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	3310      	adds	r3, #16
 8006d02:	4618      	mov	r0, r3
 8006d04:	f001 f942 	bl	8007f8c <xTaskRemoveFromEventList>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d012      	beq.n	8006d34 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d44 <xQueueGenericReset+0xd0>)
 8006d10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d14:	601a      	str	r2, [r3, #0]
 8006d16:	f3bf 8f4f 	dsb	sy
 8006d1a:	f3bf 8f6f 	isb	sy
 8006d1e:	e009      	b.n	8006d34 <xQueueGenericReset+0xc0>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
<<<<<<< HEAD
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	3310      	adds	r3, #16
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7ff fef1 	bl	8006b08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	3324      	adds	r3, #36	@ 0x24
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7ff feec 	bl	8006b08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006d30:	f002 f88c 	bl	8008e4c <vPortExitCritical>
=======
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	3310      	adds	r3, #16
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7ff fef1 	bl	8006b0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	3324      	adds	r3, #36	@ 0x24
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7ff feec 	bl	8006b0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006d34:	f002 f892 	bl	8008e5c <vPortExitCritical>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
<<<<<<< HEAD
 8006d34:	2301      	movs	r3, #1
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	e000ed04 	.word	0xe000ed04

08006d44 <xQueueGenericCreateStatic>:
=======
 8006d38:	2301      	movs	r3, #1
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	e000ed04 	.word	0xe000ed04

08006d48 <xQueueGenericCreateStatic>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
<<<<<<< HEAD
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b08e      	sub	sp, #56	@ 0x38
 8006d48:	af02      	add	r7, sp, #8
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
 8006d50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d10b      	bne.n	8006d70 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d5c:	f383 8811 	msr	BASEPRI, r3
 8006d60:	f3bf 8f6f 	isb	sy
 8006d64:	f3bf 8f4f 	dsb	sy
 8006d68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006d6a:	bf00      	nop
 8006d6c:	bf00      	nop
 8006d6e:	e7fd      	b.n	8006d6c <xQueueGenericCreateStatic+0x28>
=======
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b08e      	sub	sp, #56	@ 0x38
 8006d4c:	af02      	add	r7, sp, #8
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	607a      	str	r2, [r7, #4]
 8006d54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10b      	bne.n	8006d74 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d60:	f383 8811 	msr	BASEPRI, r3
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006d6e:	bf00      	nop
 8006d70:	bf00      	nop
 8006d72:	e7fd      	b.n	8006d70 <xQueueGenericCreateStatic+0x28>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
<<<<<<< HEAD
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10b      	bne.n	8006d8e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d7a:	f383 8811 	msr	BASEPRI, r3
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	f3bf 8f4f 	dsb	sy
 8006d86:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006d88:	bf00      	nop
 8006d8a:	bf00      	nop
 8006d8c:	e7fd      	b.n	8006d8a <xQueueGenericCreateStatic+0x46>
=======
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d10b      	bne.n	8006d92 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d7e:	f383 8811 	msr	BASEPRI, r3
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006d8c:	bf00      	nop
 8006d8e:	bf00      	nop
 8006d90:	e7fd      	b.n	8006d8e <xQueueGenericCreateStatic+0x46>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
<<<<<<< HEAD
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d002      	beq.n	8006d9a <xQueueGenericCreateStatic+0x56>
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d001      	beq.n	8006d9e <xQueueGenericCreateStatic+0x5a>
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e000      	b.n	8006da0 <xQueueGenericCreateStatic+0x5c>
 8006d9e:	2300      	movs	r3, #0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10b      	bne.n	8006dbc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da8:	f383 8811 	msr	BASEPRI, r3
 8006dac:	f3bf 8f6f 	isb	sy
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	623b      	str	r3, [r7, #32]
}
 8006db6:	bf00      	nop
 8006db8:	bf00      	nop
 8006dba:	e7fd      	b.n	8006db8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d102      	bne.n	8006dc8 <xQueueGenericCreateStatic+0x84>
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d101      	bne.n	8006dcc <xQueueGenericCreateStatic+0x88>
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e000      	b.n	8006dce <xQueueGenericCreateStatic+0x8a>
 8006dcc:	2300      	movs	r3, #0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10b      	bne.n	8006dea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd6:	f383 8811 	msr	BASEPRI, r3
 8006dda:	f3bf 8f6f 	isb	sy
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	61fb      	str	r3, [r7, #28]
}
 8006de4:	bf00      	nop
 8006de6:	bf00      	nop
 8006de8:	e7fd      	b.n	8006de6 <xQueueGenericCreateStatic+0xa2>
=======
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d002      	beq.n	8006d9e <xQueueGenericCreateStatic+0x56>
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d001      	beq.n	8006da2 <xQueueGenericCreateStatic+0x5a>
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e000      	b.n	8006da4 <xQueueGenericCreateStatic+0x5c>
 8006da2:	2300      	movs	r3, #0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10b      	bne.n	8006dc0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dac:	f383 8811 	msr	BASEPRI, r3
 8006db0:	f3bf 8f6f 	isb	sy
 8006db4:	f3bf 8f4f 	dsb	sy
 8006db8:	623b      	str	r3, [r7, #32]
}
 8006dba:	bf00      	nop
 8006dbc:	bf00      	nop
 8006dbe:	e7fd      	b.n	8006dbc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d102      	bne.n	8006dcc <xQueueGenericCreateStatic+0x84>
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d101      	bne.n	8006dd0 <xQueueGenericCreateStatic+0x88>
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e000      	b.n	8006dd2 <xQueueGenericCreateStatic+0x8a>
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10b      	bne.n	8006dee <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dda:	f383 8811 	msr	BASEPRI, r3
 8006dde:	f3bf 8f6f 	isb	sy
 8006de2:	f3bf 8f4f 	dsb	sy
 8006de6:	61fb      	str	r3, [r7, #28]
}
 8006de8:	bf00      	nop
 8006dea:	bf00      	nop
 8006dec:	e7fd      	b.n	8006dea <xQueueGenericCreateStatic+0xa2>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
<<<<<<< HEAD
 8006dea:	2350      	movs	r3, #80	@ 0x50
 8006dec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	2b50      	cmp	r3, #80	@ 0x50
 8006df2:	d00b      	beq.n	8006e0c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df8:	f383 8811 	msr	BASEPRI, r3
 8006dfc:	f3bf 8f6f 	isb	sy
 8006e00:	f3bf 8f4f 	dsb	sy
 8006e04:	61bb      	str	r3, [r7, #24]
}
 8006e06:	bf00      	nop
 8006e08:	bf00      	nop
 8006e0a:	e7fd      	b.n	8006e08 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006e0c:	697b      	ldr	r3, [r7, #20]
=======
 8006dee:	2350      	movs	r3, #80	@ 0x50
 8006df0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	2b50      	cmp	r3, #80	@ 0x50
 8006df6:	d00b      	beq.n	8006e10 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dfc:	f383 8811 	msr	BASEPRI, r3
 8006e00:	f3bf 8f6f 	isb	sy
 8006e04:	f3bf 8f4f 	dsb	sy
 8006e08:	61bb      	str	r3, [r7, #24]
}
 8006e0a:	bf00      	nop
 8006e0c:	bf00      	nop
 8006e0e:	e7fd      	b.n	8006e0c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006e10:	697b      	ldr	r3, [r7, #20]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
<<<<<<< HEAD
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00d      	beq.n	8006e34 <xQueueGenericCreateStatic+0xf0>
=======
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00d      	beq.n	8006e38 <xQueueGenericCreateStatic+0xf0>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
<<<<<<< HEAD
 8006e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
=======
 8006e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
<<<<<<< HEAD
 8006e20:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e26:	9300      	str	r3, [sp, #0]
 8006e28:	4613      	mov	r3, r2
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	68b9      	ldr	r1, [r7, #8]
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f000 f805 	bl	8006e3e <prvInitialiseNewQueue>
=======
 8006e24:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e2a:	9300      	str	r3, [sp, #0]
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	68b9      	ldr	r1, [r7, #8]
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	f000 f805 	bl	8006e42 <prvInitialiseNewQueue>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
<<<<<<< HEAD
 8006e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3730      	adds	r7, #48	@ 0x30
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <prvInitialiseNewQueue>:
=======
 8006e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3730      	adds	r7, #48	@ 0x30
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <prvInitialiseNewQueue>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
<<<<<<< HEAD
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b084      	sub	sp, #16
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	60f8      	str	r0, [r7, #12]
 8006e46:	60b9      	str	r1, [r7, #8]
 8006e48:	607a      	str	r2, [r7, #4]
 8006e4a:	70fb      	strb	r3, [r7, #3]
=======
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b084      	sub	sp, #16
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	60f8      	str	r0, [r7, #12]
 8006e4a:	60b9      	str	r1, [r7, #8]
 8006e4c:	607a      	str	r2, [r7, #4]
 8006e4e:	70fb      	strb	r3, [r7, #3]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d103      	bne.n	8006e5a <prvInitialiseNewQueue+0x1c>
=======
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d103      	bne.n	8006e5e <prvInitialiseNewQueue+0x1c>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
<<<<<<< HEAD
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	69ba      	ldr	r2, [r7, #24]
 8006e56:	601a      	str	r2, [r3, #0]
 8006e58:	e002      	b.n	8006e60 <prvInitialiseNewQueue+0x22>
=======
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	69ba      	ldr	r2, [r7, #24]
 8006e5a:	601a      	str	r2, [r3, #0]
 8006e5c:	e002      	b.n	8006e64 <prvInitialiseNewQueue+0x22>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
<<<<<<< HEAD
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	601a      	str	r2, [r3, #0]
=======
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	601a      	str	r2, [r3, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
<<<<<<< HEAD
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	68ba      	ldr	r2, [r7, #8]
 8006e6a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006e6c:	2101      	movs	r1, #1
 8006e6e:	69b8      	ldr	r0, [r7, #24]
 8006e70:	f7ff fefe 	bl	8006c70 <xQueueGenericReset>
=======
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	68ba      	ldr	r2, [r7, #8]
 8006e6e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006e70:	2101      	movs	r1, #1
 8006e72:	69b8      	ldr	r0, [r7, #24]
 8006e74:	f7ff fefe 	bl	8006c74 <xQueueGenericReset>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
<<<<<<< HEAD
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	78fa      	ldrb	r2, [r7, #3]
 8006e78:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
=======
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	78fa      	ldrb	r2, [r7, #3]
 8006e7c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
<<<<<<< HEAD
 8006e7c:	bf00      	nop
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <xQueueGenericSend>:
=======
 8006e80:	bf00      	nop
 8006e82:	3710      	adds	r7, #16
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <xQueueGenericSend>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
<<<<<<< HEAD
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b08e      	sub	sp, #56	@ 0x38
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
 8006e90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e92:	2300      	movs	r3, #0
 8006e94:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10b      	bne.n	8006eb8 <xQueueGenericSend+0x34>
	__asm volatile
 8006ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea4:	f383 8811 	msr	BASEPRI, r3
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006eb2:	bf00      	nop
 8006eb4:	bf00      	nop
 8006eb6:	e7fd      	b.n	8006eb4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d103      	bne.n	8006ec6 <xQueueGenericSend+0x42>
 8006ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <xQueueGenericSend+0x46>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e000      	b.n	8006ecc <xQueueGenericSend+0x48>
 8006eca:	2300      	movs	r3, #0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d10b      	bne.n	8006ee8 <xQueueGenericSend+0x64>
	__asm volatile
 8006ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ed4:	f383 8811 	msr	BASEPRI, r3
 8006ed8:	f3bf 8f6f 	isb	sy
 8006edc:	f3bf 8f4f 	dsb	sy
 8006ee0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006ee2:	bf00      	nop
 8006ee4:	bf00      	nop
 8006ee6:	e7fd      	b.n	8006ee4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d103      	bne.n	8006ef6 <xQueueGenericSend+0x72>
 8006eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d101      	bne.n	8006efa <xQueueGenericSend+0x76>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e000      	b.n	8006efc <xQueueGenericSend+0x78>
 8006efa:	2300      	movs	r3, #0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10b      	bne.n	8006f18 <xQueueGenericSend+0x94>
	__asm volatile
 8006f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	623b      	str	r3, [r7, #32]
}
 8006f12:	bf00      	nop
 8006f14:	bf00      	nop
 8006f16:	e7fd      	b.n	8006f14 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f18:	f001 f9fc 	bl	8008314 <xTaskGetSchedulerState>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d102      	bne.n	8006f28 <xQueueGenericSend+0xa4>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d101      	bne.n	8006f2c <xQueueGenericSend+0xa8>
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e000      	b.n	8006f2e <xQueueGenericSend+0xaa>
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d10b      	bne.n	8006f4a <xQueueGenericSend+0xc6>
	__asm volatile
 8006f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f36:	f383 8811 	msr	BASEPRI, r3
 8006f3a:	f3bf 8f6f 	isb	sy
 8006f3e:	f3bf 8f4f 	dsb	sy
 8006f42:	61fb      	str	r3, [r7, #28]
}
 8006f44:	bf00      	nop
 8006f46:	bf00      	nop
 8006f48:	e7fd      	b.n	8006f46 <xQueueGenericSend+0xc2>
=======
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b08e      	sub	sp, #56	@ 0x38
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
 8006e94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e96:	2300      	movs	r3, #0
 8006e98:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d10b      	bne.n	8006ebc <xQueueGenericSend+0x34>
	__asm volatile
 8006ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea8:	f383 8811 	msr	BASEPRI, r3
 8006eac:	f3bf 8f6f 	isb	sy
 8006eb0:	f3bf 8f4f 	dsb	sy
 8006eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006eb6:	bf00      	nop
 8006eb8:	bf00      	nop
 8006eba:	e7fd      	b.n	8006eb8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d103      	bne.n	8006eca <xQueueGenericSend+0x42>
 8006ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d101      	bne.n	8006ece <xQueueGenericSend+0x46>
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e000      	b.n	8006ed0 <xQueueGenericSend+0x48>
 8006ece:	2300      	movs	r3, #0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10b      	bne.n	8006eec <xQueueGenericSend+0x64>
	__asm volatile
 8006ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ed8:	f383 8811 	msr	BASEPRI, r3
 8006edc:	f3bf 8f6f 	isb	sy
 8006ee0:	f3bf 8f4f 	dsb	sy
 8006ee4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006ee6:	bf00      	nop
 8006ee8:	bf00      	nop
 8006eea:	e7fd      	b.n	8006ee8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d103      	bne.n	8006efa <xQueueGenericSend+0x72>
 8006ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d101      	bne.n	8006efe <xQueueGenericSend+0x76>
 8006efa:	2301      	movs	r3, #1
 8006efc:	e000      	b.n	8006f00 <xQueueGenericSend+0x78>
 8006efe:	2300      	movs	r3, #0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10b      	bne.n	8006f1c <xQueueGenericSend+0x94>
	__asm volatile
 8006f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f08:	f383 8811 	msr	BASEPRI, r3
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	623b      	str	r3, [r7, #32]
}
 8006f16:	bf00      	nop
 8006f18:	bf00      	nop
 8006f1a:	e7fd      	b.n	8006f18 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f1c:	f001 f9fc 	bl	8008318 <xTaskGetSchedulerState>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d102      	bne.n	8006f2c <xQueueGenericSend+0xa4>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d101      	bne.n	8006f30 <xQueueGenericSend+0xa8>
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e000      	b.n	8006f32 <xQueueGenericSend+0xaa>
 8006f30:	2300      	movs	r3, #0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10b      	bne.n	8006f4e <xQueueGenericSend+0xc6>
	__asm volatile
 8006f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f3a:	f383 8811 	msr	BASEPRI, r3
 8006f3e:	f3bf 8f6f 	isb	sy
 8006f42:	f3bf 8f4f 	dsb	sy
 8006f46:	61fb      	str	r3, [r7, #28]
}
 8006f48:	bf00      	nop
 8006f4a:	bf00      	nop
 8006f4c:	e7fd      	b.n	8006f4a <xQueueGenericSend+0xc2>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< HEAD
 8006f4a:	f001 ff4d 	bl	8008de8 <vPortEnterCritical>
=======
 8006f4e:	f001 ff53 	bl	8008df8 <vPortEnterCritical>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
<<<<<<< HEAD
 8006f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d302      	bcc.n	8006f60 <xQueueGenericSend+0xdc>
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	d129      	bne.n	8006fb4 <xQueueGenericSend+0x130>
=======
 8006f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d302      	bcc.n	8006f64 <xQueueGenericSend+0xdc>
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d129      	bne.n	8006fb8 <xQueueGenericSend+0x130>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
<<<<<<< HEAD
 8006f60:	683a      	ldr	r2, [r7, #0]
 8006f62:	68b9      	ldr	r1, [r7, #8]
 8006f64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f66:	f000 fa0f 	bl	8007388 <prvCopyDataToQueue>
 8006f6a:	62f8      	str	r0, [r7, #44]	@ 0x2c
=======
 8006f64:	683a      	ldr	r2, [r7, #0]
 8006f66:	68b9      	ldr	r1, [r7, #8]
 8006f68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f6a:	f000 fa0f 	bl	800738c <prvCopyDataToQueue>
 8006f6e:	62f8      	str	r0, [r7, #44]	@ 0x2c
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 8006f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d010      	beq.n	8006f96 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f76:	3324      	adds	r3, #36	@ 0x24
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f001 f805 	bl	8007f88 <xTaskRemoveFromEventList>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d013      	beq.n	8006fac <xQueueGenericSend+0x128>
=======
 8006f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d010      	beq.n	8006f9a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f7a:	3324      	adds	r3, #36	@ 0x24
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f001 f805 	bl	8007f8c <xTaskRemoveFromEventList>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d013      	beq.n	8006fb0 <xQueueGenericSend+0x128>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
 8006f84:	4b3f      	ldr	r3, [pc, #252]	@ (8007084 <xQueueGenericSend+0x200>)
 8006f86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f8a:	601a      	str	r2, [r3, #0]
 8006f8c:	f3bf 8f4f 	dsb	sy
 8006f90:	f3bf 8f6f 	isb	sy
 8006f94:	e00a      	b.n	8006fac <xQueueGenericSend+0x128>
=======
 8006f88:	4b3f      	ldr	r3, [pc, #252]	@ (8007088 <xQueueGenericSend+0x200>)
 8006f8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f8e:	601a      	str	r2, [r3, #0]
 8006f90:	f3bf 8f4f 	dsb	sy
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	e00a      	b.n	8006fb0 <xQueueGenericSend+0x128>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
<<<<<<< HEAD
 8006f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d007      	beq.n	8006fac <xQueueGenericSend+0x128>
=======
 8006f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d007      	beq.n	8006fb0 <xQueueGenericSend+0x128>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
 8006f9c:	4b39      	ldr	r3, [pc, #228]	@ (8007084 <xQueueGenericSend+0x200>)
 8006f9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fa2:	601a      	str	r2, [r3, #0]
 8006fa4:	f3bf 8f4f 	dsb	sy
 8006fa8:	f3bf 8f6f 	isb	sy
=======
 8006fa0:	4b39      	ldr	r3, [pc, #228]	@ (8007088 <xQueueGenericSend+0x200>)
 8006fa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fa6:	601a      	str	r2, [r3, #0]
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	f3bf 8f6f 	isb	sy
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
<<<<<<< HEAD
 8006fac:	f001 ff4e 	bl	8008e4c <vPortExitCritical>
				return pdPASS;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e063      	b.n	800707c <xQueueGenericSend+0x1f8>
=======
 8006fb0:	f001 ff54 	bl	8008e5c <vPortExitCritical>
				return pdPASS;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e063      	b.n	8007080 <xQueueGenericSend+0x1f8>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< HEAD
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d103      	bne.n	8006fc2 <xQueueGenericSend+0x13e>
=======
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d103      	bne.n	8006fc6 <xQueueGenericSend+0x13e>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
<<<<<<< HEAD
 8006fba:	f001 ff47 	bl	8008e4c <vPortExitCritical>
=======
 8006fbe:	f001 ff4d 	bl	8008e5c <vPortExitCritical>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
<<<<<<< HEAD
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	e05c      	b.n	800707c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d106      	bne.n	8006fd6 <xQueueGenericSend+0x152>
=======
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	e05c      	b.n	8007080 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d106      	bne.n	8006fda <xQueueGenericSend+0x152>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< HEAD
 8006fc8:	f107 0314 	add.w	r3, r7, #20
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f001 f83f 	bl	8008050 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	637b      	str	r3, [r7, #52]	@ 0x34
=======
 8006fcc:	f107 0314 	add.w	r3, r7, #20
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f001 f83f 	bl	8008054 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	637b      	str	r3, [r7, #52]	@ 0x34
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
 8006fd6:	f001 ff39 	bl	8008e4c <vPortExitCritical>
=======
 8006fda:	f001 ff3f 	bl	8008e5c <vPortExitCritical>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< HEAD
 8006fda:	f000 fda7 	bl	8007b2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fde:	f001 ff03 	bl	8008de8 <vPortEnterCritical>
 8006fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006fe8:	b25b      	sxtb	r3, r3
 8006fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fee:	d103      	bne.n	8006ff8 <xQueueGenericSend+0x174>
 8006ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ffe:	b25b      	sxtb	r3, r3
 8007000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007004:	d103      	bne.n	800700e <xQueueGenericSend+0x18a>
 8007006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007008:	2200      	movs	r2, #0
 800700a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800700e:	f001 ff1d 	bl	8008e4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007012:	1d3a      	adds	r2, r7, #4
 8007014:	f107 0314 	add.w	r3, r7, #20
 8007018:	4611      	mov	r1, r2
 800701a:	4618      	mov	r0, r3
 800701c:	f001 f82e 	bl	800807c <xTaskCheckForTimeOut>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d124      	bne.n	8007070 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007026:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007028:	f000 faa6 	bl	8007578 <prvIsQueueFull>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d018      	beq.n	8007064 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007034:	3310      	adds	r3, #16
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	4611      	mov	r1, r2
 800703a:	4618      	mov	r0, r3
 800703c:	f000 ff52 	bl	8007ee4 <vTaskPlaceOnEventList>
=======
 8006fde:	f000 fda7 	bl	8007b30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fe2:	f001 ff09 	bl	8008df8 <vPortEnterCritical>
 8006fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006fec:	b25b      	sxtb	r3, r3
 8006fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff2:	d103      	bne.n	8006ffc <xQueueGenericSend+0x174>
 8006ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007002:	b25b      	sxtb	r3, r3
 8007004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007008:	d103      	bne.n	8007012 <xQueueGenericSend+0x18a>
 800700a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700c:	2200      	movs	r2, #0
 800700e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007012:	f001 ff23 	bl	8008e5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007016:	1d3a      	adds	r2, r7, #4
 8007018:	f107 0314 	add.w	r3, r7, #20
 800701c:	4611      	mov	r1, r2
 800701e:	4618      	mov	r0, r3
 8007020:	f001 f82e 	bl	8008080 <xTaskCheckForTimeOut>
 8007024:	4603      	mov	r3, r0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d124      	bne.n	8007074 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800702a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800702c:	f000 faa6 	bl	800757c <prvIsQueueFull>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d018      	beq.n	8007068 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007038:	3310      	adds	r3, #16
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	4611      	mov	r1, r2
 800703e:	4618      	mov	r0, r3
 8007040:	f000 ff52 	bl	8007ee8 <vTaskPlaceOnEventList>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8007040:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007042:	f000 fa31 	bl	80074a8 <prvUnlockQueue>
=======
 8007044:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007046:	f000 fa31 	bl	80074ac <prvUnlockQueue>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
<<<<<<< HEAD
 8007046:	f000 fd7f 	bl	8007b48 <xTaskResumeAll>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	f47f af7c 	bne.w	8006f4a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007052:	4b0c      	ldr	r3, [pc, #48]	@ (8007084 <xQueueGenericSend+0x200>)
 8007054:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007058:	601a      	str	r2, [r3, #0]
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	f3bf 8f6f 	isb	sy
 8007062:	e772      	b.n	8006f4a <xQueueGenericSend+0xc6>
=======
 800704a:	f000 fd7f 	bl	8007b4c <xTaskResumeAll>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	f47f af7c 	bne.w	8006f4e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007056:	4b0c      	ldr	r3, [pc, #48]	@ (8007088 <xQueueGenericSend+0x200>)
 8007058:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800705c:	601a      	str	r2, [r3, #0]
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	f3bf 8f6f 	isb	sy
 8007066:	e772      	b.n	8006f4e <xQueueGenericSend+0xc6>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8007064:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007066:	f000 fa1f 	bl	80074a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800706a:	f000 fd6d 	bl	8007b48 <xTaskResumeAll>
 800706e:	e76c      	b.n	8006f4a <xQueueGenericSend+0xc6>
=======
 8007068:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800706a:	f000 fa1f 	bl	80074ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800706e:	f000 fd6d 	bl	8007b4c <xTaskResumeAll>
 8007072:	e76c      	b.n	8006f4e <xQueueGenericSend+0xc6>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8007070:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007072:	f000 fa19 	bl	80074a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007076:	f000 fd67 	bl	8007b48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800707a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800707c:	4618      	mov	r0, r3
 800707e:	3738      	adds	r7, #56	@ 0x38
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	e000ed04 	.word	0xe000ed04

08007088 <xQueueGenericSendFromISR>:
=======
 8007074:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007076:	f000 fa19 	bl	80074ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800707a:	f000 fd67 	bl	8007b4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800707e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007080:	4618      	mov	r0, r3
 8007082:	3738      	adds	r7, #56	@ 0x38
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}
 8007088:	e000ed04 	.word	0xe000ed04

0800708c <xQueueGenericSendFromISR>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
<<<<<<< HEAD
 8007088:	b580      	push	{r7, lr}
 800708a:	b090      	sub	sp, #64	@ 0x40
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
 8007094:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800709a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800709c:	2b00      	cmp	r3, #0
 800709e:	d10b      	bne.n	80070b8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80070a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a4:	f383 8811 	msr	BASEPRI, r3
 80070a8:	f3bf 8f6f 	isb	sy
 80070ac:	f3bf 8f4f 	dsb	sy
 80070b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80070b2:	bf00      	nop
 80070b4:	bf00      	nop
 80070b6:	e7fd      	b.n	80070b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d103      	bne.n	80070c6 <xQueueGenericSendFromISR+0x3e>
 80070be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d101      	bne.n	80070ca <xQueueGenericSendFromISR+0x42>
 80070c6:	2301      	movs	r3, #1
 80070c8:	e000      	b.n	80070cc <xQueueGenericSendFromISR+0x44>
 80070ca:	2300      	movs	r3, #0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10b      	bne.n	80070e8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80070d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80070e2:	bf00      	nop
 80070e4:	bf00      	nop
 80070e6:	e7fd      	b.n	80070e4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d103      	bne.n	80070f6 <xQueueGenericSendFromISR+0x6e>
 80070ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d101      	bne.n	80070fa <xQueueGenericSendFromISR+0x72>
 80070f6:	2301      	movs	r3, #1
 80070f8:	e000      	b.n	80070fc <xQueueGenericSendFromISR+0x74>
 80070fa:	2300      	movs	r3, #0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10b      	bne.n	8007118 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	623b      	str	r3, [r7, #32]
}
 8007112:	bf00      	nop
 8007114:	bf00      	nop
 8007116:	e7fd      	b.n	8007114 <xQueueGenericSendFromISR+0x8c>
=======
 800708c:	b580      	push	{r7, lr}
 800708e:	b090      	sub	sp, #64	@ 0x40
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	607a      	str	r2, [r7, #4]
 8007098:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800709e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d10b      	bne.n	80070bc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80070a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a8:	f383 8811 	msr	BASEPRI, r3
 80070ac:	f3bf 8f6f 	isb	sy
 80070b0:	f3bf 8f4f 	dsb	sy
 80070b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80070b6:	bf00      	nop
 80070b8:	bf00      	nop
 80070ba:	e7fd      	b.n	80070b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d103      	bne.n	80070ca <xQueueGenericSendFromISR+0x3e>
 80070c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d101      	bne.n	80070ce <xQueueGenericSendFromISR+0x42>
 80070ca:	2301      	movs	r3, #1
 80070cc:	e000      	b.n	80070d0 <xQueueGenericSendFromISR+0x44>
 80070ce:	2300      	movs	r3, #0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d10b      	bne.n	80070ec <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80070d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d8:	f383 8811 	msr	BASEPRI, r3
 80070dc:	f3bf 8f6f 	isb	sy
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80070e6:	bf00      	nop
 80070e8:	bf00      	nop
 80070ea:	e7fd      	b.n	80070e8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d103      	bne.n	80070fa <xQueueGenericSendFromISR+0x6e>
 80070f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d101      	bne.n	80070fe <xQueueGenericSendFromISR+0x72>
 80070fa:	2301      	movs	r3, #1
 80070fc:	e000      	b.n	8007100 <xQueueGenericSendFromISR+0x74>
 80070fe:	2300      	movs	r3, #0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d10b      	bne.n	800711c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007108:	f383 8811 	msr	BASEPRI, r3
 800710c:	f3bf 8f6f 	isb	sy
 8007110:	f3bf 8f4f 	dsb	sy
 8007114:	623b      	str	r3, [r7, #32]
}
 8007116:	bf00      	nop
 8007118:	bf00      	nop
 800711a:	e7fd      	b.n	8007118 <xQueueGenericSendFromISR+0x8c>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
<<<<<<< HEAD
 8007118:	f001 ff46 	bl	8008fa8 <vPortValidateInterruptPriority>
=======
 800711c:	f001 ff4c 	bl	8008fb8 <vPortValidateInterruptPriority>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
<<<<<<< HEAD
 800711c:	f3ef 8211 	mrs	r2, BASEPRI
 8007120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007124:	f383 8811 	msr	BASEPRI, r3
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	61fa      	str	r2, [r7, #28]
 8007132:	61bb      	str	r3, [r7, #24]
=======
 8007120:	f3ef 8211 	mrs	r2, BASEPRI
 8007124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007128:	f383 8811 	msr	BASEPRI, r3
 800712c:	f3bf 8f6f 	isb	sy
 8007130:	f3bf 8f4f 	dsb	sy
 8007134:	61fa      	str	r2, [r7, #28]
 8007136:	61bb      	str	r3, [r7, #24]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
<<<<<<< HEAD
 8007134:	69fb      	ldr	r3, [r7, #28]
=======
 8007138:	69fb      	ldr	r3, [r7, #28]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
<<<<<<< HEAD
 8007136:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800713a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800713c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800713e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007140:	429a      	cmp	r2, r3
 8007142:	d302      	bcc.n	800714a <xQueueGenericSendFromISR+0xc2>
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	2b02      	cmp	r3, #2
 8007148:	d12f      	bne.n	80071aa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800714a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800714c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007150:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007158:	62fb      	str	r3, [r7, #44]	@ 0x2c
=======
 800713a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800713c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800713e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007144:	429a      	cmp	r2, r3
 8007146:	d302      	bcc.n	800714e <xQueueGenericSendFromISR+0xc2>
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	2b02      	cmp	r3, #2
 800714c:	d12f      	bne.n	80071ae <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800714e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007150:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007154:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800715a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800715c:	62fb      	str	r3, [r7, #44]	@ 0x2c
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
<<<<<<< HEAD
 800715a:	683a      	ldr	r2, [r7, #0]
 800715c:	68b9      	ldr	r1, [r7, #8]
 800715e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007160:	f000 f912 	bl	8007388 <prvCopyDataToQueue>
=======
 800715e:	683a      	ldr	r2, [r7, #0]
 8007160:	68b9      	ldr	r1, [r7, #8]
 8007162:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007164:	f000 f912 	bl	800738c <prvCopyDataToQueue>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
<<<<<<< HEAD
 8007164:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800716c:	d112      	bne.n	8007194 <xQueueGenericSendFromISR+0x10c>
=======
 8007168:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800716c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007170:	d112      	bne.n	8007198 <xQueueGenericSendFromISR+0x10c>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 800716e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007172:	2b00      	cmp	r3, #0
 8007174:	d016      	beq.n	80071a4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007178:	3324      	adds	r3, #36	@ 0x24
 800717a:	4618      	mov	r0, r3
 800717c:	f000 ff04 	bl	8007f88 <xTaskRemoveFromEventList>
 8007180:	4603      	mov	r3, r0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00e      	beq.n	80071a4 <xQueueGenericSendFromISR+0x11c>
=======
 8007172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007176:	2b00      	cmp	r3, #0
 8007178:	d016      	beq.n	80071a8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800717a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800717c:	3324      	adds	r3, #36	@ 0x24
 800717e:	4618      	mov	r0, r3
 8007180:	f000 ff04 	bl	8007f8c <xTaskRemoveFromEventList>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00e      	beq.n	80071a8 <xQueueGenericSendFromISR+0x11c>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
<<<<<<< HEAD
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00b      	beq.n	80071a4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	601a      	str	r2, [r3, #0]
 8007192:	e007      	b.n	80071a4 <xQueueGenericSendFromISR+0x11c>
=======
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00b      	beq.n	80071a8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	601a      	str	r2, [r3, #0]
 8007196:	e007      	b.n	80071a8 <xQueueGenericSendFromISR+0x11c>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
<<<<<<< HEAD
 8007194:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007198:	3301      	adds	r3, #1
 800719a:	b2db      	uxtb	r3, r3
 800719c:	b25a      	sxtb	r2, r3
 800719e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80071a4:	2301      	movs	r3, #1
 80071a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80071a8:	e001      	b.n	80071ae <xQueueGenericSendFromISR+0x126>
=======
 8007198:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800719c:	3301      	adds	r3, #1
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	b25a      	sxtb	r2, r3
 80071a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80071a8:	2301      	movs	r3, #1
 80071aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80071ac:	e001      	b.n	80071b2 <xQueueGenericSendFromISR+0x126>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
<<<<<<< HEAD
 80071aa:	2300      	movs	r3, #0
 80071ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071b0:	617b      	str	r3, [r7, #20]
=======
 80071ae:	2300      	movs	r3, #0
 80071b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071b4:	617b      	str	r3, [r7, #20]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
<<<<<<< HEAD
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	f383 8811 	msr	BASEPRI, r3
=======
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	f383 8811 	msr	BASEPRI, r3
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
<<<<<<< HEAD
 80071b8:	bf00      	nop
=======
 80071bc:	bf00      	nop
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
<<<<<<< HEAD
 80071ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3740      	adds	r7, #64	@ 0x40
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <xQueueReceive>:
=======
 80071be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3740      	adds	r7, #64	@ 0x40
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <xQueueReceive>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
<<<<<<< HEAD
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b08c      	sub	sp, #48	@ 0x30
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80071d0:	2300      	movs	r3, #0
 80071d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80071d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10b      	bne.n	80071f6 <xQueueReceive+0x32>
	__asm volatile
 80071de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e2:	f383 8811 	msr	BASEPRI, r3
 80071e6:	f3bf 8f6f 	isb	sy
 80071ea:	f3bf 8f4f 	dsb	sy
 80071ee:	623b      	str	r3, [r7, #32]
}
 80071f0:	bf00      	nop
 80071f2:	bf00      	nop
 80071f4:	e7fd      	b.n	80071f2 <xQueueReceive+0x2e>
=======
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b08c      	sub	sp, #48	@ 0x30
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80071d4:	2300      	movs	r3, #0
 80071d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80071dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d10b      	bne.n	80071fa <xQueueReceive+0x32>
	__asm volatile
 80071e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e6:	f383 8811 	msr	BASEPRI, r3
 80071ea:	f3bf 8f6f 	isb	sy
 80071ee:	f3bf 8f4f 	dsb	sy
 80071f2:	623b      	str	r3, [r7, #32]
}
 80071f4:	bf00      	nop
 80071f6:	bf00      	nop
 80071f8:	e7fd      	b.n	80071f6 <xQueueReceive+0x2e>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
<<<<<<< HEAD
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d103      	bne.n	8007204 <xQueueReceive+0x40>
 80071fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007200:	2b00      	cmp	r3, #0
 8007202:	d101      	bne.n	8007208 <xQueueReceive+0x44>
 8007204:	2301      	movs	r3, #1
 8007206:	e000      	b.n	800720a <xQueueReceive+0x46>
 8007208:	2300      	movs	r3, #0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d10b      	bne.n	8007226 <xQueueReceive+0x62>
	__asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	61fb      	str	r3, [r7, #28]
}
 8007220:	bf00      	nop
 8007222:	bf00      	nop
 8007224:	e7fd      	b.n	8007222 <xQueueReceive+0x5e>
=======
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d103      	bne.n	8007208 <xQueueReceive+0x40>
 8007200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007204:	2b00      	cmp	r3, #0
 8007206:	d101      	bne.n	800720c <xQueueReceive+0x44>
 8007208:	2301      	movs	r3, #1
 800720a:	e000      	b.n	800720e <xQueueReceive+0x46>
 800720c:	2300      	movs	r3, #0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d10b      	bne.n	800722a <xQueueReceive+0x62>
	__asm volatile
 8007212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007216:	f383 8811 	msr	BASEPRI, r3
 800721a:	f3bf 8f6f 	isb	sy
 800721e:	f3bf 8f4f 	dsb	sy
 8007222:	61fb      	str	r3, [r7, #28]
}
 8007224:	bf00      	nop
 8007226:	bf00      	nop
 8007228:	e7fd      	b.n	8007226 <xQueueReceive+0x5e>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
<<<<<<< HEAD
 8007226:	f001 f875 	bl	8008314 <xTaskGetSchedulerState>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d102      	bne.n	8007236 <xQueueReceive+0x72>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d101      	bne.n	800723a <xQueueReceive+0x76>
 8007236:	2301      	movs	r3, #1
 8007238:	e000      	b.n	800723c <xQueueReceive+0x78>
 800723a:	2300      	movs	r3, #0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d10b      	bne.n	8007258 <xQueueReceive+0x94>
	__asm volatile
 8007240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007244:	f383 8811 	msr	BASEPRI, r3
 8007248:	f3bf 8f6f 	isb	sy
 800724c:	f3bf 8f4f 	dsb	sy
 8007250:	61bb      	str	r3, [r7, #24]
}
 8007252:	bf00      	nop
 8007254:	bf00      	nop
 8007256:	e7fd      	b.n	8007254 <xQueueReceive+0x90>
=======
 800722a:	f001 f875 	bl	8008318 <xTaskGetSchedulerState>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d102      	bne.n	800723a <xQueueReceive+0x72>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d101      	bne.n	800723e <xQueueReceive+0x76>
 800723a:	2301      	movs	r3, #1
 800723c:	e000      	b.n	8007240 <xQueueReceive+0x78>
 800723e:	2300      	movs	r3, #0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10b      	bne.n	800725c <xQueueReceive+0x94>
	__asm volatile
 8007244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007248:	f383 8811 	msr	BASEPRI, r3
 800724c:	f3bf 8f6f 	isb	sy
 8007250:	f3bf 8f4f 	dsb	sy
 8007254:	61bb      	str	r3, [r7, #24]
}
 8007256:	bf00      	nop
 8007258:	bf00      	nop
 800725a:	e7fd      	b.n	8007258 <xQueueReceive+0x90>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< HEAD
 8007258:	f001 fdc6 	bl	8008de8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800725c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800725e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007260:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 800725c:	f001 fdcc 	bl	8008df8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007264:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
<<<<<<< HEAD
 8007262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007264:	2b00      	cmp	r3, #0
 8007266:	d01f      	beq.n	80072a8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007268:	68b9      	ldr	r1, [r7, #8]
 800726a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800726c:	f000 f8f6 	bl	800745c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007272:	1e5a      	subs	r2, r3, #1
 8007274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007276:	639a      	str	r2, [r3, #56]	@ 0x38
=======
 8007266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007268:	2b00      	cmp	r3, #0
 800726a:	d01f      	beq.n	80072ac <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800726c:	68b9      	ldr	r1, [r7, #8]
 800726e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007270:	f000 f8f6 	bl	8007460 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007276:	1e5a      	subs	r2, r3, #1
 8007278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800727a:	639a      	str	r2, [r3, #56]	@ 0x38
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< HEAD
 8007278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00f      	beq.n	80072a0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007282:	3310      	adds	r3, #16
 8007284:	4618      	mov	r0, r3
 8007286:	f000 fe7f 	bl	8007f88 <xTaskRemoveFromEventList>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d007      	beq.n	80072a0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007290:	4b3c      	ldr	r3, [pc, #240]	@ (8007384 <xQueueReceive+0x1c0>)
 8007292:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007296:	601a      	str	r2, [r3, #0]
 8007298:	f3bf 8f4f 	dsb	sy
 800729c:	f3bf 8f6f 	isb	sy
=======
 800727c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00f      	beq.n	80072a4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007286:	3310      	adds	r3, #16
 8007288:	4618      	mov	r0, r3
 800728a:	f000 fe7f 	bl	8007f8c <xTaskRemoveFromEventList>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d007      	beq.n	80072a4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007294:	4b3c      	ldr	r3, [pc, #240]	@ (8007388 <xQueueReceive+0x1c0>)
 8007296:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800729a:	601a      	str	r2, [r3, #0]
 800729c:	f3bf 8f4f 	dsb	sy
 80072a0:	f3bf 8f6f 	isb	sy
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
<<<<<<< HEAD
 80072a0:	f001 fdd4 	bl	8008e4c <vPortExitCritical>
				return pdPASS;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e069      	b.n	800737c <xQueueReceive+0x1b8>
=======
 80072a4:	f001 fdda 	bl	8008e5c <vPortExitCritical>
				return pdPASS;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e069      	b.n	8007380 <xQueueReceive+0x1b8>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< HEAD
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d103      	bne.n	80072b6 <xQueueReceive+0xf2>
=======
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d103      	bne.n	80072ba <xQueueReceive+0xf2>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
<<<<<<< HEAD
 80072ae:	f001 fdcd 	bl	8008e4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80072b2:	2300      	movs	r3, #0
 80072b4:	e062      	b.n	800737c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80072b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d106      	bne.n	80072ca <xQueueReceive+0x106>
=======
 80072b2:	f001 fdd3 	bl	8008e5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80072b6:	2300      	movs	r3, #0
 80072b8:	e062      	b.n	8007380 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80072ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d106      	bne.n	80072ce <xQueueReceive+0x106>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< HEAD
 80072bc:	f107 0310 	add.w	r3, r7, #16
 80072c0:	4618      	mov	r0, r3
 80072c2:	f000 fec5 	bl	8008050 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072c6:	2301      	movs	r3, #1
 80072c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
=======
 80072c0:	f107 0310 	add.w	r3, r7, #16
 80072c4:	4618      	mov	r0, r3
 80072c6:	f000 fec5 	bl	8008054 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072ca:	2301      	movs	r3, #1
 80072cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
 80072ca:	f001 fdbf 	bl	8008e4c <vPortExitCritical>
=======
 80072ce:	f001 fdc5 	bl	8008e5c <vPortExitCritical>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< HEAD
 80072ce:	f000 fc2d 	bl	8007b2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072d2:	f001 fd89 	bl	8008de8 <vPortEnterCritical>
 80072d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80072dc:	b25b      	sxtb	r3, r3
 80072de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072e2:	d103      	bne.n	80072ec <xQueueReceive+0x128>
 80072e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80072f2:	b25b      	sxtb	r3, r3
 80072f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072f8:	d103      	bne.n	8007302 <xQueueReceive+0x13e>
 80072fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007302:	f001 fda3 	bl	8008e4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007306:	1d3a      	adds	r2, r7, #4
 8007308:	f107 0310 	add.w	r3, r7, #16
 800730c:	4611      	mov	r1, r2
 800730e:	4618      	mov	r0, r3
 8007310:	f000 feb4 	bl	800807c <xTaskCheckForTimeOut>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d123      	bne.n	8007362 <xQueueReceive+0x19e>
=======
 80072d2:	f000 fc2d 	bl	8007b30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072d6:	f001 fd8f 	bl	8008df8 <vPortEnterCritical>
 80072da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80072e0:	b25b      	sxtb	r3, r3
 80072e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072e6:	d103      	bne.n	80072f0 <xQueueReceive+0x128>
 80072e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ea:	2200      	movs	r2, #0
 80072ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80072f6:	b25b      	sxtb	r3, r3
 80072f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072fc:	d103      	bne.n	8007306 <xQueueReceive+0x13e>
 80072fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007300:	2200      	movs	r2, #0
 8007302:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007306:	f001 fda9 	bl	8008e5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800730a:	1d3a      	adds	r2, r7, #4
 800730c:	f107 0310 	add.w	r3, r7, #16
 8007310:	4611      	mov	r1, r2
 8007312:	4618      	mov	r0, r3
 8007314:	f000 feb4 	bl	8008080 <xTaskCheckForTimeOut>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d123      	bne.n	8007366 <xQueueReceive+0x19e>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
<<<<<<< HEAD
 800731a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800731c:	f000 f916 	bl	800754c <prvIsQueueEmpty>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d017      	beq.n	8007356 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007328:	3324      	adds	r3, #36	@ 0x24
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	4611      	mov	r1, r2
 800732e:	4618      	mov	r0, r3
 8007330:	f000 fdd8 	bl	8007ee4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007334:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007336:	f000 f8b7 	bl	80074a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800733a:	f000 fc05 	bl	8007b48 <xTaskResumeAll>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d189      	bne.n	8007258 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007344:	4b0f      	ldr	r3, [pc, #60]	@ (8007384 <xQueueReceive+0x1c0>)
 8007346:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800734a:	601a      	str	r2, [r3, #0]
 800734c:	f3bf 8f4f 	dsb	sy
 8007350:	f3bf 8f6f 	isb	sy
 8007354:	e780      	b.n	8007258 <xQueueReceive+0x94>
=======
 800731e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007320:	f000 f916 	bl	8007550 <prvIsQueueEmpty>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d017      	beq.n	800735a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800732a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800732c:	3324      	adds	r3, #36	@ 0x24
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	4611      	mov	r1, r2
 8007332:	4618      	mov	r0, r3
 8007334:	f000 fdd8 	bl	8007ee8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007338:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800733a:	f000 f8b7 	bl	80074ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800733e:	f000 fc05 	bl	8007b4c <xTaskResumeAll>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d189      	bne.n	800725c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007348:	4b0f      	ldr	r3, [pc, #60]	@ (8007388 <xQueueReceive+0x1c0>)
 800734a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800734e:	601a      	str	r2, [r3, #0]
 8007350:	f3bf 8f4f 	dsb	sy
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	e780      	b.n	800725c <xQueueReceive+0x94>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8007356:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007358:	f000 f8a6 	bl	80074a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800735c:	f000 fbf4 	bl	8007b48 <xTaskResumeAll>
 8007360:	e77a      	b.n	8007258 <xQueueReceive+0x94>
=======
 800735a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800735c:	f000 f8a6 	bl	80074ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007360:	f000 fbf4 	bl	8007b4c <xTaskResumeAll>
 8007364:	e77a      	b.n	800725c <xQueueReceive+0x94>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8007362:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007364:	f000 f8a0 	bl	80074a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007368:	f000 fbee 	bl	8007b48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800736c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800736e:	f000 f8ed 	bl	800754c <prvIsQueueEmpty>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	f43f af6f 	beq.w	8007258 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800737a:	2300      	movs	r3, #0
=======
 8007366:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007368:	f000 f8a0 	bl	80074ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800736c:	f000 fbee 	bl	8007b4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007370:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007372:	f000 f8ed 	bl	8007550 <prvIsQueueEmpty>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	f43f af6f 	beq.w	800725c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800737e:	2300      	movs	r3, #0
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
<<<<<<< HEAD
 800737c:	4618      	mov	r0, r3
 800737e:	3730      	adds	r7, #48	@ 0x30
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	e000ed04 	.word	0xe000ed04

08007388 <prvCopyDataToQueue>:
=======
 8007380:	4618      	mov	r0, r3
 8007382:	3730      	adds	r7, #48	@ 0x30
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}
 8007388:	e000ed04 	.word	0xe000ed04

0800738c <prvCopyDataToQueue>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
<<<<<<< HEAD
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007394:	2300      	movs	r3, #0
 8007396:	617b      	str	r3, [r7, #20]
=======
 800738c:	b580      	push	{r7, lr}
 800738e:	b086      	sub	sp, #24
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007398:	2300      	movs	r3, #0
 800739a:	617b      	str	r3, [r7, #20]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
<<<<<<< HEAD
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800739c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10d      	bne.n	80073c2 <prvCopyDataToQueue+0x3a>
=======
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d10d      	bne.n	80073c6 <prvCopyDataToQueue+0x3a>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< HEAD
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d14d      	bne.n	800744a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	4618      	mov	r0, r3
 80073b4:	f000 ffcc 	bl	8008350 <xTaskPriorityDisinherit>
 80073b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	609a      	str	r2, [r3, #8]
 80073c0:	e043      	b.n	800744a <prvCopyDataToQueue+0xc2>
=======
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d14d      	bne.n	800744e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	4618      	mov	r0, r3
 80073b8:	f000 ffcc 	bl	8008354 <xTaskPriorityDisinherit>
 80073bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2200      	movs	r2, #0
 80073c2:	609a      	str	r2, [r3, #8]
 80073c4:	e043      	b.n	800744e <prvCopyDataToQueue+0xc2>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
<<<<<<< HEAD
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d119      	bne.n	80073fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6858      	ldr	r0, [r3, #4]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073d0:	461a      	mov	r2, r3
 80073d2:	68b9      	ldr	r1, [r7, #8]
 80073d4:	f002 fe99 	bl	800a10a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	685a      	ldr	r2, [r3, #4]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073e0:	441a      	add	r2, r3
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	685a      	ldr	r2, [r3, #4]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d32b      	bcc.n	800744a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	605a      	str	r2, [r3, #4]
 80073fa:	e026      	b.n	800744a <prvCopyDataToQueue+0xc2>
=======
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d119      	bne.n	8007400 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6858      	ldr	r0, [r3, #4]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073d4:	461a      	mov	r2, r3
 80073d6:	68b9      	ldr	r1, [r7, #8]
 80073d8:	f002 ff91 	bl	800a2fe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	685a      	ldr	r2, [r3, #4]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073e4:	441a      	add	r2, r3
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	685a      	ldr	r2, [r3, #4]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d32b      	bcc.n	800744e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	605a      	str	r2, [r3, #4]
 80073fe:	e026      	b.n	800744e <prvCopyDataToQueue+0xc2>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
<<<<<<< HEAD
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	68d8      	ldr	r0, [r3, #12]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007404:	461a      	mov	r2, r3
 8007406:	68b9      	ldr	r1, [r7, #8]
 8007408:	f002 fe7f 	bl	800a10a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	68da      	ldr	r2, [r3, #12]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007414:	425b      	negs	r3, r3
 8007416:	441a      	add	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	68da      	ldr	r2, [r3, #12]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	429a      	cmp	r2, r3
 8007426:	d207      	bcs.n	8007438 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	689a      	ldr	r2, [r3, #8]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007430:	425b      	negs	r3, r3
 8007432:	441a      	add	r2, r3
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	60da      	str	r2, [r3, #12]
=======
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	68d8      	ldr	r0, [r3, #12]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007408:	461a      	mov	r2, r3
 800740a:	68b9      	ldr	r1, [r7, #8]
 800740c:	f002 ff77 	bl	800a2fe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	68da      	ldr	r2, [r3, #12]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007418:	425b      	negs	r3, r3
 800741a:	441a      	add	r2, r3
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	68da      	ldr	r2, [r3, #12]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	429a      	cmp	r2, r3
 800742a:	d207      	bcs.n	800743c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	689a      	ldr	r2, [r3, #8]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007434:	425b      	negs	r3, r3
 8007436:	441a      	add	r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	60da      	str	r2, [r3, #12]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
<<<<<<< HEAD
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2b02      	cmp	r3, #2
 800743c:	d105      	bne.n	800744a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d002      	beq.n	800744a <prvCopyDataToQueue+0xc2>
=======
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2b02      	cmp	r3, #2
 8007440:	d105      	bne.n	800744e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d002      	beq.n	800744e <prvCopyDataToQueue+0xc2>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
<<<<<<< HEAD
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	3b01      	subs	r3, #1
 8007448:	613b      	str	r3, [r7, #16]
=======
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	3b01      	subs	r3, #1
 800744c:	613b      	str	r3, [r7, #16]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
<<<<<<< HEAD
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	1c5a      	adds	r2, r3, #1
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007452:	697b      	ldr	r3, [r7, #20]
}
 8007454:	4618      	mov	r0, r3
 8007456:	3718      	adds	r7, #24
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <prvCopyDataFromQueue>:
=======
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	1c5a      	adds	r2, r3, #1
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007456:	697b      	ldr	r3, [r7, #20]
}
 8007458:	4618      	mov	r0, r3
 800745a:	3718      	adds	r7, #24
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <prvCopyDataFromQueue>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
<<<<<<< HEAD
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800746a:	2b00      	cmp	r3, #0
 800746c:	d018      	beq.n	80074a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	68da      	ldr	r2, [r3, #12]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007476:	441a      	add	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	68da      	ldr	r2, [r3, #12]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	429a      	cmp	r2, r3
 8007486:	d303      	bcc.n	8007490 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	60da      	str	r2, [r3, #12]
=======
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800746e:	2b00      	cmp	r3, #0
 8007470:	d018      	beq.n	80074a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	68da      	ldr	r2, [r3, #12]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800747a:	441a      	add	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	68da      	ldr	r2, [r3, #12]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	429a      	cmp	r2, r3
 800748a:	d303      	bcc.n	8007494 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	60da      	str	r2, [r3, #12]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
<<<<<<< HEAD
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	68d9      	ldr	r1, [r3, #12]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007498:	461a      	mov	r2, r3
 800749a:	6838      	ldr	r0, [r7, #0]
 800749c:	f002 fe35 	bl	800a10a <memcpy>
	}
}
 80074a0:	bf00      	nop
 80074a2:	3708      	adds	r7, #8
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <prvUnlockQueue>:
=======
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	68d9      	ldr	r1, [r3, #12]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800749c:	461a      	mov	r2, r3
 800749e:	6838      	ldr	r0, [r7, #0]
 80074a0:	f002 ff2d 	bl	800a2fe <memcpy>
	}
}
 80074a4:	bf00      	nop
 80074a6:	3708      	adds	r7, #8
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <prvUnlockQueue>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
<<<<<<< HEAD
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
=======
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 80074b0:	f001 fc9a 	bl	8008de8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80074ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074bc:	e011      	b.n	80074e2 <prvUnlockQueue+0x3a>
=======
 80074b4:	f001 fca0 	bl	8008df8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80074be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074c0:	e011      	b.n	80074e6 <prvUnlockQueue+0x3a>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d012      	beq.n	80074ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	3324      	adds	r3, #36	@ 0x24
 80074ca:	4618      	mov	r0, r3
 80074cc:	f000 fd5c 	bl	8007f88 <xTaskRemoveFromEventList>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d001      	beq.n	80074da <prvUnlockQueue+0x32>
=======
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d012      	beq.n	80074f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	3324      	adds	r3, #36	@ 0x24
 80074ce:	4618      	mov	r0, r3
 80074d0:	f000 fd5c 	bl	8007f8c <xTaskRemoveFromEventList>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d001      	beq.n	80074de <prvUnlockQueue+0x32>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
<<<<<<< HEAD
 80074d6:	f000 fe35 	bl	8008144 <vTaskMissedYield>
=======
 80074da:	f000 fe35 	bl	8008148 <vTaskMissedYield>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
<<<<<<< HEAD
 80074da:	7bfb      	ldrb	r3, [r7, #15]
 80074dc:	3b01      	subs	r3, #1
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	dce9      	bgt.n	80074be <prvUnlockQueue+0x16>
 80074ea:	e000      	b.n	80074ee <prvUnlockQueue+0x46>
					break;
 80074ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	22ff      	movs	r2, #255	@ 0xff
 80074f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80074f6:	f001 fca9 	bl	8008e4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80074fa:	f001 fc75 	bl	8008de8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007504:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007506:	e011      	b.n	800752c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d012      	beq.n	8007536 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	3310      	adds	r3, #16
 8007514:	4618      	mov	r0, r3
 8007516:	f000 fd37 	bl	8007f88 <xTaskRemoveFromEventList>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d001      	beq.n	8007524 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007520:	f000 fe10 	bl	8008144 <vTaskMissedYield>
=======
 80074de:	7bfb      	ldrb	r3, [r7, #15]
 80074e0:	3b01      	subs	r3, #1
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	dce9      	bgt.n	80074c2 <prvUnlockQueue+0x16>
 80074ee:	e000      	b.n	80074f2 <prvUnlockQueue+0x46>
					break;
 80074f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	22ff      	movs	r2, #255	@ 0xff
 80074f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80074fa:	f001 fcaf 	bl	8008e5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80074fe:	f001 fc7b 	bl	8008df8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007508:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800750a:	e011      	b.n	8007530 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d012      	beq.n	800753a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	3310      	adds	r3, #16
 8007518:	4618      	mov	r0, r3
 800751a:	f000 fd37 	bl	8007f8c <xTaskRemoveFromEventList>
 800751e:	4603      	mov	r3, r0
 8007520:	2b00      	cmp	r3, #0
 8007522:	d001      	beq.n	8007528 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007524:	f000 fe10 	bl	8008148 <vTaskMissedYield>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
<<<<<<< HEAD
 8007524:	7bbb      	ldrb	r3, [r7, #14]
 8007526:	3b01      	subs	r3, #1
 8007528:	b2db      	uxtb	r3, r3
 800752a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800752c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007530:	2b00      	cmp	r3, #0
 8007532:	dce9      	bgt.n	8007508 <prvUnlockQueue+0x60>
 8007534:	e000      	b.n	8007538 <prvUnlockQueue+0x90>
=======
 8007528:	7bbb      	ldrb	r3, [r7, #14]
 800752a:	3b01      	subs	r3, #1
 800752c:	b2db      	uxtb	r3, r3
 800752e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007530:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007534:	2b00      	cmp	r3, #0
 8007536:	dce9      	bgt.n	800750c <prvUnlockQueue+0x60>
 8007538:	e000      	b.n	800753c <prvUnlockQueue+0x90>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			}
			else
			{
				break;
<<<<<<< HEAD
 8007536:	bf00      	nop
=======
 800753a:	bf00      	nop
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
<<<<<<< HEAD
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	22ff      	movs	r2, #255	@ 0xff
 800753c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007540:	f001 fc84 	bl	8008e4c <vPortExitCritical>
}
 8007544:	bf00      	nop
 8007546:	3710      	adds	r7, #16
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <prvIsQueueEmpty>:
=======
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	22ff      	movs	r2, #255	@ 0xff
 8007540:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007544:	f001 fc8a 	bl	8008e5c <vPortExitCritical>
}
 8007548:	bf00      	nop
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <prvIsQueueEmpty>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
<<<<<<< HEAD
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007554:	f001 fc48 	bl	8008de8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800755c:	2b00      	cmp	r3, #0
 800755e:	d102      	bne.n	8007566 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007560:	2301      	movs	r3, #1
 8007562:	60fb      	str	r3, [r7, #12]
 8007564:	e001      	b.n	800756a <prvIsQueueEmpty+0x1e>
=======
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007558:	f001 fc4e 	bl	8008df8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007560:	2b00      	cmp	r3, #0
 8007562:	d102      	bne.n	800756a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007564:	2301      	movs	r3, #1
 8007566:	60fb      	str	r3, [r7, #12]
 8007568:	e001      	b.n	800756e <prvIsQueueEmpty+0x1e>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< HEAD
 8007566:	2300      	movs	r3, #0
 8007568:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800756a:	f001 fc6f 	bl	8008e4c <vPortExitCritical>

	return xReturn;
 800756e:	68fb      	ldr	r3, [r7, #12]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <prvIsQueueFull>:
=======
 800756a:	2300      	movs	r3, #0
 800756c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800756e:	f001 fc75 	bl	8008e5c <vPortExitCritical>

	return xReturn;
 8007572:	68fb      	ldr	r3, [r7, #12]
}
 8007574:	4618      	mov	r0, r3
 8007576:	3710      	adds	r7, #16
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <prvIsQueueFull>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
<<<<<<< HEAD
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007580:	f001 fc32 	bl	8008de8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800758c:	429a      	cmp	r2, r3
 800758e:	d102      	bne.n	8007596 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007590:	2301      	movs	r3, #1
 8007592:	60fb      	str	r3, [r7, #12]
 8007594:	e001      	b.n	800759a <prvIsQueueFull+0x22>
=======
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007584:	f001 fc38 	bl	8008df8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007590:	429a      	cmp	r2, r3
 8007592:	d102      	bne.n	800759a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007594:	2301      	movs	r3, #1
 8007596:	60fb      	str	r3, [r7, #12]
 8007598:	e001      	b.n	800759e <prvIsQueueFull+0x22>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< HEAD
 8007596:	2300      	movs	r3, #0
 8007598:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800759a:	f001 fc57 	bl	8008e4c <vPortExitCritical>

	return xReturn;
 800759e:	68fb      	ldr	r3, [r7, #12]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <vQueueAddToRegistry>:
=======
 800759a:	2300      	movs	r3, #0
 800759c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800759e:	f001 fc5d 	bl	8008e5c <vPortExitCritical>

	return xReturn;
 80075a2:	68fb      	ldr	r3, [r7, #12]
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <vQueueAddToRegistry>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
<<<<<<< HEAD
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
=======
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
<<<<<<< HEAD
 80075b2:	2300      	movs	r3, #0
 80075b4:	60fb      	str	r3, [r7, #12]
 80075b6:	e014      	b.n	80075e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80075b8:	4a0f      	ldr	r2, [pc, #60]	@ (80075f8 <vQueueAddToRegistry+0x50>)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10b      	bne.n	80075dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80075c4:	490c      	ldr	r1, [pc, #48]	@ (80075f8 <vQueueAddToRegistry+0x50>)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	683a      	ldr	r2, [r7, #0]
 80075ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80075ce:	4a0a      	ldr	r2, [pc, #40]	@ (80075f8 <vQueueAddToRegistry+0x50>)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	00db      	lsls	r3, r3, #3
 80075d4:	4413      	add	r3, r2
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80075da:	e006      	b.n	80075ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	3301      	adds	r3, #1
 80075e0:	60fb      	str	r3, [r7, #12]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2b07      	cmp	r3, #7
 80075e6:	d9e7      	bls.n	80075b8 <vQueueAddToRegistry+0x10>
=======
 80075b6:	2300      	movs	r3, #0
 80075b8:	60fb      	str	r3, [r7, #12]
 80075ba:	e014      	b.n	80075e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80075bc:	4a0f      	ldr	r2, [pc, #60]	@ (80075fc <vQueueAddToRegistry+0x50>)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10b      	bne.n	80075e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80075c8:	490c      	ldr	r1, [pc, #48]	@ (80075fc <vQueueAddToRegistry+0x50>)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	683a      	ldr	r2, [r7, #0]
 80075ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80075d2:	4a0a      	ldr	r2, [pc, #40]	@ (80075fc <vQueueAddToRegistry+0x50>)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	00db      	lsls	r3, r3, #3
 80075d8:	4413      	add	r3, r2
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80075de:	e006      	b.n	80075ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	3301      	adds	r3, #1
 80075e4:	60fb      	str	r3, [r7, #12]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2b07      	cmp	r3, #7
 80075ea:	d9e7      	bls.n	80075bc <vQueueAddToRegistry+0x10>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
<<<<<<< HEAD
 80075e8:	bf00      	nop
 80075ea:	bf00      	nop
 80075ec:	3714      	adds	r7, #20
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	20000c50 	.word	0x20000c50

080075fc <vQueueWaitForMessageRestricted>:
=======
 80075ec:	bf00      	nop
 80075ee:	bf00      	nop
 80075f0:	3714      	adds	r7, #20
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	20000c58 	.word	0x20000c58

08007600 <vQueueWaitForMessageRestricted>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
<<<<<<< HEAD
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b086      	sub	sp, #24
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	617b      	str	r3, [r7, #20]
=======
 8007600:	b580      	push	{r7, lr}
 8007602:	b086      	sub	sp, #24
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	617b      	str	r3, [r7, #20]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
<<<<<<< HEAD
 800760c:	f001 fbec 	bl	8008de8 <vPortEnterCritical>
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007616:	b25b      	sxtb	r3, r3
 8007618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800761c:	d103      	bne.n	8007626 <vQueueWaitForMessageRestricted+0x2a>
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	2200      	movs	r2, #0
 8007622:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800762c:	b25b      	sxtb	r3, r3
 800762e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007632:	d103      	bne.n	800763c <vQueueWaitForMessageRestricted+0x40>
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800763c:	f001 fc06 	bl	8008e4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007644:	2b00      	cmp	r3, #0
 8007646:	d106      	bne.n	8007656 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	3324      	adds	r3, #36	@ 0x24
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	68b9      	ldr	r1, [r7, #8]
 8007650:	4618      	mov	r0, r3
 8007652:	f000 fc6d 	bl	8007f30 <vTaskPlaceOnEventListRestricted>
=======
 8007610:	f001 fbf2 	bl	8008df8 <vPortEnterCritical>
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800761a:	b25b      	sxtb	r3, r3
 800761c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007620:	d103      	bne.n	800762a <vQueueWaitForMessageRestricted+0x2a>
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007630:	b25b      	sxtb	r3, r3
 8007632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007636:	d103      	bne.n	8007640 <vQueueWaitForMessageRestricted+0x40>
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	2200      	movs	r2, #0
 800763c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007640:	f001 fc0c 	bl	8008e5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007648:	2b00      	cmp	r3, #0
 800764a:	d106      	bne.n	800765a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	3324      	adds	r3, #36	@ 0x24
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	68b9      	ldr	r1, [r7, #8]
 8007654:	4618      	mov	r0, r3
 8007656:	f000 fc6d 	bl	8007f34 <vTaskPlaceOnEventListRestricted>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8007656:	6978      	ldr	r0, [r7, #20]
 8007658:	f7ff ff26 	bl	80074a8 <prvUnlockQueue>
	}
 800765c:	bf00      	nop
 800765e:	3718      	adds	r7, #24
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <xTaskCreateStatic>:
=======
 800765a:	6978      	ldr	r0, [r7, #20]
 800765c:	f7ff ff26 	bl	80074ac <prvUnlockQueue>
	}
 8007660:	bf00      	nop
 8007662:	3718      	adds	r7, #24
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <xTaskCreateStatic>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
<<<<<<< HEAD
 8007664:	b580      	push	{r7, lr}
 8007666:	b08e      	sub	sp, #56	@ 0x38
 8007668:	af04      	add	r7, sp, #16
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
 8007670:	603b      	str	r3, [r7, #0]
=======
 8007668:	b580      	push	{r7, lr}
 800766a:	b08e      	sub	sp, #56	@ 0x38
 800766c:	af04      	add	r7, sp, #16
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	607a      	str	r2, [r7, #4]
 8007674:	603b      	str	r3, [r7, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
<<<<<<< HEAD
 8007672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007674:	2b00      	cmp	r3, #0
 8007676:	d10b      	bne.n	8007690 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800767c:	f383 8811 	msr	BASEPRI, r3
 8007680:	f3bf 8f6f 	isb	sy
 8007684:	f3bf 8f4f 	dsb	sy
 8007688:	623b      	str	r3, [r7, #32]
}
 800768a:	bf00      	nop
 800768c:	bf00      	nop
 800768e:	e7fd      	b.n	800768c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007692:	2b00      	cmp	r3, #0
 8007694:	d10b      	bne.n	80076ae <xTaskCreateStatic+0x4a>
	__asm volatile
 8007696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800769a:	f383 8811 	msr	BASEPRI, r3
 800769e:	f3bf 8f6f 	isb	sy
 80076a2:	f3bf 8f4f 	dsb	sy
 80076a6:	61fb      	str	r3, [r7, #28]
}
 80076a8:	bf00      	nop
 80076aa:	bf00      	nop
 80076ac:	e7fd      	b.n	80076aa <xTaskCreateStatic+0x46>
=======
 8007676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007678:	2b00      	cmp	r3, #0
 800767a:	d10b      	bne.n	8007694 <xTaskCreateStatic+0x2c>
	__asm volatile
 800767c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007680:	f383 8811 	msr	BASEPRI, r3
 8007684:	f3bf 8f6f 	isb	sy
 8007688:	f3bf 8f4f 	dsb	sy
 800768c:	623b      	str	r3, [r7, #32]
}
 800768e:	bf00      	nop
 8007690:	bf00      	nop
 8007692:	e7fd      	b.n	8007690 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007696:	2b00      	cmp	r3, #0
 8007698:	d10b      	bne.n	80076b2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800769a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800769e:	f383 8811 	msr	BASEPRI, r3
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	61fb      	str	r3, [r7, #28]
}
 80076ac:	bf00      	nop
 80076ae:	bf00      	nop
 80076b0:	e7fd      	b.n	80076ae <xTaskCreateStatic+0x46>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
<<<<<<< HEAD
 80076ae:	23a8      	movs	r3, #168	@ 0xa8
 80076b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	2ba8      	cmp	r3, #168	@ 0xa8
 80076b6:	d00b      	beq.n	80076d0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80076b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076bc:	f383 8811 	msr	BASEPRI, r3
 80076c0:	f3bf 8f6f 	isb	sy
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	61bb      	str	r3, [r7, #24]
}
 80076ca:	bf00      	nop
 80076cc:	bf00      	nop
 80076ce:	e7fd      	b.n	80076cc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80076d0:	693b      	ldr	r3, [r7, #16]
=======
 80076b2:	23a8      	movs	r3, #168	@ 0xa8
 80076b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	2ba8      	cmp	r3, #168	@ 0xa8
 80076ba:	d00b      	beq.n	80076d4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80076bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c0:	f383 8811 	msr	BASEPRI, r3
 80076c4:	f3bf 8f6f 	isb	sy
 80076c8:	f3bf 8f4f 	dsb	sy
 80076cc:	61bb      	str	r3, [r7, #24]
}
 80076ce:	bf00      	nop
 80076d0:	bf00      	nop
 80076d2:	e7fd      	b.n	80076d0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80076d4:	693b      	ldr	r3, [r7, #16]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
<<<<<<< HEAD
 80076d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d01e      	beq.n	8007716 <xTaskCreateStatic+0xb2>
 80076d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d01b      	beq.n	8007716 <xTaskCreateStatic+0xb2>
=======
 80076d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d01e      	beq.n	800771a <xTaskCreateStatic+0xb2>
 80076dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d01b      	beq.n	800771a <xTaskCreateStatic+0xb2>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
<<<<<<< HEAD
 80076de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076e0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80076e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80076e6:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 80076e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076e4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80076e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80076ea:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< HEAD
 80076e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ea:	2202      	movs	r2, #2
 80076ec:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
=======
 80076ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ee:	2202      	movs	r2, #2
 80076f0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
<<<<<<< HEAD
 80076f0:	2300      	movs	r3, #0
 80076f2:	9303      	str	r3, [sp, #12]
 80076f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f6:	9302      	str	r3, [sp, #8]
 80076f8:	f107 0314 	add.w	r3, r7, #20
 80076fc:	9301      	str	r3, [sp, #4]
 80076fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007700:	9300      	str	r3, [sp, #0]
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	68b9      	ldr	r1, [r7, #8]
 8007708:	68f8      	ldr	r0, [r7, #12]
 800770a:	f000 f851 	bl	80077b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800770e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007710:	f000 f8f6 	bl	8007900 <prvAddNewTaskToReadyList>
 8007714:	e001      	b.n	800771a <xTaskCreateStatic+0xb6>
=======
 80076f4:	2300      	movs	r3, #0
 80076f6:	9303      	str	r3, [sp, #12]
 80076f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076fa:	9302      	str	r3, [sp, #8]
 80076fc:	f107 0314 	add.w	r3, r7, #20
 8007700:	9301      	str	r3, [sp, #4]
 8007702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007704:	9300      	str	r3, [sp, #0]
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	68b9      	ldr	r1, [r7, #8]
 800770c:	68f8      	ldr	r0, [r7, #12]
 800770e:	f000 f851 	bl	80077b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007712:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007714:	f000 f8f6 	bl	8007904 <prvAddNewTaskToReadyList>
 8007718:	e001      	b.n	800771e <xTaskCreateStatic+0xb6>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		}
		else
		{
			xReturn = NULL;
<<<<<<< HEAD
 8007716:	2300      	movs	r3, #0
 8007718:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800771a:	697b      	ldr	r3, [r7, #20]
	}
 800771c:	4618      	mov	r0, r3
 800771e:	3728      	adds	r7, #40	@ 0x28
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <xTaskCreate>:
=======
 800771a:	2300      	movs	r3, #0
 800771c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800771e:	697b      	ldr	r3, [r7, #20]
	}
 8007720:	4618      	mov	r0, r3
 8007722:	3728      	adds	r7, #40	@ 0x28
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <xTaskCreate>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
<<<<<<< HEAD
 8007724:	b580      	push	{r7, lr}
 8007726:	b08c      	sub	sp, #48	@ 0x30
 8007728:	af04      	add	r7, sp, #16
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	603b      	str	r3, [r7, #0]
 8007730:	4613      	mov	r3, r2
 8007732:	80fb      	strh	r3, [r7, #6]
=======
 8007728:	b580      	push	{r7, lr}
 800772a:	b08c      	sub	sp, #48	@ 0x30
 800772c:	af04      	add	r7, sp, #16
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	603b      	str	r3, [r7, #0]
 8007734:	4613      	mov	r3, r2
 8007736:	80fb      	strh	r3, [r7, #6]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
<<<<<<< HEAD
 8007734:	88fb      	ldrh	r3, [r7, #6]
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	4618      	mov	r0, r3
 800773a:	f001 fc77 	bl	800902c <pvPortMalloc>
 800773e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00e      	beq.n	8007764 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007746:	20a8      	movs	r0, #168	@ 0xa8
 8007748:	f001 fc70 	bl	800902c <pvPortMalloc>
 800774c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d003      	beq.n	800775c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	631a      	str	r2, [r3, #48]	@ 0x30
 800775a:	e005      	b.n	8007768 <xTaskCreate+0x44>
=======
 8007738:	88fb      	ldrh	r3, [r7, #6]
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	4618      	mov	r0, r3
 800773e:	f001 fc7d 	bl	800903c <pvPortMalloc>
 8007742:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00e      	beq.n	8007768 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800774a:	20a8      	movs	r0, #168	@ 0xa8
 800774c:	f001 fc76 	bl	800903c <pvPortMalloc>
 8007750:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d003      	beq.n	8007760 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	697a      	ldr	r2, [r7, #20]
 800775c:	631a      	str	r2, [r3, #48]	@ 0x30
 800775e:	e005      	b.n	800776c <xTaskCreate+0x44>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
<<<<<<< HEAD
 800775c:	6978      	ldr	r0, [r7, #20]
 800775e:	f001 fd33 	bl	80091c8 <vPortFree>
 8007762:	e001      	b.n	8007768 <xTaskCreate+0x44>
=======
 8007760:	6978      	ldr	r0, [r7, #20]
 8007762:	f001 fd39 	bl	80091d8 <vPortFree>
 8007766:	e001      	b.n	800776c <xTaskCreate+0x44>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
				}
			}
			else
			{
				pxNewTCB = NULL;
<<<<<<< HEAD
 8007764:	2300      	movs	r3, #0
 8007766:	61fb      	str	r3, [r7, #28]
=======
 8007768:	2300      	movs	r3, #0
 800776a:	61fb      	str	r3, [r7, #28]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
<<<<<<< HEAD
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d017      	beq.n	800779e <xTaskCreate+0x7a>
=======
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d017      	beq.n	80077a2 <xTaskCreate+0x7a>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< HEAD
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
=======
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
<<<<<<< HEAD
 8007776:	88fa      	ldrh	r2, [r7, #6]
 8007778:	2300      	movs	r3, #0
 800777a:	9303      	str	r3, [sp, #12]
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	9302      	str	r3, [sp, #8]
 8007780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007782:	9301      	str	r3, [sp, #4]
 8007784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007786:	9300      	str	r3, [sp, #0]
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	68b9      	ldr	r1, [r7, #8]
 800778c:	68f8      	ldr	r0, [r7, #12]
 800778e:	f000 f80f 	bl	80077b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007792:	69f8      	ldr	r0, [r7, #28]
 8007794:	f000 f8b4 	bl	8007900 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007798:	2301      	movs	r3, #1
 800779a:	61bb      	str	r3, [r7, #24]
 800779c:	e002      	b.n	80077a4 <xTaskCreate+0x80>
=======
 800777a:	88fa      	ldrh	r2, [r7, #6]
 800777c:	2300      	movs	r3, #0
 800777e:	9303      	str	r3, [sp, #12]
 8007780:	69fb      	ldr	r3, [r7, #28]
 8007782:	9302      	str	r3, [sp, #8]
 8007784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007786:	9301      	str	r3, [sp, #4]
 8007788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800778a:	9300      	str	r3, [sp, #0]
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	68b9      	ldr	r1, [r7, #8]
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f000 f80f 	bl	80077b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007796:	69f8      	ldr	r0, [r7, #28]
 8007798:	f000 f8b4 	bl	8007904 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800779c:	2301      	movs	r3, #1
 800779e:	61bb      	str	r3, [r7, #24]
 80077a0:	e002      	b.n	80077a8 <xTaskCreate+0x80>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
<<<<<<< HEAD
 800779e:	f04f 33ff 	mov.w	r3, #4294967295
 80077a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80077a4:	69bb      	ldr	r3, [r7, #24]
	}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3720      	adds	r7, #32
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
	...

080077b0 <prvInitialiseNewTask>:
=======
 80077a2:	f04f 33ff 	mov.w	r3, #4294967295
 80077a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80077a8:	69bb      	ldr	r3, [r7, #24]
	}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3720      	adds	r7, #32
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
	...

080077b4 <prvInitialiseNewTask>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
<<<<<<< HEAD
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b088      	sub	sp, #32
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	607a      	str	r2, [r7, #4]
 80077bc:	603b      	str	r3, [r7, #0]
=======
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b088      	sub	sp, #32
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
 80077c0:	603b      	str	r3, [r7, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
<<<<<<< HEAD
 80077be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	461a      	mov	r2, r3
 80077c8:	21a5      	movs	r1, #165	@ 0xa5
 80077ca:	f002 fbc0 	bl	8009f4e <memset>
=======
 80077c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	461a      	mov	r2, r3
 80077cc:	21a5      	movs	r1, #165	@ 0xa5
 80077ce:	f002 fcb9 	bl	800a144 <memset>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
<<<<<<< HEAD
 80077ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80077d8:	3b01      	subs	r3, #1
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	4413      	add	r3, r2
 80077de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	f023 0307 	bic.w	r3, r3, #7
 80077e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	f003 0307 	and.w	r3, r3, #7
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d00b      	beq.n	800780a <prvInitialiseNewTask+0x5a>
	__asm volatile
 80077f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f6:	f383 8811 	msr	BASEPRI, r3
 80077fa:	f3bf 8f6f 	isb	sy
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	617b      	str	r3, [r7, #20]
}
 8007804:	bf00      	nop
 8007806:	bf00      	nop
 8007808:	e7fd      	b.n	8007806 <prvInitialiseNewTask+0x56>
=======
 80077d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80077dc:	3b01      	subs	r3, #1
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	4413      	add	r3, r2
 80077e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	f023 0307 	bic.w	r3, r3, #7
 80077ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	f003 0307 	and.w	r3, r3, #7
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00b      	beq.n	800780e <prvInitialiseNewTask+0x5a>
	__asm volatile
 80077f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077fa:	f383 8811 	msr	BASEPRI, r3
 80077fe:	f3bf 8f6f 	isb	sy
 8007802:	f3bf 8f4f 	dsb	sy
 8007806:	617b      	str	r3, [r7, #20]
}
 8007808:	bf00      	nop
 800780a:	bf00      	nop
 800780c:	e7fd      	b.n	800780a <prvInitialiseNewTask+0x56>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
<<<<<<< HEAD
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d01f      	beq.n	8007850 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007810:	2300      	movs	r3, #0
 8007812:	61fb      	str	r3, [r7, #28]
 8007814:	e012      	b.n	800783c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007816:	68ba      	ldr	r2, [r7, #8]
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	4413      	add	r3, r2
 800781c:	7819      	ldrb	r1, [r3, #0]
 800781e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	4413      	add	r3, r2
 8007824:	3334      	adds	r3, #52	@ 0x34
 8007826:	460a      	mov	r2, r1
 8007828:	701a      	strb	r2, [r3, #0]
=======
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d01f      	beq.n	8007854 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007814:	2300      	movs	r3, #0
 8007816:	61fb      	str	r3, [r7, #28]
 8007818:	e012      	b.n	8007840 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800781a:	68ba      	ldr	r2, [r7, #8]
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	4413      	add	r3, r2
 8007820:	7819      	ldrb	r1, [r3, #0]
 8007822:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	4413      	add	r3, r2
 8007828:	3334      	adds	r3, #52	@ 0x34
 800782a:	460a      	mov	r2, r1
 800782c:	701a      	strb	r2, [r3, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
<<<<<<< HEAD
 800782a:	68ba      	ldr	r2, [r7, #8]
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	4413      	add	r3, r2
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d006      	beq.n	8007844 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	3301      	adds	r3, #1
 800783a:	61fb      	str	r3, [r7, #28]
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	2b0f      	cmp	r3, #15
 8007840:	d9e9      	bls.n	8007816 <prvInitialiseNewTask+0x66>
 8007842:	e000      	b.n	8007846 <prvInitialiseNewTask+0x96>
			{
				break;
 8007844:	bf00      	nop
=======
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	4413      	add	r3, r2
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d006      	beq.n	8007848 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	3301      	adds	r3, #1
 800783e:	61fb      	str	r3, [r7, #28]
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	2b0f      	cmp	r3, #15
 8007844:	d9e9      	bls.n	800781a <prvInitialiseNewTask+0x66>
 8007846:	e000      	b.n	800784a <prvInitialiseNewTask+0x96>
			{
				break;
 8007848:	bf00      	nop
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
<<<<<<< HEAD
 8007846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007848:	2200      	movs	r2, #0
 800784a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800784e:	e003      	b.n	8007858 <prvInitialiseNewTask+0xa8>
=======
 800784a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800784c:	2200      	movs	r2, #0
 800784e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007852:	e003      	b.n	800785c <prvInitialiseNewTask+0xa8>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
<<<<<<< HEAD
 8007850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007852:	2200      	movs	r2, #0
 8007854:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
=======
 8007854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007856:	2200      	movs	r2, #0
 8007858:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
<<<<<<< HEAD
 8007858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800785a:	2b37      	cmp	r3, #55	@ 0x37
 800785c:	d901      	bls.n	8007862 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800785e:	2337      	movs	r3, #55	@ 0x37
 8007860:	62bb      	str	r3, [r7, #40]	@ 0x28
=======
 800785c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800785e:	2b37      	cmp	r3, #55	@ 0x37
 8007860:	d901      	bls.n	8007866 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007862:	2337      	movs	r3, #55	@ 0x37
 8007864:	62bb      	str	r3, [r7, #40]	@ 0x28
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
<<<<<<< HEAD
 8007862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007864:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007866:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800786a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800786c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800786e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007870:	2200      	movs	r2, #0
 8007872:	651a      	str	r2, [r3, #80]	@ 0x50
=======
 8007866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007868:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800786a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800786c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800786e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007870:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007874:	2200      	movs	r2, #0
 8007876:	651a      	str	r2, [r3, #80]	@ 0x50
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
<<<<<<< HEAD
 8007874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007876:	3304      	adds	r3, #4
 8007878:	4618      	mov	r0, r3
 800787a:	f7ff f965 	bl	8006b48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800787e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007880:	3318      	adds	r3, #24
 8007882:	4618      	mov	r0, r3
 8007884:	f7ff f960 	bl	8006b48 <vListInitialiseItem>
=======
 8007878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787a:	3304      	adds	r3, #4
 800787c:	4618      	mov	r0, r3
 800787e:	f7ff f965 	bl	8006b4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007884:	3318      	adds	r3, #24
 8007886:	4618      	mov	r0, r3
 8007888:	f7ff f960 	bl	8006b4c <vListInitialiseItem>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
<<<<<<< HEAD
 8007888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800788a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800788c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800788e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007890:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007896:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800789a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800789c:	625a      	str	r2, [r3, #36]	@ 0x24
=======
 800788c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800788e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007890:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007894:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800789a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800789c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800789e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078a0:	625a      	str	r2, [r3, #36]	@ 0x24
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
<<<<<<< HEAD
 800789e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a0:	2200      	movs	r2, #0
 80078a2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80078a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a8:	2200      	movs	r2, #0
 80078aa:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
=======
 80078a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a4:	2200      	movs	r2, #0
 80078a6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80078aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
<<<<<<< HEAD
 80078ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b0:	3354      	adds	r3, #84	@ 0x54
 80078b2:	224c      	movs	r2, #76	@ 0x4c
 80078b4:	2100      	movs	r1, #0
 80078b6:	4618      	mov	r0, r3
 80078b8:	f002 fb49 	bl	8009f4e <memset>
 80078bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078be:	4a0d      	ldr	r2, [pc, #52]	@ (80078f4 <prvInitialiseNewTask+0x144>)
 80078c0:	659a      	str	r2, [r3, #88]	@ 0x58
 80078c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c4:	4a0c      	ldr	r2, [pc, #48]	@ (80078f8 <prvInitialiseNewTask+0x148>)
 80078c6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80078c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ca:	4a0c      	ldr	r2, [pc, #48]	@ (80078fc <prvInitialiseNewTask+0x14c>)
 80078cc:	661a      	str	r2, [r3, #96]	@ 0x60
=======
 80078b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b4:	3354      	adds	r3, #84	@ 0x54
 80078b6:	224c      	movs	r2, #76	@ 0x4c
 80078b8:	2100      	movs	r1, #0
 80078ba:	4618      	mov	r0, r3
 80078bc:	f002 fc42 	bl	800a144 <memset>
 80078c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c2:	4a0d      	ldr	r2, [pc, #52]	@ (80078f8 <prvInitialiseNewTask+0x144>)
 80078c4:	659a      	str	r2, [r3, #88]	@ 0x58
 80078c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c8:	4a0c      	ldr	r2, [pc, #48]	@ (80078fc <prvInitialiseNewTask+0x148>)
 80078ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 80078cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ce:	4a0c      	ldr	r2, [pc, #48]	@ (8007900 <prvInitialiseNewTask+0x14c>)
 80078d0:	661a      	str	r2, [r3, #96]	@ 0x60
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
<<<<<<< HEAD
 80078ce:	683a      	ldr	r2, [r7, #0]
 80078d0:	68f9      	ldr	r1, [r7, #12]
 80078d2:	69b8      	ldr	r0, [r7, #24]
 80078d4:	f001 f95a 	bl	8008b8c <pxPortInitialiseStack>
 80078d8:	4602      	mov	r2, r0
 80078da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078dc:	601a      	str	r2, [r3, #0]
=======
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	68f9      	ldr	r1, [r7, #12]
 80078d6:	69b8      	ldr	r0, [r7, #24]
 80078d8:	f001 f95a 	bl	8008b90 <pxPortInitialiseStack>
 80078dc:	4602      	mov	r2, r0
 80078de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e0:	601a      	str	r2, [r3, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
<<<<<<< HEAD
 80078de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d002      	beq.n	80078ea <prvInitialiseNewTask+0x13a>
=======
 80078e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d002      	beq.n	80078ee <prvInitialiseNewTask+0x13a>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
<<<<<<< HEAD
 80078e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078e8:	601a      	str	r2, [r3, #0]
=======
 80078e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078ec:	601a      	str	r2, [r3, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 80078ea:	bf00      	nop
 80078ec:	3720      	adds	r7, #32
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	20004ee4 	.word	0x20004ee4
 80078f8:	20004f4c 	.word	0x20004f4c
 80078fc:	20004fb4 	.word	0x20004fb4

08007900 <prvAddNewTaskToReadyList>:
=======
 80078ee:	bf00      	nop
 80078f0:	3720      	adds	r7, #32
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	20004eec 	.word	0x20004eec
 80078fc:	20004f54 	.word	0x20004f54
 8007900:	20004fbc 	.word	0x20004fbc

08007904 <prvAddNewTaskToReadyList>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
<<<<<<< HEAD
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007908:	f001 fa6e 	bl	8008de8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800790c:	4b2d      	ldr	r3, [pc, #180]	@ (80079c4 <prvAddNewTaskToReadyList+0xc4>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	3301      	adds	r3, #1
 8007912:	4a2c      	ldr	r2, [pc, #176]	@ (80079c4 <prvAddNewTaskToReadyList+0xc4>)
 8007914:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007916:	4b2c      	ldr	r3, [pc, #176]	@ (80079c8 <prvAddNewTaskToReadyList+0xc8>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d109      	bne.n	8007932 <prvAddNewTaskToReadyList+0x32>
=======
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800790c:	f001 fa74 	bl	8008df8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007910:	4b2d      	ldr	r3, [pc, #180]	@ (80079c8 <prvAddNewTaskToReadyList+0xc4>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	3301      	adds	r3, #1
 8007916:	4a2c      	ldr	r2, [pc, #176]	@ (80079c8 <prvAddNewTaskToReadyList+0xc4>)
 8007918:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800791a:	4b2c      	ldr	r3, [pc, #176]	@ (80079cc <prvAddNewTaskToReadyList+0xc8>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d109      	bne.n	8007936 <prvAddNewTaskToReadyList+0x32>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
<<<<<<< HEAD
 800791e:	4a2a      	ldr	r2, [pc, #168]	@ (80079c8 <prvAddNewTaskToReadyList+0xc8>)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007924:	4b27      	ldr	r3, [pc, #156]	@ (80079c4 <prvAddNewTaskToReadyList+0xc4>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d110      	bne.n	800794e <prvAddNewTaskToReadyList+0x4e>
=======
 8007922:	4a2a      	ldr	r2, [pc, #168]	@ (80079cc <prvAddNewTaskToReadyList+0xc8>)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007928:	4b27      	ldr	r3, [pc, #156]	@ (80079c8 <prvAddNewTaskToReadyList+0xc4>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d110      	bne.n	8007952 <prvAddNewTaskToReadyList+0x4e>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
<<<<<<< HEAD
 800792c:	f000 fc2e 	bl	800818c <prvInitialiseTaskLists>
 8007930:	e00d      	b.n	800794e <prvAddNewTaskToReadyList+0x4e>
=======
 8007930:	f000 fc2e 	bl	8008190 <prvInitialiseTaskLists>
 8007934:	e00d      	b.n	8007952 <prvAddNewTaskToReadyList+0x4e>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
<<<<<<< HEAD
 8007932:	4b26      	ldr	r3, [pc, #152]	@ (80079cc <prvAddNewTaskToReadyList+0xcc>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d109      	bne.n	800794e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800793a:	4b23      	ldr	r3, [pc, #140]	@ (80079c8 <prvAddNewTaskToReadyList+0xc8>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007944:	429a      	cmp	r2, r3
 8007946:	d802      	bhi.n	800794e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007948:	4a1f      	ldr	r2, [pc, #124]	@ (80079c8 <prvAddNewTaskToReadyList+0xc8>)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6013      	str	r3, [r2, #0]
=======
 8007936:	4b26      	ldr	r3, [pc, #152]	@ (80079d0 <prvAddNewTaskToReadyList+0xcc>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d109      	bne.n	8007952 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800793e:	4b23      	ldr	r3, [pc, #140]	@ (80079cc <prvAddNewTaskToReadyList+0xc8>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007948:	429a      	cmp	r2, r3
 800794a:	d802      	bhi.n	8007952 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800794c:	4a1f      	ldr	r2, [pc, #124]	@ (80079cc <prvAddNewTaskToReadyList+0xc8>)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6013      	str	r3, [r2, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
<<<<<<< HEAD
 800794e:	4b20      	ldr	r3, [pc, #128]	@ (80079d0 <prvAddNewTaskToReadyList+0xd0>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	3301      	adds	r3, #1
 8007954:	4a1e      	ldr	r2, [pc, #120]	@ (80079d0 <prvAddNewTaskToReadyList+0xd0>)
 8007956:	6013      	str	r3, [r2, #0]
=======
 8007952:	4b20      	ldr	r3, [pc, #128]	@ (80079d4 <prvAddNewTaskToReadyList+0xd0>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	3301      	adds	r3, #1
 8007958:	4a1e      	ldr	r2, [pc, #120]	@ (80079d4 <prvAddNewTaskToReadyList+0xd0>)
 800795a:	6013      	str	r3, [r2, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
<<<<<<< HEAD
 8007958:	4b1d      	ldr	r3, [pc, #116]	@ (80079d0 <prvAddNewTaskToReadyList+0xd0>)
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 800795c:	4b1d      	ldr	r3, [pc, #116]	@ (80079d4 <prvAddNewTaskToReadyList+0xd0>)
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
<<<<<<< HEAD
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007964:	4b1b      	ldr	r3, [pc, #108]	@ (80079d4 <prvAddNewTaskToReadyList+0xd4>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	429a      	cmp	r2, r3
 800796a:	d903      	bls.n	8007974 <prvAddNewTaskToReadyList+0x74>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007970:	4a18      	ldr	r2, [pc, #96]	@ (80079d4 <prvAddNewTaskToReadyList+0xd4>)
 8007972:	6013      	str	r3, [r2, #0]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007978:	4613      	mov	r3, r2
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	4413      	add	r3, r2
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	4a15      	ldr	r2, [pc, #84]	@ (80079d8 <prvAddNewTaskToReadyList+0xd8>)
 8007982:	441a      	add	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	3304      	adds	r3, #4
 8007988:	4619      	mov	r1, r3
 800798a:	4610      	mov	r0, r2
 800798c:	f7ff f8e9 	bl	8006b62 <vListInsertEnd>
=======
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007968:	4b1b      	ldr	r3, [pc, #108]	@ (80079d8 <prvAddNewTaskToReadyList+0xd4>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	429a      	cmp	r2, r3
 800796e:	d903      	bls.n	8007978 <prvAddNewTaskToReadyList+0x74>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007974:	4a18      	ldr	r2, [pc, #96]	@ (80079d8 <prvAddNewTaskToReadyList+0xd4>)
 8007976:	6013      	str	r3, [r2, #0]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800797c:	4613      	mov	r3, r2
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	4413      	add	r3, r2
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	4a15      	ldr	r2, [pc, #84]	@ (80079dc <prvAddNewTaskToReadyList+0xd8>)
 8007986:	441a      	add	r2, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	3304      	adds	r3, #4
 800798c:	4619      	mov	r1, r3
 800798e:	4610      	mov	r0, r2
 8007990:	f7ff f8e9 	bl	8006b66 <vListInsertEnd>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 8007990:	f001 fa5c 	bl	8008e4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007994:	4b0d      	ldr	r3, [pc, #52]	@ (80079cc <prvAddNewTaskToReadyList+0xcc>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d00e      	beq.n	80079ba <prvAddNewTaskToReadyList+0xba>
=======
 8007994:	f001 fa62 	bl	8008e5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007998:	4b0d      	ldr	r3, [pc, #52]	@ (80079d0 <prvAddNewTaskToReadyList+0xcc>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00e      	beq.n	80079be <prvAddNewTaskToReadyList+0xba>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
<<<<<<< HEAD
 800799c:	4b0a      	ldr	r3, [pc, #40]	@ (80079c8 <prvAddNewTaskToReadyList+0xc8>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d207      	bcs.n	80079ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80079aa:	4b0c      	ldr	r3, [pc, #48]	@ (80079dc <prvAddNewTaskToReadyList+0xdc>)
 80079ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079b0:	601a      	str	r2, [r3, #0]
 80079b2:	f3bf 8f4f 	dsb	sy
 80079b6:	f3bf 8f6f 	isb	sy
=======
 80079a0:	4b0a      	ldr	r3, [pc, #40]	@ (80079cc <prvAddNewTaskToReadyList+0xc8>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d207      	bcs.n	80079be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80079ae:	4b0c      	ldr	r3, [pc, #48]	@ (80079e0 <prvAddNewTaskToReadyList+0xdc>)
 80079b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079b4:	601a      	str	r2, [r3, #0]
 80079b6:	f3bf 8f4f 	dsb	sy
 80079ba:	f3bf 8f6f 	isb	sy
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 80079ba:	bf00      	nop
 80079bc:	3708      	adds	r7, #8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	20001164 	.word	0x20001164
 80079c8:	20000c90 	.word	0x20000c90
 80079cc:	20001170 	.word	0x20001170
 80079d0:	20001180 	.word	0x20001180
 80079d4:	2000116c 	.word	0x2000116c
 80079d8:	20000c94 	.word	0x20000c94
 80079dc:	e000ed04 	.word	0xe000ed04

080079e0 <vTaskDelay>:
=======
 80079be:	bf00      	nop
 80079c0:	3708      	adds	r7, #8
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	2000116c 	.word	0x2000116c
 80079cc:	20000c98 	.word	0x20000c98
 80079d0:	20001178 	.word	0x20001178
 80079d4:	20001188 	.word	0x20001188
 80079d8:	20001174 	.word	0x20001174
 80079dc:	20000c9c 	.word	0x20000c9c
 80079e0:	e000ed04 	.word	0xe000ed04

080079e4 <vTaskDelay>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
<<<<<<< HEAD
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80079e8:	2300      	movs	r3, #0
 80079ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d018      	beq.n	8007a24 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80079f2:	4b14      	ldr	r3, [pc, #80]	@ (8007a44 <vTaskDelay+0x64>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00b      	beq.n	8007a12 <vTaskDelay+0x32>
	__asm volatile
 80079fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079fe:	f383 8811 	msr	BASEPRI, r3
 8007a02:	f3bf 8f6f 	isb	sy
 8007a06:	f3bf 8f4f 	dsb	sy
 8007a0a:	60bb      	str	r3, [r7, #8]
}
 8007a0c:	bf00      	nop
 8007a0e:	bf00      	nop
 8007a10:	e7fd      	b.n	8007a0e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007a12:	f000 f88b 	bl	8007b2c <vTaskSuspendAll>
=======
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80079ec:	2300      	movs	r3, #0
 80079ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d018      	beq.n	8007a28 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80079f6:	4b14      	ldr	r3, [pc, #80]	@ (8007a48 <vTaskDelay+0x64>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00b      	beq.n	8007a16 <vTaskDelay+0x32>
	__asm volatile
 80079fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	60bb      	str	r3, [r7, #8]
}
 8007a10:	bf00      	nop
 8007a12:	bf00      	nop
 8007a14:	e7fd      	b.n	8007a12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007a16:	f000 f88b 	bl	8007b30 <vTaskSuspendAll>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
<<<<<<< HEAD
 8007a16:	2100      	movs	r1, #0
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 fd09 	bl	8008430 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007a1e:	f000 f893 	bl	8007b48 <xTaskResumeAll>
 8007a22:	60f8      	str	r0, [r7, #12]
=======
 8007a1a:	2100      	movs	r1, #0
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 fd09 	bl	8008434 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007a22:	f000 f893 	bl	8007b4c <xTaskResumeAll>
 8007a26:	60f8      	str	r0, [r7, #12]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
<<<<<<< HEAD
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d107      	bne.n	8007a3a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007a2a:	4b07      	ldr	r3, [pc, #28]	@ (8007a48 <vTaskDelay+0x68>)
 8007a2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a30:	601a      	str	r2, [r3, #0]
 8007a32:	f3bf 8f4f 	dsb	sy
 8007a36:	f3bf 8f6f 	isb	sy
=======
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d107      	bne.n	8007a3e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007a2e:	4b07      	ldr	r3, [pc, #28]	@ (8007a4c <vTaskDelay+0x68>)
 8007a30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a34:	601a      	str	r2, [r3, #0]
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	f3bf 8f6f 	isb	sy
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< HEAD
 8007a3a:	bf00      	nop
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	2000118c 	.word	0x2000118c
 8007a48:	e000ed04 	.word	0xe000ed04

08007a4c <vTaskStartScheduler>:
=======
 8007a3e:	bf00      	nop
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	20001194 	.word	0x20001194
 8007a4c:	e000ed04 	.word	0xe000ed04

08007a50 <vTaskStartScheduler>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
<<<<<<< HEAD
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b08a      	sub	sp, #40	@ 0x28
 8007a50:	af04      	add	r7, sp, #16
=======
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b08a      	sub	sp, #40	@ 0x28
 8007a54:	af04      	add	r7, sp, #16
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
<<<<<<< HEAD
 8007a52:	2300      	movs	r3, #0
 8007a54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007a56:	2300      	movs	r3, #0
 8007a58:	607b      	str	r3, [r7, #4]
=======
 8007a56:	2300      	movs	r3, #0
 8007a58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	607b      	str	r3, [r7, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
<<<<<<< HEAD
 8007a5a:	463a      	mov	r2, r7
 8007a5c:	1d39      	adds	r1, r7, #4
 8007a5e:	f107 0308 	add.w	r3, r7, #8
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7ff f81c 	bl	8006aa0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007a68:	6839      	ldr	r1, [r7, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	68ba      	ldr	r2, [r7, #8]
 8007a6e:	9202      	str	r2, [sp, #8]
 8007a70:	9301      	str	r3, [sp, #4]
 8007a72:	2300      	movs	r3, #0
 8007a74:	9300      	str	r3, [sp, #0]
 8007a76:	2300      	movs	r3, #0
 8007a78:	460a      	mov	r2, r1
 8007a7a:	4924      	ldr	r1, [pc, #144]	@ (8007b0c <vTaskStartScheduler+0xc0>)
 8007a7c:	4824      	ldr	r0, [pc, #144]	@ (8007b10 <vTaskStartScheduler+0xc4>)
 8007a7e:	f7ff fdf1 	bl	8007664 <xTaskCreateStatic>
 8007a82:	4603      	mov	r3, r0
 8007a84:	4a23      	ldr	r2, [pc, #140]	@ (8007b14 <vTaskStartScheduler+0xc8>)
 8007a86:	6013      	str	r3, [r2, #0]
=======
 8007a5e:	463a      	mov	r2, r7
 8007a60:	1d39      	adds	r1, r7, #4
 8007a62:	f107 0308 	add.w	r3, r7, #8
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7ff f81c 	bl	8006aa4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007a6c:	6839      	ldr	r1, [r7, #0]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	68ba      	ldr	r2, [r7, #8]
 8007a72:	9202      	str	r2, [sp, #8]
 8007a74:	9301      	str	r3, [sp, #4]
 8007a76:	2300      	movs	r3, #0
 8007a78:	9300      	str	r3, [sp, #0]
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	460a      	mov	r2, r1
 8007a7e:	4924      	ldr	r1, [pc, #144]	@ (8007b10 <vTaskStartScheduler+0xc0>)
 8007a80:	4824      	ldr	r0, [pc, #144]	@ (8007b14 <vTaskStartScheduler+0xc4>)
 8007a82:	f7ff fdf1 	bl	8007668 <xTaskCreateStatic>
 8007a86:	4603      	mov	r3, r0
 8007a88:	4a23      	ldr	r2, [pc, #140]	@ (8007b18 <vTaskStartScheduler+0xc8>)
 8007a8a:	6013      	str	r3, [r2, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
<<<<<<< HEAD
 8007a88:	4b22      	ldr	r3, [pc, #136]	@ (8007b14 <vTaskStartScheduler+0xc8>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d002      	beq.n	8007a96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007a90:	2301      	movs	r3, #1
 8007a92:	617b      	str	r3, [r7, #20]
 8007a94:	e001      	b.n	8007a9a <vTaskStartScheduler+0x4e>
=======
 8007a8c:	4b22      	ldr	r3, [pc, #136]	@ (8007b18 <vTaskStartScheduler+0xc8>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d002      	beq.n	8007a9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007a94:	2301      	movs	r3, #1
 8007a96:	617b      	str	r3, [r7, #20]
 8007a98:	e001      	b.n	8007a9e <vTaskStartScheduler+0x4e>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		}
		else
		{
			xReturn = pdFAIL;
<<<<<<< HEAD
 8007a96:	2300      	movs	r3, #0
 8007a98:	617b      	str	r3, [r7, #20]
=======
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	617b      	str	r3, [r7, #20]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
<<<<<<< HEAD
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d102      	bne.n	8007aa6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007aa0:	f000 fd1a 	bl	80084d8 <xTimerCreateTimerTask>
 8007aa4:	6178      	str	r0, [r7, #20]
=======
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d102      	bne.n	8007aaa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007aa4:	f000 fd1a 	bl	80084dc <xTimerCreateTimerTask>
 8007aa8:	6178      	str	r0, [r7, #20]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
<<<<<<< HEAD
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d11b      	bne.n	8007ae4 <vTaskStartScheduler+0x98>
	__asm volatile
 8007aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab0:	f383 8811 	msr	BASEPRI, r3
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	613b      	str	r3, [r7, #16]
}
 8007abe:	bf00      	nop
=======
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d11b      	bne.n	8007ae8 <vTaskStartScheduler+0x98>
	__asm volatile
 8007ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab4:	f383 8811 	msr	BASEPRI, r3
 8007ab8:	f3bf 8f6f 	isb	sy
 8007abc:	f3bf 8f4f 	dsb	sy
 8007ac0:	613b      	str	r3, [r7, #16]
}
 8007ac2:	bf00      	nop
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
<<<<<<< HEAD
 8007ac0:	4b15      	ldr	r3, [pc, #84]	@ (8007b18 <vTaskStartScheduler+0xcc>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	3354      	adds	r3, #84	@ 0x54
 8007ac6:	4a15      	ldr	r2, [pc, #84]	@ (8007b1c <vTaskStartScheduler+0xd0>)
 8007ac8:	6013      	str	r3, [r2, #0]
=======
 8007ac4:	4b15      	ldr	r3, [pc, #84]	@ (8007b1c <vTaskStartScheduler+0xcc>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	3354      	adds	r3, #84	@ 0x54
 8007aca:	4a15      	ldr	r2, [pc, #84]	@ (8007b20 <vTaskStartScheduler+0xd0>)
 8007acc:	6013      	str	r3, [r2, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< HEAD
 8007aca:	4b15      	ldr	r3, [pc, #84]	@ (8007b20 <vTaskStartScheduler+0xd4>)
 8007acc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ad0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007ad2:	4b14      	ldr	r3, [pc, #80]	@ (8007b24 <vTaskStartScheduler+0xd8>)
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007ad8:	4b13      	ldr	r3, [pc, #76]	@ (8007b28 <vTaskStartScheduler+0xdc>)
 8007ada:	2200      	movs	r2, #0
 8007adc:	601a      	str	r2, [r3, #0]
=======
 8007ace:	4b15      	ldr	r3, [pc, #84]	@ (8007b24 <vTaskStartScheduler+0xd4>)
 8007ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ad4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007ad6:	4b14      	ldr	r3, [pc, #80]	@ (8007b28 <vTaskStartScheduler+0xd8>)
 8007ad8:	2201      	movs	r2, #1
 8007ada:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007adc:	4b13      	ldr	r3, [pc, #76]	@ (8007b2c <vTaskStartScheduler+0xdc>)
 8007ade:	2200      	movs	r2, #0
 8007ae0:	601a      	str	r2, [r3, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
<<<<<<< HEAD
 8007ade:	f001 f8df 	bl	8008ca0 <xPortStartScheduler>
=======
 8007ae2:	f001 f8e5 	bl	8008cb0 <xPortStartScheduler>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
<<<<<<< HEAD
 8007ae2:	e00f      	b.n	8007b04 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aea:	d10b      	bne.n	8007b04 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af0:	f383 8811 	msr	BASEPRI, r3
 8007af4:	f3bf 8f6f 	isb	sy
 8007af8:	f3bf 8f4f 	dsb	sy
 8007afc:	60fb      	str	r3, [r7, #12]
}
 8007afe:	bf00      	nop
 8007b00:	bf00      	nop
 8007b02:	e7fd      	b.n	8007b00 <vTaskStartScheduler+0xb4>
}
 8007b04:	bf00      	nop
 8007b06:	3718      	adds	r7, #24
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	0800c22c 	.word	0x0800c22c
 8007b10:	0800815d 	.word	0x0800815d
 8007b14:	20001188 	.word	0x20001188
 8007b18:	20000c90 	.word	0x20000c90
 8007b1c:	2000001c 	.word	0x2000001c
 8007b20:	20001184 	.word	0x20001184
 8007b24:	20001170 	.word	0x20001170
 8007b28:	20001168 	.word	0x20001168

08007b2c <vTaskSuspendAll>:
=======
 8007ae6:	e00f      	b.n	8007b08 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aee:	d10b      	bne.n	8007b08 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af4:	f383 8811 	msr	BASEPRI, r3
 8007af8:	f3bf 8f6f 	isb	sy
 8007afc:	f3bf 8f4f 	dsb	sy
 8007b00:	60fb      	str	r3, [r7, #12]
}
 8007b02:	bf00      	nop
 8007b04:	bf00      	nop
 8007b06:	e7fd      	b.n	8007b04 <vTaskStartScheduler+0xb4>
}
 8007b08:	bf00      	nop
 8007b0a:	3718      	adds	r7, #24
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	0800c30c 	.word	0x0800c30c
 8007b14:	08008161 	.word	0x08008161
 8007b18:	20001190 	.word	0x20001190
 8007b1c:	20000c98 	.word	0x20000c98
 8007b20:	2000001c 	.word	0x2000001c
 8007b24:	2000118c 	.word	0x2000118c
 8007b28:	20001178 	.word	0x20001178
 8007b2c:	20001170 	.word	0x20001170

08007b30 <vTaskSuspendAll>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
<<<<<<< HEAD
 8007b2c:	b480      	push	{r7}
 8007b2e:	af00      	add	r7, sp, #0
=======
 8007b30:	b480      	push	{r7}
 8007b32:	af00      	add	r7, sp, #0
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
<<<<<<< HEAD
 8007b30:	4b04      	ldr	r3, [pc, #16]	@ (8007b44 <vTaskSuspendAll+0x18>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	3301      	adds	r3, #1
 8007b36:	4a03      	ldr	r2, [pc, #12]	@ (8007b44 <vTaskSuspendAll+0x18>)
 8007b38:	6013      	str	r3, [r2, #0]
=======
 8007b34:	4b04      	ldr	r3, [pc, #16]	@ (8007b48 <vTaskSuspendAll+0x18>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	4a03      	ldr	r2, [pc, #12]	@ (8007b48 <vTaskSuspendAll+0x18>)
 8007b3c:	6013      	str	r3, [r2, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
<<<<<<< HEAD
 8007b3a:	bf00      	nop
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr
 8007b44:	2000118c 	.word	0x2000118c

08007b48 <xTaskResumeAll>:
=======
 8007b3e:	bf00      	nop
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr
 8007b48:	20001194 	.word	0x20001194

08007b4c <xTaskResumeAll>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
<<<<<<< HEAD
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007b52:	2300      	movs	r3, #0
 8007b54:	60bb      	str	r3, [r7, #8]
=======
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007b52:	2300      	movs	r3, #0
 8007b54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007b56:	2300      	movs	r3, #0
 8007b58:	60bb      	str	r3, [r7, #8]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
<<<<<<< HEAD
 8007b56:	4b42      	ldr	r3, [pc, #264]	@ (8007c60 <xTaskResumeAll+0x118>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d10b      	bne.n	8007b76 <xTaskResumeAll+0x2e>
	__asm volatile
 8007b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	603b      	str	r3, [r7, #0]
}
 8007b70:	bf00      	nop
 8007b72:	bf00      	nop
 8007b74:	e7fd      	b.n	8007b72 <xTaskResumeAll+0x2a>
=======
 8007b5a:	4b42      	ldr	r3, [pc, #264]	@ (8007c64 <xTaskResumeAll+0x118>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10b      	bne.n	8007b7a <xTaskResumeAll+0x2e>
	__asm volatile
 8007b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b66:	f383 8811 	msr	BASEPRI, r3
 8007b6a:	f3bf 8f6f 	isb	sy
 8007b6e:	f3bf 8f4f 	dsb	sy
 8007b72:	603b      	str	r3, [r7, #0]
}
 8007b74:	bf00      	nop
 8007b76:	bf00      	nop
 8007b78:	e7fd      	b.n	8007b76 <xTaskResumeAll+0x2a>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 8007b76:	f001 f937 	bl	8008de8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007b7a:	4b39      	ldr	r3, [pc, #228]	@ (8007c60 <xTaskResumeAll+0x118>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	4a37      	ldr	r2, [pc, #220]	@ (8007c60 <xTaskResumeAll+0x118>)
 8007b82:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b84:	4b36      	ldr	r3, [pc, #216]	@ (8007c60 <xTaskResumeAll+0x118>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d162      	bne.n	8007c52 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007b8c:	4b35      	ldr	r3, [pc, #212]	@ (8007c64 <xTaskResumeAll+0x11c>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d05e      	beq.n	8007c52 <xTaskResumeAll+0x10a>
=======
 8007b7a:	f001 f93d 	bl	8008df8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007b7e:	4b39      	ldr	r3, [pc, #228]	@ (8007c64 <xTaskResumeAll+0x118>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3b01      	subs	r3, #1
 8007b84:	4a37      	ldr	r2, [pc, #220]	@ (8007c64 <xTaskResumeAll+0x118>)
 8007b86:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b88:	4b36      	ldr	r3, [pc, #216]	@ (8007c64 <xTaskResumeAll+0x118>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d162      	bne.n	8007c56 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007b90:	4b35      	ldr	r3, [pc, #212]	@ (8007c68 <xTaskResumeAll+0x11c>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d05e      	beq.n	8007c56 <xTaskResumeAll+0x10a>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
<<<<<<< HEAD
 8007b94:	e02f      	b.n	8007bf6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b96:	4b34      	ldr	r3, [pc, #208]	@ (8007c68 <xTaskResumeAll+0x120>)
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	3318      	adds	r3, #24
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7ff f83a 	bl	8006c1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	3304      	adds	r3, #4
 8007bac:	4618      	mov	r0, r3
 8007bae:	f7ff f835 	bl	8006c1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bb6:	4b2d      	ldr	r3, [pc, #180]	@ (8007c6c <xTaskResumeAll+0x124>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d903      	bls.n	8007bc6 <xTaskResumeAll+0x7e>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc2:	4a2a      	ldr	r2, [pc, #168]	@ (8007c6c <xTaskResumeAll+0x124>)
 8007bc4:	6013      	str	r3, [r2, #0]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bca:	4613      	mov	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4413      	add	r3, r2
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	4a27      	ldr	r2, [pc, #156]	@ (8007c70 <xTaskResumeAll+0x128>)
 8007bd4:	441a      	add	r2, r3
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	3304      	adds	r3, #4
 8007bda:	4619      	mov	r1, r3
 8007bdc:	4610      	mov	r0, r2
 8007bde:	f7fe ffc0 	bl	8006b62 <vListInsertEnd>
=======
 8007b98:	e02f      	b.n	8007bfa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b9a:	4b34      	ldr	r3, [pc, #208]	@ (8007c6c <xTaskResumeAll+0x120>)
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	3318      	adds	r3, #24
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7ff f83a 	bl	8006c20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	3304      	adds	r3, #4
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f7ff f835 	bl	8006c20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bba:	4b2d      	ldr	r3, [pc, #180]	@ (8007c70 <xTaskResumeAll+0x124>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d903      	bls.n	8007bca <xTaskResumeAll+0x7e>
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc6:	4a2a      	ldr	r2, [pc, #168]	@ (8007c70 <xTaskResumeAll+0x124>)
 8007bc8:	6013      	str	r3, [r2, #0]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bce:	4613      	mov	r3, r2
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	4413      	add	r3, r2
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	4a27      	ldr	r2, [pc, #156]	@ (8007c74 <xTaskResumeAll+0x128>)
 8007bd8:	441a      	add	r2, r3
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	3304      	adds	r3, #4
 8007bde:	4619      	mov	r1, r3
 8007be0:	4610      	mov	r0, r2
 8007be2:	f7fe ffc0 	bl	8006b66 <vListInsertEnd>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007be6:	4b23      	ldr	r3, [pc, #140]	@ (8007c74 <xTaskResumeAll+0x12c>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d302      	bcc.n	8007bf6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007bf0:	4b21      	ldr	r3, [pc, #132]	@ (8007c78 <xTaskResumeAll+0x130>)
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8007c68 <xTaskResumeAll+0x120>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1cb      	bne.n	8007b96 <xTaskResumeAll+0x4e>
=======
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bea:	4b23      	ldr	r3, [pc, #140]	@ (8007c78 <xTaskResumeAll+0x12c>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d302      	bcc.n	8007bfa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007bf4:	4b21      	ldr	r3, [pc, #132]	@ (8007c7c <xTaskResumeAll+0x130>)
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007bfa:	4b1c      	ldr	r3, [pc, #112]	@ (8007c6c <xTaskResumeAll+0x120>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1cb      	bne.n	8007b9a <xTaskResumeAll+0x4e>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
<<<<<<< HEAD
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d001      	beq.n	8007c08 <xTaskResumeAll+0xc0>
=======
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d001      	beq.n	8007c0c <xTaskResumeAll+0xc0>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
<<<<<<< HEAD
 8007c04:	f000 fb66 	bl	80082d4 <prvResetNextTaskUnblockTime>
=======
 8007c08:	f000 fb66 	bl	80082d8 <prvResetNextTaskUnblockTime>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
<<<<<<< HEAD
 8007c08:	4b1c      	ldr	r3, [pc, #112]	@ (8007c7c <xTaskResumeAll+0x134>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d010      	beq.n	8007c36 <xTaskResumeAll+0xee>
=======
 8007c0c:	4b1c      	ldr	r3, [pc, #112]	@ (8007c80 <xTaskResumeAll+0x134>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d010      	beq.n	8007c3a <xTaskResumeAll+0xee>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
<<<<<<< HEAD
 8007c14:	f000 f846 	bl	8007ca4 <xTaskIncrementTick>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d002      	beq.n	8007c24 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007c1e:	4b16      	ldr	r3, [pc, #88]	@ (8007c78 <xTaskResumeAll+0x130>)
 8007c20:	2201      	movs	r2, #1
 8007c22:	601a      	str	r2, [r3, #0]
=======
 8007c18:	f000 f846 	bl	8007ca8 <xTaskIncrementTick>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d002      	beq.n	8007c28 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007c22:	4b16      	ldr	r3, [pc, #88]	@ (8007c7c <xTaskResumeAll+0x130>)
 8007c24:	2201      	movs	r2, #1
 8007c26:	601a      	str	r2, [r3, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
<<<<<<< HEAD
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	3b01      	subs	r3, #1
 8007c28:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d1f1      	bne.n	8007c14 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007c30:	4b12      	ldr	r3, [pc, #72]	@ (8007c7c <xTaskResumeAll+0x134>)
 8007c32:	2200      	movs	r2, #0
 8007c34:	601a      	str	r2, [r3, #0]
=======
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d1f1      	bne.n	8007c18 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007c34:	4b12      	ldr	r3, [pc, #72]	@ (8007c80 <xTaskResumeAll+0x134>)
 8007c36:	2200      	movs	r2, #0
 8007c38:	601a      	str	r2, [r3, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
<<<<<<< HEAD
 8007c36:	4b10      	ldr	r3, [pc, #64]	@ (8007c78 <xTaskResumeAll+0x130>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d009      	beq.n	8007c52 <xTaskResumeAll+0x10a>
=======
 8007c3a:	4b10      	ldr	r3, [pc, #64]	@ (8007c7c <xTaskResumeAll+0x130>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d009      	beq.n	8007c56 <xTaskResumeAll+0x10a>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
<<<<<<< HEAD
 8007c3e:	2301      	movs	r3, #1
 8007c40:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007c42:	4b0f      	ldr	r3, [pc, #60]	@ (8007c80 <xTaskResumeAll+0x138>)
 8007c44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c48:	601a      	str	r2, [r3, #0]
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	f3bf 8f6f 	isb	sy
=======
 8007c42:	2301      	movs	r3, #1
 8007c44:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007c46:	4b0f      	ldr	r3, [pc, #60]	@ (8007c84 <xTaskResumeAll+0x138>)
 8007c48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c4c:	601a      	str	r2, [r3, #0]
 8007c4e:	f3bf 8f4f 	dsb	sy
 8007c52:	f3bf 8f6f 	isb	sy
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 8007c52:	f001 f8fb 	bl	8008e4c <vPortExitCritical>

	return xAlreadyYielded;
 8007c56:	68bb      	ldr	r3, [r7, #8]
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	2000118c 	.word	0x2000118c
 8007c64:	20001164 	.word	0x20001164
 8007c68:	20001124 	.word	0x20001124
 8007c6c:	2000116c 	.word	0x2000116c
 8007c70:	20000c94 	.word	0x20000c94
 8007c74:	20000c90 	.word	0x20000c90
 8007c78:	20001178 	.word	0x20001178
 8007c7c:	20001174 	.word	0x20001174
 8007c80:	e000ed04 	.word	0xe000ed04

08007c84 <xTaskGetTickCount>:
=======
 8007c56:	f001 f901 	bl	8008e5c <vPortExitCritical>

	return xAlreadyYielded;
 8007c5a:	68bb      	ldr	r3, [r7, #8]
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3710      	adds	r7, #16
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	20001194 	.word	0x20001194
 8007c68:	2000116c 	.word	0x2000116c
 8007c6c:	2000112c 	.word	0x2000112c
 8007c70:	20001174 	.word	0x20001174
 8007c74:	20000c9c 	.word	0x20000c9c
 8007c78:	20000c98 	.word	0x20000c98
 8007c7c:	20001180 	.word	0x20001180
 8007c80:	2000117c 	.word	0x2000117c
 8007c84:	e000ed04 	.word	0xe000ed04

08007c88 <xTaskGetTickCount>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
<<<<<<< HEAD
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
=======
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
<<<<<<< HEAD
 8007c8a:	4b05      	ldr	r3, [pc, #20]	@ (8007ca0 <xTaskGetTickCount+0x1c>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	607b      	str	r3, [r7, #4]
=======
 8007c8e:	4b05      	ldr	r3, [pc, #20]	@ (8007ca4 <xTaskGetTickCount+0x1c>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	607b      	str	r3, [r7, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
<<<<<<< HEAD
 8007c90:	687b      	ldr	r3, [r7, #4]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	370c      	adds	r7, #12
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	20001168 	.word	0x20001168

08007ca4 <xTaskIncrementTick>:
=======
 8007c94:	687b      	ldr	r3, [r7, #4]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	370c      	adds	r7, #12
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop
 8007ca4:	20001170 	.word	0x20001170

08007ca8 <xTaskIncrementTick>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
<<<<<<< HEAD
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b086      	sub	sp, #24
 8007ca8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007caa:	2300      	movs	r3, #0
 8007cac:	617b      	str	r3, [r7, #20]
=======
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b086      	sub	sp, #24
 8007cac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	617b      	str	r3, [r7, #20]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< HEAD
 8007cae:	4b4f      	ldr	r3, [pc, #316]	@ (8007dec <xTaskIncrementTick+0x148>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	f040 8090 	bne.w	8007dd8 <xTaskIncrementTick+0x134>
=======
 8007cb2:	4b4f      	ldr	r3, [pc, #316]	@ (8007df0 <xTaskIncrementTick+0x148>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f040 8090 	bne.w	8007ddc <xTaskIncrementTick+0x134>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
<<<<<<< HEAD
 8007cb8:	4b4d      	ldr	r3, [pc, #308]	@ (8007df0 <xTaskIncrementTick+0x14c>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	613b      	str	r3, [r7, #16]
=======
 8007cbc:	4b4d      	ldr	r3, [pc, #308]	@ (8007df4 <xTaskIncrementTick+0x14c>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	613b      	str	r3, [r7, #16]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
<<<<<<< HEAD
 8007cc0:	4a4b      	ldr	r2, [pc, #300]	@ (8007df0 <xTaskIncrementTick+0x14c>)
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d121      	bne.n	8007d10 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007ccc:	4b49      	ldr	r3, [pc, #292]	@ (8007df4 <xTaskIncrementTick+0x150>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00b      	beq.n	8007cee <xTaskIncrementTick+0x4a>
	__asm volatile
 8007cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cda:	f383 8811 	msr	BASEPRI, r3
 8007cde:	f3bf 8f6f 	isb	sy
 8007ce2:	f3bf 8f4f 	dsb	sy
 8007ce6:	603b      	str	r3, [r7, #0]
}
 8007ce8:	bf00      	nop
 8007cea:	bf00      	nop
 8007cec:	e7fd      	b.n	8007cea <xTaskIncrementTick+0x46>
 8007cee:	4b41      	ldr	r3, [pc, #260]	@ (8007df4 <xTaskIncrementTick+0x150>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	60fb      	str	r3, [r7, #12]
 8007cf4:	4b40      	ldr	r3, [pc, #256]	@ (8007df8 <xTaskIncrementTick+0x154>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a3e      	ldr	r2, [pc, #248]	@ (8007df4 <xTaskIncrementTick+0x150>)
 8007cfa:	6013      	str	r3, [r2, #0]
 8007cfc:	4a3e      	ldr	r2, [pc, #248]	@ (8007df8 <xTaskIncrementTick+0x154>)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6013      	str	r3, [r2, #0]
 8007d02:	4b3e      	ldr	r3, [pc, #248]	@ (8007dfc <xTaskIncrementTick+0x158>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	3301      	adds	r3, #1
 8007d08:	4a3c      	ldr	r2, [pc, #240]	@ (8007dfc <xTaskIncrementTick+0x158>)
 8007d0a:	6013      	str	r3, [r2, #0]
 8007d0c:	f000 fae2 	bl	80082d4 <prvResetNextTaskUnblockTime>
=======
 8007cc4:	4a4b      	ldr	r2, [pc, #300]	@ (8007df4 <xTaskIncrementTick+0x14c>)
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d121      	bne.n	8007d14 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007cd0:	4b49      	ldr	r3, [pc, #292]	@ (8007df8 <xTaskIncrementTick+0x150>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00b      	beq.n	8007cf2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8007cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cde:	f383 8811 	msr	BASEPRI, r3
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	f3bf 8f4f 	dsb	sy
 8007cea:	603b      	str	r3, [r7, #0]
}
 8007cec:	bf00      	nop
 8007cee:	bf00      	nop
 8007cf0:	e7fd      	b.n	8007cee <xTaskIncrementTick+0x46>
 8007cf2:	4b41      	ldr	r3, [pc, #260]	@ (8007df8 <xTaskIncrementTick+0x150>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	60fb      	str	r3, [r7, #12]
 8007cf8:	4b40      	ldr	r3, [pc, #256]	@ (8007dfc <xTaskIncrementTick+0x154>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a3e      	ldr	r2, [pc, #248]	@ (8007df8 <xTaskIncrementTick+0x150>)
 8007cfe:	6013      	str	r3, [r2, #0]
 8007d00:	4a3e      	ldr	r2, [pc, #248]	@ (8007dfc <xTaskIncrementTick+0x154>)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6013      	str	r3, [r2, #0]
 8007d06:	4b3e      	ldr	r3, [pc, #248]	@ (8007e00 <xTaskIncrementTick+0x158>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	4a3c      	ldr	r2, [pc, #240]	@ (8007e00 <xTaskIncrementTick+0x158>)
 8007d0e:	6013      	str	r3, [r2, #0]
 8007d10:	f000 fae2 	bl	80082d8 <prvResetNextTaskUnblockTime>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
<<<<<<< HEAD
 8007d10:	4b3b      	ldr	r3, [pc, #236]	@ (8007e00 <xTaskIncrementTick+0x15c>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	693a      	ldr	r2, [r7, #16]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d349      	bcc.n	8007dae <xTaskIncrementTick+0x10a>
=======
 8007d14:	4b3b      	ldr	r3, [pc, #236]	@ (8007e04 <xTaskIncrementTick+0x15c>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	693a      	ldr	r2, [r7, #16]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d349      	bcc.n	8007db2 <xTaskIncrementTick+0x10a>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
<<<<<<< HEAD
 8007d1a:	4b36      	ldr	r3, [pc, #216]	@ (8007df4 <xTaskIncrementTick+0x150>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d104      	bne.n	8007d2e <xTaskIncrementTick+0x8a>
=======
 8007d1e:	4b36      	ldr	r3, [pc, #216]	@ (8007df8 <xTaskIncrementTick+0x150>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d104      	bne.n	8007d32 <xTaskIncrementTick+0x8a>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 8007d24:	4b36      	ldr	r3, [pc, #216]	@ (8007e00 <xTaskIncrementTick+0x15c>)
 8007d26:	f04f 32ff 	mov.w	r2, #4294967295
 8007d2a:	601a      	str	r2, [r3, #0]
					break;
 8007d2c:	e03f      	b.n	8007dae <xTaskIncrementTick+0x10a>
=======
 8007d28:	4b36      	ldr	r3, [pc, #216]	@ (8007e04 <xTaskIncrementTick+0x15c>)
 8007d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d2e:	601a      	str	r2, [r3, #0]
					break;
 8007d30:	e03f      	b.n	8007db2 <xTaskIncrementTick+0x10a>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< HEAD
 8007d2e:	4b31      	ldr	r3, [pc, #196]	@ (8007df4 <xTaskIncrementTick+0x150>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007d3e:	693a      	ldr	r2, [r7, #16]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d203      	bcs.n	8007d4e <xTaskIncrementTick+0xaa>
=======
 8007d32:	4b31      	ldr	r3, [pc, #196]	@ (8007df8 <xTaskIncrementTick+0x150>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007d42:	693a      	ldr	r2, [r7, #16]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d203      	bcs.n	8007d52 <xTaskIncrementTick+0xaa>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
<<<<<<< HEAD
 8007d46:	4a2e      	ldr	r2, [pc, #184]	@ (8007e00 <xTaskIncrementTick+0x15c>)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007d4c:	e02f      	b.n	8007dae <xTaskIncrementTick+0x10a>
=======
 8007d4a:	4a2e      	ldr	r2, [pc, #184]	@ (8007e04 <xTaskIncrementTick+0x15c>)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007d50:	e02f      	b.n	8007db2 <xTaskIncrementTick+0x10a>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
<<<<<<< HEAD
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	3304      	adds	r3, #4
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7fe ff62 	bl	8006c1c <uxListRemove>
=======
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	3304      	adds	r3, #4
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7fe ff62 	bl	8006c20 <uxListRemove>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
<<<<<<< HEAD
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d004      	beq.n	8007d6a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	3318      	adds	r3, #24
 8007d64:	4618      	mov	r0, r3
 8007d66:	f7fe ff59 	bl	8006c1c <uxListRemove>
=======
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d004      	beq.n	8007d6e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	3318      	adds	r3, #24
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f7fe ff59 	bl	8006c20 <uxListRemove>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
<<<<<<< HEAD
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d6e:	4b25      	ldr	r3, [pc, #148]	@ (8007e04 <xTaskIncrementTick+0x160>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d903      	bls.n	8007d7e <xTaskIncrementTick+0xda>
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d7a:	4a22      	ldr	r2, [pc, #136]	@ (8007e04 <xTaskIncrementTick+0x160>)
 8007d7c:	6013      	str	r3, [r2, #0]
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d82:	4613      	mov	r3, r2
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	4413      	add	r3, r2
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	4a1f      	ldr	r2, [pc, #124]	@ (8007e08 <xTaskIncrementTick+0x164>)
 8007d8c:	441a      	add	r2, r3
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	3304      	adds	r3, #4
 8007d92:	4619      	mov	r1, r3
 8007d94:	4610      	mov	r0, r2
 8007d96:	f7fe fee4 	bl	8006b62 <vListInsertEnd>
=======
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d72:	4b25      	ldr	r3, [pc, #148]	@ (8007e08 <xTaskIncrementTick+0x160>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d903      	bls.n	8007d82 <xTaskIncrementTick+0xda>
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d7e:	4a22      	ldr	r2, [pc, #136]	@ (8007e08 <xTaskIncrementTick+0x160>)
 8007d80:	6013      	str	r3, [r2, #0]
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d86:	4613      	mov	r3, r2
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	4413      	add	r3, r2
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	4a1f      	ldr	r2, [pc, #124]	@ (8007e0c <xTaskIncrementTick+0x164>)
 8007d90:	441a      	add	r2, r3
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	3304      	adds	r3, #4
 8007d96:	4619      	mov	r1, r3
 8007d98:	4610      	mov	r0, r2
 8007d9a:	f7fe fee4 	bl	8006b66 <vListInsertEnd>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8007e0c <xTaskIncrementTick+0x168>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d3b8      	bcc.n	8007d1a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007da8:	2301      	movs	r3, #1
 8007daa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007dac:	e7b5      	b.n	8007d1a <xTaskIncrementTick+0x76>
=======
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007da2:	4b1b      	ldr	r3, [pc, #108]	@ (8007e10 <xTaskIncrementTick+0x168>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d3b8      	bcc.n	8007d1e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007dac:	2301      	movs	r3, #1
 8007dae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007db0:	e7b5      	b.n	8007d1e <xTaskIncrementTick+0x76>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< HEAD
 8007dae:	4b17      	ldr	r3, [pc, #92]	@ (8007e0c <xTaskIncrementTick+0x168>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007db4:	4914      	ldr	r1, [pc, #80]	@ (8007e08 <xTaskIncrementTick+0x164>)
 8007db6:	4613      	mov	r3, r2
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	4413      	add	r3, r2
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	440b      	add	r3, r1
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d901      	bls.n	8007dca <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	617b      	str	r3, [r7, #20]
=======
 8007db2:	4b17      	ldr	r3, [pc, #92]	@ (8007e10 <xTaskIncrementTick+0x168>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007db8:	4914      	ldr	r1, [pc, #80]	@ (8007e0c <xTaskIncrementTick+0x164>)
 8007dba:	4613      	mov	r3, r2
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	4413      	add	r3, r2
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	440b      	add	r3, r1
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d901      	bls.n	8007dce <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	617b      	str	r3, [r7, #20]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
<<<<<<< HEAD
 8007dca:	4b11      	ldr	r3, [pc, #68]	@ (8007e10 <xTaskIncrementTick+0x16c>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d007      	beq.n	8007de2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	617b      	str	r3, [r7, #20]
 8007dd6:	e004      	b.n	8007de2 <xTaskIncrementTick+0x13e>
=======
 8007dce:	4b11      	ldr	r3, [pc, #68]	@ (8007e14 <xTaskIncrementTick+0x16c>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d007      	beq.n	8007de6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	617b      	str	r3, [r7, #20]
 8007dda:	e004      	b.n	8007de6 <xTaskIncrementTick+0x13e>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
<<<<<<< HEAD
 8007dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8007e14 <xTaskIncrementTick+0x170>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	4a0d      	ldr	r2, [pc, #52]	@ (8007e14 <xTaskIncrementTick+0x170>)
 8007de0:	6013      	str	r3, [r2, #0]
=======
 8007ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8007e18 <xTaskIncrementTick+0x170>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	3301      	adds	r3, #1
 8007de2:	4a0d      	ldr	r2, [pc, #52]	@ (8007e18 <xTaskIncrementTick+0x170>)
 8007de4:	6013      	str	r3, [r2, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
<<<<<<< HEAD
 8007de2:	697b      	ldr	r3, [r7, #20]
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3718      	adds	r7, #24
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	2000118c 	.word	0x2000118c
 8007df0:	20001168 	.word	0x20001168
 8007df4:	2000111c 	.word	0x2000111c
 8007df8:	20001120 	.word	0x20001120
 8007dfc:	2000117c 	.word	0x2000117c
 8007e00:	20001184 	.word	0x20001184
 8007e04:	2000116c 	.word	0x2000116c
 8007e08:	20000c94 	.word	0x20000c94
 8007e0c:	20000c90 	.word	0x20000c90
 8007e10:	20001178 	.word	0x20001178
 8007e14:	20001174 	.word	0x20001174

08007e18 <vTaskSwitchContext>:
=======
 8007de6:	697b      	ldr	r3, [r7, #20]
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3718      	adds	r7, #24
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	20001194 	.word	0x20001194
 8007df4:	20001170 	.word	0x20001170
 8007df8:	20001124 	.word	0x20001124
 8007dfc:	20001128 	.word	0x20001128
 8007e00:	20001184 	.word	0x20001184
 8007e04:	2000118c 	.word	0x2000118c
 8007e08:	20001174 	.word	0x20001174
 8007e0c:	20000c9c 	.word	0x20000c9c
 8007e10:	20000c98 	.word	0x20000c98
 8007e14:	20001180 	.word	0x20001180
 8007e18:	2000117c 	.word	0x2000117c

08007e1c <vTaskSwitchContext>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
<<<<<<< HEAD
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007e1e:	4b2b      	ldr	r3, [pc, #172]	@ (8007ecc <vTaskSwitchContext+0xb4>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d003      	beq.n	8007e2e <vTaskSwitchContext+0x16>
=======
 8007e1c:	b480      	push	{r7}
 8007e1e:	b085      	sub	sp, #20
 8007e20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007e22:	4b2b      	ldr	r3, [pc, #172]	@ (8007ed0 <vTaskSwitchContext+0xb4>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d003      	beq.n	8007e32 <vTaskSwitchContext+0x16>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
<<<<<<< HEAD
 8007e26:	4b2a      	ldr	r3, [pc, #168]	@ (8007ed0 <vTaskSwitchContext+0xb8>)
 8007e28:	2201      	movs	r2, #1
 8007e2a:	601a      	str	r2, [r3, #0]
=======
 8007e2a:	4b2a      	ldr	r3, [pc, #168]	@ (8007ed4 <vTaskSwitchContext+0xb8>)
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	601a      	str	r2, [r3, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
<<<<<<< HEAD
 8007e2c:	e047      	b.n	8007ebe <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007e2e:	4b28      	ldr	r3, [pc, #160]	@ (8007ed0 <vTaskSwitchContext+0xb8>)
 8007e30:	2200      	movs	r2, #0
 8007e32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e34:	4b27      	ldr	r3, [pc, #156]	@ (8007ed4 <vTaskSwitchContext+0xbc>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	60fb      	str	r3, [r7, #12]
 8007e3a:	e011      	b.n	8007e60 <vTaskSwitchContext+0x48>
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d10b      	bne.n	8007e5a <vTaskSwitchContext+0x42>
	__asm volatile
 8007e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e46:	f383 8811 	msr	BASEPRI, r3
 8007e4a:	f3bf 8f6f 	isb	sy
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	607b      	str	r3, [r7, #4]
}
 8007e54:	bf00      	nop
 8007e56:	bf00      	nop
 8007e58:	e7fd      	b.n	8007e56 <vTaskSwitchContext+0x3e>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	60fb      	str	r3, [r7, #12]
 8007e60:	491d      	ldr	r1, [pc, #116]	@ (8007ed8 <vTaskSwitchContext+0xc0>)
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	4613      	mov	r3, r2
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	4413      	add	r3, r2
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	440b      	add	r3, r1
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d0e3      	beq.n	8007e3c <vTaskSwitchContext+0x24>
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	4613      	mov	r3, r2
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	4413      	add	r3, r2
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	4a16      	ldr	r2, [pc, #88]	@ (8007ed8 <vTaskSwitchContext+0xc0>)
 8007e80:	4413      	add	r3, r2
 8007e82:	60bb      	str	r3, [r7, #8]
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	685a      	ldr	r2, [r3, #4]
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	605a      	str	r2, [r3, #4]
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	685a      	ldr	r2, [r3, #4]
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	3308      	adds	r3, #8
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d104      	bne.n	8007ea4 <vTaskSwitchContext+0x8c>
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	685a      	ldr	r2, [r3, #4]
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	605a      	str	r2, [r3, #4]
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	4a0c      	ldr	r2, [pc, #48]	@ (8007edc <vTaskSwitchContext+0xc4>)
 8007eac:	6013      	str	r3, [r2, #0]
 8007eae:	4a09      	ldr	r2, [pc, #36]	@ (8007ed4 <vTaskSwitchContext+0xbc>)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007eb4:	4b09      	ldr	r3, [pc, #36]	@ (8007edc <vTaskSwitchContext+0xc4>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	3354      	adds	r3, #84	@ 0x54
 8007eba:	4a09      	ldr	r2, [pc, #36]	@ (8007ee0 <vTaskSwitchContext+0xc8>)
 8007ebc:	6013      	str	r3, [r2, #0]
}
 8007ebe:	bf00      	nop
 8007ec0:	3714      	adds	r7, #20
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr
 8007eca:	bf00      	nop
 8007ecc:	2000118c 	.word	0x2000118c
 8007ed0:	20001178 	.word	0x20001178
 8007ed4:	2000116c 	.word	0x2000116c
 8007ed8:	20000c94 	.word	0x20000c94
 8007edc:	20000c90 	.word	0x20000c90
 8007ee0:	2000001c 	.word	0x2000001c

08007ee4 <vTaskPlaceOnEventList>:
=======
 8007e30:	e047      	b.n	8007ec2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007e32:	4b28      	ldr	r3, [pc, #160]	@ (8007ed4 <vTaskSwitchContext+0xb8>)
 8007e34:	2200      	movs	r2, #0
 8007e36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e38:	4b27      	ldr	r3, [pc, #156]	@ (8007ed8 <vTaskSwitchContext+0xbc>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	60fb      	str	r3, [r7, #12]
 8007e3e:	e011      	b.n	8007e64 <vTaskSwitchContext+0x48>
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d10b      	bne.n	8007e5e <vTaskSwitchContext+0x42>
	__asm volatile
 8007e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e4a:	f383 8811 	msr	BASEPRI, r3
 8007e4e:	f3bf 8f6f 	isb	sy
 8007e52:	f3bf 8f4f 	dsb	sy
 8007e56:	607b      	str	r3, [r7, #4]
}
 8007e58:	bf00      	nop
 8007e5a:	bf00      	nop
 8007e5c:	e7fd      	b.n	8007e5a <vTaskSwitchContext+0x3e>
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	3b01      	subs	r3, #1
 8007e62:	60fb      	str	r3, [r7, #12]
 8007e64:	491d      	ldr	r1, [pc, #116]	@ (8007edc <vTaskSwitchContext+0xc0>)
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	4613      	mov	r3, r2
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	4413      	add	r3, r2
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	440b      	add	r3, r1
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d0e3      	beq.n	8007e40 <vTaskSwitchContext+0x24>
 8007e78:	68fa      	ldr	r2, [r7, #12]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	4413      	add	r3, r2
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	4a16      	ldr	r2, [pc, #88]	@ (8007edc <vTaskSwitchContext+0xc0>)
 8007e84:	4413      	add	r3, r2
 8007e86:	60bb      	str	r3, [r7, #8]
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	685a      	ldr	r2, [r3, #4]
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	605a      	str	r2, [r3, #4]
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	685a      	ldr	r2, [r3, #4]
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	3308      	adds	r3, #8
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d104      	bne.n	8007ea8 <vTaskSwitchContext+0x8c>
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	685a      	ldr	r2, [r3, #4]
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	605a      	str	r2, [r3, #4]
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	4a0c      	ldr	r2, [pc, #48]	@ (8007ee0 <vTaskSwitchContext+0xc4>)
 8007eb0:	6013      	str	r3, [r2, #0]
 8007eb2:	4a09      	ldr	r2, [pc, #36]	@ (8007ed8 <vTaskSwitchContext+0xbc>)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007eb8:	4b09      	ldr	r3, [pc, #36]	@ (8007ee0 <vTaskSwitchContext+0xc4>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	3354      	adds	r3, #84	@ 0x54
 8007ebe:	4a09      	ldr	r2, [pc, #36]	@ (8007ee4 <vTaskSwitchContext+0xc8>)
 8007ec0:	6013      	str	r3, [r2, #0]
}
 8007ec2:	bf00      	nop
 8007ec4:	3714      	adds	r7, #20
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	20001194 	.word	0x20001194
 8007ed4:	20001180 	.word	0x20001180
 8007ed8:	20001174 	.word	0x20001174
 8007edc:	20000c9c 	.word	0x20000c9c
 8007ee0:	20000c98 	.word	0x20000c98
 8007ee4:	2000001c 	.word	0x2000001c

08007ee8 <vTaskPlaceOnEventList>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
<<<<<<< HEAD
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10b      	bne.n	8007f0c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef8:	f383 8811 	msr	BASEPRI, r3
 8007efc:	f3bf 8f6f 	isb	sy
 8007f00:	f3bf 8f4f 	dsb	sy
 8007f04:	60fb      	str	r3, [r7, #12]
}
 8007f06:	bf00      	nop
 8007f08:	bf00      	nop
 8007f0a:	e7fd      	b.n	8007f08 <vTaskPlaceOnEventList+0x24>
=======
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d10b      	bne.n	8007f10 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007efc:	f383 8811 	msr	BASEPRI, r3
 8007f00:	f3bf 8f6f 	isb	sy
 8007f04:	f3bf 8f4f 	dsb	sy
 8007f08:	60fb      	str	r3, [r7, #12]
}
 8007f0a:	bf00      	nop
 8007f0c:	bf00      	nop
 8007f0e:	e7fd      	b.n	8007f0c <vTaskPlaceOnEventList+0x24>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
<<<<<<< HEAD
 8007f0c:	4b07      	ldr	r3, [pc, #28]	@ (8007f2c <vTaskPlaceOnEventList+0x48>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	3318      	adds	r3, #24
 8007f12:	4619      	mov	r1, r3
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f7fe fe48 	bl	8006baa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007f1a:	2101      	movs	r1, #1
 8007f1c:	6838      	ldr	r0, [r7, #0]
 8007f1e:	f000 fa87 	bl	8008430 <prvAddCurrentTaskToDelayedList>
}
 8007f22:	bf00      	nop
 8007f24:	3710      	adds	r7, #16
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	20000c90 	.word	0x20000c90

08007f30 <vTaskPlaceOnEventListRestricted>:
=======
 8007f10:	4b07      	ldr	r3, [pc, #28]	@ (8007f30 <vTaskPlaceOnEventList+0x48>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	3318      	adds	r3, #24
 8007f16:	4619      	mov	r1, r3
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f7fe fe48 	bl	8006bae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007f1e:	2101      	movs	r1, #1
 8007f20:	6838      	ldr	r0, [r7, #0]
 8007f22:	f000 fa87 	bl	8008434 <prvAddCurrentTaskToDelayedList>
}
 8007f26:	bf00      	nop
 8007f28:	3710      	adds	r7, #16
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	20000c98 	.word	0x20000c98

08007f34 <vTaskPlaceOnEventListRestricted>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
<<<<<<< HEAD
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d10b      	bne.n	8007f5a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f46:	f383 8811 	msr	BASEPRI, r3
 8007f4a:	f3bf 8f6f 	isb	sy
 8007f4e:	f3bf 8f4f 	dsb	sy
 8007f52:	617b      	str	r3, [r7, #20]
}
 8007f54:	bf00      	nop
 8007f56:	bf00      	nop
 8007f58:	e7fd      	b.n	8007f56 <vTaskPlaceOnEventListRestricted+0x26>
=======
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b086      	sub	sp, #24
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d10b      	bne.n	8007f5e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f4a:	f383 8811 	msr	BASEPRI, r3
 8007f4e:	f3bf 8f6f 	isb	sy
 8007f52:	f3bf 8f4f 	dsb	sy
 8007f56:	617b      	str	r3, [r7, #20]
}
 8007f58:	bf00      	nop
 8007f5a:	bf00      	nop
 8007f5c:	e7fd      	b.n	8007f5a <vTaskPlaceOnEventListRestricted+0x26>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
<<<<<<< HEAD
 8007f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8007f84 <vTaskPlaceOnEventListRestricted+0x54>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	3318      	adds	r3, #24
 8007f60:	4619      	mov	r1, r3
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f7fe fdfd 	bl	8006b62 <vListInsertEnd>
=======
 8007f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8007f88 <vTaskPlaceOnEventListRestricted+0x54>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	3318      	adds	r3, #24
 8007f64:	4619      	mov	r1, r3
 8007f66:	68f8      	ldr	r0, [r7, #12]
 8007f68:	f7fe fdfd 	bl	8006b66 <vListInsertEnd>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
<<<<<<< HEAD
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d002      	beq.n	8007f74 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f72:	60bb      	str	r3, [r7, #8]
=======
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d002      	beq.n	8007f78 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007f72:	f04f 33ff 	mov.w	r3, #4294967295
 8007f76:	60bb      	str	r3, [r7, #8]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
<<<<<<< HEAD
 8007f74:	6879      	ldr	r1, [r7, #4]
 8007f76:	68b8      	ldr	r0, [r7, #8]
 8007f78:	f000 fa5a 	bl	8008430 <prvAddCurrentTaskToDelayedList>
	}
 8007f7c:	bf00      	nop
 8007f7e:	3718      	adds	r7, #24
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	20000c90 	.word	0x20000c90

08007f88 <xTaskRemoveFromEventList>:
=======
 8007f78:	6879      	ldr	r1, [r7, #4]
 8007f7a:	68b8      	ldr	r0, [r7, #8]
 8007f7c:	f000 fa5a 	bl	8008434 <prvAddCurrentTaskToDelayedList>
	}
 8007f80:	bf00      	nop
 8007f82:	3718      	adds	r7, #24
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	20000c98 	.word	0x20000c98

08007f8c <xTaskRemoveFromEventList>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
<<<<<<< HEAD
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b086      	sub	sp, #24
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
=======
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< HEAD
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d10b      	bne.n	8007fb6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fa2:	f383 8811 	msr	BASEPRI, r3
 8007fa6:	f3bf 8f6f 	isb	sy
 8007faa:	f3bf 8f4f 	dsb	sy
 8007fae:	60fb      	str	r3, [r7, #12]
}
 8007fb0:	bf00      	nop
 8007fb2:	bf00      	nop
 8007fb4:	e7fd      	b.n	8007fb2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	3318      	adds	r3, #24
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7fe fe2e 	bl	8006c1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8008038 <xTaskRemoveFromEventList+0xb0>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d11d      	bne.n	8008004 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	3304      	adds	r3, #4
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7fe fe25 	bl	8006c1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fd6:	4b19      	ldr	r3, [pc, #100]	@ (800803c <xTaskRemoveFromEventList+0xb4>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d903      	bls.n	8007fe6 <xTaskRemoveFromEventList+0x5e>
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fe2:	4a16      	ldr	r2, [pc, #88]	@ (800803c <xTaskRemoveFromEventList+0xb4>)
 8007fe4:	6013      	str	r3, [r2, #0]
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fea:	4613      	mov	r3, r2
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	4413      	add	r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4a13      	ldr	r2, [pc, #76]	@ (8008040 <xTaskRemoveFromEventList+0xb8>)
 8007ff4:	441a      	add	r2, r3
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	3304      	adds	r3, #4
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	4610      	mov	r0, r2
 8007ffe:	f7fe fdb0 	bl	8006b62 <vListInsertEnd>
 8008002:	e005      	b.n	8008010 <xTaskRemoveFromEventList+0x88>
=======
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d10b      	bne.n	8007fba <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fa6:	f383 8811 	msr	BASEPRI, r3
 8007faa:	f3bf 8f6f 	isb	sy
 8007fae:	f3bf 8f4f 	dsb	sy
 8007fb2:	60fb      	str	r3, [r7, #12]
}
 8007fb4:	bf00      	nop
 8007fb6:	bf00      	nop
 8007fb8:	e7fd      	b.n	8007fb6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	3318      	adds	r3, #24
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7fe fe2e 	bl	8006c20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800803c <xTaskRemoveFromEventList+0xb0>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d11d      	bne.n	8008008 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	3304      	adds	r3, #4
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7fe fe25 	bl	8006c20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fda:	4b19      	ldr	r3, [pc, #100]	@ (8008040 <xTaskRemoveFromEventList+0xb4>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d903      	bls.n	8007fea <xTaskRemoveFromEventList+0x5e>
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fe6:	4a16      	ldr	r2, [pc, #88]	@ (8008040 <xTaskRemoveFromEventList+0xb4>)
 8007fe8:	6013      	str	r3, [r2, #0]
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fee:	4613      	mov	r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4413      	add	r3, r2
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	4a13      	ldr	r2, [pc, #76]	@ (8008044 <xTaskRemoveFromEventList+0xb8>)
 8007ff8:	441a      	add	r2, r3
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	3304      	adds	r3, #4
 8007ffe:	4619      	mov	r1, r3
 8008000:	4610      	mov	r0, r2
 8008002:	f7fe fdb0 	bl	8006b66 <vListInsertEnd>
 8008006:	e005      	b.n	8008014 <xTaskRemoveFromEventList+0x88>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
<<<<<<< HEAD
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	3318      	adds	r3, #24
 8008008:	4619      	mov	r1, r3
 800800a:	480e      	ldr	r0, [pc, #56]	@ (8008044 <xTaskRemoveFromEventList+0xbc>)
 800800c:	f7fe fda9 	bl	8006b62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008014:	4b0c      	ldr	r3, [pc, #48]	@ (8008048 <xTaskRemoveFromEventList+0xc0>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800801a:	429a      	cmp	r2, r3
 800801c:	d905      	bls.n	800802a <xTaskRemoveFromEventList+0xa2>
=======
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	3318      	adds	r3, #24
 800800c:	4619      	mov	r1, r3
 800800e:	480e      	ldr	r0, [pc, #56]	@ (8008048 <xTaskRemoveFromEventList+0xbc>)
 8008010:	f7fe fda9 	bl	8006b66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008018:	4b0c      	ldr	r3, [pc, #48]	@ (800804c <xTaskRemoveFromEventList+0xc0>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800801e:	429a      	cmp	r2, r3
 8008020:	d905      	bls.n	800802e <xTaskRemoveFromEventList+0xa2>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
<<<<<<< HEAD
 800801e:	2301      	movs	r3, #1
 8008020:	617b      	str	r3, [r7, #20]
=======
 8008022:	2301      	movs	r3, #1
 8008024:	617b      	str	r3, [r7, #20]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
<<<<<<< HEAD
 8008022:	4b0a      	ldr	r3, [pc, #40]	@ (800804c <xTaskRemoveFromEventList+0xc4>)
 8008024:	2201      	movs	r2, #1
 8008026:	601a      	str	r2, [r3, #0]
 8008028:	e001      	b.n	800802e <xTaskRemoveFromEventList+0xa6>
=======
 8008026:	4b0a      	ldr	r3, [pc, #40]	@ (8008050 <xTaskRemoveFromEventList+0xc4>)
 8008028:	2201      	movs	r2, #1
 800802a:	601a      	str	r2, [r3, #0]
 800802c:	e001      	b.n	8008032 <xTaskRemoveFromEventList+0xa6>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	}
	else
	{
		xReturn = pdFALSE;
<<<<<<< HEAD
 800802a:	2300      	movs	r3, #0
 800802c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800802e:	697b      	ldr	r3, [r7, #20]
}
 8008030:	4618      	mov	r0, r3
 8008032:	3718      	adds	r7, #24
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	2000118c 	.word	0x2000118c
 800803c:	2000116c 	.word	0x2000116c
 8008040:	20000c94 	.word	0x20000c94
 8008044:	20001124 	.word	0x20001124
 8008048:	20000c90 	.word	0x20000c90
 800804c:	20001178 	.word	0x20001178

08008050 <vTaskInternalSetTimeOutState>:
=======
 800802e:	2300      	movs	r3, #0
 8008030:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008032:	697b      	ldr	r3, [r7, #20]
}
 8008034:	4618      	mov	r0, r3
 8008036:	3718      	adds	r7, #24
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	20001194 	.word	0x20001194
 8008040:	20001174 	.word	0x20001174
 8008044:	20000c9c 	.word	0x20000c9c
 8008048:	2000112c 	.word	0x2000112c
 800804c:	20000c98 	.word	0x20000c98
 8008050:	20001180 	.word	0x20001180

08008054 <vTaskInternalSetTimeOutState>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
<<<<<<< HEAD
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008058:	4b06      	ldr	r3, [pc, #24]	@ (8008074 <vTaskInternalSetTimeOutState+0x24>)
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008060:	4b05      	ldr	r3, [pc, #20]	@ (8008078 <vTaskInternalSetTimeOutState+0x28>)
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	605a      	str	r2, [r3, #4]
}
 8008068:	bf00      	nop
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr
 8008074:	2000117c 	.word	0x2000117c
 8008078:	20001168 	.word	0x20001168

0800807c <xTaskCheckForTimeOut>:
=======
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800805c:	4b06      	ldr	r3, [pc, #24]	@ (8008078 <vTaskInternalSetTimeOutState+0x24>)
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008064:	4b05      	ldr	r3, [pc, #20]	@ (800807c <vTaskInternalSetTimeOutState+0x28>)
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	605a      	str	r2, [r3, #4]
}
 800806c:	bf00      	nop
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr
 8008078:	20001184 	.word	0x20001184
 800807c:	20001170 	.word	0x20001170

08008080 <xTaskCheckForTimeOut>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
<<<<<<< HEAD
 800807c:	b580      	push	{r7, lr}
 800807e:	b088      	sub	sp, #32
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d10b      	bne.n	80080a4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800808c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008090:	f383 8811 	msr	BASEPRI, r3
 8008094:	f3bf 8f6f 	isb	sy
 8008098:	f3bf 8f4f 	dsb	sy
 800809c:	613b      	str	r3, [r7, #16]
}
 800809e:	bf00      	nop
 80080a0:	bf00      	nop
 80080a2:	e7fd      	b.n	80080a0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d10b      	bne.n	80080c2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80080aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ae:	f383 8811 	msr	BASEPRI, r3
 80080b2:	f3bf 8f6f 	isb	sy
 80080b6:	f3bf 8f4f 	dsb	sy
 80080ba:	60fb      	str	r3, [r7, #12]
}
 80080bc:	bf00      	nop
 80080be:	bf00      	nop
 80080c0:	e7fd      	b.n	80080be <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80080c2:	f000 fe91 	bl	8008de8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80080c6:	4b1d      	ldr	r3, [pc, #116]	@ (800813c <xTaskCheckForTimeOut+0xc0>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	69ba      	ldr	r2, [r7, #24]
 80080d2:	1ad3      	subs	r3, r2, r3
 80080d4:	617b      	str	r3, [r7, #20]
=======
 8008080:	b580      	push	{r7, lr}
 8008082:	b088      	sub	sp, #32
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d10b      	bne.n	80080a8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008094:	f383 8811 	msr	BASEPRI, r3
 8008098:	f3bf 8f6f 	isb	sy
 800809c:	f3bf 8f4f 	dsb	sy
 80080a0:	613b      	str	r3, [r7, #16]
}
 80080a2:	bf00      	nop
 80080a4:	bf00      	nop
 80080a6:	e7fd      	b.n	80080a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d10b      	bne.n	80080c6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80080ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b2:	f383 8811 	msr	BASEPRI, r3
 80080b6:	f3bf 8f6f 	isb	sy
 80080ba:	f3bf 8f4f 	dsb	sy
 80080be:	60fb      	str	r3, [r7, #12]
}
 80080c0:	bf00      	nop
 80080c2:	bf00      	nop
 80080c4:	e7fd      	b.n	80080c2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80080c6:	f000 fe97 	bl	8008df8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80080ca:	4b1d      	ldr	r3, [pc, #116]	@ (8008140 <xTaskCheckForTimeOut+0xc0>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	69ba      	ldr	r2, [r7, #24]
 80080d6:	1ad3      	subs	r3, r2, r3
 80080d8:	617b      	str	r3, [r7, #20]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
<<<<<<< HEAD
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080de:	d102      	bne.n	80080e6 <xTaskCheckForTimeOut+0x6a>
=======
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e2:	d102      	bne.n	80080ea <xTaskCheckForTimeOut+0x6a>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
<<<<<<< HEAD
 80080e0:	2300      	movs	r3, #0
 80080e2:	61fb      	str	r3, [r7, #28]
 80080e4:	e023      	b.n	800812e <xTaskCheckForTimeOut+0xb2>
=======
 80080e4:	2300      	movs	r3, #0
 80080e6:	61fb      	str	r3, [r7, #28]
 80080e8:	e023      	b.n	8008132 <xTaskCheckForTimeOut+0xb2>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
<<<<<<< HEAD
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	4b15      	ldr	r3, [pc, #84]	@ (8008140 <xTaskCheckForTimeOut+0xc4>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d007      	beq.n	8008102 <xTaskCheckForTimeOut+0x86>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	69ba      	ldr	r2, [r7, #24]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d302      	bcc.n	8008102 <xTaskCheckForTimeOut+0x86>
=======
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	4b15      	ldr	r3, [pc, #84]	@ (8008144 <xTaskCheckForTimeOut+0xc4>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d007      	beq.n	8008106 <xTaskCheckForTimeOut+0x86>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	69ba      	ldr	r2, [r7, #24]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d302      	bcc.n	8008106 <xTaskCheckForTimeOut+0x86>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
<<<<<<< HEAD
 80080fc:	2301      	movs	r3, #1
 80080fe:	61fb      	str	r3, [r7, #28]
 8008100:	e015      	b.n	800812e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	697a      	ldr	r2, [r7, #20]
 8008108:	429a      	cmp	r2, r3
 800810a:	d20b      	bcs.n	8008124 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	1ad2      	subs	r2, r2, r3
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f7ff ff99 	bl	8008050 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800811e:	2300      	movs	r3, #0
 8008120:	61fb      	str	r3, [r7, #28]
 8008122:	e004      	b.n	800812e <xTaskCheckForTimeOut+0xb2>
=======
 8008100:	2301      	movs	r3, #1
 8008102:	61fb      	str	r3, [r7, #28]
 8008104:	e015      	b.n	8008132 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	697a      	ldr	r2, [r7, #20]
 800810c:	429a      	cmp	r2, r3
 800810e:	d20b      	bcs.n	8008128 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	1ad2      	subs	r2, r2, r3
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f7ff ff99 	bl	8008054 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008122:	2300      	movs	r3, #0
 8008124:	61fb      	str	r3, [r7, #28]
 8008126:	e004      	b.n	8008132 <xTaskCheckForTimeOut+0xb2>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		}
		else
		{
			*pxTicksToWait = 0;
<<<<<<< HEAD
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	2200      	movs	r2, #0
 8008128:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800812a:	2301      	movs	r3, #1
 800812c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800812e:	f000 fe8d 	bl	8008e4c <vPortExitCritical>

	return xReturn;
 8008132:	69fb      	ldr	r3, [r7, #28]
}
 8008134:	4618      	mov	r0, r3
 8008136:	3720      	adds	r7, #32
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	20001168 	.word	0x20001168
 8008140:	2000117c 	.word	0x2000117c

08008144 <vTaskMissedYield>:
=======
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	2200      	movs	r2, #0
 800812c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800812e:	2301      	movs	r3, #1
 8008130:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008132:	f000 fe93 	bl	8008e5c <vPortExitCritical>

	return xReturn;
 8008136:	69fb      	ldr	r3, [r7, #28]
}
 8008138:	4618      	mov	r0, r3
 800813a:	3720      	adds	r7, #32
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}
 8008140:	20001170 	.word	0x20001170
 8008144:	20001184 	.word	0x20001184

08008148 <vTaskMissedYield>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
<<<<<<< HEAD
 8008144:	b480      	push	{r7}
 8008146:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008148:	4b03      	ldr	r3, [pc, #12]	@ (8008158 <vTaskMissedYield+0x14>)
 800814a:	2201      	movs	r2, #1
 800814c:	601a      	str	r2, [r3, #0]
}
 800814e:	bf00      	nop
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr
 8008158:	20001178 	.word	0x20001178

0800815c <prvIdleTask>:
=======
 8008148:	b480      	push	{r7}
 800814a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800814c:	4b03      	ldr	r3, [pc, #12]	@ (800815c <vTaskMissedYield+0x14>)
 800814e:	2201      	movs	r2, #1
 8008150:	601a      	str	r2, [r3, #0]
}
 8008152:	bf00      	nop
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr
 800815c:	20001180 	.word	0x20001180

08008160 <prvIdleTask>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
<<<<<<< HEAD
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
=======
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
<<<<<<< HEAD
 8008164:	f000 f852 	bl	800820c <prvCheckTasksWaitingTermination>
=======
 8008168:	f000 f852 	bl	8008210 <prvCheckTasksWaitingTermination>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< HEAD
 8008168:	4b06      	ldr	r3, [pc, #24]	@ (8008184 <prvIdleTask+0x28>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2b01      	cmp	r3, #1
 800816e:	d9f9      	bls.n	8008164 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008170:	4b05      	ldr	r3, [pc, #20]	@ (8008188 <prvIdleTask+0x2c>)
 8008172:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008176:	601a      	str	r2, [r3, #0]
 8008178:	f3bf 8f4f 	dsb	sy
 800817c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008180:	e7f0      	b.n	8008164 <prvIdleTask+0x8>
 8008182:	bf00      	nop
 8008184:	20000c94 	.word	0x20000c94
 8008188:	e000ed04 	.word	0xe000ed04

0800818c <prvInitialiseTaskLists>:
=======
 800816c:	4b06      	ldr	r3, [pc, #24]	@ (8008188 <prvIdleTask+0x28>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2b01      	cmp	r3, #1
 8008172:	d9f9      	bls.n	8008168 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008174:	4b05      	ldr	r3, [pc, #20]	@ (800818c <prvIdleTask+0x2c>)
 8008176:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800817a:	601a      	str	r2, [r3, #0]
 800817c:	f3bf 8f4f 	dsb	sy
 8008180:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008184:	e7f0      	b.n	8008168 <prvIdleTask+0x8>
 8008186:	bf00      	nop
 8008188:	20000c9c 	.word	0x20000c9c
 800818c:	e000ed04 	.word	0xe000ed04

08008190 <prvInitialiseTaskLists>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
<<<<<<< HEAD
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008192:	2300      	movs	r3, #0
 8008194:	607b      	str	r3, [r7, #4]
 8008196:	e00c      	b.n	80081b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	4613      	mov	r3, r2
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	4413      	add	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4a12      	ldr	r2, [pc, #72]	@ (80081ec <prvInitialiseTaskLists+0x60>)
 80081a4:	4413      	add	r3, r2
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7fe fcae 	bl	8006b08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	3301      	adds	r3, #1
 80081b0:	607b      	str	r3, [r7, #4]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2b37      	cmp	r3, #55	@ 0x37
 80081b6:	d9ef      	bls.n	8008198 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80081b8:	480d      	ldr	r0, [pc, #52]	@ (80081f0 <prvInitialiseTaskLists+0x64>)
 80081ba:	f7fe fca5 	bl	8006b08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80081be:	480d      	ldr	r0, [pc, #52]	@ (80081f4 <prvInitialiseTaskLists+0x68>)
 80081c0:	f7fe fca2 	bl	8006b08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80081c4:	480c      	ldr	r0, [pc, #48]	@ (80081f8 <prvInitialiseTaskLists+0x6c>)
 80081c6:	f7fe fc9f 	bl	8006b08 <vListInitialise>
=======
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008196:	2300      	movs	r3, #0
 8008198:	607b      	str	r3, [r7, #4]
 800819a:	e00c      	b.n	80081b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	4613      	mov	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4413      	add	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	4a12      	ldr	r2, [pc, #72]	@ (80081f0 <prvInitialiseTaskLists+0x60>)
 80081a8:	4413      	add	r3, r2
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7fe fcae 	bl	8006b0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	3301      	adds	r3, #1
 80081b4:	607b      	str	r3, [r7, #4]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2b37      	cmp	r3, #55	@ 0x37
 80081ba:	d9ef      	bls.n	800819c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80081bc:	480d      	ldr	r0, [pc, #52]	@ (80081f4 <prvInitialiseTaskLists+0x64>)
 80081be:	f7fe fca5 	bl	8006b0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80081c2:	480d      	ldr	r0, [pc, #52]	@ (80081f8 <prvInitialiseTaskLists+0x68>)
 80081c4:	f7fe fca2 	bl	8006b0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80081c8:	480c      	ldr	r0, [pc, #48]	@ (80081fc <prvInitialiseTaskLists+0x6c>)
 80081ca:	f7fe fc9f 	bl	8006b0c <vListInitialise>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
<<<<<<< HEAD
 80081ca:	480c      	ldr	r0, [pc, #48]	@ (80081fc <prvInitialiseTaskLists+0x70>)
 80081cc:	f7fe fc9c 	bl	8006b08 <vListInitialise>
=======
 80081ce:	480c      	ldr	r0, [pc, #48]	@ (8008200 <prvInitialiseTaskLists+0x70>)
 80081d0:	f7fe fc9c 	bl	8006b0c <vListInitialise>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
<<<<<<< HEAD
 80081d0:	480b      	ldr	r0, [pc, #44]	@ (8008200 <prvInitialiseTaskLists+0x74>)
 80081d2:	f7fe fc99 	bl	8006b08 <vListInitialise>
=======
 80081d4:	480b      	ldr	r0, [pc, #44]	@ (8008204 <prvInitialiseTaskLists+0x74>)
 80081d6:	f7fe fc99 	bl	8006b0c <vListInitialise>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
<<<<<<< HEAD
 80081d6:	4b0b      	ldr	r3, [pc, #44]	@ (8008204 <prvInitialiseTaskLists+0x78>)
 80081d8:	4a05      	ldr	r2, [pc, #20]	@ (80081f0 <prvInitialiseTaskLists+0x64>)
 80081da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80081dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008208 <prvInitialiseTaskLists+0x7c>)
 80081de:	4a05      	ldr	r2, [pc, #20]	@ (80081f4 <prvInitialiseTaskLists+0x68>)
 80081e0:	601a      	str	r2, [r3, #0]
}
 80081e2:	bf00      	nop
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	20000c94 	.word	0x20000c94
 80081f0:	200010f4 	.word	0x200010f4
 80081f4:	20001108 	.word	0x20001108
 80081f8:	20001124 	.word	0x20001124
 80081fc:	20001138 	.word	0x20001138
 8008200:	20001150 	.word	0x20001150
 8008204:	2000111c 	.word	0x2000111c
 8008208:	20001120 	.word	0x20001120

0800820c <prvCheckTasksWaitingTermination>:
=======
 80081da:	4b0b      	ldr	r3, [pc, #44]	@ (8008208 <prvInitialiseTaskLists+0x78>)
 80081dc:	4a05      	ldr	r2, [pc, #20]	@ (80081f4 <prvInitialiseTaskLists+0x64>)
 80081de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80081e0:	4b0a      	ldr	r3, [pc, #40]	@ (800820c <prvInitialiseTaskLists+0x7c>)
 80081e2:	4a05      	ldr	r2, [pc, #20]	@ (80081f8 <prvInitialiseTaskLists+0x68>)
 80081e4:	601a      	str	r2, [r3, #0]
}
 80081e6:	bf00      	nop
 80081e8:	3708      	adds	r7, #8
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	20000c9c 	.word	0x20000c9c
 80081f4:	200010fc 	.word	0x200010fc
 80081f8:	20001110 	.word	0x20001110
 80081fc:	2000112c 	.word	0x2000112c
 8008200:	20001140 	.word	0x20001140
 8008204:	20001158 	.word	0x20001158
 8008208:	20001124 	.word	0x20001124
 800820c:	20001128 	.word	0x20001128

08008210 <prvCheckTasksWaitingTermination>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
<<<<<<< HEAD
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
=======
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
<<<<<<< HEAD
 8008212:	e019      	b.n	8008248 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008214:	f000 fde8 	bl	8008de8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008218:	4b10      	ldr	r3, [pc, #64]	@ (800825c <prvCheckTasksWaitingTermination+0x50>)
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	3304      	adds	r3, #4
 8008224:	4618      	mov	r0, r3
 8008226:	f7fe fcf9 	bl	8006c1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800822a:	4b0d      	ldr	r3, [pc, #52]	@ (8008260 <prvCheckTasksWaitingTermination+0x54>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	3b01      	subs	r3, #1
 8008230:	4a0b      	ldr	r2, [pc, #44]	@ (8008260 <prvCheckTasksWaitingTermination+0x54>)
 8008232:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008234:	4b0b      	ldr	r3, [pc, #44]	@ (8008264 <prvCheckTasksWaitingTermination+0x58>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	3b01      	subs	r3, #1
 800823a:	4a0a      	ldr	r2, [pc, #40]	@ (8008264 <prvCheckTasksWaitingTermination+0x58>)
 800823c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800823e:	f000 fe05 	bl	8008e4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 f810 	bl	8008268 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008248:	4b06      	ldr	r3, [pc, #24]	@ (8008264 <prvCheckTasksWaitingTermination+0x58>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d1e1      	bne.n	8008214 <prvCheckTasksWaitingTermination+0x8>
=======
 8008216:	e019      	b.n	800824c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008218:	f000 fdee 	bl	8008df8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800821c:	4b10      	ldr	r3, [pc, #64]	@ (8008260 <prvCheckTasksWaitingTermination+0x50>)
 800821e:	68db      	ldr	r3, [r3, #12]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	3304      	adds	r3, #4
 8008228:	4618      	mov	r0, r3
 800822a:	f7fe fcf9 	bl	8006c20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800822e:	4b0d      	ldr	r3, [pc, #52]	@ (8008264 <prvCheckTasksWaitingTermination+0x54>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	3b01      	subs	r3, #1
 8008234:	4a0b      	ldr	r2, [pc, #44]	@ (8008264 <prvCheckTasksWaitingTermination+0x54>)
 8008236:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008238:	4b0b      	ldr	r3, [pc, #44]	@ (8008268 <prvCheckTasksWaitingTermination+0x58>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	3b01      	subs	r3, #1
 800823e:	4a0a      	ldr	r2, [pc, #40]	@ (8008268 <prvCheckTasksWaitingTermination+0x58>)
 8008240:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008242:	f000 fe0b 	bl	8008e5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 f810 	bl	800826c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800824c:	4b06      	ldr	r3, [pc, #24]	@ (8008268 <prvCheckTasksWaitingTermination+0x58>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d1e1      	bne.n	8008218 <prvCheckTasksWaitingTermination+0x8>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
<<<<<<< HEAD
 8008250:	bf00      	nop
 8008252:	bf00      	nop
 8008254:	3708      	adds	r7, #8
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	20001138 	.word	0x20001138
 8008260:	20001164 	.word	0x20001164
 8008264:	2000114c 	.word	0x2000114c

08008268 <prvDeleteTCB>:
=======
 8008254:	bf00      	nop
 8008256:	bf00      	nop
 8008258:	3708      	adds	r7, #8
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	20001140 	.word	0x20001140
 8008264:	2000116c 	.word	0x2000116c
 8008268:	20001154 	.word	0x20001154

0800826c <prvDeleteTCB>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
<<<<<<< HEAD
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
=======
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
<<<<<<< HEAD
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	3354      	adds	r3, #84	@ 0x54
 8008274:	4618      	mov	r0, r3
 8008276:	f001 fe87 	bl	8009f88 <_reclaim_reent>
=======
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	3354      	adds	r3, #84	@ 0x54
 8008278:	4618      	mov	r0, r3
 800827a:	f001 ff7f 	bl	800a17c <_reclaim_reent>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
<<<<<<< HEAD
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008280:	2b00      	cmp	r3, #0
 8008282:	d108      	bne.n	8008296 <prvDeleteTCB+0x2e>
=======
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008284:	2b00      	cmp	r3, #0
 8008286:	d108      	bne.n	800829a <prvDeleteTCB+0x2e>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
<<<<<<< HEAD
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008288:	4618      	mov	r0, r3
 800828a:	f000 ff9d 	bl	80091c8 <vPortFree>
				vPortFree( pxTCB );
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 ff9a 	bl	80091c8 <vPortFree>
=======
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800828c:	4618      	mov	r0, r3
 800828e:	f000 ffa3 	bl	80091d8 <vPortFree>
				vPortFree( pxTCB );
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 ffa0 	bl	80091d8 <vPortFree>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
<<<<<<< HEAD
 8008294:	e019      	b.n	80082ca <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800829c:	2b01      	cmp	r3, #1
 800829e:	d103      	bne.n	80082a8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 ff91 	bl	80091c8 <vPortFree>
	}
 80082a6:	e010      	b.n	80082ca <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80082ae:	2b02      	cmp	r3, #2
 80082b0:	d00b      	beq.n	80082ca <prvDeleteTCB+0x62>
	__asm volatile
 80082b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b6:	f383 8811 	msr	BASEPRI, r3
 80082ba:	f3bf 8f6f 	isb	sy
 80082be:	f3bf 8f4f 	dsb	sy
 80082c2:	60fb      	str	r3, [r7, #12]
}
 80082c4:	bf00      	nop
 80082c6:	bf00      	nop
 80082c8:	e7fd      	b.n	80082c6 <prvDeleteTCB+0x5e>
	}
 80082ca:	bf00      	nop
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
	...

080082d4 <prvResetNextTaskUnblockTime>:
=======
 8008298:	e019      	b.n	80082ce <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d103      	bne.n	80082ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 ff97 	bl	80091d8 <vPortFree>
	}
 80082aa:	e010      	b.n	80082ce <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	d00b      	beq.n	80082ce <prvDeleteTCB+0x62>
	__asm volatile
 80082b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ba:	f383 8811 	msr	BASEPRI, r3
 80082be:	f3bf 8f6f 	isb	sy
 80082c2:	f3bf 8f4f 	dsb	sy
 80082c6:	60fb      	str	r3, [r7, #12]
}
 80082c8:	bf00      	nop
 80082ca:	bf00      	nop
 80082cc:	e7fd      	b.n	80082ca <prvDeleteTCB+0x5e>
	}
 80082ce:	bf00      	nop
 80082d0:	3710      	adds	r7, #16
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
	...

080082d8 <prvResetNextTaskUnblockTime>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
<<<<<<< HEAD
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082da:	4b0c      	ldr	r3, [pc, #48]	@ (800830c <prvResetNextTaskUnblockTime+0x38>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d104      	bne.n	80082ee <prvResetNextTaskUnblockTime+0x1a>
=======
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082de:	4b0c      	ldr	r3, [pc, #48]	@ (8008310 <prvResetNextTaskUnblockTime+0x38>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d104      	bne.n	80082f2 <prvResetNextTaskUnblockTime+0x1a>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< HEAD
 80082e4:	4b0a      	ldr	r3, [pc, #40]	@ (8008310 <prvResetNextTaskUnblockTime+0x3c>)
 80082e6:	f04f 32ff 	mov.w	r2, #4294967295
 80082ea:	601a      	str	r2, [r3, #0]
=======
 80082e8:	4b0a      	ldr	r3, [pc, #40]	@ (8008314 <prvResetNextTaskUnblockTime+0x3c>)
 80082ea:	f04f 32ff 	mov.w	r2, #4294967295
 80082ee:	601a      	str	r2, [r3, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
<<<<<<< HEAD
 80082ec:	e008      	b.n	8008300 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082ee:	4b07      	ldr	r3, [pc, #28]	@ (800830c <prvResetNextTaskUnblockTime+0x38>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	4a04      	ldr	r2, [pc, #16]	@ (8008310 <prvResetNextTaskUnblockTime+0x3c>)
 80082fe:	6013      	str	r3, [r2, #0]
}
 8008300:	bf00      	nop
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr
 800830c:	2000111c 	.word	0x2000111c
 8008310:	20001184 	.word	0x20001184

08008314 <xTaskGetSchedulerState>:
=======
 80082f0:	e008      	b.n	8008304 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082f2:	4b07      	ldr	r3, [pc, #28]	@ (8008310 <prvResetNextTaskUnblockTime+0x38>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	4a04      	ldr	r2, [pc, #16]	@ (8008314 <prvResetNextTaskUnblockTime+0x3c>)
 8008302:	6013      	str	r3, [r2, #0]
}
 8008304:	bf00      	nop
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr
 8008310:	20001124 	.word	0x20001124
 8008314:	2000118c 	.word	0x2000118c

08008318 <xTaskGetSchedulerState>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
<<<<<<< HEAD
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800831a:	4b0b      	ldr	r3, [pc, #44]	@ (8008348 <xTaskGetSchedulerState+0x34>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d102      	bne.n	8008328 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008322:	2301      	movs	r3, #1
 8008324:	607b      	str	r3, [r7, #4]
 8008326:	e008      	b.n	800833a <xTaskGetSchedulerState+0x26>
=======
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800831e:	4b0b      	ldr	r3, [pc, #44]	@ (800834c <xTaskGetSchedulerState+0x34>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d102      	bne.n	800832c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008326:	2301      	movs	r3, #1
 8008328:	607b      	str	r3, [r7, #4]
 800832a:	e008      	b.n	800833e <xTaskGetSchedulerState+0x26>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< HEAD
 8008328:	4b08      	ldr	r3, [pc, #32]	@ (800834c <xTaskGetSchedulerState+0x38>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d102      	bne.n	8008336 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008330:	2302      	movs	r3, #2
 8008332:	607b      	str	r3, [r7, #4]
 8008334:	e001      	b.n	800833a <xTaskGetSchedulerState+0x26>
=======
 800832c:	4b08      	ldr	r3, [pc, #32]	@ (8008350 <xTaskGetSchedulerState+0x38>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d102      	bne.n	800833a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008334:	2302      	movs	r3, #2
 8008336:	607b      	str	r3, [r7, #4]
 8008338:	e001      	b.n	800833e <xTaskGetSchedulerState+0x26>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
<<<<<<< HEAD
 8008336:	2300      	movs	r3, #0
 8008338:	607b      	str	r3, [r7, #4]
=======
 800833a:	2300      	movs	r3, #0
 800833c:	607b      	str	r3, [r7, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			}
		}

		return xReturn;
<<<<<<< HEAD
 800833a:	687b      	ldr	r3, [r7, #4]
	}
 800833c:	4618      	mov	r0, r3
 800833e:	370c      	adds	r7, #12
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr
 8008348:	20001170 	.word	0x20001170
 800834c:	2000118c 	.word	0x2000118c

08008350 <xTaskPriorityDisinherit>:
=======
 800833e:	687b      	ldr	r3, [r7, #4]
	}
 8008340:	4618      	mov	r0, r3
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr
 800834c:	20001178 	.word	0x20001178
 8008350:	20001194 	.word	0x20001194

08008354 <xTaskPriorityDisinherit>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
<<<<<<< HEAD
 8008350:	b580      	push	{r7, lr}
 8008352:	b086      	sub	sp, #24
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800835c:	2300      	movs	r3, #0
 800835e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d058      	beq.n	8008418 <xTaskPriorityDisinherit+0xc8>
=======
 8008354:	b580      	push	{r7, lr}
 8008356:	b086      	sub	sp, #24
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008360:	2300      	movs	r3, #0
 8008362:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d058      	beq.n	800841c <xTaskPriorityDisinherit+0xc8>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
<<<<<<< HEAD
 8008366:	4b2f      	ldr	r3, [pc, #188]	@ (8008424 <xTaskPriorityDisinherit+0xd4>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	693a      	ldr	r2, [r7, #16]
 800836c:	429a      	cmp	r2, r3
 800836e:	d00b      	beq.n	8008388 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008374:	f383 8811 	msr	BASEPRI, r3
 8008378:	f3bf 8f6f 	isb	sy
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	60fb      	str	r3, [r7, #12]
}
 8008382:	bf00      	nop
 8008384:	bf00      	nop
 8008386:	e7fd      	b.n	8008384 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800838c:	2b00      	cmp	r3, #0
 800838e:	d10b      	bne.n	80083a8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008394:	f383 8811 	msr	BASEPRI, r3
 8008398:	f3bf 8f6f 	isb	sy
 800839c:	f3bf 8f4f 	dsb	sy
 80083a0:	60bb      	str	r3, [r7, #8]
}
 80083a2:	bf00      	nop
 80083a4:	bf00      	nop
 80083a6:	e7fd      	b.n	80083a4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083ac:	1e5a      	subs	r2, r3, #1
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	651a      	str	r2, [r3, #80]	@ 0x50
=======
 800836a:	4b2f      	ldr	r3, [pc, #188]	@ (8008428 <xTaskPriorityDisinherit+0xd4>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	693a      	ldr	r2, [r7, #16]
 8008370:	429a      	cmp	r2, r3
 8008372:	d00b      	beq.n	800838c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008378:	f383 8811 	msr	BASEPRI, r3
 800837c:	f3bf 8f6f 	isb	sy
 8008380:	f3bf 8f4f 	dsb	sy
 8008384:	60fb      	str	r3, [r7, #12]
}
 8008386:	bf00      	nop
 8008388:	bf00      	nop
 800838a:	e7fd      	b.n	8008388 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008390:	2b00      	cmp	r3, #0
 8008392:	d10b      	bne.n	80083ac <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008398:	f383 8811 	msr	BASEPRI, r3
 800839c:	f3bf 8f6f 	isb	sy
 80083a0:	f3bf 8f4f 	dsb	sy
 80083a4:	60bb      	str	r3, [r7, #8]
}
 80083a6:	bf00      	nop
 80083a8:	bf00      	nop
 80083aa:	e7fd      	b.n	80083a8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083b0:	1e5a      	subs	r2, r3, #1
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	651a      	str	r2, [r3, #80]	@ 0x50
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
<<<<<<< HEAD
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d02c      	beq.n	8008418 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d128      	bne.n	8008418 <xTaskPriorityDisinherit+0xc8>
=======
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083be:	429a      	cmp	r2, r3
 80083c0:	d02c      	beq.n	800841c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d128      	bne.n	800841c <xTaskPriorityDisinherit+0xc8>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	3304      	adds	r3, #4
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7fe fc26 	bl	8006c1c <uxListRemove>
=======
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	3304      	adds	r3, #4
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7fe fc26 	bl	8006c20 <uxListRemove>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
<<<<<<< HEAD
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	62da      	str	r2, [r3, #44]	@ 0x2c
=======
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	62da      	str	r2, [r3, #44]	@ 0x2c
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083dc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083e8:	4b0f      	ldr	r3, [pc, #60]	@ (8008428 <xTaskPriorityDisinherit+0xd8>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d903      	bls.n	80083f8 <xTaskPriorityDisinherit+0xa8>
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083f4:	4a0c      	ldr	r2, [pc, #48]	@ (8008428 <xTaskPriorityDisinherit+0xd8>)
 80083f6:	6013      	str	r3, [r2, #0]
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083fc:	4613      	mov	r3, r2
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	4413      	add	r3, r2
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	4a09      	ldr	r2, [pc, #36]	@ (800842c <xTaskPriorityDisinherit+0xdc>)
 8008406:	441a      	add	r2, r3
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	3304      	adds	r3, #4
 800840c:	4619      	mov	r1, r3
 800840e:	4610      	mov	r0, r2
 8008410:	f7fe fba7 	bl	8006b62 <vListInsertEnd>
=======
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083ec:	4b0f      	ldr	r3, [pc, #60]	@ (800842c <xTaskPriorityDisinherit+0xd8>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d903      	bls.n	80083fc <xTaskPriorityDisinherit+0xa8>
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083f8:	4a0c      	ldr	r2, [pc, #48]	@ (800842c <xTaskPriorityDisinherit+0xd8>)
 80083fa:	6013      	str	r3, [r2, #0]
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008400:	4613      	mov	r3, r2
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	4413      	add	r3, r2
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	4a09      	ldr	r2, [pc, #36]	@ (8008430 <xTaskPriorityDisinherit+0xdc>)
 800840a:	441a      	add	r2, r3
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	3304      	adds	r3, #4
 8008410:	4619      	mov	r1, r3
 8008412:	4610      	mov	r0, r2
 8008414:	f7fe fba7 	bl	8006b66 <vListInsertEnd>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
<<<<<<< HEAD
 8008414:	2301      	movs	r3, #1
 8008416:	617b      	str	r3, [r7, #20]
=======
 8008418:	2301      	movs	r3, #1
 800841a:	617b      	str	r3, [r7, #20]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
<<<<<<< HEAD
 8008418:	697b      	ldr	r3, [r7, #20]
	}
 800841a:	4618      	mov	r0, r3
 800841c:	3718      	adds	r7, #24
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	20000c90 	.word	0x20000c90
 8008428:	2000116c 	.word	0x2000116c
 800842c:	20000c94 	.word	0x20000c94

08008430 <prvAddCurrentTaskToDelayedList>:
=======
 800841c:	697b      	ldr	r3, [r7, #20]
	}
 800841e:	4618      	mov	r0, r3
 8008420:	3718      	adds	r7, #24
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	20000c98 	.word	0x20000c98
 800842c:	20001174 	.word	0x20001174
 8008430:	20000c9c 	.word	0x20000c9c

08008434 <prvAddCurrentTaskToDelayedList>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
<<<<<<< HEAD
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800843a:	4b21      	ldr	r3, [pc, #132]	@ (80084c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	60fb      	str	r3, [r7, #12]
=======
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800843e:	4b21      	ldr	r3, [pc, #132]	@ (80084c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	60fb      	str	r3, [r7, #12]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 8008440:	4b20      	ldr	r3, [pc, #128]	@ (80084c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	3304      	adds	r3, #4
 8008446:	4618      	mov	r0, r3
 8008448:	f7fe fbe8 	bl	8006c1c <uxListRemove>
=======
 8008444:	4b20      	ldr	r3, [pc, #128]	@ (80084c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	3304      	adds	r3, #4
 800844a:	4618      	mov	r0, r3
 800844c:	f7fe fbe8 	bl	8006c20 <uxListRemove>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
<<<<<<< HEAD
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008452:	d10a      	bne.n	800846a <prvAddCurrentTaskToDelayedList+0x3a>
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d007      	beq.n	800846a <prvAddCurrentTaskToDelayedList+0x3a>
=======
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008456:	d10a      	bne.n	800846e <prvAddCurrentTaskToDelayedList+0x3a>
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d007      	beq.n	800846e <prvAddCurrentTaskToDelayedList+0x3a>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
<<<<<<< HEAD
 800845a:	4b1a      	ldr	r3, [pc, #104]	@ (80084c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	3304      	adds	r3, #4
 8008460:	4619      	mov	r1, r3
 8008462:	4819      	ldr	r0, [pc, #100]	@ (80084c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008464:	f7fe fb7d 	bl	8006b62 <vListInsertEnd>
=======
 800845e:	4b1a      	ldr	r3, [pc, #104]	@ (80084c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	3304      	adds	r3, #4
 8008464:	4619      	mov	r1, r3
 8008466:	4819      	ldr	r0, [pc, #100]	@ (80084cc <prvAddCurrentTaskToDelayedList+0x98>)
 8008468:	f7fe fb7d 	bl	8006b66 <vListInsertEnd>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
<<<<<<< HEAD
 8008468:	e026      	b.n	80084b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800846a:	68fa      	ldr	r2, [r7, #12]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4413      	add	r3, r2
 8008470:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008472:	4b14      	ldr	r3, [pc, #80]	@ (80084c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	68ba      	ldr	r2, [r7, #8]
 8008478:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800847a:	68ba      	ldr	r2, [r7, #8]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	429a      	cmp	r2, r3
 8008480:	d209      	bcs.n	8008496 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008482:	4b12      	ldr	r3, [pc, #72]	@ (80084cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	4b0f      	ldr	r3, [pc, #60]	@ (80084c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	3304      	adds	r3, #4
 800848c:	4619      	mov	r1, r3
 800848e:	4610      	mov	r0, r2
 8008490:	f7fe fb8b 	bl	8006baa <vListInsert>
}
 8008494:	e010      	b.n	80084b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008496:	4b0e      	ldr	r3, [pc, #56]	@ (80084d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	4b0a      	ldr	r3, [pc, #40]	@ (80084c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	3304      	adds	r3, #4
 80084a0:	4619      	mov	r1, r3
 80084a2:	4610      	mov	r0, r2
 80084a4:	f7fe fb81 	bl	8006baa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80084a8:	4b0a      	ldr	r3, [pc, #40]	@ (80084d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	68ba      	ldr	r2, [r7, #8]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d202      	bcs.n	80084b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80084b2:	4a08      	ldr	r2, [pc, #32]	@ (80084d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	6013      	str	r3, [r2, #0]
}
 80084b8:	bf00      	nop
 80084ba:	3710      	adds	r7, #16
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	20001168 	.word	0x20001168
 80084c4:	20000c90 	.word	0x20000c90
 80084c8:	20001150 	.word	0x20001150
 80084cc:	20001120 	.word	0x20001120
 80084d0:	2000111c 	.word	0x2000111c
 80084d4:	20001184 	.word	0x20001184

080084d8 <xTimerCreateTimerTask>:
=======
 800846c:	e026      	b.n	80084bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800846e:	68fa      	ldr	r2, [r7, #12]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4413      	add	r3, r2
 8008474:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008476:	4b14      	ldr	r3, [pc, #80]	@ (80084c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	68ba      	ldr	r2, [r7, #8]
 800847c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800847e:	68ba      	ldr	r2, [r7, #8]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	429a      	cmp	r2, r3
 8008484:	d209      	bcs.n	800849a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008486:	4b12      	ldr	r3, [pc, #72]	@ (80084d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	4b0f      	ldr	r3, [pc, #60]	@ (80084c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	3304      	adds	r3, #4
 8008490:	4619      	mov	r1, r3
 8008492:	4610      	mov	r0, r2
 8008494:	f7fe fb8b 	bl	8006bae <vListInsert>
}
 8008498:	e010      	b.n	80084bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800849a:	4b0e      	ldr	r3, [pc, #56]	@ (80084d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	4b0a      	ldr	r3, [pc, #40]	@ (80084c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	3304      	adds	r3, #4
 80084a4:	4619      	mov	r1, r3
 80084a6:	4610      	mov	r0, r2
 80084a8:	f7fe fb81 	bl	8006bae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80084ac:	4b0a      	ldr	r3, [pc, #40]	@ (80084d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	68ba      	ldr	r2, [r7, #8]
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d202      	bcs.n	80084bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80084b6:	4a08      	ldr	r2, [pc, #32]	@ (80084d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	6013      	str	r3, [r2, #0]
}
 80084bc:	bf00      	nop
 80084be:	3710      	adds	r7, #16
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	20001170 	.word	0x20001170
 80084c8:	20000c98 	.word	0x20000c98
 80084cc:	20001158 	.word	0x20001158
 80084d0:	20001128 	.word	0x20001128
 80084d4:	20001124 	.word	0x20001124
 80084d8:	2000118c 	.word	0x2000118c

080084dc <xTimerCreateTimerTask>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
<<<<<<< HEAD
 80084d8:	b580      	push	{r7, lr}
 80084da:	b08a      	sub	sp, #40	@ 0x28
 80084dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80084de:	2300      	movs	r3, #0
 80084e0:	617b      	str	r3, [r7, #20]
=======
 80084dc:	b580      	push	{r7, lr}
 80084de:	b08a      	sub	sp, #40	@ 0x28
 80084e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80084e2:	2300      	movs	r3, #0
 80084e4:	617b      	str	r3, [r7, #20]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
<<<<<<< HEAD
 80084e2:	f000 fb13 	bl	8008b0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80084e6:	4b1d      	ldr	r3, [pc, #116]	@ (800855c <xTimerCreateTimerTask+0x84>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d021      	beq.n	8008532 <xTimerCreateTimerTask+0x5a>
=======
 80084e6:	f000 fb13 	bl	8008b10 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80084ea:	4b1d      	ldr	r3, [pc, #116]	@ (8008560 <xTimerCreateTimerTask+0x84>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d021      	beq.n	8008536 <xTimerCreateTimerTask+0x5a>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
<<<<<<< HEAD
 80084ee:	2300      	movs	r3, #0
 80084f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80084f2:	2300      	movs	r3, #0
 80084f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80084f6:	1d3a      	adds	r2, r7, #4
 80084f8:	f107 0108 	add.w	r1, r7, #8
 80084fc:	f107 030c 	add.w	r3, r7, #12
 8008500:	4618      	mov	r0, r3
 8008502:	f7fe fae7 	bl	8006ad4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008506:	6879      	ldr	r1, [r7, #4]
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	68fa      	ldr	r2, [r7, #12]
 800850c:	9202      	str	r2, [sp, #8]
 800850e:	9301      	str	r3, [sp, #4]
 8008510:	2302      	movs	r3, #2
 8008512:	9300      	str	r3, [sp, #0]
 8008514:	2300      	movs	r3, #0
 8008516:	460a      	mov	r2, r1
 8008518:	4911      	ldr	r1, [pc, #68]	@ (8008560 <xTimerCreateTimerTask+0x88>)
 800851a:	4812      	ldr	r0, [pc, #72]	@ (8008564 <xTimerCreateTimerTask+0x8c>)
 800851c:	f7ff f8a2 	bl	8007664 <xTaskCreateStatic>
 8008520:	4603      	mov	r3, r0
 8008522:	4a11      	ldr	r2, [pc, #68]	@ (8008568 <xTimerCreateTimerTask+0x90>)
 8008524:	6013      	str	r3, [r2, #0]
=======
 80084f2:	2300      	movs	r3, #0
 80084f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80084f6:	2300      	movs	r3, #0
 80084f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80084fa:	1d3a      	adds	r2, r7, #4
 80084fc:	f107 0108 	add.w	r1, r7, #8
 8008500:	f107 030c 	add.w	r3, r7, #12
 8008504:	4618      	mov	r0, r3
 8008506:	f7fe fae7 	bl	8006ad8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800850a:	6879      	ldr	r1, [r7, #4]
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	9202      	str	r2, [sp, #8]
 8008512:	9301      	str	r3, [sp, #4]
 8008514:	2302      	movs	r3, #2
 8008516:	9300      	str	r3, [sp, #0]
 8008518:	2300      	movs	r3, #0
 800851a:	460a      	mov	r2, r1
 800851c:	4911      	ldr	r1, [pc, #68]	@ (8008564 <xTimerCreateTimerTask+0x88>)
 800851e:	4812      	ldr	r0, [pc, #72]	@ (8008568 <xTimerCreateTimerTask+0x8c>)
 8008520:	f7ff f8a2 	bl	8007668 <xTaskCreateStatic>
 8008524:	4603      	mov	r3, r0
 8008526:	4a11      	ldr	r2, [pc, #68]	@ (800856c <xTimerCreateTimerTask+0x90>)
 8008528:	6013      	str	r3, [r2, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
<<<<<<< HEAD
 8008526:	4b10      	ldr	r3, [pc, #64]	@ (8008568 <xTimerCreateTimerTask+0x90>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d001      	beq.n	8008532 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800852e:	2301      	movs	r3, #1
 8008530:	617b      	str	r3, [r7, #20]
=======
 800852a:	4b10      	ldr	r3, [pc, #64]	@ (800856c <xTimerCreateTimerTask+0x90>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d001      	beq.n	8008536 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008532:	2301      	movs	r3, #1
 8008534:	617b      	str	r3, [r7, #20]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
<<<<<<< HEAD
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d10b      	bne.n	8008550 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800853c:	f383 8811 	msr	BASEPRI, r3
 8008540:	f3bf 8f6f 	isb	sy
 8008544:	f3bf 8f4f 	dsb	sy
 8008548:	613b      	str	r3, [r7, #16]
}
 800854a:	bf00      	nop
 800854c:	bf00      	nop
 800854e:	e7fd      	b.n	800854c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008550:	697b      	ldr	r3, [r7, #20]
}
 8008552:	4618      	mov	r0, r3
 8008554:	3718      	adds	r7, #24
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	200011c0 	.word	0x200011c0
 8008560:	0800c234 	.word	0x0800c234
 8008564:	080086a5 	.word	0x080086a5
 8008568:	200011c4 	.word	0x200011c4

0800856c <xTimerGenericCommand>:
=======
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d10b      	bne.n	8008554 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800853c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008540:	f383 8811 	msr	BASEPRI, r3
 8008544:	f3bf 8f6f 	isb	sy
 8008548:	f3bf 8f4f 	dsb	sy
 800854c:	613b      	str	r3, [r7, #16]
}
 800854e:	bf00      	nop
 8008550:	bf00      	nop
 8008552:	e7fd      	b.n	8008550 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008554:	697b      	ldr	r3, [r7, #20]
}
 8008556:	4618      	mov	r0, r3
 8008558:	3718      	adds	r7, #24
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	200011c8 	.word	0x200011c8
 8008564:	0800c314 	.word	0x0800c314
 8008568:	080086a9 	.word	0x080086a9
 800856c:	200011cc 	.word	0x200011cc

08008570 <xTimerGenericCommand>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
<<<<<<< HEAD
 800856c:	b580      	push	{r7, lr}
 800856e:	b08a      	sub	sp, #40	@ 0x28
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	607a      	str	r2, [r7, #4]
 8008578:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800857a:	2300      	movs	r3, #0
 800857c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d10b      	bne.n	800859c <xTimerGenericCommand+0x30>
	__asm volatile
 8008584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008588:	f383 8811 	msr	BASEPRI, r3
 800858c:	f3bf 8f6f 	isb	sy
 8008590:	f3bf 8f4f 	dsb	sy
 8008594:	623b      	str	r3, [r7, #32]
}
 8008596:	bf00      	nop
 8008598:	bf00      	nop
 800859a:	e7fd      	b.n	8008598 <xTimerGenericCommand+0x2c>
=======
 8008570:	b580      	push	{r7, lr}
 8008572:	b08a      	sub	sp, #40	@ 0x28
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	607a      	str	r2, [r7, #4]
 800857c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800857e:	2300      	movs	r3, #0
 8008580:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d10b      	bne.n	80085a0 <xTimerGenericCommand+0x30>
	__asm volatile
 8008588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800858c:	f383 8811 	msr	BASEPRI, r3
 8008590:	f3bf 8f6f 	isb	sy
 8008594:	f3bf 8f4f 	dsb	sy
 8008598:	623b      	str	r3, [r7, #32]
}
 800859a:	bf00      	nop
 800859c:	bf00      	nop
 800859e:	e7fd      	b.n	800859c <xTimerGenericCommand+0x2c>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
<<<<<<< HEAD
 800859c:	4b19      	ldr	r3, [pc, #100]	@ (8008604 <xTimerGenericCommand+0x98>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d02a      	beq.n	80085fa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	2b05      	cmp	r3, #5
 80085b4:	dc18      	bgt.n	80085e8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80085b6:	f7ff fead 	bl	8008314 <xTaskGetSchedulerState>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b02      	cmp	r3, #2
 80085be:	d109      	bne.n	80085d4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80085c0:	4b10      	ldr	r3, [pc, #64]	@ (8008604 <xTimerGenericCommand+0x98>)
 80085c2:	6818      	ldr	r0, [r3, #0]
 80085c4:	f107 0110 	add.w	r1, r7, #16
 80085c8:	2300      	movs	r3, #0
 80085ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085cc:	f7fe fc5a 	bl	8006e84 <xQueueGenericSend>
 80085d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80085d2:	e012      	b.n	80085fa <xTimerGenericCommand+0x8e>
=======
 80085a0:	4b19      	ldr	r3, [pc, #100]	@ (8008608 <xTimerGenericCommand+0x98>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d02a      	beq.n	80085fe <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	2b05      	cmp	r3, #5
 80085b8:	dc18      	bgt.n	80085ec <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80085ba:	f7ff fead 	bl	8008318 <xTaskGetSchedulerState>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b02      	cmp	r3, #2
 80085c2:	d109      	bne.n	80085d8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80085c4:	4b10      	ldr	r3, [pc, #64]	@ (8008608 <xTimerGenericCommand+0x98>)
 80085c6:	6818      	ldr	r0, [r3, #0]
 80085c8:	f107 0110 	add.w	r1, r7, #16
 80085cc:	2300      	movs	r3, #0
 80085ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085d0:	f7fe fc5a 	bl	8006e88 <xQueueGenericSend>
 80085d4:	6278      	str	r0, [r7, #36]	@ 0x24
 80085d6:	e012      	b.n	80085fe <xTimerGenericCommand+0x8e>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
<<<<<<< HEAD
 80085d4:	4b0b      	ldr	r3, [pc, #44]	@ (8008604 <xTimerGenericCommand+0x98>)
 80085d6:	6818      	ldr	r0, [r3, #0]
 80085d8:	f107 0110 	add.w	r1, r7, #16
 80085dc:	2300      	movs	r3, #0
 80085de:	2200      	movs	r2, #0
 80085e0:	f7fe fc50 	bl	8006e84 <xQueueGenericSend>
 80085e4:	6278      	str	r0, [r7, #36]	@ 0x24
 80085e6:	e008      	b.n	80085fa <xTimerGenericCommand+0x8e>
=======
 80085d8:	4b0b      	ldr	r3, [pc, #44]	@ (8008608 <xTimerGenericCommand+0x98>)
 80085da:	6818      	ldr	r0, [r3, #0]
 80085dc:	f107 0110 	add.w	r1, r7, #16
 80085e0:	2300      	movs	r3, #0
 80085e2:	2200      	movs	r2, #0
 80085e4:	f7fe fc50 	bl	8006e88 <xQueueGenericSend>
 80085e8:	6278      	str	r0, [r7, #36]	@ 0x24
 80085ea:	e008      	b.n	80085fe <xTimerGenericCommand+0x8e>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
<<<<<<< HEAD
 80085e8:	4b06      	ldr	r3, [pc, #24]	@ (8008604 <xTimerGenericCommand+0x98>)
 80085ea:	6818      	ldr	r0, [r3, #0]
 80085ec:	f107 0110 	add.w	r1, r7, #16
 80085f0:	2300      	movs	r3, #0
 80085f2:	683a      	ldr	r2, [r7, #0]
 80085f4:	f7fe fd48 	bl	8007088 <xQueueGenericSendFromISR>
 80085f8:	6278      	str	r0, [r7, #36]	@ 0x24
=======
 80085ec:	4b06      	ldr	r3, [pc, #24]	@ (8008608 <xTimerGenericCommand+0x98>)
 80085ee:	6818      	ldr	r0, [r3, #0]
 80085f0:	f107 0110 	add.w	r1, r7, #16
 80085f4:	2300      	movs	r3, #0
 80085f6:	683a      	ldr	r2, [r7, #0]
 80085f8:	f7fe fd48 	bl	800708c <xQueueGenericSendFromISR>
 80085fc:	6278      	str	r0, [r7, #36]	@ 0x24
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
<<<<<<< HEAD
 80085fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3728      	adds	r7, #40	@ 0x28
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	200011c0 	.word	0x200011c0

08008608 <prvProcessExpiredTimer>:
=======
 80085fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008600:	4618      	mov	r0, r3
 8008602:	3728      	adds	r7, #40	@ 0x28
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}
 8008608:	200011c8 	.word	0x200011c8

0800860c <prvProcessExpiredTimer>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
<<<<<<< HEAD
 8008608:	b580      	push	{r7, lr}
 800860a:	b088      	sub	sp, #32
 800860c:	af02      	add	r7, sp, #8
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008612:	4b23      	ldr	r3, [pc, #140]	@ (80086a0 <prvProcessExpiredTimer+0x98>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	617b      	str	r3, [r7, #20]
=======
 800860c:	b580      	push	{r7, lr}
 800860e:	b088      	sub	sp, #32
 8008610:	af02      	add	r7, sp, #8
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008616:	4b23      	ldr	r3, [pc, #140]	@ (80086a4 <prvProcessExpiredTimer+0x98>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	617b      	str	r3, [r7, #20]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
<<<<<<< HEAD
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	3304      	adds	r3, #4
 8008620:	4618      	mov	r0, r3
 8008622:	f7fe fafb 	bl	8006c1c <uxListRemove>
=======
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	3304      	adds	r3, #4
 8008624:	4618      	mov	r0, r3
 8008626:	f7fe fafb 	bl	8006c20 <uxListRemove>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
<<<<<<< HEAD
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800862c:	f003 0304 	and.w	r3, r3, #4
 8008630:	2b00      	cmp	r3, #0
 8008632:	d023      	beq.n	800867c <prvProcessExpiredTimer+0x74>
=======
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008630:	f003 0304 	and.w	r3, r3, #4
 8008634:	2b00      	cmp	r3, #0
 8008636:	d023      	beq.n	8008680 <prvProcessExpiredTimer+0x74>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
<<<<<<< HEAD
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	699a      	ldr	r2, [r3, #24]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	18d1      	adds	r1, r2, r3
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	683a      	ldr	r2, [r7, #0]
 8008640:	6978      	ldr	r0, [r7, #20]
 8008642:	f000 f8d5 	bl	80087f0 <prvInsertTimerInActiveList>
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d020      	beq.n	800868e <prvProcessExpiredTimer+0x86>
=======
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	699a      	ldr	r2, [r3, #24]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	18d1      	adds	r1, r2, r3
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	683a      	ldr	r2, [r7, #0]
 8008644:	6978      	ldr	r0, [r7, #20]
 8008646:	f000 f8d5 	bl	80087f4 <prvInsertTimerInActiveList>
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d020      	beq.n	8008692 <prvProcessExpiredTimer+0x86>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
<<<<<<< HEAD
 800864c:	2300      	movs	r3, #0
 800864e:	9300      	str	r3, [sp, #0]
 8008650:	2300      	movs	r3, #0
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	2100      	movs	r1, #0
 8008656:	6978      	ldr	r0, [r7, #20]
 8008658:	f7ff ff88 	bl	800856c <xTimerGenericCommand>
 800865c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d114      	bne.n	800868e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008668:	f383 8811 	msr	BASEPRI, r3
 800866c:	f3bf 8f6f 	isb	sy
 8008670:	f3bf 8f4f 	dsb	sy
 8008674:	60fb      	str	r3, [r7, #12]
}
 8008676:	bf00      	nop
 8008678:	bf00      	nop
 800867a:	e7fd      	b.n	8008678 <prvProcessExpiredTimer+0x70>
=======
 8008650:	2300      	movs	r3, #0
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	2300      	movs	r3, #0
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	2100      	movs	r1, #0
 800865a:	6978      	ldr	r0, [r7, #20]
 800865c:	f7ff ff88 	bl	8008570 <xTimerGenericCommand>
 8008660:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d114      	bne.n	8008692 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800866c:	f383 8811 	msr	BASEPRI, r3
 8008670:	f3bf 8f6f 	isb	sy
 8008674:	f3bf 8f4f 	dsb	sy
 8008678:	60fb      	str	r3, [r7, #12]
}
 800867a:	bf00      	nop
 800867c:	bf00      	nop
 800867e:	e7fd      	b.n	800867c <prvProcessExpiredTimer+0x70>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
<<<<<<< HEAD
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008682:	f023 0301 	bic.w	r3, r3, #1
 8008686:	b2da      	uxtb	r2, r3
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
=======
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008686:	f023 0301 	bic.w	r3, r3, #1
 800868a:	b2da      	uxtb	r2, r3
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< HEAD
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	6a1b      	ldr	r3, [r3, #32]
 8008692:	6978      	ldr	r0, [r7, #20]
 8008694:	4798      	blx	r3
}
 8008696:	bf00      	nop
 8008698:	3718      	adds	r7, #24
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	200011b8 	.word	0x200011b8

080086a4 <prvTimerTask>:
=======
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	6a1b      	ldr	r3, [r3, #32]
 8008696:	6978      	ldr	r0, [r7, #20]
 8008698:	4798      	blx	r3
}
 800869a:	bf00      	nop
 800869c:	3718      	adds	r7, #24
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	200011c0 	.word	0x200011c0

080086a8 <prvTimerTask>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
<<<<<<< HEAD
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
=======
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
<<<<<<< HEAD
 80086ac:	f107 0308 	add.w	r3, r7, #8
 80086b0:	4618      	mov	r0, r3
 80086b2:	f000 f859 	bl	8008768 <prvGetNextExpireTime>
 80086b6:	60f8      	str	r0, [r7, #12]
=======
 80086b0:	f107 0308 	add.w	r3, r7, #8
 80086b4:	4618      	mov	r0, r3
 80086b6:	f000 f859 	bl	800876c <prvGetNextExpireTime>
 80086ba:	60f8      	str	r0, [r7, #12]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
<<<<<<< HEAD
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	4619      	mov	r1, r3
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f000 f805 	bl	80086cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80086c2:	f000 f8d7 	bl	8008874 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80086c6:	bf00      	nop
 80086c8:	e7f0      	b.n	80086ac <prvTimerTask+0x8>
	...

080086cc <prvProcessTimerOrBlockTask>:
=======
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	4619      	mov	r1, r3
 80086c0:	68f8      	ldr	r0, [r7, #12]
 80086c2:	f000 f805 	bl	80086d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80086c6:	f000 f8d7 	bl	8008878 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80086ca:	bf00      	nop
 80086cc:	e7f0      	b.n	80086b0 <prvTimerTask+0x8>
	...

080086d0 <prvProcessTimerOrBlockTask>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
<<<<<<< HEAD
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
=======
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
<<<<<<< HEAD
 80086d6:	f7ff fa29 	bl	8007b2c <vTaskSuspendAll>
=======
 80086da:	f7ff fa29 	bl	8007b30 <vTaskSuspendAll>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
<<<<<<< HEAD
 80086da:	f107 0308 	add.w	r3, r7, #8
 80086de:	4618      	mov	r0, r3
 80086e0:	f000 f866 	bl	80087b0 <prvSampleTimeNow>
 80086e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d130      	bne.n	800874e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d10a      	bne.n	8008708 <prvProcessTimerOrBlockTask+0x3c>
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d806      	bhi.n	8008708 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80086fa:	f7ff fa25 	bl	8007b48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80086fe:	68f9      	ldr	r1, [r7, #12]
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f7ff ff81 	bl	8008608 <prvProcessExpiredTimer>
=======
 80086de:	f107 0308 	add.w	r3, r7, #8
 80086e2:	4618      	mov	r0, r3
 80086e4:	f000 f866 	bl	80087b4 <prvSampleTimeNow>
 80086e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d130      	bne.n	8008752 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d10a      	bne.n	800870c <prvProcessTimerOrBlockTask+0x3c>
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d806      	bhi.n	800870c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80086fe:	f7ff fa25 	bl	8007b4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008702:	68f9      	ldr	r1, [r7, #12]
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f7ff ff81 	bl	800860c <prvProcessExpiredTimer>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
<<<<<<< HEAD
 8008706:	e024      	b.n	8008752 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d008      	beq.n	8008720 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800870e:	4b13      	ldr	r3, [pc, #76]	@ (800875c <prvProcessTimerOrBlockTask+0x90>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d101      	bne.n	800871c <prvProcessTimerOrBlockTask+0x50>
 8008718:	2301      	movs	r3, #1
 800871a:	e000      	b.n	800871e <prvProcessTimerOrBlockTask+0x52>
 800871c:	2300      	movs	r3, #0
 800871e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008720:	4b0f      	ldr	r3, [pc, #60]	@ (8008760 <prvProcessTimerOrBlockTask+0x94>)
 8008722:	6818      	ldr	r0, [r3, #0]
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	1ad3      	subs	r3, r2, r3
 800872a:	683a      	ldr	r2, [r7, #0]
 800872c:	4619      	mov	r1, r3
 800872e:	f7fe ff65 	bl	80075fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008732:	f7ff fa09 	bl	8007b48 <xTaskResumeAll>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d10a      	bne.n	8008752 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800873c:	4b09      	ldr	r3, [pc, #36]	@ (8008764 <prvProcessTimerOrBlockTask+0x98>)
 800873e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008742:	601a      	str	r2, [r3, #0]
 8008744:	f3bf 8f4f 	dsb	sy
 8008748:	f3bf 8f6f 	isb	sy
}
 800874c:	e001      	b.n	8008752 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800874e:	f7ff f9fb 	bl	8007b48 <xTaskResumeAll>
}
 8008752:	bf00      	nop
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	200011bc 	.word	0x200011bc
 8008760:	200011c0 	.word	0x200011c0
 8008764:	e000ed04 	.word	0xe000ed04

08008768 <prvGetNextExpireTime>:
=======
 800870a:	e024      	b.n	8008756 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d008      	beq.n	8008724 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008712:	4b13      	ldr	r3, [pc, #76]	@ (8008760 <prvProcessTimerOrBlockTask+0x90>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d101      	bne.n	8008720 <prvProcessTimerOrBlockTask+0x50>
 800871c:	2301      	movs	r3, #1
 800871e:	e000      	b.n	8008722 <prvProcessTimerOrBlockTask+0x52>
 8008720:	2300      	movs	r3, #0
 8008722:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008724:	4b0f      	ldr	r3, [pc, #60]	@ (8008764 <prvProcessTimerOrBlockTask+0x94>)
 8008726:	6818      	ldr	r0, [r3, #0]
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	1ad3      	subs	r3, r2, r3
 800872e:	683a      	ldr	r2, [r7, #0]
 8008730:	4619      	mov	r1, r3
 8008732:	f7fe ff65 	bl	8007600 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008736:	f7ff fa09 	bl	8007b4c <xTaskResumeAll>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d10a      	bne.n	8008756 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008740:	4b09      	ldr	r3, [pc, #36]	@ (8008768 <prvProcessTimerOrBlockTask+0x98>)
 8008742:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008746:	601a      	str	r2, [r3, #0]
 8008748:	f3bf 8f4f 	dsb	sy
 800874c:	f3bf 8f6f 	isb	sy
}
 8008750:	e001      	b.n	8008756 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008752:	f7ff f9fb 	bl	8007b4c <xTaskResumeAll>
}
 8008756:	bf00      	nop
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	200011c4 	.word	0x200011c4
 8008764:	200011c8 	.word	0x200011c8
 8008768:	e000ed04 	.word	0xe000ed04

0800876c <prvGetNextExpireTime>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
<<<<<<< HEAD
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
=======
 800876c:	b480      	push	{r7}
 800876e:	b085      	sub	sp, #20
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
<<<<<<< HEAD
 8008770:	4b0e      	ldr	r3, [pc, #56]	@ (80087ac <prvGetNextExpireTime+0x44>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d101      	bne.n	800877e <prvGetNextExpireTime+0x16>
 800877a:	2201      	movs	r2, #1
 800877c:	e000      	b.n	8008780 <prvGetNextExpireTime+0x18>
 800877e:	2200      	movs	r2, #0
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d105      	bne.n	8008798 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800878c:	4b07      	ldr	r3, [pc, #28]	@ (80087ac <prvGetNextExpireTime+0x44>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	60fb      	str	r3, [r7, #12]
 8008796:	e001      	b.n	800879c <prvGetNextExpireTime+0x34>
=======
 8008774:	4b0e      	ldr	r3, [pc, #56]	@ (80087b0 <prvGetNextExpireTime+0x44>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d101      	bne.n	8008782 <prvGetNextExpireTime+0x16>
 800877e:	2201      	movs	r2, #1
 8008780:	e000      	b.n	8008784 <prvGetNextExpireTime+0x18>
 8008782:	2200      	movs	r2, #0
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d105      	bne.n	800879c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008790:	4b07      	ldr	r3, [pc, #28]	@ (80087b0 <prvGetNextExpireTime+0x44>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	60fb      	str	r3, [r7, #12]
 800879a:	e001      	b.n	80087a0 <prvGetNextExpireTime+0x34>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
<<<<<<< HEAD
 8008798:	2300      	movs	r3, #0
 800879a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800879c:	68fb      	ldr	r3, [r7, #12]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3714      	adds	r7, #20
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	200011b8 	.word	0x200011b8

080087b0 <prvSampleTimeNow>:
=======
 800879c:	2300      	movs	r3, #0
 800879e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80087a0:	68fb      	ldr	r3, [r7, #12]
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3714      	adds	r7, #20
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop
 80087b0:	200011c0 	.word	0x200011c0

080087b4 <prvSampleTimeNow>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
<<<<<<< HEAD
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
=======
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
<<<<<<< HEAD
 80087b8:	f7ff fa64 	bl	8007c84 <xTaskGetTickCount>
 80087bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80087be:	4b0b      	ldr	r3, [pc, #44]	@ (80087ec <prvSampleTimeNow+0x3c>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d205      	bcs.n	80087d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80087c8:	f000 f93a 	bl	8008a40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	601a      	str	r2, [r3, #0]
 80087d2:	e002      	b.n	80087da <prvSampleTimeNow+0x2a>
=======
 80087bc:	f7ff fa64 	bl	8007c88 <xTaskGetTickCount>
 80087c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80087c2:	4b0b      	ldr	r3, [pc, #44]	@ (80087f0 <prvSampleTimeNow+0x3c>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d205      	bcs.n	80087d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80087cc:	f000 f93a 	bl	8008a44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2201      	movs	r2, #1
 80087d4:	601a      	str	r2, [r3, #0]
 80087d6:	e002      	b.n	80087de <prvSampleTimeNow+0x2a>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
<<<<<<< HEAD
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80087da:	4a04      	ldr	r2, [pc, #16]	@ (80087ec <prvSampleTimeNow+0x3c>)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80087e0:	68fb      	ldr	r3, [r7, #12]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	200011c8 	.word	0x200011c8

080087f0 <prvInsertTimerInActiveList>:
=======
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80087de:	4a04      	ldr	r2, [pc, #16]	@ (80087f0 <prvSampleTimeNow+0x3c>)
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80087e4:	68fb      	ldr	r3, [r7, #12]
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	200011d0 	.word	0x200011d0

080087f4 <prvInsertTimerInActiveList>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
<<<<<<< HEAD
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b086      	sub	sp, #24
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	607a      	str	r2, [r7, #4]
 80087fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80087fe:	2300      	movs	r3, #0
 8008800:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	68ba      	ldr	r2, [r7, #8]
 8008806:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	68fa      	ldr	r2, [r7, #12]
 800880c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800880e:	68ba      	ldr	r2, [r7, #8]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	429a      	cmp	r2, r3
 8008814:	d812      	bhi.n	800883c <prvInsertTimerInActiveList+0x4c>
=======
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b086      	sub	sp, #24
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	607a      	str	r2, [r7, #4]
 8008800:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008802:	2300      	movs	r3, #0
 8008804:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	68ba      	ldr	r2, [r7, #8]
 800880a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	68fa      	ldr	r2, [r7, #12]
 8008810:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	429a      	cmp	r2, r3
 8008818:	d812      	bhi.n	8008840 <prvInsertTimerInActiveList+0x4c>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	1ad2      	subs	r2, r2, r3
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	699b      	ldr	r3, [r3, #24]
 8008820:	429a      	cmp	r2, r3
 8008822:	d302      	bcc.n	800882a <prvInsertTimerInActiveList+0x3a>
=======
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	1ad2      	subs	r2, r2, r3
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	699b      	ldr	r3, [r3, #24]
 8008824:	429a      	cmp	r2, r3
 8008826:	d302      	bcc.n	800882e <prvInsertTimerInActiveList+0x3a>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
<<<<<<< HEAD
 8008824:	2301      	movs	r3, #1
 8008826:	617b      	str	r3, [r7, #20]
 8008828:	e01b      	b.n	8008862 <prvInsertTimerInActiveList+0x72>
=======
 8008828:	2301      	movs	r3, #1
 800882a:	617b      	str	r3, [r7, #20]
 800882c:	e01b      	b.n	8008866 <prvInsertTimerInActiveList+0x72>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
<<<<<<< HEAD
 800882a:	4b10      	ldr	r3, [pc, #64]	@ (800886c <prvInsertTimerInActiveList+0x7c>)
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	3304      	adds	r3, #4
 8008832:	4619      	mov	r1, r3
 8008834:	4610      	mov	r0, r2
 8008836:	f7fe f9b8 	bl	8006baa <vListInsert>
 800883a:	e012      	b.n	8008862 <prvInsertTimerInActiveList+0x72>
=======
 800882e:	4b10      	ldr	r3, [pc, #64]	@ (8008870 <prvInsertTimerInActiveList+0x7c>)
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	3304      	adds	r3, #4
 8008836:	4619      	mov	r1, r3
 8008838:	4610      	mov	r0, r2
 800883a:	f7fe f9b8 	bl	8006bae <vListInsert>
 800883e:	e012      	b.n	8008866 <prvInsertTimerInActiveList+0x72>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
<<<<<<< HEAD
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	429a      	cmp	r2, r3
 8008842:	d206      	bcs.n	8008852 <prvInsertTimerInActiveList+0x62>
 8008844:	68ba      	ldr	r2, [r7, #8]
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	429a      	cmp	r2, r3
 800884a:	d302      	bcc.n	8008852 <prvInsertTimerInActiveList+0x62>
=======
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	429a      	cmp	r2, r3
 8008846:	d206      	bcs.n	8008856 <prvInsertTimerInActiveList+0x62>
 8008848:	68ba      	ldr	r2, [r7, #8]
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	429a      	cmp	r2, r3
 800884e:	d302      	bcc.n	8008856 <prvInsertTimerInActiveList+0x62>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
<<<<<<< HEAD
 800884c:	2301      	movs	r3, #1
 800884e:	617b      	str	r3, [r7, #20]
 8008850:	e007      	b.n	8008862 <prvInsertTimerInActiveList+0x72>
=======
 8008850:	2301      	movs	r3, #1
 8008852:	617b      	str	r3, [r7, #20]
 8008854:	e007      	b.n	8008866 <prvInsertTimerInActiveList+0x72>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
<<<<<<< HEAD
 8008852:	4b07      	ldr	r3, [pc, #28]	@ (8008870 <prvInsertTimerInActiveList+0x80>)
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	3304      	adds	r3, #4
 800885a:	4619      	mov	r1, r3
 800885c:	4610      	mov	r0, r2
 800885e:	f7fe f9a4 	bl	8006baa <vListInsert>
=======
 8008856:	4b07      	ldr	r3, [pc, #28]	@ (8008874 <prvInsertTimerInActiveList+0x80>)
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	3304      	adds	r3, #4
 800885e:	4619      	mov	r1, r3
 8008860:	4610      	mov	r0, r2
 8008862:	f7fe f9a4 	bl	8006bae <vListInsert>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		}
	}

	return xProcessTimerNow;
<<<<<<< HEAD
 8008862:	697b      	ldr	r3, [r7, #20]
}
 8008864:	4618      	mov	r0, r3
 8008866:	3718      	adds	r7, #24
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	200011bc 	.word	0x200011bc
 8008870:	200011b8 	.word	0x200011b8

08008874 <prvProcessReceivedCommands>:
=======
 8008866:	697b      	ldr	r3, [r7, #20]
}
 8008868:	4618      	mov	r0, r3
 800886a:	3718      	adds	r7, #24
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}
 8008870:	200011c4 	.word	0x200011c4
 8008874:	200011c0 	.word	0x200011c0

08008878 <prvProcessReceivedCommands>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
<<<<<<< HEAD
 8008874:	b580      	push	{r7, lr}
 8008876:	b08e      	sub	sp, #56	@ 0x38
 8008878:	af02      	add	r7, sp, #8
=======
 8008878:	b580      	push	{r7, lr}
 800887a:	b08e      	sub	sp, #56	@ 0x38
 800887c:	af02      	add	r7, sp, #8
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
<<<<<<< HEAD
 800887a:	e0ce      	b.n	8008a1a <prvProcessReceivedCommands+0x1a6>
=======
 800887e:	e0ce      	b.n	8008a1e <prvProcessReceivedCommands+0x1a6>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
<<<<<<< HEAD
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2b00      	cmp	r3, #0
 8008880:	da19      	bge.n	80088b6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008882:	1d3b      	adds	r3, r7, #4
 8008884:	3304      	adds	r3, #4
 8008886:	62fb      	str	r3, [r7, #44]	@ 0x2c
=======
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2b00      	cmp	r3, #0
 8008884:	da19      	bge.n	80088ba <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008886:	1d3b      	adds	r3, r7, #4
 8008888:	3304      	adds	r3, #4
 800888a:	62fb      	str	r3, [r7, #44]	@ 0x2c
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
<<<<<<< HEAD
 8008888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800888a:	2b00      	cmp	r3, #0
 800888c:	d10b      	bne.n	80088a6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800888e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008892:	f383 8811 	msr	BASEPRI, r3
 8008896:	f3bf 8f6f 	isb	sy
 800889a:	f3bf 8f4f 	dsb	sy
 800889e:	61fb      	str	r3, [r7, #28]
}
 80088a0:	bf00      	nop
 80088a2:	bf00      	nop
 80088a4:	e7fd      	b.n	80088a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80088a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088ac:	6850      	ldr	r0, [r2, #4]
 80088ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088b0:	6892      	ldr	r2, [r2, #8]
 80088b2:	4611      	mov	r1, r2
 80088b4:	4798      	blx	r3
=======
 800888c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800888e:	2b00      	cmp	r3, #0
 8008890:	d10b      	bne.n	80088aa <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008896:	f383 8811 	msr	BASEPRI, r3
 800889a:	f3bf 8f6f 	isb	sy
 800889e:	f3bf 8f4f 	dsb	sy
 80088a2:	61fb      	str	r3, [r7, #28]
}
 80088a4:	bf00      	nop
 80088a6:	bf00      	nop
 80088a8:	e7fd      	b.n	80088a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80088aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088b0:	6850      	ldr	r0, [r2, #4]
 80088b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088b4:	6892      	ldr	r2, [r2, #8]
 80088b6:	4611      	mov	r1, r2
 80088b8:	4798      	blx	r3
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
<<<<<<< HEAD
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	f2c0 80ae 	blt.w	8008a1a <prvProcessReceivedCommands+0x1a6>
=======
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	f2c0 80ae 	blt.w	8008a1e <prvProcessReceivedCommands+0x1a6>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
<<<<<<< HEAD
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80088c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088c4:	695b      	ldr	r3, [r3, #20]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d004      	beq.n	80088d4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088cc:	3304      	adds	r3, #4
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7fe f9a4 	bl	8006c1c <uxListRemove>
=======
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80088c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088c8:	695b      	ldr	r3, [r3, #20]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d004      	beq.n	80088d8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088d0:	3304      	adds	r3, #4
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7fe f9a4 	bl	8006c20 <uxListRemove>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
<<<<<<< HEAD
 80088d4:	463b      	mov	r3, r7
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7ff ff6a 	bl	80087b0 <prvSampleTimeNow>
 80088dc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2b09      	cmp	r3, #9
 80088e2:	f200 8097 	bhi.w	8008a14 <prvProcessReceivedCommands+0x1a0>
 80088e6:	a201      	add	r2, pc, #4	@ (adr r2, 80088ec <prvProcessReceivedCommands+0x78>)
 80088e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ec:	08008915 	.word	0x08008915
 80088f0:	08008915 	.word	0x08008915
 80088f4:	08008915 	.word	0x08008915
 80088f8:	0800898b 	.word	0x0800898b
 80088fc:	0800899f 	.word	0x0800899f
 8008900:	080089eb 	.word	0x080089eb
 8008904:	08008915 	.word	0x08008915
 8008908:	08008915 	.word	0x08008915
 800890c:	0800898b 	.word	0x0800898b
 8008910:	0800899f 	.word	0x0800899f
=======
 80088d8:	463b      	mov	r3, r7
 80088da:	4618      	mov	r0, r3
 80088dc:	f7ff ff6a 	bl	80087b4 <prvSampleTimeNow>
 80088e0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2b09      	cmp	r3, #9
 80088e6:	f200 8097 	bhi.w	8008a18 <prvProcessReceivedCommands+0x1a0>
 80088ea:	a201      	add	r2, pc, #4	@ (adr r2, 80088f0 <prvProcessReceivedCommands+0x78>)
 80088ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f0:	08008919 	.word	0x08008919
 80088f4:	08008919 	.word	0x08008919
 80088f8:	08008919 	.word	0x08008919
 80088fc:	0800898f 	.word	0x0800898f
 8008900:	080089a3 	.word	0x080089a3
 8008904:	080089ef 	.word	0x080089ef
 8008908:	08008919 	.word	0x08008919
 800890c:	08008919 	.word	0x08008919
 8008910:	0800898f 	.word	0x0800898f
 8008914:	080089a3 	.word	0x080089a3
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
<<<<<<< HEAD
 8008914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008916:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800891a:	f043 0301 	orr.w	r3, r3, #1
 800891e:	b2da      	uxtb	r2, r3
 8008920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008922:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008926:	68ba      	ldr	r2, [r7, #8]
 8008928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800892a:	699b      	ldr	r3, [r3, #24]
 800892c:	18d1      	adds	r1, r2, r3
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008932:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008934:	f7ff ff5c 	bl	80087f0 <prvInsertTimerInActiveList>
 8008938:	4603      	mov	r3, r0
 800893a:	2b00      	cmp	r3, #0
 800893c:	d06c      	beq.n	8008a18 <prvProcessReceivedCommands+0x1a4>
=======
 8008918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800891a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800891e:	f043 0301 	orr.w	r3, r3, #1
 8008922:	b2da      	uxtb	r2, r3
 8008924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008926:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800892a:	68ba      	ldr	r2, [r7, #8]
 800892c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800892e:	699b      	ldr	r3, [r3, #24]
 8008930:	18d1      	adds	r1, r2, r3
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008936:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008938:	f7ff ff5c 	bl	80087f4 <prvInsertTimerInActiveList>
 800893c:	4603      	mov	r3, r0
 800893e:	2b00      	cmp	r3, #0
 8008940:	d06c      	beq.n	8008a1c <prvProcessReceivedCommands+0x1a4>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< HEAD
 800893e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008940:	6a1b      	ldr	r3, [r3, #32]
 8008942:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008944:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008948:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800894c:	f003 0304 	and.w	r3, r3, #4
 8008950:	2b00      	cmp	r3, #0
 8008952:	d061      	beq.n	8008a18 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008954:	68ba      	ldr	r2, [r7, #8]
 8008956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008958:	699b      	ldr	r3, [r3, #24]
 800895a:	441a      	add	r2, r3
 800895c:	2300      	movs	r3, #0
 800895e:	9300      	str	r3, [sp, #0]
 8008960:	2300      	movs	r3, #0
 8008962:	2100      	movs	r1, #0
 8008964:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008966:	f7ff fe01 	bl	800856c <xTimerGenericCommand>
 800896a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800896c:	6a3b      	ldr	r3, [r7, #32]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d152      	bne.n	8008a18 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008976:	f383 8811 	msr	BASEPRI, r3
 800897a:	f3bf 8f6f 	isb	sy
 800897e:	f3bf 8f4f 	dsb	sy
 8008982:	61bb      	str	r3, [r7, #24]
}
 8008984:	bf00      	nop
 8008986:	bf00      	nop
 8008988:	e7fd      	b.n	8008986 <prvProcessReceivedCommands+0x112>
=======
 8008942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008944:	6a1b      	ldr	r3, [r3, #32]
 8008946:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008948:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800894a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800894c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008950:	f003 0304 	and.w	r3, r3, #4
 8008954:	2b00      	cmp	r3, #0
 8008956:	d061      	beq.n	8008a1c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800895c:	699b      	ldr	r3, [r3, #24]
 800895e:	441a      	add	r2, r3
 8008960:	2300      	movs	r3, #0
 8008962:	9300      	str	r3, [sp, #0]
 8008964:	2300      	movs	r3, #0
 8008966:	2100      	movs	r1, #0
 8008968:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800896a:	f7ff fe01 	bl	8008570 <xTimerGenericCommand>
 800896e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008970:	6a3b      	ldr	r3, [r7, #32]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d152      	bne.n	8008a1c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800897a:	f383 8811 	msr	BASEPRI, r3
 800897e:	f3bf 8f6f 	isb	sy
 8008982:	f3bf 8f4f 	dsb	sy
 8008986:	61bb      	str	r3, [r7, #24]
}
 8008988:	bf00      	nop
 800898a:	bf00      	nop
 800898c:	e7fd      	b.n	800898a <prvProcessReceivedCommands+0x112>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
<<<<<<< HEAD
 800898a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800898c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008990:	f023 0301 	bic.w	r3, r3, #1
 8008994:	b2da      	uxtb	r2, r3
 8008996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008998:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800899c:	e03d      	b.n	8008a1a <prvProcessReceivedCommands+0x1a6>
=======
 800898e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008990:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008994:	f023 0301 	bic.w	r3, r3, #1
 8008998:	b2da      	uxtb	r2, r3
 800899a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800899c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80089a0:	e03d      	b.n	8008a1e <prvProcessReceivedCommands+0x1a6>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
<<<<<<< HEAD
 800899e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089a4:	f043 0301 	orr.w	r3, r3, #1
 80089a8:	b2da      	uxtb	r2, r3
 80089aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80089b0:	68ba      	ldr	r2, [r7, #8]
 80089b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80089b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b8:	699b      	ldr	r3, [r3, #24]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d10b      	bne.n	80089d6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80089be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c2:	f383 8811 	msr	BASEPRI, r3
 80089c6:	f3bf 8f6f 	isb	sy
 80089ca:	f3bf 8f4f 	dsb	sy
 80089ce:	617b      	str	r3, [r7, #20]
}
 80089d0:	bf00      	nop
 80089d2:	bf00      	nop
 80089d4:	e7fd      	b.n	80089d2 <prvProcessReceivedCommands+0x15e>
=======
 80089a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089a8:	f043 0301 	orr.w	r3, r3, #1
 80089ac:	b2da      	uxtb	r2, r3
 80089ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80089b4:	68ba      	ldr	r2, [r7, #8]
 80089b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80089ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089bc:	699b      	ldr	r3, [r3, #24]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d10b      	bne.n	80089da <prvProcessReceivedCommands+0x162>
	__asm volatile
 80089c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c6:	f383 8811 	msr	BASEPRI, r3
 80089ca:	f3bf 8f6f 	isb	sy
 80089ce:	f3bf 8f4f 	dsb	sy
 80089d2:	617b      	str	r3, [r7, #20]
}
 80089d4:	bf00      	nop
 80089d6:	bf00      	nop
 80089d8:	e7fd      	b.n	80089d6 <prvProcessReceivedCommands+0x15e>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
<<<<<<< HEAD
 80089d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d8:	699a      	ldr	r2, [r3, #24]
 80089da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089dc:	18d1      	adds	r1, r2, r3
 80089de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089e4:	f7ff ff04 	bl	80087f0 <prvInsertTimerInActiveList>
					break;
 80089e8:	e017      	b.n	8008a1a <prvProcessReceivedCommands+0x1a6>
=======
 80089da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089dc:	699a      	ldr	r2, [r3, #24]
 80089de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e0:	18d1      	adds	r1, r2, r3
 80089e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089e8:	f7ff ff04 	bl	80087f4 <prvInsertTimerInActiveList>
					break;
 80089ec:	e017      	b.n	8008a1e <prvProcessReceivedCommands+0x1a6>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
<<<<<<< HEAD
 80089ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089f0:	f003 0302 	and.w	r3, r3, #2
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d103      	bne.n	8008a00 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80089f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089fa:	f000 fbe5 	bl	80091c8 <vPortFree>
=======
 80089ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089f4:	f003 0302 	and.w	r3, r3, #2
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d103      	bne.n	8008a04 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80089fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089fe:	f000 fbeb 	bl	80091d8 <vPortFree>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
<<<<<<< HEAD
 80089fe:	e00c      	b.n	8008a1a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a06:	f023 0301 	bic.w	r3, r3, #1
 8008a0a:	b2da      	uxtb	r2, r3
 8008a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008a12:	e002      	b.n	8008a1a <prvProcessReceivedCommands+0x1a6>
=======
 8008a02:	e00c      	b.n	8008a1e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a0a:	f023 0301 	bic.w	r3, r3, #1
 8008a0e:	b2da      	uxtb	r2, r3
 8008a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008a16:	e002      	b.n	8008a1e <prvProcessReceivedCommands+0x1a6>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

				default	:
					/* Don't expect to get here. */
					break;
<<<<<<< HEAD
 8008a14:	bf00      	nop
 8008a16:	e000      	b.n	8008a1a <prvProcessReceivedCommands+0x1a6>
					break;
 8008a18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a1a:	4b08      	ldr	r3, [pc, #32]	@ (8008a3c <prvProcessReceivedCommands+0x1c8>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	1d39      	adds	r1, r7, #4
 8008a20:	2200      	movs	r2, #0
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7fe fbce 	bl	80071c4 <xQueueReceive>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	f47f af26 	bne.w	800887c <prvProcessReceivedCommands+0x8>
=======
 8008a18:	bf00      	nop
 8008a1a:	e000      	b.n	8008a1e <prvProcessReceivedCommands+0x1a6>
					break;
 8008a1c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a1e:	4b08      	ldr	r3, [pc, #32]	@ (8008a40 <prvProcessReceivedCommands+0x1c8>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	1d39      	adds	r1, r7, #4
 8008a24:	2200      	movs	r2, #0
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7fe fbce 	bl	80071c8 <xQueueReceive>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	f47f af26 	bne.w	8008880 <prvProcessReceivedCommands+0x8>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			}
		}
	}
}
<<<<<<< HEAD
 8008a30:	bf00      	nop
 8008a32:	bf00      	nop
 8008a34:	3730      	adds	r7, #48	@ 0x30
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	200011c0 	.word	0x200011c0

08008a40 <prvSwitchTimerLists>:
=======
 8008a34:	bf00      	nop
 8008a36:	bf00      	nop
 8008a38:	3730      	adds	r7, #48	@ 0x30
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	200011c8 	.word	0x200011c8

08008a44 <prvSwitchTimerLists>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
<<<<<<< HEAD
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b088      	sub	sp, #32
 8008a44:	af02      	add	r7, sp, #8
=======
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b088      	sub	sp, #32
 8008a48:	af02      	add	r7, sp, #8
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
<<<<<<< HEAD
 8008a46:	e049      	b.n	8008adc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a48:	4b2e      	ldr	r3, [pc, #184]	@ (8008b04 <prvSwitchTimerLists+0xc4>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a52:	4b2c      	ldr	r3, [pc, #176]	@ (8008b04 <prvSwitchTimerLists+0xc4>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	3304      	adds	r3, #4
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7fe f8db 	bl	8006c1c <uxListRemove>
=======
 8008a4a:	e049      	b.n	8008ae0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a4c:	4b2e      	ldr	r3, [pc, #184]	@ (8008b08 <prvSwitchTimerLists+0xc4>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a56:	4b2c      	ldr	r3, [pc, #176]	@ (8008b08 <prvSwitchTimerLists+0xc4>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	3304      	adds	r3, #4
 8008a64:	4618      	mov	r0, r3
 8008a66:	f7fe f8db 	bl	8006c20 <uxListRemove>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< HEAD
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6a1b      	ldr	r3, [r3, #32]
 8008a6a:	68f8      	ldr	r0, [r7, #12]
 8008a6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a74:	f003 0304 	and.w	r3, r3, #4
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d02f      	beq.n	8008adc <prvSwitchTimerLists+0x9c>
=======
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6a1b      	ldr	r3, [r3, #32]
 8008a6e:	68f8      	ldr	r0, [r7, #12]
 8008a70:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a78:	f003 0304 	and.w	r3, r3, #4
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d02f      	beq.n	8008ae0 <prvSwitchTimerLists+0x9c>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
<<<<<<< HEAD
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	699b      	ldr	r3, [r3, #24]
 8008a80:	693a      	ldr	r2, [r7, #16]
 8008a82:	4413      	add	r3, r2
 8008a84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008a86:	68ba      	ldr	r2, [r7, #8]
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d90e      	bls.n	8008aac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	68ba      	ldr	r2, [r7, #8]
 8008a92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	68fa      	ldr	r2, [r7, #12]
 8008a98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8008b04 <prvSwitchTimerLists+0xc4>)
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	3304      	adds	r3, #4
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	4610      	mov	r0, r2
 8008aa6:	f7fe f880 	bl	8006baa <vListInsert>
 8008aaa:	e017      	b.n	8008adc <prvSwitchTimerLists+0x9c>
=======
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	699b      	ldr	r3, [r3, #24]
 8008a84:	693a      	ldr	r2, [r7, #16]
 8008a86:	4413      	add	r3, r2
 8008a88:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008a8a:	68ba      	ldr	r2, [r7, #8]
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d90e      	bls.n	8008ab0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	68ba      	ldr	r2, [r7, #8]
 8008a96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	68fa      	ldr	r2, [r7, #12]
 8008a9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8008b08 <prvSwitchTimerLists+0xc4>)
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	3304      	adds	r3, #4
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	4610      	mov	r0, r2
 8008aaa:	f7fe f880 	bl	8006bae <vListInsert>
 8008aae:	e017      	b.n	8008ae0 <prvSwitchTimerLists+0x9c>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
<<<<<<< HEAD
 8008aac:	2300      	movs	r3, #0
 8008aae:	9300      	str	r3, [sp, #0]
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	693a      	ldr	r2, [r7, #16]
 8008ab4:	2100      	movs	r1, #0
 8008ab6:	68f8      	ldr	r0, [r7, #12]
 8008ab8:	f7ff fd58 	bl	800856c <xTimerGenericCommand>
 8008abc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d10b      	bne.n	8008adc <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ac8:	f383 8811 	msr	BASEPRI, r3
 8008acc:	f3bf 8f6f 	isb	sy
 8008ad0:	f3bf 8f4f 	dsb	sy
 8008ad4:	603b      	str	r3, [r7, #0]
}
 8008ad6:	bf00      	nop
 8008ad8:	bf00      	nop
 8008ada:	e7fd      	b.n	8008ad8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008adc:	4b09      	ldr	r3, [pc, #36]	@ (8008b04 <prvSwitchTimerLists+0xc4>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1b0      	bne.n	8008a48 <prvSwitchTimerLists+0x8>
=======
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	9300      	str	r3, [sp, #0]
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	693a      	ldr	r2, [r7, #16]
 8008ab8:	2100      	movs	r1, #0
 8008aba:	68f8      	ldr	r0, [r7, #12]
 8008abc:	f7ff fd58 	bl	8008570 <xTimerGenericCommand>
 8008ac0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d10b      	bne.n	8008ae0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008acc:	f383 8811 	msr	BASEPRI, r3
 8008ad0:	f3bf 8f6f 	isb	sy
 8008ad4:	f3bf 8f4f 	dsb	sy
 8008ad8:	603b      	str	r3, [r7, #0]
}
 8008ada:	bf00      	nop
 8008adc:	bf00      	nop
 8008ade:	e7fd      	b.n	8008adc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ae0:	4b09      	ldr	r3, [pc, #36]	@ (8008b08 <prvSwitchTimerLists+0xc4>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1b0      	bne.n	8008a4c <prvSwitchTimerLists+0x8>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
<<<<<<< HEAD
 8008ae6:	4b07      	ldr	r3, [pc, #28]	@ (8008b04 <prvSwitchTimerLists+0xc4>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008aec:	4b06      	ldr	r3, [pc, #24]	@ (8008b08 <prvSwitchTimerLists+0xc8>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a04      	ldr	r2, [pc, #16]	@ (8008b04 <prvSwitchTimerLists+0xc4>)
 8008af2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008af4:	4a04      	ldr	r2, [pc, #16]	@ (8008b08 <prvSwitchTimerLists+0xc8>)
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	6013      	str	r3, [r2, #0]
}
 8008afa:	bf00      	nop
 8008afc:	3718      	adds	r7, #24
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	200011b8 	.word	0x200011b8
 8008b08:	200011bc 	.word	0x200011bc

08008b0c <prvCheckForValidListAndQueue>:
=======
 8008aea:	4b07      	ldr	r3, [pc, #28]	@ (8008b08 <prvSwitchTimerLists+0xc4>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008af0:	4b06      	ldr	r3, [pc, #24]	@ (8008b0c <prvSwitchTimerLists+0xc8>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a04      	ldr	r2, [pc, #16]	@ (8008b08 <prvSwitchTimerLists+0xc4>)
 8008af6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008af8:	4a04      	ldr	r2, [pc, #16]	@ (8008b0c <prvSwitchTimerLists+0xc8>)
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	6013      	str	r3, [r2, #0]
}
 8008afe:	bf00      	nop
 8008b00:	3718      	adds	r7, #24
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	200011c0 	.word	0x200011c0
 8008b0c:	200011c4 	.word	0x200011c4

08008b10 <prvCheckForValidListAndQueue>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
<<<<<<< HEAD
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af02      	add	r7, sp, #8
=======
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af02      	add	r7, sp, #8
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 8008b12:	f000 f969 	bl	8008de8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008b16:	4b15      	ldr	r3, [pc, #84]	@ (8008b6c <prvCheckForValidListAndQueue+0x60>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d120      	bne.n	8008b60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008b1e:	4814      	ldr	r0, [pc, #80]	@ (8008b70 <prvCheckForValidListAndQueue+0x64>)
 8008b20:	f7fd fff2 	bl	8006b08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008b24:	4813      	ldr	r0, [pc, #76]	@ (8008b74 <prvCheckForValidListAndQueue+0x68>)
 8008b26:	f7fd ffef 	bl	8006b08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008b2a:	4b13      	ldr	r3, [pc, #76]	@ (8008b78 <prvCheckForValidListAndQueue+0x6c>)
 8008b2c:	4a10      	ldr	r2, [pc, #64]	@ (8008b70 <prvCheckForValidListAndQueue+0x64>)
 8008b2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008b30:	4b12      	ldr	r3, [pc, #72]	@ (8008b7c <prvCheckForValidListAndQueue+0x70>)
 8008b32:	4a10      	ldr	r2, [pc, #64]	@ (8008b74 <prvCheckForValidListAndQueue+0x68>)
 8008b34:	601a      	str	r2, [r3, #0]
=======
 8008b16:	f000 f96f 	bl	8008df8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008b1a:	4b15      	ldr	r3, [pc, #84]	@ (8008b70 <prvCheckForValidListAndQueue+0x60>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d120      	bne.n	8008b64 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008b22:	4814      	ldr	r0, [pc, #80]	@ (8008b74 <prvCheckForValidListAndQueue+0x64>)
 8008b24:	f7fd fff2 	bl	8006b0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008b28:	4813      	ldr	r0, [pc, #76]	@ (8008b78 <prvCheckForValidListAndQueue+0x68>)
 8008b2a:	f7fd ffef 	bl	8006b0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008b2e:	4b13      	ldr	r3, [pc, #76]	@ (8008b7c <prvCheckForValidListAndQueue+0x6c>)
 8008b30:	4a10      	ldr	r2, [pc, #64]	@ (8008b74 <prvCheckForValidListAndQueue+0x64>)
 8008b32:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008b34:	4b12      	ldr	r3, [pc, #72]	@ (8008b80 <prvCheckForValidListAndQueue+0x70>)
 8008b36:	4a10      	ldr	r2, [pc, #64]	@ (8008b78 <prvCheckForValidListAndQueue+0x68>)
 8008b38:	601a      	str	r2, [r3, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
<<<<<<< HEAD
 8008b36:	2300      	movs	r3, #0
 8008b38:	9300      	str	r3, [sp, #0]
 8008b3a:	4b11      	ldr	r3, [pc, #68]	@ (8008b80 <prvCheckForValidListAndQueue+0x74>)
 8008b3c:	4a11      	ldr	r2, [pc, #68]	@ (8008b84 <prvCheckForValidListAndQueue+0x78>)
 8008b3e:	2110      	movs	r1, #16
 8008b40:	200a      	movs	r0, #10
 8008b42:	f7fe f8ff 	bl	8006d44 <xQueueGenericCreateStatic>
 8008b46:	4603      	mov	r3, r0
 8008b48:	4a08      	ldr	r2, [pc, #32]	@ (8008b6c <prvCheckForValidListAndQueue+0x60>)
 8008b4a:	6013      	str	r3, [r2, #0]
=======
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	9300      	str	r3, [sp, #0]
 8008b3e:	4b11      	ldr	r3, [pc, #68]	@ (8008b84 <prvCheckForValidListAndQueue+0x74>)
 8008b40:	4a11      	ldr	r2, [pc, #68]	@ (8008b88 <prvCheckForValidListAndQueue+0x78>)
 8008b42:	2110      	movs	r1, #16
 8008b44:	200a      	movs	r0, #10
 8008b46:	f7fe f8ff 	bl	8006d48 <xQueueGenericCreateStatic>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	4a08      	ldr	r2, [pc, #32]	@ (8008b70 <prvCheckForValidListAndQueue+0x60>)
 8008b4e:	6013      	str	r3, [r2, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
<<<<<<< HEAD
 8008b4c:	4b07      	ldr	r3, [pc, #28]	@ (8008b6c <prvCheckForValidListAndQueue+0x60>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d005      	beq.n	8008b60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008b54:	4b05      	ldr	r3, [pc, #20]	@ (8008b6c <prvCheckForValidListAndQueue+0x60>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	490b      	ldr	r1, [pc, #44]	@ (8008b88 <prvCheckForValidListAndQueue+0x7c>)
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7fe fd24 	bl	80075a8 <vQueueAddToRegistry>
=======
 8008b50:	4b07      	ldr	r3, [pc, #28]	@ (8008b70 <prvCheckForValidListAndQueue+0x60>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d005      	beq.n	8008b64 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008b58:	4b05      	ldr	r3, [pc, #20]	@ (8008b70 <prvCheckForValidListAndQueue+0x60>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	490b      	ldr	r1, [pc, #44]	@ (8008b8c <prvCheckForValidListAndQueue+0x7c>)
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7fe fd24 	bl	80075ac <vQueueAddToRegistry>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 8008b60:	f000 f974 	bl	8008e4c <vPortExitCritical>
}
 8008b64:	bf00      	nop
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	200011c0 	.word	0x200011c0
 8008b70:	20001190 	.word	0x20001190
 8008b74:	200011a4 	.word	0x200011a4
 8008b78:	200011b8 	.word	0x200011b8
 8008b7c:	200011bc 	.word	0x200011bc
 8008b80:	2000126c 	.word	0x2000126c
 8008b84:	200011cc 	.word	0x200011cc
 8008b88:	0800c23c 	.word	0x0800c23c

08008b8c <pxPortInitialiseStack>:
=======
 8008b64:	f000 f97a 	bl	8008e5c <vPortExitCritical>
}
 8008b68:	bf00      	nop
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	200011c8 	.word	0x200011c8
 8008b74:	20001198 	.word	0x20001198
 8008b78:	200011ac 	.word	0x200011ac
 8008b7c:	200011c0 	.word	0x200011c0
 8008b80:	200011c4 	.word	0x200011c4
 8008b84:	20001274 	.word	0x20001274
 8008b88:	200011d4 	.word	0x200011d4
 8008b8c:	0800c31c 	.word	0x0800c31c

08008b90 <pxPortInitialiseStack>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
<<<<<<< HEAD
 8008b8c:	b480      	push	{r7}
 8008b8e:	b085      	sub	sp, #20
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	607a      	str	r2, [r7, #4]
=======
 8008b90:	b480      	push	{r7}
 8008b92:	b085      	sub	sp, #20
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	607a      	str	r2, [r7, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
<<<<<<< HEAD
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	3b04      	subs	r3, #4
 8008b9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008ba4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	3b04      	subs	r3, #4
 8008baa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	f023 0201 	bic.w	r2, r3, #1
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	3b04      	subs	r3, #4
 8008bba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008bbc:	4a0c      	ldr	r2, [pc, #48]	@ (8008bf0 <pxPortInitialiseStack+0x64>)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	3b14      	subs	r3, #20
 8008bc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	601a      	str	r2, [r3, #0]
=======
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	3b04      	subs	r3, #4
 8008ba0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008ba8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	3b04      	subs	r3, #4
 8008bae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	f023 0201 	bic.w	r2, r3, #1
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	3b04      	subs	r3, #4
 8008bbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008bc0:	4a0c      	ldr	r2, [pc, #48]	@ (8008bf4 <pxPortInitialiseStack+0x64>)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	3b14      	subs	r3, #20
 8008bca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	601a      	str	r2, [r3, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
<<<<<<< HEAD
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	3b04      	subs	r3, #4
 8008bd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f06f 0202 	mvn.w	r2, #2
 8008bda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	3b20      	subs	r3, #32
 8008be0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008be2:	68fb      	ldr	r3, [r7, #12]
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3714      	adds	r7, #20
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr
 8008bf0:	08008bf5 	.word	0x08008bf5

08008bf4 <prvTaskExitError>:
=======
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	3b04      	subs	r3, #4
 8008bd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f06f 0202 	mvn.w	r2, #2
 8008bde:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	3b20      	subs	r3, #32
 8008be4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008be6:	68fb      	ldr	r3, [r7, #12]
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3714      	adds	r7, #20
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr
 8008bf4:	08008bf9 	.word	0x08008bf9

08008bf8 <prvTaskExitError>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
<<<<<<< HEAD
 8008bf4:	b480      	push	{r7}
 8008bf6:	b085      	sub	sp, #20
 8008bf8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	607b      	str	r3, [r7, #4]
=======
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	607b      	str	r3, [r7, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
<<<<<<< HEAD
 8008bfe:	4b13      	ldr	r3, [pc, #76]	@ (8008c4c <prvTaskExitError+0x58>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c06:	d00b      	beq.n	8008c20 <prvTaskExitError+0x2c>
	__asm volatile
 8008c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c0c:	f383 8811 	msr	BASEPRI, r3
 8008c10:	f3bf 8f6f 	isb	sy
 8008c14:	f3bf 8f4f 	dsb	sy
 8008c18:	60fb      	str	r3, [r7, #12]
}
 8008c1a:	bf00      	nop
 8008c1c:	bf00      	nop
 8008c1e:	e7fd      	b.n	8008c1c <prvTaskExitError+0x28>
	__asm volatile
 8008c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c24:	f383 8811 	msr	BASEPRI, r3
 8008c28:	f3bf 8f6f 	isb	sy
 8008c2c:	f3bf 8f4f 	dsb	sy
 8008c30:	60bb      	str	r3, [r7, #8]
}
 8008c32:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008c34:	bf00      	nop
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d0fc      	beq.n	8008c36 <prvTaskExitError+0x42>
=======
 8008c02:	4b13      	ldr	r3, [pc, #76]	@ (8008c50 <prvTaskExitError+0x58>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c0a:	d00b      	beq.n	8008c24 <prvTaskExitError+0x2c>
	__asm volatile
 8008c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c10:	f383 8811 	msr	BASEPRI, r3
 8008c14:	f3bf 8f6f 	isb	sy
 8008c18:	f3bf 8f4f 	dsb	sy
 8008c1c:	60fb      	str	r3, [r7, #12]
}
 8008c1e:	bf00      	nop
 8008c20:	bf00      	nop
 8008c22:	e7fd      	b.n	8008c20 <prvTaskExitError+0x28>
	__asm volatile
 8008c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c28:	f383 8811 	msr	BASEPRI, r3
 8008c2c:	f3bf 8f6f 	isb	sy
 8008c30:	f3bf 8f4f 	dsb	sy
 8008c34:	60bb      	str	r3, [r7, #8]
}
 8008c36:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008c38:	bf00      	nop
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d0fc      	beq.n	8008c3a <prvTaskExitError+0x42>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
<<<<<<< HEAD
 8008c3c:	bf00      	nop
 8008c3e:	bf00      	nop
 8008c40:	3714      	adds	r7, #20
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	2000000c 	.word	0x2000000c

08008c50 <SVC_Handler>:
=======
 8008c40:	bf00      	nop
 8008c42:	bf00      	nop
 8008c44:	3714      	adds	r7, #20
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr
 8008c4e:	bf00      	nop
 8008c50:	2000000c 	.word	0x2000000c
	...

08008c60 <SVC_Handler>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
<<<<<<< HEAD
 8008c50:	4b07      	ldr	r3, [pc, #28]	@ (8008c70 <pxCurrentTCBConst2>)
 8008c52:	6819      	ldr	r1, [r3, #0]
 8008c54:	6808      	ldr	r0, [r1, #0]
 8008c56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c5a:	f380 8809 	msr	PSP, r0
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	f04f 0000 	mov.w	r0, #0
 8008c66:	f380 8811 	msr	BASEPRI, r0
 8008c6a:	4770      	bx	lr
 8008c6c:	f3af 8000 	nop.w

08008c70 <pxCurrentTCBConst2>:
 8008c70:	20000c90 	.word	0x20000c90
=======
 8008c60:	4b07      	ldr	r3, [pc, #28]	@ (8008c80 <pxCurrentTCBConst2>)
 8008c62:	6819      	ldr	r1, [r3, #0]
 8008c64:	6808      	ldr	r0, [r1, #0]
 8008c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c6a:	f380 8809 	msr	PSP, r0
 8008c6e:	f3bf 8f6f 	isb	sy
 8008c72:	f04f 0000 	mov.w	r0, #0
 8008c76:	f380 8811 	msr	BASEPRI, r0
 8008c7a:	4770      	bx	lr
 8008c7c:	f3af 8000 	nop.w

08008c80 <pxCurrentTCBConst2>:
 8008c80:	20000c98 	.word	0x20000c98
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
<<<<<<< HEAD
 8008c74:	bf00      	nop
 8008c76:	bf00      	nop

08008c78 <prvPortStartFirstTask>:
=======
 8008c84:	bf00      	nop
 8008c86:	bf00      	nop

08008c88 <prvPortStartFirstTask>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
<<<<<<< HEAD
 8008c78:	4808      	ldr	r0, [pc, #32]	@ (8008c9c <prvPortStartFirstTask+0x24>)
 8008c7a:	6800      	ldr	r0, [r0, #0]
 8008c7c:	6800      	ldr	r0, [r0, #0]
 8008c7e:	f380 8808 	msr	MSP, r0
 8008c82:	f04f 0000 	mov.w	r0, #0
 8008c86:	f380 8814 	msr	CONTROL, r0
 8008c8a:	b662      	cpsie	i
 8008c8c:	b661      	cpsie	f
 8008c8e:	f3bf 8f4f 	dsb	sy
 8008c92:	f3bf 8f6f 	isb	sy
 8008c96:	df00      	svc	0
 8008c98:	bf00      	nop
=======
 8008c88:	4808      	ldr	r0, [pc, #32]	@ (8008cac <prvPortStartFirstTask+0x24>)
 8008c8a:	6800      	ldr	r0, [r0, #0]
 8008c8c:	6800      	ldr	r0, [r0, #0]
 8008c8e:	f380 8808 	msr	MSP, r0
 8008c92:	f04f 0000 	mov.w	r0, #0
 8008c96:	f380 8814 	msr	CONTROL, r0
 8008c9a:	b662      	cpsie	i
 8008c9c:	b661      	cpsie	f
 8008c9e:	f3bf 8f4f 	dsb	sy
 8008ca2:	f3bf 8f6f 	isb	sy
 8008ca6:	df00      	svc	0
 8008ca8:	bf00      	nop
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
<<<<<<< HEAD
 8008c9a:	bf00      	nop
 8008c9c:	e000ed08 	.word	0xe000ed08

08008ca0 <xPortStartScheduler>:
=======
 8008caa:	bf00      	nop
 8008cac:	e000ed08 	.word	0xe000ed08

08008cb0 <xPortStartScheduler>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
<<<<<<< HEAD
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b086      	sub	sp, #24
 8008ca4:	af00      	add	r7, sp, #0
=======
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b086      	sub	sp, #24
 8008cb4:	af00      	add	r7, sp, #0
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
<<<<<<< HEAD
 8008ca6:	4b47      	ldr	r3, [pc, #284]	@ (8008dc4 <xPortStartScheduler+0x124>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a47      	ldr	r2, [pc, #284]	@ (8008dc8 <xPortStartScheduler+0x128>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d10b      	bne.n	8008cc8 <xPortStartScheduler+0x28>
	__asm volatile
 8008cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cb4:	f383 8811 	msr	BASEPRI, r3
 8008cb8:	f3bf 8f6f 	isb	sy
 8008cbc:	f3bf 8f4f 	dsb	sy
 8008cc0:	60fb      	str	r3, [r7, #12]
}
 8008cc2:	bf00      	nop
 8008cc4:	bf00      	nop
 8008cc6:	e7fd      	b.n	8008cc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008cc8:	4b3e      	ldr	r3, [pc, #248]	@ (8008dc4 <xPortStartScheduler+0x124>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a3f      	ldr	r2, [pc, #252]	@ (8008dcc <xPortStartScheduler+0x12c>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d10b      	bne.n	8008cea <xPortStartScheduler+0x4a>
	__asm volatile
 8008cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cd6:	f383 8811 	msr	BASEPRI, r3
 8008cda:	f3bf 8f6f 	isb	sy
 8008cde:	f3bf 8f4f 	dsb	sy
 8008ce2:	613b      	str	r3, [r7, #16]
}
 8008ce4:	bf00      	nop
 8008ce6:	bf00      	nop
 8008ce8:	e7fd      	b.n	8008ce6 <xPortStartScheduler+0x46>
=======
 8008cb6:	4b47      	ldr	r3, [pc, #284]	@ (8008dd4 <xPortStartScheduler+0x124>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a47      	ldr	r2, [pc, #284]	@ (8008dd8 <xPortStartScheduler+0x128>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d10b      	bne.n	8008cd8 <xPortStartScheduler+0x28>
	__asm volatile
 8008cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc4:	f383 8811 	msr	BASEPRI, r3
 8008cc8:	f3bf 8f6f 	isb	sy
 8008ccc:	f3bf 8f4f 	dsb	sy
 8008cd0:	60fb      	str	r3, [r7, #12]
}
 8008cd2:	bf00      	nop
 8008cd4:	bf00      	nop
 8008cd6:	e7fd      	b.n	8008cd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008cd8:	4b3e      	ldr	r3, [pc, #248]	@ (8008dd4 <xPortStartScheduler+0x124>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a3f      	ldr	r2, [pc, #252]	@ (8008ddc <xPortStartScheduler+0x12c>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d10b      	bne.n	8008cfa <xPortStartScheduler+0x4a>
	__asm volatile
 8008ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ce6:	f383 8811 	msr	BASEPRI, r3
 8008cea:	f3bf 8f6f 	isb	sy
 8008cee:	f3bf 8f4f 	dsb	sy
 8008cf2:	613b      	str	r3, [r7, #16]
}
 8008cf4:	bf00      	nop
 8008cf6:	bf00      	nop
 8008cf8:	e7fd      	b.n	8008cf6 <xPortStartScheduler+0x46>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
<<<<<<< HEAD
 8008cea:	4b39      	ldr	r3, [pc, #228]	@ (8008dd0 <xPortStartScheduler+0x130>)
 8008cec:	617b      	str	r3, [r7, #20]
=======
 8008cfa:	4b39      	ldr	r3, [pc, #228]	@ (8008de0 <xPortStartScheduler+0x130>)
 8008cfc:	617b      	str	r3, [r7, #20]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
<<<<<<< HEAD
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	607b      	str	r3, [r7, #4]
=======
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	607b      	str	r3, [r7, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
<<<<<<< HEAD
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	22ff      	movs	r2, #255	@ 0xff
 8008cfa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008d04:	78fb      	ldrb	r3, [r7, #3]
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008d0c:	b2da      	uxtb	r2, r3
 8008d0e:	4b31      	ldr	r3, [pc, #196]	@ (8008dd4 <xPortStartScheduler+0x134>)
 8008d10:	701a      	strb	r2, [r3, #0]
=======
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	22ff      	movs	r2, #255	@ 0xff
 8008d0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008d14:	78fb      	ldrb	r3, [r7, #3]
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008d1c:	b2da      	uxtb	r2, r3
 8008d1e:	4b31      	ldr	r3, [pc, #196]	@ (8008de4 <xPortStartScheduler+0x134>)
 8008d20:	701a      	strb	r2, [r3, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
<<<<<<< HEAD
 8008d12:	4b31      	ldr	r3, [pc, #196]	@ (8008dd8 <xPortStartScheduler+0x138>)
 8008d14:	2207      	movs	r2, #7
 8008d16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d18:	e009      	b.n	8008d2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008d1a:	4b2f      	ldr	r3, [pc, #188]	@ (8008dd8 <xPortStartScheduler+0x138>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	3b01      	subs	r3, #1
 8008d20:	4a2d      	ldr	r2, [pc, #180]	@ (8008dd8 <xPortStartScheduler+0x138>)
 8008d22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008d24:	78fb      	ldrb	r3, [r7, #3]
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	005b      	lsls	r3, r3, #1
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d2e:	78fb      	ldrb	r3, [r7, #3]
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d36:	2b80      	cmp	r3, #128	@ 0x80
 8008d38:	d0ef      	beq.n	8008d1a <xPortStartScheduler+0x7a>
=======
 8008d22:	4b31      	ldr	r3, [pc, #196]	@ (8008de8 <xPortStartScheduler+0x138>)
 8008d24:	2207      	movs	r2, #7
 8008d26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d28:	e009      	b.n	8008d3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8008de8 <xPortStartScheduler+0x138>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	3b01      	subs	r3, #1
 8008d30:	4a2d      	ldr	r2, [pc, #180]	@ (8008de8 <xPortStartScheduler+0x138>)
 8008d32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008d34:	78fb      	ldrb	r3, [r7, #3]
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	005b      	lsls	r3, r3, #1
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d3e:	78fb      	ldrb	r3, [r7, #3]
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d46:	2b80      	cmp	r3, #128	@ 0x80
 8008d48:	d0ef      	beq.n	8008d2a <xPortStartScheduler+0x7a>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
<<<<<<< HEAD
 8008d3a:	4b27      	ldr	r3, [pc, #156]	@ (8008dd8 <xPortStartScheduler+0x138>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f1c3 0307 	rsb	r3, r3, #7
 8008d42:	2b04      	cmp	r3, #4
 8008d44:	d00b      	beq.n	8008d5e <xPortStartScheduler+0xbe>
	__asm volatile
 8008d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d4a:	f383 8811 	msr	BASEPRI, r3
 8008d4e:	f3bf 8f6f 	isb	sy
 8008d52:	f3bf 8f4f 	dsb	sy
 8008d56:	60bb      	str	r3, [r7, #8]
}
 8008d58:	bf00      	nop
 8008d5a:	bf00      	nop
 8008d5c:	e7fd      	b.n	8008d5a <xPortStartScheduler+0xba>
=======
 8008d4a:	4b27      	ldr	r3, [pc, #156]	@ (8008de8 <xPortStartScheduler+0x138>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f1c3 0307 	rsb	r3, r3, #7
 8008d52:	2b04      	cmp	r3, #4
 8008d54:	d00b      	beq.n	8008d6e <xPortStartScheduler+0xbe>
	__asm volatile
 8008d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d5a:	f383 8811 	msr	BASEPRI, r3
 8008d5e:	f3bf 8f6f 	isb	sy
 8008d62:	f3bf 8f4f 	dsb	sy
 8008d66:	60bb      	str	r3, [r7, #8]
}
 8008d68:	bf00      	nop
 8008d6a:	bf00      	nop
 8008d6c:	e7fd      	b.n	8008d6a <xPortStartScheduler+0xba>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
<<<<<<< HEAD
 8008d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8008dd8 <xPortStartScheduler+0x138>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	021b      	lsls	r3, r3, #8
 8008d64:	4a1c      	ldr	r2, [pc, #112]	@ (8008dd8 <xPortStartScheduler+0x138>)
 8008d66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008d68:	4b1b      	ldr	r3, [pc, #108]	@ (8008dd8 <xPortStartScheduler+0x138>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008d70:	4a19      	ldr	r2, [pc, #100]	@ (8008dd8 <xPortStartScheduler+0x138>)
 8008d72:	6013      	str	r3, [r2, #0]
=======
 8008d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8008de8 <xPortStartScheduler+0x138>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	021b      	lsls	r3, r3, #8
 8008d74:	4a1c      	ldr	r2, [pc, #112]	@ (8008de8 <xPortStartScheduler+0x138>)
 8008d76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008d78:	4b1b      	ldr	r3, [pc, #108]	@ (8008de8 <xPortStartScheduler+0x138>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008d80:	4a19      	ldr	r2, [pc, #100]	@ (8008de8 <xPortStartScheduler+0x138>)
 8008d82:	6013      	str	r3, [r2, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
<<<<<<< HEAD
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	b2da      	uxtb	r2, r3
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	701a      	strb	r2, [r3, #0]
=======
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	b2da      	uxtb	r2, r3
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	701a      	strb	r2, [r3, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
<<<<<<< HEAD
 8008d7c:	4b17      	ldr	r3, [pc, #92]	@ (8008ddc <xPortStartScheduler+0x13c>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a16      	ldr	r2, [pc, #88]	@ (8008ddc <xPortStartScheduler+0x13c>)
 8008d82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008d86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008d88:	4b14      	ldr	r3, [pc, #80]	@ (8008ddc <xPortStartScheduler+0x13c>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a13      	ldr	r2, [pc, #76]	@ (8008ddc <xPortStartScheduler+0x13c>)
 8008d8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008d92:	6013      	str	r3, [r2, #0]
=======
 8008d8c:	4b17      	ldr	r3, [pc, #92]	@ (8008dec <xPortStartScheduler+0x13c>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a16      	ldr	r2, [pc, #88]	@ (8008dec <xPortStartScheduler+0x13c>)
 8008d92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008d96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008d98:	4b14      	ldr	r3, [pc, #80]	@ (8008dec <xPortStartScheduler+0x13c>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a13      	ldr	r2, [pc, #76]	@ (8008dec <xPortStartScheduler+0x13c>)
 8008d9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008da2:	6013      	str	r3, [r2, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
<<<<<<< HEAD
 8008d94:	f000 f8da 	bl	8008f4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008d98:	4b11      	ldr	r3, [pc, #68]	@ (8008de0 <xPortStartScheduler+0x140>)
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008d9e:	f000 f8f9 	bl	8008f94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008da2:	4b10      	ldr	r3, [pc, #64]	@ (8008de4 <xPortStartScheduler+0x144>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a0f      	ldr	r2, [pc, #60]	@ (8008de4 <xPortStartScheduler+0x144>)
 8008da8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008dac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008dae:	f7ff ff63 	bl	8008c78 <prvPortStartFirstTask>
=======
 8008da4:	f000 f8da 	bl	8008f5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008da8:	4b11      	ldr	r3, [pc, #68]	@ (8008df0 <xPortStartScheduler+0x140>)
 8008daa:	2200      	movs	r2, #0
 8008dac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008dae:	f000 f8f9 	bl	8008fa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008db2:	4b10      	ldr	r3, [pc, #64]	@ (8008df4 <xPortStartScheduler+0x144>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a0f      	ldr	r2, [pc, #60]	@ (8008df4 <xPortStartScheduler+0x144>)
 8008db8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008dbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008dbe:	f7ff ff63 	bl	8008c88 <prvPortStartFirstTask>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
<<<<<<< HEAD
 8008db2:	f7ff f831 	bl	8007e18 <vTaskSwitchContext>
	prvTaskExitError();
 8008db6:	f7ff ff1d 	bl	8008bf4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008dba:	2300      	movs	r3, #0
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3718      	adds	r7, #24
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}
 8008dc4:	e000ed00 	.word	0xe000ed00
 8008dc8:	410fc271 	.word	0x410fc271
 8008dcc:	410fc270 	.word	0x410fc270
 8008dd0:	e000e400 	.word	0xe000e400
 8008dd4:	200012bc 	.word	0x200012bc
 8008dd8:	200012c0 	.word	0x200012c0
 8008ddc:	e000ed20 	.word	0xe000ed20
 8008de0:	2000000c 	.word	0x2000000c
 8008de4:	e000ef34 	.word	0xe000ef34

08008de8 <vPortEnterCritical>:
=======
 8008dc2:	f7ff f82b 	bl	8007e1c <vTaskSwitchContext>
	prvTaskExitError();
 8008dc6:	f7ff ff17 	bl	8008bf8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3718      	adds	r7, #24
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	e000ed00 	.word	0xe000ed00
 8008dd8:	410fc271 	.word	0x410fc271
 8008ddc:	410fc270 	.word	0x410fc270
 8008de0:	e000e400 	.word	0xe000e400
 8008de4:	200012c4 	.word	0x200012c4
 8008de8:	200012c8 	.word	0x200012c8
 8008dec:	e000ed20 	.word	0xe000ed20
 8008df0:	2000000c 	.word	0x2000000c
 8008df4:	e000ef34 	.word	0xe000ef34

08008df8 <vPortEnterCritical>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
<<<<<<< HEAD
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
	__asm volatile
 8008dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df2:	f383 8811 	msr	BASEPRI, r3
 8008df6:	f3bf 8f6f 	isb	sy
 8008dfa:	f3bf 8f4f 	dsb	sy
 8008dfe:	607b      	str	r3, [r7, #4]
}
 8008e00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008e02:	4b10      	ldr	r3, [pc, #64]	@ (8008e44 <vPortEnterCritical+0x5c>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	3301      	adds	r3, #1
 8008e08:	4a0e      	ldr	r2, [pc, #56]	@ (8008e44 <vPortEnterCritical+0x5c>)
 8008e0a:	6013      	str	r3, [r2, #0]
=======
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8008dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e02:	f383 8811 	msr	BASEPRI, r3
 8008e06:	f3bf 8f6f 	isb	sy
 8008e0a:	f3bf 8f4f 	dsb	sy
 8008e0e:	607b      	str	r3, [r7, #4]
}
 8008e10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008e12:	4b10      	ldr	r3, [pc, #64]	@ (8008e54 <vPortEnterCritical+0x5c>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	3301      	adds	r3, #1
 8008e18:	4a0e      	ldr	r2, [pc, #56]	@ (8008e54 <vPortEnterCritical+0x5c>)
 8008e1a:	6013      	str	r3, [r2, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
<<<<<<< HEAD
 8008e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8008e44 <vPortEnterCritical+0x5c>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d110      	bne.n	8008e36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008e14:	4b0c      	ldr	r3, [pc, #48]	@ (8008e48 <vPortEnterCritical+0x60>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d00b      	beq.n	8008e36 <vPortEnterCritical+0x4e>
	__asm volatile
 8008e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e22:	f383 8811 	msr	BASEPRI, r3
 8008e26:	f3bf 8f6f 	isb	sy
 8008e2a:	f3bf 8f4f 	dsb	sy
 8008e2e:	603b      	str	r3, [r7, #0]
}
 8008e30:	bf00      	nop
 8008e32:	bf00      	nop
 8008e34:	e7fd      	b.n	8008e32 <vPortEnterCritical+0x4a>
	}
}
 8008e36:	bf00      	nop
 8008e38:	370c      	adds	r7, #12
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr
 8008e42:	bf00      	nop
 8008e44:	2000000c 	.word	0x2000000c
 8008e48:	e000ed04 	.word	0xe000ed04

08008e4c <vPortExitCritical>:
=======
 8008e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8008e54 <vPortEnterCritical+0x5c>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d110      	bne.n	8008e46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008e24:	4b0c      	ldr	r3, [pc, #48]	@ (8008e58 <vPortEnterCritical+0x60>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00b      	beq.n	8008e46 <vPortEnterCritical+0x4e>
	__asm volatile
 8008e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e32:	f383 8811 	msr	BASEPRI, r3
 8008e36:	f3bf 8f6f 	isb	sy
 8008e3a:	f3bf 8f4f 	dsb	sy
 8008e3e:	603b      	str	r3, [r7, #0]
}
 8008e40:	bf00      	nop
 8008e42:	bf00      	nop
 8008e44:	e7fd      	b.n	8008e42 <vPortEnterCritical+0x4a>
	}
}
 8008e46:	bf00      	nop
 8008e48:	370c      	adds	r7, #12
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr
 8008e52:	bf00      	nop
 8008e54:	2000000c 	.word	0x2000000c
 8008e58:	e000ed04 	.word	0xe000ed04

08008e5c <vPortExitCritical>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
<<<<<<< HEAD
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008e52:	4b12      	ldr	r3, [pc, #72]	@ (8008e9c <vPortExitCritical+0x50>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d10b      	bne.n	8008e72 <vPortExitCritical+0x26>
	__asm volatile
 8008e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e5e:	f383 8811 	msr	BASEPRI, r3
 8008e62:	f3bf 8f6f 	isb	sy
 8008e66:	f3bf 8f4f 	dsb	sy
 8008e6a:	607b      	str	r3, [r7, #4]
}
 8008e6c:	bf00      	nop
 8008e6e:	bf00      	nop
 8008e70:	e7fd      	b.n	8008e6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008e72:	4b0a      	ldr	r3, [pc, #40]	@ (8008e9c <vPortExitCritical+0x50>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	3b01      	subs	r3, #1
 8008e78:	4a08      	ldr	r2, [pc, #32]	@ (8008e9c <vPortExitCritical+0x50>)
 8008e7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008e7c:	4b07      	ldr	r3, [pc, #28]	@ (8008e9c <vPortExitCritical+0x50>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d105      	bne.n	8008e90 <vPortExitCritical+0x44>
 8008e84:	2300      	movs	r3, #0
 8008e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	f383 8811 	msr	BASEPRI, r3
}
 8008e8e:	bf00      	nop
=======
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008e62:	4b12      	ldr	r3, [pc, #72]	@ (8008eac <vPortExitCritical+0x50>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d10b      	bne.n	8008e82 <vPortExitCritical+0x26>
	__asm volatile
 8008e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e6e:	f383 8811 	msr	BASEPRI, r3
 8008e72:	f3bf 8f6f 	isb	sy
 8008e76:	f3bf 8f4f 	dsb	sy
 8008e7a:	607b      	str	r3, [r7, #4]
}
 8008e7c:	bf00      	nop
 8008e7e:	bf00      	nop
 8008e80:	e7fd      	b.n	8008e7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008e82:	4b0a      	ldr	r3, [pc, #40]	@ (8008eac <vPortExitCritical+0x50>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	3b01      	subs	r3, #1
 8008e88:	4a08      	ldr	r2, [pc, #32]	@ (8008eac <vPortExitCritical+0x50>)
 8008e8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008e8c:	4b07      	ldr	r3, [pc, #28]	@ (8008eac <vPortExitCritical+0x50>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d105      	bne.n	8008ea0 <vPortExitCritical+0x44>
 8008e94:	2300      	movs	r3, #0
 8008e96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	f383 8811 	msr	BASEPRI, r3
}
 8008e9e:	bf00      	nop
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	{
		portENABLE_INTERRUPTS();
	}
}
<<<<<<< HEAD
 8008e90:	bf00      	nop
 8008e92:	370c      	adds	r7, #12
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr
 8008e9c:	2000000c 	.word	0x2000000c

08008ea0 <PendSV_Handler>:
=======
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr
 8008eac:	2000000c 	.word	0x2000000c

08008eb0 <PendSV_Handler>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
<<<<<<< HEAD
 8008ea0:	f3ef 8009 	mrs	r0, PSP
 8008ea4:	f3bf 8f6f 	isb	sy
 8008ea8:	4b15      	ldr	r3, [pc, #84]	@ (8008f00 <pxCurrentTCBConst>)
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	f01e 0f10 	tst.w	lr, #16
 8008eb0:	bf08      	it	eq
 8008eb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008eb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eba:	6010      	str	r0, [r2, #0]
 8008ebc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ec0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008ec4:	f380 8811 	msr	BASEPRI, r0
 8008ec8:	f3bf 8f4f 	dsb	sy
 8008ecc:	f3bf 8f6f 	isb	sy
 8008ed0:	f7fe ffa2 	bl	8007e18 <vTaskSwitchContext>
 8008ed4:	f04f 0000 	mov.w	r0, #0
 8008ed8:	f380 8811 	msr	BASEPRI, r0
 8008edc:	bc09      	pop	{r0, r3}
 8008ede:	6819      	ldr	r1, [r3, #0]
 8008ee0:	6808      	ldr	r0, [r1, #0]
 8008ee2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ee6:	f01e 0f10 	tst.w	lr, #16
 8008eea:	bf08      	it	eq
 8008eec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008ef0:	f380 8809 	msr	PSP, r0
 8008ef4:	f3bf 8f6f 	isb	sy
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop
 8008efc:	f3af 8000 	nop.w

08008f00 <pxCurrentTCBConst>:
 8008f00:	20000c90 	.word	0x20000c90
=======
 8008eb0:	f3ef 8009 	mrs	r0, PSP
 8008eb4:	f3bf 8f6f 	isb	sy
 8008eb8:	4b15      	ldr	r3, [pc, #84]	@ (8008f10 <pxCurrentTCBConst>)
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	f01e 0f10 	tst.w	lr, #16
 8008ec0:	bf08      	it	eq
 8008ec2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ec6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eca:	6010      	str	r0, [r2, #0]
 8008ecc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ed0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008ed4:	f380 8811 	msr	BASEPRI, r0
 8008ed8:	f3bf 8f4f 	dsb	sy
 8008edc:	f3bf 8f6f 	isb	sy
 8008ee0:	f7fe ff9c 	bl	8007e1c <vTaskSwitchContext>
 8008ee4:	f04f 0000 	mov.w	r0, #0
 8008ee8:	f380 8811 	msr	BASEPRI, r0
 8008eec:	bc09      	pop	{r0, r3}
 8008eee:	6819      	ldr	r1, [r3, #0]
 8008ef0:	6808      	ldr	r0, [r1, #0]
 8008ef2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef6:	f01e 0f10 	tst.w	lr, #16
 8008efa:	bf08      	it	eq
 8008efc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008f00:	f380 8809 	msr	PSP, r0
 8008f04:	f3bf 8f6f 	isb	sy
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	f3af 8000 	nop.w

08008f10 <pxCurrentTCBConst>:
 8008f10:	20000c98 	.word	0x20000c98
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
<<<<<<< HEAD
 8008f04:	bf00      	nop
 8008f06:	bf00      	nop

08008f08 <xPortSysTickHandler>:
=======
 8008f14:	bf00      	nop
 8008f16:	bf00      	nop

08008f18 <xPortSysTickHandler>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
<<<<<<< HEAD
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
	__asm volatile
 8008f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f12:	f383 8811 	msr	BASEPRI, r3
 8008f16:	f3bf 8f6f 	isb	sy
 8008f1a:	f3bf 8f4f 	dsb	sy
 8008f1e:	607b      	str	r3, [r7, #4]
}
 8008f20:	bf00      	nop
=======
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
	__asm volatile
 8008f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f22:	f383 8811 	msr	BASEPRI, r3
 8008f26:	f3bf 8f6f 	isb	sy
 8008f2a:	f3bf 8f4f 	dsb	sy
 8008f2e:	607b      	str	r3, [r7, #4]
}
 8008f30:	bf00      	nop
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
<<<<<<< HEAD
 8008f22:	f7fe febf 	bl	8007ca4 <xTaskIncrementTick>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d003      	beq.n	8008f34 <xPortSysTickHandler+0x2c>
=======
 8008f32:	f7fe feb9 	bl	8007ca8 <xTaskIncrementTick>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d003      	beq.n	8008f44 <xPortSysTickHandler+0x2c>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
<<<<<<< HEAD
 8008f2c:	4b06      	ldr	r3, [pc, #24]	@ (8008f48 <xPortSysTickHandler+0x40>)
 8008f2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f32:	601a      	str	r2, [r3, #0]
 8008f34:	2300      	movs	r3, #0
 8008f36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	f383 8811 	msr	BASEPRI, r3
}
 8008f3e:	bf00      	nop
=======
 8008f3c:	4b06      	ldr	r3, [pc, #24]	@ (8008f58 <xPortSysTickHandler+0x40>)
 8008f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f42:	601a      	str	r2, [r3, #0]
 8008f44:	2300      	movs	r3, #0
 8008f46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	f383 8811 	msr	BASEPRI, r3
}
 8008f4e:	bf00      	nop
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		}
	}
	portENABLE_INTERRUPTS();
}
<<<<<<< HEAD
 8008f40:	bf00      	nop
 8008f42:	3708      	adds	r7, #8
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	e000ed04 	.word	0xe000ed04

08008f4c <vPortSetupTimerInterrupt>:
=======
 8008f50:	bf00      	nop
 8008f52:	3708      	adds	r7, #8
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}
 8008f58:	e000ed04 	.word	0xe000ed04

08008f5c <vPortSetupTimerInterrupt>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
<<<<<<< HEAD
 8008f4c:	b480      	push	{r7}
 8008f4e:	af00      	add	r7, sp, #0
=======
 8008f5c:	b480      	push	{r7}
 8008f5e:	af00      	add	r7, sp, #0
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
<<<<<<< HEAD
 8008f50:	4b0b      	ldr	r3, [pc, #44]	@ (8008f80 <vPortSetupTimerInterrupt+0x34>)
 8008f52:	2200      	movs	r2, #0
 8008f54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008f56:	4b0b      	ldr	r3, [pc, #44]	@ (8008f84 <vPortSetupTimerInterrupt+0x38>)
 8008f58:	2200      	movs	r2, #0
 8008f5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8008f88 <vPortSetupTimerInterrupt+0x3c>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a0a      	ldr	r2, [pc, #40]	@ (8008f8c <vPortSetupTimerInterrupt+0x40>)
 8008f62:	fba2 2303 	umull	r2, r3, r2, r3
 8008f66:	099b      	lsrs	r3, r3, #6
 8008f68:	4a09      	ldr	r2, [pc, #36]	@ (8008f90 <vPortSetupTimerInterrupt+0x44>)
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008f6e:	4b04      	ldr	r3, [pc, #16]	@ (8008f80 <vPortSetupTimerInterrupt+0x34>)
 8008f70:	2207      	movs	r2, #7
 8008f72:	601a      	str	r2, [r3, #0]
}
 8008f74:	bf00      	nop
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr
 8008f7e:	bf00      	nop
 8008f80:	e000e010 	.word	0xe000e010
 8008f84:	e000e018 	.word	0xe000e018
 8008f88:	20000000 	.word	0x20000000
 8008f8c:	10624dd3 	.word	0x10624dd3
 8008f90:	e000e014 	.word	0xe000e014

08008f94 <vPortEnableVFP>:
=======
 8008f60:	4b0b      	ldr	r3, [pc, #44]	@ (8008f90 <vPortSetupTimerInterrupt+0x34>)
 8008f62:	2200      	movs	r2, #0
 8008f64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008f66:	4b0b      	ldr	r3, [pc, #44]	@ (8008f94 <vPortSetupTimerInterrupt+0x38>)
 8008f68:	2200      	movs	r2, #0
 8008f6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8008f98 <vPortSetupTimerInterrupt+0x3c>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a0a      	ldr	r2, [pc, #40]	@ (8008f9c <vPortSetupTimerInterrupt+0x40>)
 8008f72:	fba2 2303 	umull	r2, r3, r2, r3
 8008f76:	099b      	lsrs	r3, r3, #6
 8008f78:	4a09      	ldr	r2, [pc, #36]	@ (8008fa0 <vPortSetupTimerInterrupt+0x44>)
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008f7e:	4b04      	ldr	r3, [pc, #16]	@ (8008f90 <vPortSetupTimerInterrupt+0x34>)
 8008f80:	2207      	movs	r2, #7
 8008f82:	601a      	str	r2, [r3, #0]
}
 8008f84:	bf00      	nop
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr
 8008f8e:	bf00      	nop
 8008f90:	e000e010 	.word	0xe000e010
 8008f94:	e000e018 	.word	0xe000e018
 8008f98:	20000000 	.word	0x20000000
 8008f9c:	10624dd3 	.word	0x10624dd3
 8008fa0:	e000e014 	.word	0xe000e014

08008fa4 <vPortEnableVFP>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
<<<<<<< HEAD
 8008f94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008fa4 <vPortEnableVFP+0x10>
 8008f98:	6801      	ldr	r1, [r0, #0]
 8008f9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008f9e:	6001      	str	r1, [r0, #0]
 8008fa0:	4770      	bx	lr
=======
 8008fa4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008fb4 <vPortEnableVFP+0x10>
 8008fa8:	6801      	ldr	r1, [r0, #0]
 8008faa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008fae:	6001      	str	r1, [r0, #0]
 8008fb0:	4770      	bx	lr
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
<<<<<<< HEAD
 8008fa2:	bf00      	nop
 8008fa4:	e000ed88 	.word	0xe000ed88

08008fa8 <vPortValidateInterruptPriority>:
=======
 8008fb2:	bf00      	nop
 8008fb4:	e000ed88 	.word	0xe000ed88

08008fb8 <vPortValidateInterruptPriority>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
<<<<<<< HEAD
 8008fa8:	b480      	push	{r7}
 8008faa:	b085      	sub	sp, #20
 8008fac:	af00      	add	r7, sp, #0
=======
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
<<<<<<< HEAD
 8008fae:	f3ef 8305 	mrs	r3, IPSR
 8008fb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2b0f      	cmp	r3, #15
 8008fb8:	d915      	bls.n	8008fe6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008fba:	4a18      	ldr	r2, [pc, #96]	@ (800901c <vPortValidateInterruptPriority+0x74>)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	72fb      	strb	r3, [r7, #11]
=======
 8008fbe:	f3ef 8305 	mrs	r3, IPSR
 8008fc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2b0f      	cmp	r3, #15
 8008fc8:	d915      	bls.n	8008ff6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008fca:	4a18      	ldr	r2, [pc, #96]	@ (800902c <vPortValidateInterruptPriority+0x74>)
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	4413      	add	r3, r2
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	72fb      	strb	r3, [r7, #11]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
<<<<<<< HEAD
 8008fc4:	4b16      	ldr	r3, [pc, #88]	@ (8009020 <vPortValidateInterruptPriority+0x78>)
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	7afa      	ldrb	r2, [r7, #11]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d20b      	bcs.n	8008fe6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fd2:	f383 8811 	msr	BASEPRI, r3
 8008fd6:	f3bf 8f6f 	isb	sy
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	607b      	str	r3, [r7, #4]
}
 8008fe0:	bf00      	nop
 8008fe2:	bf00      	nop
 8008fe4:	e7fd      	b.n	8008fe2 <vPortValidateInterruptPriority+0x3a>
=======
 8008fd4:	4b16      	ldr	r3, [pc, #88]	@ (8009030 <vPortValidateInterruptPriority+0x78>)
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	7afa      	ldrb	r2, [r7, #11]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d20b      	bcs.n	8008ff6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fe2:	f383 8811 	msr	BASEPRI, r3
 8008fe6:	f3bf 8f6f 	isb	sy
 8008fea:	f3bf 8f4f 	dsb	sy
 8008fee:	607b      	str	r3, [r7, #4]
}
 8008ff0:	bf00      	nop
 8008ff2:	bf00      	nop
 8008ff4:	e7fd      	b.n	8008ff2 <vPortValidateInterruptPriority+0x3a>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
<<<<<<< HEAD
 8008fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8009024 <vPortValidateInterruptPriority+0x7c>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008fee:	4b0e      	ldr	r3, [pc, #56]	@ (8009028 <vPortValidateInterruptPriority+0x80>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d90b      	bls.n	800900e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ffa:	f383 8811 	msr	BASEPRI, r3
 8008ffe:	f3bf 8f6f 	isb	sy
 8009002:	f3bf 8f4f 	dsb	sy
 8009006:	603b      	str	r3, [r7, #0]
}
 8009008:	bf00      	nop
 800900a:	bf00      	nop
 800900c:	e7fd      	b.n	800900a <vPortValidateInterruptPriority+0x62>
	}
 800900e:	bf00      	nop
 8009010:	3714      	adds	r7, #20
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr
 800901a:	bf00      	nop
 800901c:	e000e3f0 	.word	0xe000e3f0
 8009020:	200012bc 	.word	0x200012bc
 8009024:	e000ed0c 	.word	0xe000ed0c
 8009028:	200012c0 	.word	0x200012c0

0800902c <pvPortMalloc>:
=======
 8008ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8009034 <vPortValidateInterruptPriority+0x7c>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8009038 <vPortValidateInterruptPriority+0x80>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	429a      	cmp	r2, r3
 8009004:	d90b      	bls.n	800901e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800900a:	f383 8811 	msr	BASEPRI, r3
 800900e:	f3bf 8f6f 	isb	sy
 8009012:	f3bf 8f4f 	dsb	sy
 8009016:	603b      	str	r3, [r7, #0]
}
 8009018:	bf00      	nop
 800901a:	bf00      	nop
 800901c:	e7fd      	b.n	800901a <vPortValidateInterruptPriority+0x62>
	}
 800901e:	bf00      	nop
 8009020:	3714      	adds	r7, #20
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr
 800902a:	bf00      	nop
 800902c:	e000e3f0 	.word	0xe000e3f0
 8009030:	200012c4 	.word	0x200012c4
 8009034:	e000ed0c 	.word	0xe000ed0c
 8009038:	200012c8 	.word	0x200012c8

0800903c <pvPortMalloc>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
<<<<<<< HEAD
 800902c:	b580      	push	{r7, lr}
 800902e:	b08a      	sub	sp, #40	@ 0x28
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009034:	2300      	movs	r3, #0
 8009036:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009038:	f7fe fd78 	bl	8007b2c <vTaskSuspendAll>
=======
 800903c:	b580      	push	{r7, lr}
 800903e:	b08a      	sub	sp, #40	@ 0x28
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009044:	2300      	movs	r3, #0
 8009046:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009048:	f7fe fd72 	bl	8007b30 <vTaskSuspendAll>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
<<<<<<< HEAD
 800903c:	4b5c      	ldr	r3, [pc, #368]	@ (80091b0 <pvPortMalloc+0x184>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d101      	bne.n	8009048 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009044:	f000 f924 	bl	8009290 <prvHeapInit>
=======
 800904c:	4b5c      	ldr	r3, [pc, #368]	@ (80091c0 <pvPortMalloc+0x184>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d101      	bne.n	8009058 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009054:	f000 f924 	bl	80092a0 <prvHeapInit>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
<<<<<<< HEAD
 8009048:	4b5a      	ldr	r3, [pc, #360]	@ (80091b4 <pvPortMalloc+0x188>)
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	4013      	ands	r3, r2
 8009050:	2b00      	cmp	r3, #0
 8009052:	f040 8095 	bne.w	8009180 <pvPortMalloc+0x154>
=======
 8009058:	4b5a      	ldr	r3, [pc, #360]	@ (80091c4 <pvPortMalloc+0x188>)
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	4013      	ands	r3, r2
 8009060:	2b00      	cmp	r3, #0
 8009062:	f040 8095 	bne.w	8009190 <pvPortMalloc+0x154>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
<<<<<<< HEAD
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d01e      	beq.n	800909a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800905c:	2208      	movs	r2, #8
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	4413      	add	r3, r2
 8009062:	607b      	str	r3, [r7, #4]
=======
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d01e      	beq.n	80090aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800906c:	2208      	movs	r2, #8
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	4413      	add	r3, r2
 8009072:	607b      	str	r3, [r7, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
<<<<<<< HEAD
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f003 0307 	and.w	r3, r3, #7
 800906a:	2b00      	cmp	r3, #0
 800906c:	d015      	beq.n	800909a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f023 0307 	bic.w	r3, r3, #7
 8009074:	3308      	adds	r3, #8
 8009076:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f003 0307 	and.w	r3, r3, #7
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00b      	beq.n	800909a <pvPortMalloc+0x6e>
	__asm volatile
 8009082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009086:	f383 8811 	msr	BASEPRI, r3
 800908a:	f3bf 8f6f 	isb	sy
 800908e:	f3bf 8f4f 	dsb	sy
 8009092:	617b      	str	r3, [r7, #20]
}
 8009094:	bf00      	nop
 8009096:	bf00      	nop
 8009098:	e7fd      	b.n	8009096 <pvPortMalloc+0x6a>
=======
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f003 0307 	and.w	r3, r3, #7
 800907a:	2b00      	cmp	r3, #0
 800907c:	d015      	beq.n	80090aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f023 0307 	bic.w	r3, r3, #7
 8009084:	3308      	adds	r3, #8
 8009086:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f003 0307 	and.w	r3, r3, #7
 800908e:	2b00      	cmp	r3, #0
 8009090:	d00b      	beq.n	80090aa <pvPortMalloc+0x6e>
	__asm volatile
 8009092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009096:	f383 8811 	msr	BASEPRI, r3
 800909a:	f3bf 8f6f 	isb	sy
 800909e:	f3bf 8f4f 	dsb	sy
 80090a2:	617b      	str	r3, [r7, #20]
}
 80090a4:	bf00      	nop
 80090a6:	bf00      	nop
 80090a8:	e7fd      	b.n	80090a6 <pvPortMalloc+0x6a>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
<<<<<<< HEAD
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d06f      	beq.n	8009180 <pvPortMalloc+0x154>
 80090a0:	4b45      	ldr	r3, [pc, #276]	@ (80091b8 <pvPortMalloc+0x18c>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d86a      	bhi.n	8009180 <pvPortMalloc+0x154>
=======
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d06f      	beq.n	8009190 <pvPortMalloc+0x154>
 80090b0:	4b45      	ldr	r3, [pc, #276]	@ (80091c8 <pvPortMalloc+0x18c>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d86a      	bhi.n	8009190 <pvPortMalloc+0x154>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
<<<<<<< HEAD
 80090aa:	4b44      	ldr	r3, [pc, #272]	@ (80091bc <pvPortMalloc+0x190>)
 80090ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80090ae:	4b43      	ldr	r3, [pc, #268]	@ (80091bc <pvPortMalloc+0x190>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80090b4:	e004      	b.n	80090c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80090b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80090ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80090c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d903      	bls.n	80090d2 <pvPortMalloc+0xa6>
 80090ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d1f1      	bne.n	80090b6 <pvPortMalloc+0x8a>
=======
 80090ba:	4b44      	ldr	r3, [pc, #272]	@ (80091cc <pvPortMalloc+0x190>)
 80090bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80090be:	4b43      	ldr	r3, [pc, #268]	@ (80091cc <pvPortMalloc+0x190>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80090c4:	e004      	b.n	80090d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80090c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80090ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80090d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d903      	bls.n	80090e2 <pvPortMalloc+0xa6>
 80090da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1f1      	bne.n	80090c6 <pvPortMalloc+0x8a>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
<<<<<<< HEAD
 80090d2:	4b37      	ldr	r3, [pc, #220]	@ (80091b0 <pvPortMalloc+0x184>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090d8:	429a      	cmp	r2, r3
 80090da:	d051      	beq.n	8009180 <pvPortMalloc+0x154>
=======
 80090e2:	4b37      	ldr	r3, [pc, #220]	@ (80091c0 <pvPortMalloc+0x184>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d051      	beq.n	8009190 <pvPortMalloc+0x154>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
<<<<<<< HEAD
 80090dc:	6a3b      	ldr	r3, [r7, #32]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	2208      	movs	r2, #8
 80090e2:	4413      	add	r3, r2
 80090e4:	61fb      	str	r3, [r7, #28]
=======
 80090ec:	6a3b      	ldr	r3, [r7, #32]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2208      	movs	r2, #8
 80090f2:	4413      	add	r3, r2
 80090f4:	61fb      	str	r3, [r7, #28]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
<<<<<<< HEAD
 80090e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	6a3b      	ldr	r3, [r7, #32]
 80090ec:	601a      	str	r2, [r3, #0]
=======
 80090f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	6a3b      	ldr	r3, [r7, #32]
 80090fc:	601a      	str	r2, [r3, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
<<<<<<< HEAD
 80090ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f0:	685a      	ldr	r2, [r3, #4]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	1ad2      	subs	r2, r2, r3
 80090f6:	2308      	movs	r3, #8
 80090f8:	005b      	lsls	r3, r3, #1
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d920      	bls.n	8009140 <pvPortMalloc+0x114>
=======
 80090fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009100:	685a      	ldr	r2, [r3, #4]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	1ad2      	subs	r2, r2, r3
 8009106:	2308      	movs	r3, #8
 8009108:	005b      	lsls	r3, r3, #1
 800910a:	429a      	cmp	r2, r3
 800910c:	d920      	bls.n	8009150 <pvPortMalloc+0x114>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
<<<<<<< HEAD
 80090fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	4413      	add	r3, r2
 8009104:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009106:	69bb      	ldr	r3, [r7, #24]
 8009108:	f003 0307 	and.w	r3, r3, #7
 800910c:	2b00      	cmp	r3, #0
 800910e:	d00b      	beq.n	8009128 <pvPortMalloc+0xfc>
	__asm volatile
 8009110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009114:	f383 8811 	msr	BASEPRI, r3
 8009118:	f3bf 8f6f 	isb	sy
 800911c:	f3bf 8f4f 	dsb	sy
 8009120:	613b      	str	r3, [r7, #16]
}
 8009122:	bf00      	nop
 8009124:	bf00      	nop
 8009126:	e7fd      	b.n	8009124 <pvPortMalloc+0xf8>
=======
 800910e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4413      	add	r3, r2
 8009114:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	f003 0307 	and.w	r3, r3, #7
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00b      	beq.n	8009138 <pvPortMalloc+0xfc>
	__asm volatile
 8009120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009124:	f383 8811 	msr	BASEPRI, r3
 8009128:	f3bf 8f6f 	isb	sy
 800912c:	f3bf 8f4f 	dsb	sy
 8009130:	613b      	str	r3, [r7, #16]
}
 8009132:	bf00      	nop
 8009134:	bf00      	nop
 8009136:	e7fd      	b.n	8009134 <pvPortMalloc+0xf8>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
<<<<<<< HEAD
 8009128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800912a:	685a      	ldr	r2, [r3, #4]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	1ad2      	subs	r2, r2, r3
 8009130:	69bb      	ldr	r3, [r7, #24]
 8009132:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800913a:	69b8      	ldr	r0, [r7, #24]
 800913c:	f000 f90a 	bl	8009354 <prvInsertBlockIntoFreeList>
=======
 8009138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800913a:	685a      	ldr	r2, [r3, #4]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	1ad2      	subs	r2, r2, r3
 8009140:	69bb      	ldr	r3, [r7, #24]
 8009142:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800914a:	69b8      	ldr	r0, [r7, #24]
 800914c:	f000 f90a 	bl	8009364 <prvInsertBlockIntoFreeList>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
<<<<<<< HEAD
 8009140:	4b1d      	ldr	r3, [pc, #116]	@ (80091b8 <pvPortMalloc+0x18c>)
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	1ad3      	subs	r3, r2, r3
 800914a:	4a1b      	ldr	r2, [pc, #108]	@ (80091b8 <pvPortMalloc+0x18c>)
 800914c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800914e:	4b1a      	ldr	r3, [pc, #104]	@ (80091b8 <pvPortMalloc+0x18c>)
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	4b1b      	ldr	r3, [pc, #108]	@ (80091c0 <pvPortMalloc+0x194>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	429a      	cmp	r2, r3
 8009158:	d203      	bcs.n	8009162 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800915a:	4b17      	ldr	r3, [pc, #92]	@ (80091b8 <pvPortMalloc+0x18c>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a18      	ldr	r2, [pc, #96]	@ (80091c0 <pvPortMalloc+0x194>)
 8009160:	6013      	str	r3, [r2, #0]
=======
 8009150:	4b1d      	ldr	r3, [pc, #116]	@ (80091c8 <pvPortMalloc+0x18c>)
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	1ad3      	subs	r3, r2, r3
 800915a:	4a1b      	ldr	r2, [pc, #108]	@ (80091c8 <pvPortMalloc+0x18c>)
 800915c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800915e:	4b1a      	ldr	r3, [pc, #104]	@ (80091c8 <pvPortMalloc+0x18c>)
 8009160:	681a      	ldr	r2, [r3, #0]
 8009162:	4b1b      	ldr	r3, [pc, #108]	@ (80091d0 <pvPortMalloc+0x194>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	429a      	cmp	r2, r3
 8009168:	d203      	bcs.n	8009172 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800916a:	4b17      	ldr	r3, [pc, #92]	@ (80091c8 <pvPortMalloc+0x18c>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a18      	ldr	r2, [pc, #96]	@ (80091d0 <pvPortMalloc+0x194>)
 8009170:	6013      	str	r3, [r2, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
<<<<<<< HEAD
 8009162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009164:	685a      	ldr	r2, [r3, #4]
 8009166:	4b13      	ldr	r3, [pc, #76]	@ (80091b4 <pvPortMalloc+0x188>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	431a      	orrs	r2, r3
 800916c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800916e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009172:	2200      	movs	r2, #0
 8009174:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009176:	4b13      	ldr	r3, [pc, #76]	@ (80091c4 <pvPortMalloc+0x198>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	3301      	adds	r3, #1
 800917c:	4a11      	ldr	r2, [pc, #68]	@ (80091c4 <pvPortMalloc+0x198>)
 800917e:	6013      	str	r3, [r2, #0]
=======
 8009172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009174:	685a      	ldr	r2, [r3, #4]
 8009176:	4b13      	ldr	r3, [pc, #76]	@ (80091c4 <pvPortMalloc+0x188>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	431a      	orrs	r2, r3
 800917c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800917e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009182:	2200      	movs	r2, #0
 8009184:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009186:	4b13      	ldr	r3, [pc, #76]	@ (80091d4 <pvPortMalloc+0x198>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	3301      	adds	r3, #1
 800918c:	4a11      	ldr	r2, [pc, #68]	@ (80091d4 <pvPortMalloc+0x198>)
 800918e:	6013      	str	r3, [r2, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
<<<<<<< HEAD
 8009180:	f7fe fce2 	bl	8007b48 <xTaskResumeAll>
=======
 8009190:	f7fe fcdc 	bl	8007b4c <xTaskResumeAll>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
<<<<<<< HEAD
 8009184:	69fb      	ldr	r3, [r7, #28]
 8009186:	f003 0307 	and.w	r3, r3, #7
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00b      	beq.n	80091a6 <pvPortMalloc+0x17a>
	__asm volatile
 800918e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009192:	f383 8811 	msr	BASEPRI, r3
 8009196:	f3bf 8f6f 	isb	sy
 800919a:	f3bf 8f4f 	dsb	sy
 800919e:	60fb      	str	r3, [r7, #12]
}
 80091a0:	bf00      	nop
 80091a2:	bf00      	nop
 80091a4:	e7fd      	b.n	80091a2 <pvPortMalloc+0x176>
	return pvReturn;
 80091a6:	69fb      	ldr	r3, [r7, #28]
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3728      	adds	r7, #40	@ 0x28
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	20004ecc 	.word	0x20004ecc
 80091b4:	20004ee0 	.word	0x20004ee0
 80091b8:	20004ed0 	.word	0x20004ed0
 80091bc:	20004ec4 	.word	0x20004ec4
 80091c0:	20004ed4 	.word	0x20004ed4
 80091c4:	20004ed8 	.word	0x20004ed8

080091c8 <vPortFree>:
=======
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	f003 0307 	and.w	r3, r3, #7
 800919a:	2b00      	cmp	r3, #0
 800919c:	d00b      	beq.n	80091b6 <pvPortMalloc+0x17a>
	__asm volatile
 800919e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091a2:	f383 8811 	msr	BASEPRI, r3
 80091a6:	f3bf 8f6f 	isb	sy
 80091aa:	f3bf 8f4f 	dsb	sy
 80091ae:	60fb      	str	r3, [r7, #12]
}
 80091b0:	bf00      	nop
 80091b2:	bf00      	nop
 80091b4:	e7fd      	b.n	80091b2 <pvPortMalloc+0x176>
	return pvReturn;
 80091b6:	69fb      	ldr	r3, [r7, #28]
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3728      	adds	r7, #40	@ 0x28
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}
 80091c0:	20004ed4 	.word	0x20004ed4
 80091c4:	20004ee8 	.word	0x20004ee8
 80091c8:	20004ed8 	.word	0x20004ed8
 80091cc:	20004ecc 	.word	0x20004ecc
 80091d0:	20004edc 	.word	0x20004edc
 80091d4:	20004ee0 	.word	0x20004ee0

080091d8 <vPortFree>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
<<<<<<< HEAD
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b086      	sub	sp, #24
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d04f      	beq.n	800927a <vPortFree+0xb2>
=======
 80091d8:	b580      	push	{r7, lr}
 80091da:	b086      	sub	sp, #24
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d04f      	beq.n	800928a <vPortFree+0xb2>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
<<<<<<< HEAD
 80091da:	2308      	movs	r3, #8
 80091dc:	425b      	negs	r3, r3
 80091de:	697a      	ldr	r2, [r7, #20]
 80091e0:	4413      	add	r3, r2
 80091e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	685a      	ldr	r2, [r3, #4]
 80091ec:	4b25      	ldr	r3, [pc, #148]	@ (8009284 <vPortFree+0xbc>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4013      	ands	r3, r2
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d10b      	bne.n	800920e <vPortFree+0x46>
	__asm volatile
 80091f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091fa:	f383 8811 	msr	BASEPRI, r3
 80091fe:	f3bf 8f6f 	isb	sy
 8009202:	f3bf 8f4f 	dsb	sy
 8009206:	60fb      	str	r3, [r7, #12]
}
 8009208:	bf00      	nop
 800920a:	bf00      	nop
 800920c:	e7fd      	b.n	800920a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d00b      	beq.n	800922e <vPortFree+0x66>
	__asm volatile
 8009216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800921a:	f383 8811 	msr	BASEPRI, r3
 800921e:	f3bf 8f6f 	isb	sy
 8009222:	f3bf 8f4f 	dsb	sy
 8009226:	60bb      	str	r3, [r7, #8]
}
 8009228:	bf00      	nop
 800922a:	bf00      	nop
 800922c:	e7fd      	b.n	800922a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	685a      	ldr	r2, [r3, #4]
 8009232:	4b14      	ldr	r3, [pc, #80]	@ (8009284 <vPortFree+0xbc>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4013      	ands	r3, r2
 8009238:	2b00      	cmp	r3, #0
 800923a:	d01e      	beq.n	800927a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d11a      	bne.n	800927a <vPortFree+0xb2>
=======
 80091ea:	2308      	movs	r3, #8
 80091ec:	425b      	negs	r3, r3
 80091ee:	697a      	ldr	r2, [r7, #20]
 80091f0:	4413      	add	r3, r2
 80091f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	685a      	ldr	r2, [r3, #4]
 80091fc:	4b25      	ldr	r3, [pc, #148]	@ (8009294 <vPortFree+0xbc>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4013      	ands	r3, r2
 8009202:	2b00      	cmp	r3, #0
 8009204:	d10b      	bne.n	800921e <vPortFree+0x46>
	__asm volatile
 8009206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800920a:	f383 8811 	msr	BASEPRI, r3
 800920e:	f3bf 8f6f 	isb	sy
 8009212:	f3bf 8f4f 	dsb	sy
 8009216:	60fb      	str	r3, [r7, #12]
}
 8009218:	bf00      	nop
 800921a:	bf00      	nop
 800921c:	e7fd      	b.n	800921a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d00b      	beq.n	800923e <vPortFree+0x66>
	__asm volatile
 8009226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800922a:	f383 8811 	msr	BASEPRI, r3
 800922e:	f3bf 8f6f 	isb	sy
 8009232:	f3bf 8f4f 	dsb	sy
 8009236:	60bb      	str	r3, [r7, #8]
}
 8009238:	bf00      	nop
 800923a:	bf00      	nop
 800923c:	e7fd      	b.n	800923a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	685a      	ldr	r2, [r3, #4]
 8009242:	4b14      	ldr	r3, [pc, #80]	@ (8009294 <vPortFree+0xbc>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4013      	ands	r3, r2
 8009248:	2b00      	cmp	r3, #0
 800924a:	d01e      	beq.n	800928a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d11a      	bne.n	800928a <vPortFree+0xb2>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
<<<<<<< HEAD
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	685a      	ldr	r2, [r3, #4]
 8009248:	4b0e      	ldr	r3, [pc, #56]	@ (8009284 <vPortFree+0xbc>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	43db      	mvns	r3, r3
 800924e:	401a      	ands	r2, r3
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009254:	f7fe fc6a 	bl	8007b2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	685a      	ldr	r2, [r3, #4]
 800925c:	4b0a      	ldr	r3, [pc, #40]	@ (8009288 <vPortFree+0xc0>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4413      	add	r3, r2
 8009262:	4a09      	ldr	r2, [pc, #36]	@ (8009288 <vPortFree+0xc0>)
 8009264:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009266:	6938      	ldr	r0, [r7, #16]
 8009268:	f000 f874 	bl	8009354 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800926c:	4b07      	ldr	r3, [pc, #28]	@ (800928c <vPortFree+0xc4>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	3301      	adds	r3, #1
 8009272:	4a06      	ldr	r2, [pc, #24]	@ (800928c <vPortFree+0xc4>)
 8009274:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009276:	f7fe fc67 	bl	8007b48 <xTaskResumeAll>
=======
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	685a      	ldr	r2, [r3, #4]
 8009258:	4b0e      	ldr	r3, [pc, #56]	@ (8009294 <vPortFree+0xbc>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	43db      	mvns	r3, r3
 800925e:	401a      	ands	r2, r3
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009264:	f7fe fc64 	bl	8007b30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	685a      	ldr	r2, [r3, #4]
 800926c:	4b0a      	ldr	r3, [pc, #40]	@ (8009298 <vPortFree+0xc0>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4413      	add	r3, r2
 8009272:	4a09      	ldr	r2, [pc, #36]	@ (8009298 <vPortFree+0xc0>)
 8009274:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009276:	6938      	ldr	r0, [r7, #16]
 8009278:	f000 f874 	bl	8009364 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800927c:	4b07      	ldr	r3, [pc, #28]	@ (800929c <vPortFree+0xc4>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	3301      	adds	r3, #1
 8009282:	4a06      	ldr	r2, [pc, #24]	@ (800929c <vPortFree+0xc4>)
 8009284:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009286:	f7fe fc61 	bl	8007b4c <xTaskResumeAll>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
<<<<<<< HEAD
 800927a:	bf00      	nop
 800927c:	3718      	adds	r7, #24
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	20004ee0 	.word	0x20004ee0
 8009288:	20004ed0 	.word	0x20004ed0
 800928c:	20004edc 	.word	0x20004edc

08009290 <prvHeapInit>:
=======
 800928a:	bf00      	nop
 800928c:	3718      	adds	r7, #24
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	20004ee8 	.word	0x20004ee8
 8009298:	20004ed8 	.word	0x20004ed8
 800929c:	20004ee4 	.word	0x20004ee4

080092a0 <prvHeapInit>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
<<<<<<< HEAD
 8009290:	b480      	push	{r7}
 8009292:	b085      	sub	sp, #20
 8009294:	af00      	add	r7, sp, #0
=======
 80092a0:	b480      	push	{r7}
 80092a2:	b085      	sub	sp, #20
 80092a4:	af00      	add	r7, sp, #0
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
<<<<<<< HEAD
 8009296:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800929a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800929c:	4b27      	ldr	r3, [pc, #156]	@ (800933c <prvHeapInit+0xac>)
 800929e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f003 0307 	and.w	r3, r3, #7
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d00c      	beq.n	80092c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	3307      	adds	r3, #7
 80092ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f023 0307 	bic.w	r3, r3, #7
 80092b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80092b8:	68ba      	ldr	r2, [r7, #8]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	1ad3      	subs	r3, r2, r3
 80092be:	4a1f      	ldr	r2, [pc, #124]	@ (800933c <prvHeapInit+0xac>)
 80092c0:	4413      	add	r3, r2
 80092c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	607b      	str	r3, [r7, #4]
=======
 80092a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80092aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80092ac:	4b27      	ldr	r3, [pc, #156]	@ (800934c <prvHeapInit+0xac>)
 80092ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f003 0307 	and.w	r3, r3, #7
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d00c      	beq.n	80092d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	3307      	adds	r3, #7
 80092be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f023 0307 	bic.w	r3, r3, #7
 80092c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80092c8:	68ba      	ldr	r2, [r7, #8]
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	1ad3      	subs	r3, r2, r3
 80092ce:	4a1f      	ldr	r2, [pc, #124]	@ (800934c <prvHeapInit+0xac>)
 80092d0:	4413      	add	r3, r2
 80092d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	607b      	str	r3, [r7, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< HEAD
 80092c8:	4a1d      	ldr	r2, [pc, #116]	@ (8009340 <prvHeapInit+0xb0>)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80092ce:	4b1c      	ldr	r3, [pc, #112]	@ (8009340 <prvHeapInit+0xb0>)
 80092d0:	2200      	movs	r2, #0
 80092d2:	605a      	str	r2, [r3, #4]
=======
 80092d8:	4a1d      	ldr	r2, [pc, #116]	@ (8009350 <prvHeapInit+0xb0>)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80092de:	4b1c      	ldr	r3, [pc, #112]	@ (8009350 <prvHeapInit+0xb0>)
 80092e0:	2200      	movs	r2, #0
 80092e2:	605a      	str	r2, [r3, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
<<<<<<< HEAD
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	68ba      	ldr	r2, [r7, #8]
 80092d8:	4413      	add	r3, r2
 80092da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80092dc:	2208      	movs	r2, #8
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	1a9b      	subs	r3, r3, r2
 80092e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f023 0307 	bic.w	r3, r3, #7
 80092ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	4a15      	ldr	r2, [pc, #84]	@ (8009344 <prvHeapInit+0xb4>)
 80092f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80092f2:	4b14      	ldr	r3, [pc, #80]	@ (8009344 <prvHeapInit+0xb4>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	2200      	movs	r2, #0
 80092f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80092fa:	4b12      	ldr	r3, [pc, #72]	@ (8009344 <prvHeapInit+0xb4>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	2200      	movs	r2, #0
 8009300:	601a      	str	r2, [r3, #0]
=======
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	68ba      	ldr	r2, [r7, #8]
 80092e8:	4413      	add	r3, r2
 80092ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80092ec:	2208      	movs	r2, #8
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	1a9b      	subs	r3, r3, r2
 80092f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f023 0307 	bic.w	r3, r3, #7
 80092fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	4a15      	ldr	r2, [pc, #84]	@ (8009354 <prvHeapInit+0xb4>)
 8009300:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009302:	4b14      	ldr	r3, [pc, #80]	@ (8009354 <prvHeapInit+0xb4>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2200      	movs	r2, #0
 8009308:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800930a:	4b12      	ldr	r3, [pc, #72]	@ (8009354 <prvHeapInit+0xb4>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2200      	movs	r2, #0
 8009310:	601a      	str	r2, [r3, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< HEAD
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	68fa      	ldr	r2, [r7, #12]
 800930a:	1ad2      	subs	r2, r2, r3
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009310:	4b0c      	ldr	r3, [pc, #48]	@ (8009344 <prvHeapInit+0xb4>)
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	4a0a      	ldr	r2, [pc, #40]	@ (8009348 <prvHeapInit+0xb8>)
 800931e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	4a09      	ldr	r2, [pc, #36]	@ (800934c <prvHeapInit+0xbc>)
 8009326:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009328:	4b09      	ldr	r3, [pc, #36]	@ (8009350 <prvHeapInit+0xc0>)
 800932a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800932e:	601a      	str	r2, [r3, #0]
}
 8009330:	bf00      	nop
 8009332:	3714      	adds	r7, #20
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr
 800933c:	200012c4 	.word	0x200012c4
 8009340:	20004ec4 	.word	0x20004ec4
 8009344:	20004ecc 	.word	0x20004ecc
 8009348:	20004ed4 	.word	0x20004ed4
 800934c:	20004ed0 	.word	0x20004ed0
 8009350:	20004ee0 	.word	0x20004ee0

08009354 <prvInsertBlockIntoFreeList>:
=======
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	68fa      	ldr	r2, [r7, #12]
 800931a:	1ad2      	subs	r2, r2, r3
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009320:	4b0c      	ldr	r3, [pc, #48]	@ (8009354 <prvHeapInit+0xb4>)
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	4a0a      	ldr	r2, [pc, #40]	@ (8009358 <prvHeapInit+0xb8>)
 800932e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	4a09      	ldr	r2, [pc, #36]	@ (800935c <prvHeapInit+0xbc>)
 8009336:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009338:	4b09      	ldr	r3, [pc, #36]	@ (8009360 <prvHeapInit+0xc0>)
 800933a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800933e:	601a      	str	r2, [r3, #0]
}
 8009340:	bf00      	nop
 8009342:	3714      	adds	r7, #20
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr
 800934c:	200012cc 	.word	0x200012cc
 8009350:	20004ecc 	.word	0x20004ecc
 8009354:	20004ed4 	.word	0x20004ed4
 8009358:	20004edc 	.word	0x20004edc
 800935c:	20004ed8 	.word	0x20004ed8
 8009360:	20004ee8 	.word	0x20004ee8

08009364 <prvInsertBlockIntoFreeList>:
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
<<<<<<< HEAD
 8009354:	b480      	push	{r7}
 8009356:	b085      	sub	sp, #20
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
=======
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
<<<<<<< HEAD
 800935c:	4b28      	ldr	r3, [pc, #160]	@ (8009400 <prvInsertBlockIntoFreeList+0xac>)
 800935e:	60fb      	str	r3, [r7, #12]
 8009360:	e002      	b.n	8009368 <prvInsertBlockIntoFreeList+0x14>
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	60fb      	str	r3, [r7, #12]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	429a      	cmp	r2, r3
 8009370:	d8f7      	bhi.n	8009362 <prvInsertBlockIntoFreeList+0xe>
=======
 800936c:	4b28      	ldr	r3, [pc, #160]	@ (8009410 <prvInsertBlockIntoFreeList+0xac>)
 800936e:	60fb      	str	r3, [r7, #12]
 8009370:	e002      	b.n	8009378 <prvInsertBlockIntoFreeList+0x14>
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	60fb      	str	r3, [r7, #12]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	429a      	cmp	r2, r3
 8009380:	d8f7      	bhi.n	8009372 <prvInsertBlockIntoFreeList+0xe>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
<<<<<<< HEAD
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	68ba      	ldr	r2, [r7, #8]
 800937c:	4413      	add	r3, r2
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	429a      	cmp	r2, r3
 8009382:	d108      	bne.n	8009396 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	685a      	ldr	r2, [r3, #4]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	441a      	add	r2, r3
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	607b      	str	r3, [r7, #4]
=======
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	68ba      	ldr	r2, [r7, #8]
 800938c:	4413      	add	r3, r2
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	429a      	cmp	r2, r3
 8009392:	d108      	bne.n	80093a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	685a      	ldr	r2, [r3, #4]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	441a      	add	r2, r3
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	607b      	str	r3, [r7, #4]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
<<<<<<< HEAD
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	68ba      	ldr	r2, [r7, #8]
 80093a0:	441a      	add	r2, r3
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d118      	bne.n	80093dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681a      	ldr	r2, [r3, #0]
 80093ae:	4b15      	ldr	r3, [pc, #84]	@ (8009404 <prvInsertBlockIntoFreeList+0xb0>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d00d      	beq.n	80093d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	685a      	ldr	r2, [r3, #4]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	441a      	add	r2, r3
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	601a      	str	r2, [r3, #0]
 80093d0:	e008      	b.n	80093e4 <prvInsertBlockIntoFreeList+0x90>
=======
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	68ba      	ldr	r2, [r7, #8]
 80093b0:	441a      	add	r2, r3
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d118      	bne.n	80093ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	4b15      	ldr	r3, [pc, #84]	@ (8009414 <prvInsertBlockIntoFreeList+0xb0>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d00d      	beq.n	80093e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	685a      	ldr	r2, [r3, #4]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	441a      	add	r2, r3
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	601a      	str	r2, [r3, #0]
 80093e0:	e008      	b.n	80093f4 <prvInsertBlockIntoFreeList+0x90>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
<<<<<<< HEAD
 80093d2:	4b0c      	ldr	r3, [pc, #48]	@ (8009404 <prvInsertBlockIntoFreeList+0xb0>)
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	601a      	str	r2, [r3, #0]
 80093da:	e003      	b.n	80093e4 <prvInsertBlockIntoFreeList+0x90>
=======
 80093e2:	4b0c      	ldr	r3, [pc, #48]	@ (8009414 <prvInsertBlockIntoFreeList+0xb0>)
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	601a      	str	r2, [r3, #0]
 80093ea:	e003      	b.n	80093f4 <prvInsertBlockIntoFreeList+0x90>
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
<<<<<<< HEAD
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	601a      	str	r2, [r3, #0]
=======
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	601a      	str	r2, [r3, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
<<<<<<< HEAD
 80093e4:	68fa      	ldr	r2, [r7, #12]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d002      	beq.n	80093f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	601a      	str	r2, [r3, #0]
=======
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d002      	beq.n	8009402 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	601a      	str	r2, [r3, #0]
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 80093f2:	bf00      	nop
 80093f4:	3714      	adds	r7, #20
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr
 80093fe:	bf00      	nop
 8009400:	20004ec4 	.word	0x20004ec4
 8009404:	20004ecc 	.word	0x20004ecc

08009408 <__cvt>:
 8009408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800940c:	ec57 6b10 	vmov	r6, r7, d0
 8009410:	2f00      	cmp	r7, #0
 8009412:	460c      	mov	r4, r1
 8009414:	4619      	mov	r1, r3
 8009416:	463b      	mov	r3, r7
 8009418:	bfbb      	ittet	lt
 800941a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800941e:	461f      	movlt	r7, r3
 8009420:	2300      	movge	r3, #0
 8009422:	232d      	movlt	r3, #45	@ 0x2d
 8009424:	700b      	strb	r3, [r1, #0]
 8009426:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009428:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800942c:	4691      	mov	r9, r2
 800942e:	f023 0820 	bic.w	r8, r3, #32
 8009432:	bfbc      	itt	lt
 8009434:	4632      	movlt	r2, r6
 8009436:	4616      	movlt	r6, r2
 8009438:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800943c:	d005      	beq.n	800944a <__cvt+0x42>
 800943e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009442:	d100      	bne.n	8009446 <__cvt+0x3e>
 8009444:	3401      	adds	r4, #1
 8009446:	2102      	movs	r1, #2
 8009448:	e000      	b.n	800944c <__cvt+0x44>
 800944a:	2103      	movs	r1, #3
 800944c:	ab03      	add	r3, sp, #12
 800944e:	9301      	str	r3, [sp, #4]
 8009450:	ab02      	add	r3, sp, #8
 8009452:	9300      	str	r3, [sp, #0]
 8009454:	ec47 6b10 	vmov	d0, r6, r7
 8009458:	4653      	mov	r3, sl
 800945a:	4622      	mov	r2, r4
 800945c:	f000 feec 	bl	800a238 <_dtoa_r>
 8009460:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009464:	4605      	mov	r5, r0
 8009466:	d119      	bne.n	800949c <__cvt+0x94>
 8009468:	f019 0f01 	tst.w	r9, #1
 800946c:	d00e      	beq.n	800948c <__cvt+0x84>
 800946e:	eb00 0904 	add.w	r9, r0, r4
 8009472:	2200      	movs	r2, #0
 8009474:	2300      	movs	r3, #0
 8009476:	4630      	mov	r0, r6
 8009478:	4639      	mov	r1, r7
 800947a:	f7f7 fb2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800947e:	b108      	cbz	r0, 8009484 <__cvt+0x7c>
 8009480:	f8cd 900c 	str.w	r9, [sp, #12]
 8009484:	2230      	movs	r2, #48	@ 0x30
 8009486:	9b03      	ldr	r3, [sp, #12]
 8009488:	454b      	cmp	r3, r9
 800948a:	d31e      	bcc.n	80094ca <__cvt+0xc2>
 800948c:	9b03      	ldr	r3, [sp, #12]
 800948e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009490:	1b5b      	subs	r3, r3, r5
 8009492:	4628      	mov	r0, r5
 8009494:	6013      	str	r3, [r2, #0]
 8009496:	b004      	add	sp, #16
 8009498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800949c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80094a0:	eb00 0904 	add.w	r9, r0, r4
 80094a4:	d1e5      	bne.n	8009472 <__cvt+0x6a>
 80094a6:	7803      	ldrb	r3, [r0, #0]
 80094a8:	2b30      	cmp	r3, #48	@ 0x30
 80094aa:	d10a      	bne.n	80094c2 <__cvt+0xba>
 80094ac:	2200      	movs	r2, #0
 80094ae:	2300      	movs	r3, #0
 80094b0:	4630      	mov	r0, r6
 80094b2:	4639      	mov	r1, r7
 80094b4:	f7f7 fb10 	bl	8000ad8 <__aeabi_dcmpeq>
 80094b8:	b918      	cbnz	r0, 80094c2 <__cvt+0xba>
 80094ba:	f1c4 0401 	rsb	r4, r4, #1
 80094be:	f8ca 4000 	str.w	r4, [sl]
 80094c2:	f8da 3000 	ldr.w	r3, [sl]
 80094c6:	4499      	add	r9, r3
 80094c8:	e7d3      	b.n	8009472 <__cvt+0x6a>
 80094ca:	1c59      	adds	r1, r3, #1
 80094cc:	9103      	str	r1, [sp, #12]
 80094ce:	701a      	strb	r2, [r3, #0]
 80094d0:	e7d9      	b.n	8009486 <__cvt+0x7e>

080094d2 <__exponent>:
 80094d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094d4:	2900      	cmp	r1, #0
 80094d6:	bfba      	itte	lt
 80094d8:	4249      	neglt	r1, r1
 80094da:	232d      	movlt	r3, #45	@ 0x2d
 80094dc:	232b      	movge	r3, #43	@ 0x2b
 80094de:	2909      	cmp	r1, #9
 80094e0:	7002      	strb	r2, [r0, #0]
 80094e2:	7043      	strb	r3, [r0, #1]
 80094e4:	dd29      	ble.n	800953a <__exponent+0x68>
 80094e6:	f10d 0307 	add.w	r3, sp, #7
 80094ea:	461d      	mov	r5, r3
 80094ec:	270a      	movs	r7, #10
 80094ee:	461a      	mov	r2, r3
 80094f0:	fbb1 f6f7 	udiv	r6, r1, r7
 80094f4:	fb07 1416 	mls	r4, r7, r6, r1
 80094f8:	3430      	adds	r4, #48	@ 0x30
 80094fa:	f802 4c01 	strb.w	r4, [r2, #-1]
 80094fe:	460c      	mov	r4, r1
 8009500:	2c63      	cmp	r4, #99	@ 0x63
 8009502:	f103 33ff 	add.w	r3, r3, #4294967295
 8009506:	4631      	mov	r1, r6
 8009508:	dcf1      	bgt.n	80094ee <__exponent+0x1c>
 800950a:	3130      	adds	r1, #48	@ 0x30
 800950c:	1e94      	subs	r4, r2, #2
 800950e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009512:	1c41      	adds	r1, r0, #1
 8009514:	4623      	mov	r3, r4
 8009516:	42ab      	cmp	r3, r5
 8009518:	d30a      	bcc.n	8009530 <__exponent+0x5e>
 800951a:	f10d 0309 	add.w	r3, sp, #9
 800951e:	1a9b      	subs	r3, r3, r2
 8009520:	42ac      	cmp	r4, r5
 8009522:	bf88      	it	hi
 8009524:	2300      	movhi	r3, #0
 8009526:	3302      	adds	r3, #2
 8009528:	4403      	add	r3, r0
 800952a:	1a18      	subs	r0, r3, r0
 800952c:	b003      	add	sp, #12
 800952e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009530:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009534:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009538:	e7ed      	b.n	8009516 <__exponent+0x44>
 800953a:	2330      	movs	r3, #48	@ 0x30
 800953c:	3130      	adds	r1, #48	@ 0x30
 800953e:	7083      	strb	r3, [r0, #2]
 8009540:	70c1      	strb	r1, [r0, #3]
 8009542:	1d03      	adds	r3, r0, #4
 8009544:	e7f1      	b.n	800952a <__exponent+0x58>
	...

08009548 <_printf_float>:
 8009548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800954c:	b08d      	sub	sp, #52	@ 0x34
 800954e:	460c      	mov	r4, r1
 8009550:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009554:	4616      	mov	r6, r2
 8009556:	461f      	mov	r7, r3
 8009558:	4605      	mov	r5, r0
 800955a:	f000 fd01 	bl	8009f60 <_localeconv_r>
 800955e:	6803      	ldr	r3, [r0, #0]
 8009560:	9304      	str	r3, [sp, #16]
 8009562:	4618      	mov	r0, r3
 8009564:	f7f6 fe8c 	bl	8000280 <strlen>
 8009568:	2300      	movs	r3, #0
 800956a:	930a      	str	r3, [sp, #40]	@ 0x28
 800956c:	f8d8 3000 	ldr.w	r3, [r8]
 8009570:	9005      	str	r0, [sp, #20]
 8009572:	3307      	adds	r3, #7
 8009574:	f023 0307 	bic.w	r3, r3, #7
 8009578:	f103 0208 	add.w	r2, r3, #8
 800957c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009580:	f8d4 b000 	ldr.w	fp, [r4]
 8009584:	f8c8 2000 	str.w	r2, [r8]
 8009588:	e9d3 8900 	ldrd	r8, r9, [r3]
 800958c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009590:	9307      	str	r3, [sp, #28]
 8009592:	f8cd 8018 	str.w	r8, [sp, #24]
 8009596:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800959a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800959e:	4b9c      	ldr	r3, [pc, #624]	@ (8009810 <_printf_float+0x2c8>)
 80095a0:	f04f 32ff 	mov.w	r2, #4294967295
 80095a4:	f7f7 faca 	bl	8000b3c <__aeabi_dcmpun>
 80095a8:	bb70      	cbnz	r0, 8009608 <_printf_float+0xc0>
 80095aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80095ae:	4b98      	ldr	r3, [pc, #608]	@ (8009810 <_printf_float+0x2c8>)
 80095b0:	f04f 32ff 	mov.w	r2, #4294967295
 80095b4:	f7f7 faa4 	bl	8000b00 <__aeabi_dcmple>
 80095b8:	bb30      	cbnz	r0, 8009608 <_printf_float+0xc0>
 80095ba:	2200      	movs	r2, #0
 80095bc:	2300      	movs	r3, #0
 80095be:	4640      	mov	r0, r8
 80095c0:	4649      	mov	r1, r9
 80095c2:	f7f7 fa93 	bl	8000aec <__aeabi_dcmplt>
 80095c6:	b110      	cbz	r0, 80095ce <_printf_float+0x86>
 80095c8:	232d      	movs	r3, #45	@ 0x2d
 80095ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095ce:	4a91      	ldr	r2, [pc, #580]	@ (8009814 <_printf_float+0x2cc>)
 80095d0:	4b91      	ldr	r3, [pc, #580]	@ (8009818 <_printf_float+0x2d0>)
 80095d2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80095d6:	bf8c      	ite	hi
 80095d8:	4690      	movhi	r8, r2
 80095da:	4698      	movls	r8, r3
 80095dc:	2303      	movs	r3, #3
 80095de:	6123      	str	r3, [r4, #16]
 80095e0:	f02b 0304 	bic.w	r3, fp, #4
 80095e4:	6023      	str	r3, [r4, #0]
 80095e6:	f04f 0900 	mov.w	r9, #0
 80095ea:	9700      	str	r7, [sp, #0]
 80095ec:	4633      	mov	r3, r6
 80095ee:	aa0b      	add	r2, sp, #44	@ 0x2c
 80095f0:	4621      	mov	r1, r4
 80095f2:	4628      	mov	r0, r5
 80095f4:	f000 f9d2 	bl	800999c <_printf_common>
 80095f8:	3001      	adds	r0, #1
 80095fa:	f040 808d 	bne.w	8009718 <_printf_float+0x1d0>
 80095fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009602:	b00d      	add	sp, #52	@ 0x34
 8009604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009608:	4642      	mov	r2, r8
 800960a:	464b      	mov	r3, r9
 800960c:	4640      	mov	r0, r8
 800960e:	4649      	mov	r1, r9
 8009610:	f7f7 fa94 	bl	8000b3c <__aeabi_dcmpun>
 8009614:	b140      	cbz	r0, 8009628 <_printf_float+0xe0>
 8009616:	464b      	mov	r3, r9
 8009618:	2b00      	cmp	r3, #0
 800961a:	bfbc      	itt	lt
 800961c:	232d      	movlt	r3, #45	@ 0x2d
 800961e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009622:	4a7e      	ldr	r2, [pc, #504]	@ (800981c <_printf_float+0x2d4>)
 8009624:	4b7e      	ldr	r3, [pc, #504]	@ (8009820 <_printf_float+0x2d8>)
 8009626:	e7d4      	b.n	80095d2 <_printf_float+0x8a>
 8009628:	6863      	ldr	r3, [r4, #4]
 800962a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800962e:	9206      	str	r2, [sp, #24]
 8009630:	1c5a      	adds	r2, r3, #1
 8009632:	d13b      	bne.n	80096ac <_printf_float+0x164>
 8009634:	2306      	movs	r3, #6
 8009636:	6063      	str	r3, [r4, #4]
 8009638:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800963c:	2300      	movs	r3, #0
 800963e:	6022      	str	r2, [r4, #0]
 8009640:	9303      	str	r3, [sp, #12]
 8009642:	ab0a      	add	r3, sp, #40	@ 0x28
 8009644:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009648:	ab09      	add	r3, sp, #36	@ 0x24
 800964a:	9300      	str	r3, [sp, #0]
 800964c:	6861      	ldr	r1, [r4, #4]
 800964e:	ec49 8b10 	vmov	d0, r8, r9
 8009652:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009656:	4628      	mov	r0, r5
 8009658:	f7ff fed6 	bl	8009408 <__cvt>
 800965c:	9b06      	ldr	r3, [sp, #24]
 800965e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009660:	2b47      	cmp	r3, #71	@ 0x47
 8009662:	4680      	mov	r8, r0
 8009664:	d129      	bne.n	80096ba <_printf_float+0x172>
 8009666:	1cc8      	adds	r0, r1, #3
 8009668:	db02      	blt.n	8009670 <_printf_float+0x128>
 800966a:	6863      	ldr	r3, [r4, #4]
 800966c:	4299      	cmp	r1, r3
 800966e:	dd41      	ble.n	80096f4 <_printf_float+0x1ac>
 8009670:	f1aa 0a02 	sub.w	sl, sl, #2
 8009674:	fa5f fa8a 	uxtb.w	sl, sl
 8009678:	3901      	subs	r1, #1
 800967a:	4652      	mov	r2, sl
 800967c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009680:	9109      	str	r1, [sp, #36]	@ 0x24
 8009682:	f7ff ff26 	bl	80094d2 <__exponent>
 8009686:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009688:	1813      	adds	r3, r2, r0
 800968a:	2a01      	cmp	r2, #1
 800968c:	4681      	mov	r9, r0
 800968e:	6123      	str	r3, [r4, #16]
 8009690:	dc02      	bgt.n	8009698 <_printf_float+0x150>
 8009692:	6822      	ldr	r2, [r4, #0]
 8009694:	07d2      	lsls	r2, r2, #31
 8009696:	d501      	bpl.n	800969c <_printf_float+0x154>
 8009698:	3301      	adds	r3, #1
 800969a:	6123      	str	r3, [r4, #16]
 800969c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d0a2      	beq.n	80095ea <_printf_float+0xa2>
 80096a4:	232d      	movs	r3, #45	@ 0x2d
 80096a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096aa:	e79e      	b.n	80095ea <_printf_float+0xa2>
 80096ac:	9a06      	ldr	r2, [sp, #24]
 80096ae:	2a47      	cmp	r2, #71	@ 0x47
 80096b0:	d1c2      	bne.n	8009638 <_printf_float+0xf0>
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d1c0      	bne.n	8009638 <_printf_float+0xf0>
 80096b6:	2301      	movs	r3, #1
 80096b8:	e7bd      	b.n	8009636 <_printf_float+0xee>
 80096ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80096be:	d9db      	bls.n	8009678 <_printf_float+0x130>
 80096c0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80096c4:	d118      	bne.n	80096f8 <_printf_float+0x1b0>
 80096c6:	2900      	cmp	r1, #0
 80096c8:	6863      	ldr	r3, [r4, #4]
 80096ca:	dd0b      	ble.n	80096e4 <_printf_float+0x19c>
 80096cc:	6121      	str	r1, [r4, #16]
 80096ce:	b913      	cbnz	r3, 80096d6 <_printf_float+0x18e>
 80096d0:	6822      	ldr	r2, [r4, #0]
 80096d2:	07d0      	lsls	r0, r2, #31
 80096d4:	d502      	bpl.n	80096dc <_printf_float+0x194>
 80096d6:	3301      	adds	r3, #1
 80096d8:	440b      	add	r3, r1
 80096da:	6123      	str	r3, [r4, #16]
 80096dc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80096de:	f04f 0900 	mov.w	r9, #0
 80096e2:	e7db      	b.n	800969c <_printf_float+0x154>
 80096e4:	b913      	cbnz	r3, 80096ec <_printf_float+0x1a4>
 80096e6:	6822      	ldr	r2, [r4, #0]
 80096e8:	07d2      	lsls	r2, r2, #31
 80096ea:	d501      	bpl.n	80096f0 <_printf_float+0x1a8>
 80096ec:	3302      	adds	r3, #2
 80096ee:	e7f4      	b.n	80096da <_printf_float+0x192>
 80096f0:	2301      	movs	r3, #1
 80096f2:	e7f2      	b.n	80096da <_printf_float+0x192>
 80096f4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80096f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096fa:	4299      	cmp	r1, r3
 80096fc:	db05      	blt.n	800970a <_printf_float+0x1c2>
 80096fe:	6823      	ldr	r3, [r4, #0]
 8009700:	6121      	str	r1, [r4, #16]
 8009702:	07d8      	lsls	r0, r3, #31
 8009704:	d5ea      	bpl.n	80096dc <_printf_float+0x194>
 8009706:	1c4b      	adds	r3, r1, #1
 8009708:	e7e7      	b.n	80096da <_printf_float+0x192>
 800970a:	2900      	cmp	r1, #0
 800970c:	bfd4      	ite	le
 800970e:	f1c1 0202 	rsble	r2, r1, #2
 8009712:	2201      	movgt	r2, #1
 8009714:	4413      	add	r3, r2
 8009716:	e7e0      	b.n	80096da <_printf_float+0x192>
 8009718:	6823      	ldr	r3, [r4, #0]
 800971a:	055a      	lsls	r2, r3, #21
 800971c:	d407      	bmi.n	800972e <_printf_float+0x1e6>
 800971e:	6923      	ldr	r3, [r4, #16]
 8009720:	4642      	mov	r2, r8
 8009722:	4631      	mov	r1, r6
 8009724:	4628      	mov	r0, r5
 8009726:	47b8      	blx	r7
 8009728:	3001      	adds	r0, #1
 800972a:	d12b      	bne.n	8009784 <_printf_float+0x23c>
 800972c:	e767      	b.n	80095fe <_printf_float+0xb6>
 800972e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009732:	f240 80dd 	bls.w	80098f0 <_printf_float+0x3a8>
 8009736:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800973a:	2200      	movs	r2, #0
 800973c:	2300      	movs	r3, #0
 800973e:	f7f7 f9cb 	bl	8000ad8 <__aeabi_dcmpeq>
 8009742:	2800      	cmp	r0, #0
 8009744:	d033      	beq.n	80097ae <_printf_float+0x266>
 8009746:	4a37      	ldr	r2, [pc, #220]	@ (8009824 <_printf_float+0x2dc>)
 8009748:	2301      	movs	r3, #1
 800974a:	4631      	mov	r1, r6
 800974c:	4628      	mov	r0, r5
 800974e:	47b8      	blx	r7
 8009750:	3001      	adds	r0, #1
 8009752:	f43f af54 	beq.w	80095fe <_printf_float+0xb6>
 8009756:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800975a:	4543      	cmp	r3, r8
 800975c:	db02      	blt.n	8009764 <_printf_float+0x21c>
 800975e:	6823      	ldr	r3, [r4, #0]
 8009760:	07d8      	lsls	r0, r3, #31
 8009762:	d50f      	bpl.n	8009784 <_printf_float+0x23c>
 8009764:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009768:	4631      	mov	r1, r6
 800976a:	4628      	mov	r0, r5
 800976c:	47b8      	blx	r7
 800976e:	3001      	adds	r0, #1
 8009770:	f43f af45 	beq.w	80095fe <_printf_float+0xb6>
 8009774:	f04f 0900 	mov.w	r9, #0
 8009778:	f108 38ff 	add.w	r8, r8, #4294967295
 800977c:	f104 0a1a 	add.w	sl, r4, #26
 8009780:	45c8      	cmp	r8, r9
 8009782:	dc09      	bgt.n	8009798 <_printf_float+0x250>
 8009784:	6823      	ldr	r3, [r4, #0]
 8009786:	079b      	lsls	r3, r3, #30
 8009788:	f100 8103 	bmi.w	8009992 <_printf_float+0x44a>
 800978c:	68e0      	ldr	r0, [r4, #12]
 800978e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009790:	4298      	cmp	r0, r3
 8009792:	bfb8      	it	lt
 8009794:	4618      	movlt	r0, r3
 8009796:	e734      	b.n	8009602 <_printf_float+0xba>
 8009798:	2301      	movs	r3, #1
 800979a:	4652      	mov	r2, sl
 800979c:	4631      	mov	r1, r6
 800979e:	4628      	mov	r0, r5
 80097a0:	47b8      	blx	r7
 80097a2:	3001      	adds	r0, #1
 80097a4:	f43f af2b 	beq.w	80095fe <_printf_float+0xb6>
 80097a8:	f109 0901 	add.w	r9, r9, #1
 80097ac:	e7e8      	b.n	8009780 <_printf_float+0x238>
 80097ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	dc39      	bgt.n	8009828 <_printf_float+0x2e0>
 80097b4:	4a1b      	ldr	r2, [pc, #108]	@ (8009824 <_printf_float+0x2dc>)
 80097b6:	2301      	movs	r3, #1
 80097b8:	4631      	mov	r1, r6
 80097ba:	4628      	mov	r0, r5
 80097bc:	47b8      	blx	r7
 80097be:	3001      	adds	r0, #1
 80097c0:	f43f af1d 	beq.w	80095fe <_printf_float+0xb6>
 80097c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80097c8:	ea59 0303 	orrs.w	r3, r9, r3
 80097cc:	d102      	bne.n	80097d4 <_printf_float+0x28c>
 80097ce:	6823      	ldr	r3, [r4, #0]
 80097d0:	07d9      	lsls	r1, r3, #31
 80097d2:	d5d7      	bpl.n	8009784 <_printf_float+0x23c>
 80097d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097d8:	4631      	mov	r1, r6
 80097da:	4628      	mov	r0, r5
 80097dc:	47b8      	blx	r7
 80097de:	3001      	adds	r0, #1
 80097e0:	f43f af0d 	beq.w	80095fe <_printf_float+0xb6>
 80097e4:	f04f 0a00 	mov.w	sl, #0
 80097e8:	f104 0b1a 	add.w	fp, r4, #26
 80097ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097ee:	425b      	negs	r3, r3
 80097f0:	4553      	cmp	r3, sl
 80097f2:	dc01      	bgt.n	80097f8 <_printf_float+0x2b0>
 80097f4:	464b      	mov	r3, r9
 80097f6:	e793      	b.n	8009720 <_printf_float+0x1d8>
 80097f8:	2301      	movs	r3, #1
 80097fa:	465a      	mov	r2, fp
 80097fc:	4631      	mov	r1, r6
 80097fe:	4628      	mov	r0, r5
 8009800:	47b8      	blx	r7
 8009802:	3001      	adds	r0, #1
 8009804:	f43f aefb 	beq.w	80095fe <_printf_float+0xb6>
 8009808:	f10a 0a01 	add.w	sl, sl, #1
 800980c:	e7ee      	b.n	80097ec <_printf_float+0x2a4>
 800980e:	bf00      	nop
 8009810:	7fefffff 	.word	0x7fefffff
 8009814:	0800c338 	.word	0x0800c338
 8009818:	0800c334 	.word	0x0800c334
 800981c:	0800c340 	.word	0x0800c340
 8009820:	0800c33c 	.word	0x0800c33c
 8009824:	0800c344 	.word	0x0800c344
 8009828:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800982a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800982e:	4553      	cmp	r3, sl
 8009830:	bfa8      	it	ge
 8009832:	4653      	movge	r3, sl
 8009834:	2b00      	cmp	r3, #0
 8009836:	4699      	mov	r9, r3
 8009838:	dc36      	bgt.n	80098a8 <_printf_float+0x360>
 800983a:	f04f 0b00 	mov.w	fp, #0
 800983e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009842:	f104 021a 	add.w	r2, r4, #26
 8009846:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009848:	9306      	str	r3, [sp, #24]
 800984a:	eba3 0309 	sub.w	r3, r3, r9
 800984e:	455b      	cmp	r3, fp
 8009850:	dc31      	bgt.n	80098b6 <_printf_float+0x36e>
 8009852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009854:	459a      	cmp	sl, r3
 8009856:	dc3a      	bgt.n	80098ce <_printf_float+0x386>
 8009858:	6823      	ldr	r3, [r4, #0]
 800985a:	07da      	lsls	r2, r3, #31
 800985c:	d437      	bmi.n	80098ce <_printf_float+0x386>
 800985e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009860:	ebaa 0903 	sub.w	r9, sl, r3
 8009864:	9b06      	ldr	r3, [sp, #24]
 8009866:	ebaa 0303 	sub.w	r3, sl, r3
 800986a:	4599      	cmp	r9, r3
 800986c:	bfa8      	it	ge
 800986e:	4699      	movge	r9, r3
 8009870:	f1b9 0f00 	cmp.w	r9, #0
 8009874:	dc33      	bgt.n	80098de <_printf_float+0x396>
 8009876:	f04f 0800 	mov.w	r8, #0
 800987a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800987e:	f104 0b1a 	add.w	fp, r4, #26
 8009882:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009884:	ebaa 0303 	sub.w	r3, sl, r3
 8009888:	eba3 0309 	sub.w	r3, r3, r9
 800988c:	4543      	cmp	r3, r8
 800988e:	f77f af79 	ble.w	8009784 <_printf_float+0x23c>
 8009892:	2301      	movs	r3, #1
 8009894:	465a      	mov	r2, fp
 8009896:	4631      	mov	r1, r6
 8009898:	4628      	mov	r0, r5
 800989a:	47b8      	blx	r7
 800989c:	3001      	adds	r0, #1
 800989e:	f43f aeae 	beq.w	80095fe <_printf_float+0xb6>
 80098a2:	f108 0801 	add.w	r8, r8, #1
 80098a6:	e7ec      	b.n	8009882 <_printf_float+0x33a>
 80098a8:	4642      	mov	r2, r8
 80098aa:	4631      	mov	r1, r6
 80098ac:	4628      	mov	r0, r5
 80098ae:	47b8      	blx	r7
 80098b0:	3001      	adds	r0, #1
 80098b2:	d1c2      	bne.n	800983a <_printf_float+0x2f2>
 80098b4:	e6a3      	b.n	80095fe <_printf_float+0xb6>
 80098b6:	2301      	movs	r3, #1
 80098b8:	4631      	mov	r1, r6
 80098ba:	4628      	mov	r0, r5
 80098bc:	9206      	str	r2, [sp, #24]
 80098be:	47b8      	blx	r7
 80098c0:	3001      	adds	r0, #1
 80098c2:	f43f ae9c 	beq.w	80095fe <_printf_float+0xb6>
 80098c6:	9a06      	ldr	r2, [sp, #24]
 80098c8:	f10b 0b01 	add.w	fp, fp, #1
 80098cc:	e7bb      	b.n	8009846 <_printf_float+0x2fe>
 80098ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098d2:	4631      	mov	r1, r6
 80098d4:	4628      	mov	r0, r5
 80098d6:	47b8      	blx	r7
 80098d8:	3001      	adds	r0, #1
 80098da:	d1c0      	bne.n	800985e <_printf_float+0x316>
 80098dc:	e68f      	b.n	80095fe <_printf_float+0xb6>
 80098de:	9a06      	ldr	r2, [sp, #24]
 80098e0:	464b      	mov	r3, r9
 80098e2:	4442      	add	r2, r8
 80098e4:	4631      	mov	r1, r6
 80098e6:	4628      	mov	r0, r5
 80098e8:	47b8      	blx	r7
 80098ea:	3001      	adds	r0, #1
 80098ec:	d1c3      	bne.n	8009876 <_printf_float+0x32e>
 80098ee:	e686      	b.n	80095fe <_printf_float+0xb6>
 80098f0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80098f4:	f1ba 0f01 	cmp.w	sl, #1
 80098f8:	dc01      	bgt.n	80098fe <_printf_float+0x3b6>
 80098fa:	07db      	lsls	r3, r3, #31
 80098fc:	d536      	bpl.n	800996c <_printf_float+0x424>
 80098fe:	2301      	movs	r3, #1
 8009900:	4642      	mov	r2, r8
 8009902:	4631      	mov	r1, r6
 8009904:	4628      	mov	r0, r5
 8009906:	47b8      	blx	r7
 8009908:	3001      	adds	r0, #1
 800990a:	f43f ae78 	beq.w	80095fe <_printf_float+0xb6>
 800990e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
=======
 8009402:	bf00      	nop
 8009404:	3714      	adds	r7, #20
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr
 800940e:	bf00      	nop
 8009410:	20004ecc 	.word	0x20004ecc
 8009414:	20004ed4 	.word	0x20004ed4

08009418 <__cvt>:
 8009418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800941c:	ec57 6b10 	vmov	r6, r7, d0
 8009420:	2f00      	cmp	r7, #0
 8009422:	460c      	mov	r4, r1
 8009424:	4619      	mov	r1, r3
 8009426:	463b      	mov	r3, r7
 8009428:	bfbb      	ittet	lt
 800942a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800942e:	461f      	movlt	r7, r3
 8009430:	2300      	movge	r3, #0
 8009432:	232d      	movlt	r3, #45	@ 0x2d
 8009434:	700b      	strb	r3, [r1, #0]
 8009436:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009438:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800943c:	4691      	mov	r9, r2
 800943e:	f023 0820 	bic.w	r8, r3, #32
 8009442:	bfbc      	itt	lt
 8009444:	4632      	movlt	r2, r6
 8009446:	4616      	movlt	r6, r2
 8009448:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800944c:	d005      	beq.n	800945a <__cvt+0x42>
 800944e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009452:	d100      	bne.n	8009456 <__cvt+0x3e>
 8009454:	3401      	adds	r4, #1
 8009456:	2102      	movs	r1, #2
 8009458:	e000      	b.n	800945c <__cvt+0x44>
 800945a:	2103      	movs	r1, #3
 800945c:	ab03      	add	r3, sp, #12
 800945e:	9301      	str	r3, [sp, #4]
 8009460:	ab02      	add	r3, sp, #8
 8009462:	9300      	str	r3, [sp, #0]
 8009464:	ec47 6b10 	vmov	d0, r6, r7
 8009468:	4653      	mov	r3, sl
 800946a:	4622      	mov	r2, r4
 800946c:	f000 ffe0 	bl	800a430 <_dtoa_r>
 8009470:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009474:	4605      	mov	r5, r0
 8009476:	d119      	bne.n	80094ac <__cvt+0x94>
 8009478:	f019 0f01 	tst.w	r9, #1
 800947c:	d00e      	beq.n	800949c <__cvt+0x84>
 800947e:	eb00 0904 	add.w	r9, r0, r4
 8009482:	2200      	movs	r2, #0
 8009484:	2300      	movs	r3, #0
 8009486:	4630      	mov	r0, r6
 8009488:	4639      	mov	r1, r7
 800948a:	f7f7 fb25 	bl	8000ad8 <__aeabi_dcmpeq>
 800948e:	b108      	cbz	r0, 8009494 <__cvt+0x7c>
 8009490:	f8cd 900c 	str.w	r9, [sp, #12]
 8009494:	2230      	movs	r2, #48	@ 0x30
 8009496:	9b03      	ldr	r3, [sp, #12]
 8009498:	454b      	cmp	r3, r9
 800949a:	d31e      	bcc.n	80094da <__cvt+0xc2>
 800949c:	9b03      	ldr	r3, [sp, #12]
 800949e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80094a0:	1b5b      	subs	r3, r3, r5
 80094a2:	4628      	mov	r0, r5
 80094a4:	6013      	str	r3, [r2, #0]
 80094a6:	b004      	add	sp, #16
 80094a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80094b0:	eb00 0904 	add.w	r9, r0, r4
 80094b4:	d1e5      	bne.n	8009482 <__cvt+0x6a>
 80094b6:	7803      	ldrb	r3, [r0, #0]
 80094b8:	2b30      	cmp	r3, #48	@ 0x30
 80094ba:	d10a      	bne.n	80094d2 <__cvt+0xba>
 80094bc:	2200      	movs	r2, #0
 80094be:	2300      	movs	r3, #0
 80094c0:	4630      	mov	r0, r6
 80094c2:	4639      	mov	r1, r7
 80094c4:	f7f7 fb08 	bl	8000ad8 <__aeabi_dcmpeq>
 80094c8:	b918      	cbnz	r0, 80094d2 <__cvt+0xba>
 80094ca:	f1c4 0401 	rsb	r4, r4, #1
 80094ce:	f8ca 4000 	str.w	r4, [sl]
 80094d2:	f8da 3000 	ldr.w	r3, [sl]
 80094d6:	4499      	add	r9, r3
 80094d8:	e7d3      	b.n	8009482 <__cvt+0x6a>
 80094da:	1c59      	adds	r1, r3, #1
 80094dc:	9103      	str	r1, [sp, #12]
 80094de:	701a      	strb	r2, [r3, #0]
 80094e0:	e7d9      	b.n	8009496 <__cvt+0x7e>

080094e2 <__exponent>:
 80094e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094e4:	2900      	cmp	r1, #0
 80094e6:	bfba      	itte	lt
 80094e8:	4249      	neglt	r1, r1
 80094ea:	232d      	movlt	r3, #45	@ 0x2d
 80094ec:	232b      	movge	r3, #43	@ 0x2b
 80094ee:	2909      	cmp	r1, #9
 80094f0:	7002      	strb	r2, [r0, #0]
 80094f2:	7043      	strb	r3, [r0, #1]
 80094f4:	dd29      	ble.n	800954a <__exponent+0x68>
 80094f6:	f10d 0307 	add.w	r3, sp, #7
 80094fa:	461d      	mov	r5, r3
 80094fc:	270a      	movs	r7, #10
 80094fe:	461a      	mov	r2, r3
 8009500:	fbb1 f6f7 	udiv	r6, r1, r7
 8009504:	fb07 1416 	mls	r4, r7, r6, r1
 8009508:	3430      	adds	r4, #48	@ 0x30
 800950a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800950e:	460c      	mov	r4, r1
 8009510:	2c63      	cmp	r4, #99	@ 0x63
 8009512:	f103 33ff 	add.w	r3, r3, #4294967295
 8009516:	4631      	mov	r1, r6
 8009518:	dcf1      	bgt.n	80094fe <__exponent+0x1c>
 800951a:	3130      	adds	r1, #48	@ 0x30
 800951c:	1e94      	subs	r4, r2, #2
 800951e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009522:	1c41      	adds	r1, r0, #1
 8009524:	4623      	mov	r3, r4
 8009526:	42ab      	cmp	r3, r5
 8009528:	d30a      	bcc.n	8009540 <__exponent+0x5e>
 800952a:	f10d 0309 	add.w	r3, sp, #9
 800952e:	1a9b      	subs	r3, r3, r2
 8009530:	42ac      	cmp	r4, r5
 8009532:	bf88      	it	hi
 8009534:	2300      	movhi	r3, #0
 8009536:	3302      	adds	r3, #2
 8009538:	4403      	add	r3, r0
 800953a:	1a18      	subs	r0, r3, r0
 800953c:	b003      	add	sp, #12
 800953e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009540:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009544:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009548:	e7ed      	b.n	8009526 <__exponent+0x44>
 800954a:	2330      	movs	r3, #48	@ 0x30
 800954c:	3130      	adds	r1, #48	@ 0x30
 800954e:	7083      	strb	r3, [r0, #2]
 8009550:	70c1      	strb	r1, [r0, #3]
 8009552:	1d03      	adds	r3, r0, #4
 8009554:	e7f1      	b.n	800953a <__exponent+0x58>
	...

08009558 <_printf_float>:
 8009558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800955c:	b08d      	sub	sp, #52	@ 0x34
 800955e:	460c      	mov	r4, r1
 8009560:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009564:	4616      	mov	r6, r2
 8009566:	461f      	mov	r7, r3
 8009568:	4605      	mov	r5, r0
 800956a:	f000 fdf3 	bl	800a154 <_localeconv_r>
 800956e:	6803      	ldr	r3, [r0, #0]
 8009570:	9304      	str	r3, [sp, #16]
 8009572:	4618      	mov	r0, r3
 8009574:	f7f6 fe84 	bl	8000280 <strlen>
 8009578:	2300      	movs	r3, #0
 800957a:	930a      	str	r3, [sp, #40]	@ 0x28
 800957c:	f8d8 3000 	ldr.w	r3, [r8]
 8009580:	9005      	str	r0, [sp, #20]
 8009582:	3307      	adds	r3, #7
 8009584:	f023 0307 	bic.w	r3, r3, #7
 8009588:	f103 0208 	add.w	r2, r3, #8
 800958c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009590:	f8d4 b000 	ldr.w	fp, [r4]
 8009594:	f8c8 2000 	str.w	r2, [r8]
 8009598:	e9d3 8900 	ldrd	r8, r9, [r3]
 800959c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80095a0:	9307      	str	r3, [sp, #28]
 80095a2:	f8cd 8018 	str.w	r8, [sp, #24]
 80095a6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80095aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80095ae:	4b9c      	ldr	r3, [pc, #624]	@ (8009820 <_printf_float+0x2c8>)
 80095b0:	f04f 32ff 	mov.w	r2, #4294967295
 80095b4:	f7f7 fac2 	bl	8000b3c <__aeabi_dcmpun>
 80095b8:	bb70      	cbnz	r0, 8009618 <_printf_float+0xc0>
 80095ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80095be:	4b98      	ldr	r3, [pc, #608]	@ (8009820 <_printf_float+0x2c8>)
 80095c0:	f04f 32ff 	mov.w	r2, #4294967295
 80095c4:	f7f7 fa9c 	bl	8000b00 <__aeabi_dcmple>
 80095c8:	bb30      	cbnz	r0, 8009618 <_printf_float+0xc0>
 80095ca:	2200      	movs	r2, #0
 80095cc:	2300      	movs	r3, #0
 80095ce:	4640      	mov	r0, r8
 80095d0:	4649      	mov	r1, r9
 80095d2:	f7f7 fa8b 	bl	8000aec <__aeabi_dcmplt>
 80095d6:	b110      	cbz	r0, 80095de <_printf_float+0x86>
 80095d8:	232d      	movs	r3, #45	@ 0x2d
 80095da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095de:	4a91      	ldr	r2, [pc, #580]	@ (8009824 <_printf_float+0x2cc>)
 80095e0:	4b91      	ldr	r3, [pc, #580]	@ (8009828 <_printf_float+0x2d0>)
 80095e2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80095e6:	bf8c      	ite	hi
 80095e8:	4690      	movhi	r8, r2
 80095ea:	4698      	movls	r8, r3
 80095ec:	2303      	movs	r3, #3
 80095ee:	6123      	str	r3, [r4, #16]
 80095f0:	f02b 0304 	bic.w	r3, fp, #4
 80095f4:	6023      	str	r3, [r4, #0]
 80095f6:	f04f 0900 	mov.w	r9, #0
 80095fa:	9700      	str	r7, [sp, #0]
 80095fc:	4633      	mov	r3, r6
 80095fe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009600:	4621      	mov	r1, r4
 8009602:	4628      	mov	r0, r5
 8009604:	f000 f9d2 	bl	80099ac <_printf_common>
 8009608:	3001      	adds	r0, #1
 800960a:	f040 808d 	bne.w	8009728 <_printf_float+0x1d0>
 800960e:	f04f 30ff 	mov.w	r0, #4294967295
 8009612:	b00d      	add	sp, #52	@ 0x34
 8009614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009618:	4642      	mov	r2, r8
 800961a:	464b      	mov	r3, r9
 800961c:	4640      	mov	r0, r8
 800961e:	4649      	mov	r1, r9
 8009620:	f7f7 fa8c 	bl	8000b3c <__aeabi_dcmpun>
 8009624:	b140      	cbz	r0, 8009638 <_printf_float+0xe0>
 8009626:	464b      	mov	r3, r9
 8009628:	2b00      	cmp	r3, #0
 800962a:	bfbc      	itt	lt
 800962c:	232d      	movlt	r3, #45	@ 0x2d
 800962e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009632:	4a7e      	ldr	r2, [pc, #504]	@ (800982c <_printf_float+0x2d4>)
 8009634:	4b7e      	ldr	r3, [pc, #504]	@ (8009830 <_printf_float+0x2d8>)
 8009636:	e7d4      	b.n	80095e2 <_printf_float+0x8a>
 8009638:	6863      	ldr	r3, [r4, #4]
 800963a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800963e:	9206      	str	r2, [sp, #24]
 8009640:	1c5a      	adds	r2, r3, #1
 8009642:	d13b      	bne.n	80096bc <_printf_float+0x164>
 8009644:	2306      	movs	r3, #6
 8009646:	6063      	str	r3, [r4, #4]
 8009648:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800964c:	2300      	movs	r3, #0
 800964e:	6022      	str	r2, [r4, #0]
 8009650:	9303      	str	r3, [sp, #12]
 8009652:	ab0a      	add	r3, sp, #40	@ 0x28
 8009654:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009658:	ab09      	add	r3, sp, #36	@ 0x24
 800965a:	9300      	str	r3, [sp, #0]
 800965c:	6861      	ldr	r1, [r4, #4]
 800965e:	ec49 8b10 	vmov	d0, r8, r9
 8009662:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009666:	4628      	mov	r0, r5
 8009668:	f7ff fed6 	bl	8009418 <__cvt>
 800966c:	9b06      	ldr	r3, [sp, #24]
 800966e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009670:	2b47      	cmp	r3, #71	@ 0x47
 8009672:	4680      	mov	r8, r0
 8009674:	d129      	bne.n	80096ca <_printf_float+0x172>
 8009676:	1cc8      	adds	r0, r1, #3
 8009678:	db02      	blt.n	8009680 <_printf_float+0x128>
 800967a:	6863      	ldr	r3, [r4, #4]
 800967c:	4299      	cmp	r1, r3
 800967e:	dd41      	ble.n	8009704 <_printf_float+0x1ac>
 8009680:	f1aa 0a02 	sub.w	sl, sl, #2
 8009684:	fa5f fa8a 	uxtb.w	sl, sl
 8009688:	3901      	subs	r1, #1
 800968a:	4652      	mov	r2, sl
 800968c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009690:	9109      	str	r1, [sp, #36]	@ 0x24
 8009692:	f7ff ff26 	bl	80094e2 <__exponent>
 8009696:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009698:	1813      	adds	r3, r2, r0
 800969a:	2a01      	cmp	r2, #1
 800969c:	4681      	mov	r9, r0
 800969e:	6123      	str	r3, [r4, #16]
 80096a0:	dc02      	bgt.n	80096a8 <_printf_float+0x150>
 80096a2:	6822      	ldr	r2, [r4, #0]
 80096a4:	07d2      	lsls	r2, r2, #31
 80096a6:	d501      	bpl.n	80096ac <_printf_float+0x154>
 80096a8:	3301      	adds	r3, #1
 80096aa:	6123      	str	r3, [r4, #16]
 80096ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d0a2      	beq.n	80095fa <_printf_float+0xa2>
 80096b4:	232d      	movs	r3, #45	@ 0x2d
 80096b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096ba:	e79e      	b.n	80095fa <_printf_float+0xa2>
 80096bc:	9a06      	ldr	r2, [sp, #24]
 80096be:	2a47      	cmp	r2, #71	@ 0x47
 80096c0:	d1c2      	bne.n	8009648 <_printf_float+0xf0>
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d1c0      	bne.n	8009648 <_printf_float+0xf0>
 80096c6:	2301      	movs	r3, #1
 80096c8:	e7bd      	b.n	8009646 <_printf_float+0xee>
 80096ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80096ce:	d9db      	bls.n	8009688 <_printf_float+0x130>
 80096d0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80096d4:	d118      	bne.n	8009708 <_printf_float+0x1b0>
 80096d6:	2900      	cmp	r1, #0
 80096d8:	6863      	ldr	r3, [r4, #4]
 80096da:	dd0b      	ble.n	80096f4 <_printf_float+0x19c>
 80096dc:	6121      	str	r1, [r4, #16]
 80096de:	b913      	cbnz	r3, 80096e6 <_printf_float+0x18e>
 80096e0:	6822      	ldr	r2, [r4, #0]
 80096e2:	07d0      	lsls	r0, r2, #31
 80096e4:	d502      	bpl.n	80096ec <_printf_float+0x194>
 80096e6:	3301      	adds	r3, #1
 80096e8:	440b      	add	r3, r1
 80096ea:	6123      	str	r3, [r4, #16]
 80096ec:	65a1      	str	r1, [r4, #88]	@ 0x58
 80096ee:	f04f 0900 	mov.w	r9, #0
 80096f2:	e7db      	b.n	80096ac <_printf_float+0x154>
 80096f4:	b913      	cbnz	r3, 80096fc <_printf_float+0x1a4>
 80096f6:	6822      	ldr	r2, [r4, #0]
 80096f8:	07d2      	lsls	r2, r2, #31
 80096fa:	d501      	bpl.n	8009700 <_printf_float+0x1a8>
 80096fc:	3302      	adds	r3, #2
 80096fe:	e7f4      	b.n	80096ea <_printf_float+0x192>
 8009700:	2301      	movs	r3, #1
 8009702:	e7f2      	b.n	80096ea <_printf_float+0x192>
 8009704:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009708:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800970a:	4299      	cmp	r1, r3
 800970c:	db05      	blt.n	800971a <_printf_float+0x1c2>
 800970e:	6823      	ldr	r3, [r4, #0]
 8009710:	6121      	str	r1, [r4, #16]
 8009712:	07d8      	lsls	r0, r3, #31
 8009714:	d5ea      	bpl.n	80096ec <_printf_float+0x194>
 8009716:	1c4b      	adds	r3, r1, #1
 8009718:	e7e7      	b.n	80096ea <_printf_float+0x192>
 800971a:	2900      	cmp	r1, #0
 800971c:	bfd4      	ite	le
 800971e:	f1c1 0202 	rsble	r2, r1, #2
 8009722:	2201      	movgt	r2, #1
 8009724:	4413      	add	r3, r2
 8009726:	e7e0      	b.n	80096ea <_printf_float+0x192>
 8009728:	6823      	ldr	r3, [r4, #0]
 800972a:	055a      	lsls	r2, r3, #21
 800972c:	d407      	bmi.n	800973e <_printf_float+0x1e6>
 800972e:	6923      	ldr	r3, [r4, #16]
 8009730:	4642      	mov	r2, r8
 8009732:	4631      	mov	r1, r6
 8009734:	4628      	mov	r0, r5
 8009736:	47b8      	blx	r7
 8009738:	3001      	adds	r0, #1
 800973a:	d12b      	bne.n	8009794 <_printf_float+0x23c>
 800973c:	e767      	b.n	800960e <_printf_float+0xb6>
 800973e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009742:	f240 80dd 	bls.w	8009900 <_printf_float+0x3a8>
 8009746:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800974a:	2200      	movs	r2, #0
 800974c:	2300      	movs	r3, #0
 800974e:	f7f7 f9c3 	bl	8000ad8 <__aeabi_dcmpeq>
 8009752:	2800      	cmp	r0, #0
 8009754:	d033      	beq.n	80097be <_printf_float+0x266>
 8009756:	4a37      	ldr	r2, [pc, #220]	@ (8009834 <_printf_float+0x2dc>)
 8009758:	2301      	movs	r3, #1
 800975a:	4631      	mov	r1, r6
 800975c:	4628      	mov	r0, r5
 800975e:	47b8      	blx	r7
 8009760:	3001      	adds	r0, #1
 8009762:	f43f af54 	beq.w	800960e <_printf_float+0xb6>
 8009766:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800976a:	4543      	cmp	r3, r8
 800976c:	db02      	blt.n	8009774 <_printf_float+0x21c>
 800976e:	6823      	ldr	r3, [r4, #0]
 8009770:	07d8      	lsls	r0, r3, #31
 8009772:	d50f      	bpl.n	8009794 <_printf_float+0x23c>
 8009774:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009778:	4631      	mov	r1, r6
 800977a:	4628      	mov	r0, r5
 800977c:	47b8      	blx	r7
 800977e:	3001      	adds	r0, #1
 8009780:	f43f af45 	beq.w	800960e <_printf_float+0xb6>
 8009784:	f04f 0900 	mov.w	r9, #0
 8009788:	f108 38ff 	add.w	r8, r8, #4294967295
 800978c:	f104 0a1a 	add.w	sl, r4, #26
 8009790:	45c8      	cmp	r8, r9
 8009792:	dc09      	bgt.n	80097a8 <_printf_float+0x250>
 8009794:	6823      	ldr	r3, [r4, #0]
 8009796:	079b      	lsls	r3, r3, #30
 8009798:	f100 8103 	bmi.w	80099a2 <_printf_float+0x44a>
 800979c:	68e0      	ldr	r0, [r4, #12]
 800979e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097a0:	4298      	cmp	r0, r3
 80097a2:	bfb8      	it	lt
 80097a4:	4618      	movlt	r0, r3
 80097a6:	e734      	b.n	8009612 <_printf_float+0xba>
 80097a8:	2301      	movs	r3, #1
 80097aa:	4652      	mov	r2, sl
 80097ac:	4631      	mov	r1, r6
 80097ae:	4628      	mov	r0, r5
 80097b0:	47b8      	blx	r7
 80097b2:	3001      	adds	r0, #1
 80097b4:	f43f af2b 	beq.w	800960e <_printf_float+0xb6>
 80097b8:	f109 0901 	add.w	r9, r9, #1
 80097bc:	e7e8      	b.n	8009790 <_printf_float+0x238>
 80097be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	dc39      	bgt.n	8009838 <_printf_float+0x2e0>
 80097c4:	4a1b      	ldr	r2, [pc, #108]	@ (8009834 <_printf_float+0x2dc>)
 80097c6:	2301      	movs	r3, #1
 80097c8:	4631      	mov	r1, r6
 80097ca:	4628      	mov	r0, r5
 80097cc:	47b8      	blx	r7
 80097ce:	3001      	adds	r0, #1
 80097d0:	f43f af1d 	beq.w	800960e <_printf_float+0xb6>
 80097d4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80097d8:	ea59 0303 	orrs.w	r3, r9, r3
 80097dc:	d102      	bne.n	80097e4 <_printf_float+0x28c>
 80097de:	6823      	ldr	r3, [r4, #0]
 80097e0:	07d9      	lsls	r1, r3, #31
 80097e2:	d5d7      	bpl.n	8009794 <_printf_float+0x23c>
 80097e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097e8:	4631      	mov	r1, r6
 80097ea:	4628      	mov	r0, r5
 80097ec:	47b8      	blx	r7
 80097ee:	3001      	adds	r0, #1
 80097f0:	f43f af0d 	beq.w	800960e <_printf_float+0xb6>
 80097f4:	f04f 0a00 	mov.w	sl, #0
 80097f8:	f104 0b1a 	add.w	fp, r4, #26
 80097fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097fe:	425b      	negs	r3, r3
 8009800:	4553      	cmp	r3, sl
 8009802:	dc01      	bgt.n	8009808 <_printf_float+0x2b0>
 8009804:	464b      	mov	r3, r9
 8009806:	e793      	b.n	8009730 <_printf_float+0x1d8>
 8009808:	2301      	movs	r3, #1
 800980a:	465a      	mov	r2, fp
 800980c:	4631      	mov	r1, r6
 800980e:	4628      	mov	r0, r5
 8009810:	47b8      	blx	r7
 8009812:	3001      	adds	r0, #1
 8009814:	f43f aefb 	beq.w	800960e <_printf_float+0xb6>
 8009818:	f10a 0a01 	add.w	sl, sl, #1
 800981c:	e7ee      	b.n	80097fc <_printf_float+0x2a4>
 800981e:	bf00      	nop
 8009820:	7fefffff 	.word	0x7fefffff
 8009824:	0800c418 	.word	0x0800c418
 8009828:	0800c414 	.word	0x0800c414
 800982c:	0800c420 	.word	0x0800c420
 8009830:	0800c41c 	.word	0x0800c41c
 8009834:	0800c424 	.word	0x0800c424
 8009838:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800983a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800983e:	4553      	cmp	r3, sl
 8009840:	bfa8      	it	ge
 8009842:	4653      	movge	r3, sl
 8009844:	2b00      	cmp	r3, #0
 8009846:	4699      	mov	r9, r3
 8009848:	dc36      	bgt.n	80098b8 <_printf_float+0x360>
 800984a:	f04f 0b00 	mov.w	fp, #0
 800984e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009852:	f104 021a 	add.w	r2, r4, #26
 8009856:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009858:	9306      	str	r3, [sp, #24]
 800985a:	eba3 0309 	sub.w	r3, r3, r9
 800985e:	455b      	cmp	r3, fp
 8009860:	dc31      	bgt.n	80098c6 <_printf_float+0x36e>
 8009862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009864:	459a      	cmp	sl, r3
 8009866:	dc3a      	bgt.n	80098de <_printf_float+0x386>
 8009868:	6823      	ldr	r3, [r4, #0]
 800986a:	07da      	lsls	r2, r3, #31
 800986c:	d437      	bmi.n	80098de <_printf_float+0x386>
 800986e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009870:	ebaa 0903 	sub.w	r9, sl, r3
 8009874:	9b06      	ldr	r3, [sp, #24]
 8009876:	ebaa 0303 	sub.w	r3, sl, r3
 800987a:	4599      	cmp	r9, r3
 800987c:	bfa8      	it	ge
 800987e:	4699      	movge	r9, r3
 8009880:	f1b9 0f00 	cmp.w	r9, #0
 8009884:	dc33      	bgt.n	80098ee <_printf_float+0x396>
 8009886:	f04f 0800 	mov.w	r8, #0
 800988a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800988e:	f104 0b1a 	add.w	fp, r4, #26
 8009892:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009894:	ebaa 0303 	sub.w	r3, sl, r3
 8009898:	eba3 0309 	sub.w	r3, r3, r9
 800989c:	4543      	cmp	r3, r8
 800989e:	f77f af79 	ble.w	8009794 <_printf_float+0x23c>
 80098a2:	2301      	movs	r3, #1
 80098a4:	465a      	mov	r2, fp
 80098a6:	4631      	mov	r1, r6
 80098a8:	4628      	mov	r0, r5
 80098aa:	47b8      	blx	r7
 80098ac:	3001      	adds	r0, #1
 80098ae:	f43f aeae 	beq.w	800960e <_printf_float+0xb6>
 80098b2:	f108 0801 	add.w	r8, r8, #1
 80098b6:	e7ec      	b.n	8009892 <_printf_float+0x33a>
 80098b8:	4642      	mov	r2, r8
 80098ba:	4631      	mov	r1, r6
 80098bc:	4628      	mov	r0, r5
 80098be:	47b8      	blx	r7
 80098c0:	3001      	adds	r0, #1
 80098c2:	d1c2      	bne.n	800984a <_printf_float+0x2f2>
 80098c4:	e6a3      	b.n	800960e <_printf_float+0xb6>
 80098c6:	2301      	movs	r3, #1
 80098c8:	4631      	mov	r1, r6
 80098ca:	4628      	mov	r0, r5
 80098cc:	9206      	str	r2, [sp, #24]
 80098ce:	47b8      	blx	r7
 80098d0:	3001      	adds	r0, #1
 80098d2:	f43f ae9c 	beq.w	800960e <_printf_float+0xb6>
 80098d6:	9a06      	ldr	r2, [sp, #24]
 80098d8:	f10b 0b01 	add.w	fp, fp, #1
 80098dc:	e7bb      	b.n	8009856 <_printf_float+0x2fe>
 80098de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098e2:	4631      	mov	r1, r6
 80098e4:	4628      	mov	r0, r5
 80098e6:	47b8      	blx	r7
 80098e8:	3001      	adds	r0, #1
 80098ea:	d1c0      	bne.n	800986e <_printf_float+0x316>
 80098ec:	e68f      	b.n	800960e <_printf_float+0xb6>
 80098ee:	9a06      	ldr	r2, [sp, #24]
 80098f0:	464b      	mov	r3, r9
 80098f2:	4442      	add	r2, r8
 80098f4:	4631      	mov	r1, r6
 80098f6:	4628      	mov	r0, r5
 80098f8:	47b8      	blx	r7
 80098fa:	3001      	adds	r0, #1
 80098fc:	d1c3      	bne.n	8009886 <_printf_float+0x32e>
 80098fe:	e686      	b.n	800960e <_printf_float+0xb6>
 8009900:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009904:	f1ba 0f01 	cmp.w	sl, #1
 8009908:	dc01      	bgt.n	800990e <_printf_float+0x3b6>
 800990a:	07db      	lsls	r3, r3, #31
 800990c:	d536      	bpl.n	800997c <_printf_float+0x424>
 800990e:	2301      	movs	r3, #1
 8009910:	4642      	mov	r2, r8
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
 8009912:	4631      	mov	r1, r6
 8009914:	4628      	mov	r0, r5
 8009916:	47b8      	blx	r7
 8009918:	3001      	adds	r0, #1
<<<<<<< HEAD
 800991a:	f43f ae70 	beq.w	80095fe <_printf_float+0xb6>
 800991e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009922:	2200      	movs	r2, #0
 8009924:	2300      	movs	r3, #0
 8009926:	f10a 3aff 	add.w	sl, sl, #4294967295
 800992a:	f7f7 f8d5 	bl	8000ad8 <__aeabi_dcmpeq>
 800992e:	b9c0      	cbnz	r0, 8009962 <_printf_float+0x41a>
 8009930:	4653      	mov	r3, sl
 8009932:	f108 0201 	add.w	r2, r8, #1
 8009936:	4631      	mov	r1, r6
 8009938:	4628      	mov	r0, r5
 800993a:	47b8      	blx	r7
 800993c:	3001      	adds	r0, #1
 800993e:	d10c      	bne.n	800995a <_printf_float+0x412>
 8009940:	e65d      	b.n	80095fe <_printf_float+0xb6>
 8009942:	2301      	movs	r3, #1
 8009944:	465a      	mov	r2, fp
=======
 800991a:	f43f ae78 	beq.w	800960e <_printf_float+0xb6>
 800991e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009922:	4631      	mov	r1, r6
 8009924:	4628      	mov	r0, r5
 8009926:	47b8      	blx	r7
 8009928:	3001      	adds	r0, #1
 800992a:	f43f ae70 	beq.w	800960e <_printf_float+0xb6>
 800992e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009932:	2200      	movs	r2, #0
 8009934:	2300      	movs	r3, #0
 8009936:	f10a 3aff 	add.w	sl, sl, #4294967295
 800993a:	f7f7 f8cd 	bl	8000ad8 <__aeabi_dcmpeq>
 800993e:	b9c0      	cbnz	r0, 8009972 <_printf_float+0x41a>
 8009940:	4653      	mov	r3, sl
 8009942:	f108 0201 	add.w	r2, r8, #1
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
 8009946:	4631      	mov	r1, r6
 8009948:	4628      	mov	r0, r5
 800994a:	47b8      	blx	r7
 800994c:	3001      	adds	r0, #1
<<<<<<< HEAD
 800994e:	f43f ae56 	beq.w	80095fe <_printf_float+0xb6>
 8009952:	f108 0801 	add.w	r8, r8, #1
 8009956:	45d0      	cmp	r8, sl
 8009958:	dbf3      	blt.n	8009942 <_printf_float+0x3fa>
 800995a:	464b      	mov	r3, r9
 800995c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009960:	e6df      	b.n	8009722 <_printf_float+0x1da>
 8009962:	f04f 0800 	mov.w	r8, #0
 8009966:	f104 0b1a 	add.w	fp, r4, #26
 800996a:	e7f4      	b.n	8009956 <_printf_float+0x40e>
 800996c:	2301      	movs	r3, #1
 800996e:	4642      	mov	r2, r8
 8009970:	e7e1      	b.n	8009936 <_printf_float+0x3ee>
 8009972:	2301      	movs	r3, #1
 8009974:	464a      	mov	r2, r9
 8009976:	4631      	mov	r1, r6
 8009978:	4628      	mov	r0, r5
 800997a:	47b8      	blx	r7
 800997c:	3001      	adds	r0, #1
 800997e:	f43f ae3e 	beq.w	80095fe <_printf_float+0xb6>
 8009982:	f108 0801 	add.w	r8, r8, #1
 8009986:	68e3      	ldr	r3, [r4, #12]
 8009988:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800998a:	1a5b      	subs	r3, r3, r1
 800998c:	4543      	cmp	r3, r8
 800998e:	dcf0      	bgt.n	8009972 <_printf_float+0x42a>
 8009990:	e6fc      	b.n	800978c <_printf_float+0x244>
 8009992:	f04f 0800 	mov.w	r8, #0
 8009996:	f104 0919 	add.w	r9, r4, #25
 800999a:	e7f4      	b.n	8009986 <_printf_float+0x43e>

0800999c <_printf_common>:
 800999c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099a0:	4616      	mov	r6, r2
 80099a2:	4698      	mov	r8, r3
 80099a4:	688a      	ldr	r2, [r1, #8]
 80099a6:	690b      	ldr	r3, [r1, #16]
 80099a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80099ac:	4293      	cmp	r3, r2
 80099ae:	bfb8      	it	lt
 80099b0:	4613      	movlt	r3, r2
 80099b2:	6033      	str	r3, [r6, #0]
 80099b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80099b8:	4607      	mov	r7, r0
 80099ba:	460c      	mov	r4, r1
 80099bc:	b10a      	cbz	r2, 80099c2 <_printf_common+0x26>
 80099be:	3301      	adds	r3, #1
 80099c0:	6033      	str	r3, [r6, #0]
 80099c2:	6823      	ldr	r3, [r4, #0]
 80099c4:	0699      	lsls	r1, r3, #26
 80099c6:	bf42      	ittt	mi
 80099c8:	6833      	ldrmi	r3, [r6, #0]
 80099ca:	3302      	addmi	r3, #2
 80099cc:	6033      	strmi	r3, [r6, #0]
 80099ce:	6825      	ldr	r5, [r4, #0]
 80099d0:	f015 0506 	ands.w	r5, r5, #6
 80099d4:	d106      	bne.n	80099e4 <_printf_common+0x48>
 80099d6:	f104 0a19 	add.w	sl, r4, #25
 80099da:	68e3      	ldr	r3, [r4, #12]
 80099dc:	6832      	ldr	r2, [r6, #0]
 80099de:	1a9b      	subs	r3, r3, r2
 80099e0:	42ab      	cmp	r3, r5
 80099e2:	dc26      	bgt.n	8009a32 <_printf_common+0x96>
 80099e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80099e8:	6822      	ldr	r2, [r4, #0]
 80099ea:	3b00      	subs	r3, #0
 80099ec:	bf18      	it	ne
 80099ee:	2301      	movne	r3, #1
 80099f0:	0692      	lsls	r2, r2, #26
 80099f2:	d42b      	bmi.n	8009a4c <_printf_common+0xb0>
 80099f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80099f8:	4641      	mov	r1, r8
 80099fa:	4638      	mov	r0, r7
 80099fc:	47c8      	blx	r9
 80099fe:	3001      	adds	r0, #1
 8009a00:	d01e      	beq.n	8009a40 <_printf_common+0xa4>
 8009a02:	6823      	ldr	r3, [r4, #0]
 8009a04:	6922      	ldr	r2, [r4, #16]
 8009a06:	f003 0306 	and.w	r3, r3, #6
 8009a0a:	2b04      	cmp	r3, #4
 8009a0c:	bf02      	ittt	eq
 8009a0e:	68e5      	ldreq	r5, [r4, #12]
 8009a10:	6833      	ldreq	r3, [r6, #0]
 8009a12:	1aed      	subeq	r5, r5, r3
 8009a14:	68a3      	ldr	r3, [r4, #8]
 8009a16:	bf0c      	ite	eq
 8009a18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a1c:	2500      	movne	r5, #0
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	bfc4      	itt	gt
 8009a22:	1a9b      	subgt	r3, r3, r2
 8009a24:	18ed      	addgt	r5, r5, r3
 8009a26:	2600      	movs	r6, #0
 8009a28:	341a      	adds	r4, #26
 8009a2a:	42b5      	cmp	r5, r6
 8009a2c:	d11a      	bne.n	8009a64 <_printf_common+0xc8>
 8009a2e:	2000      	movs	r0, #0
 8009a30:	e008      	b.n	8009a44 <_printf_common+0xa8>
 8009a32:	2301      	movs	r3, #1
 8009a34:	4652      	mov	r2, sl
 8009a36:	4641      	mov	r1, r8
 8009a38:	4638      	mov	r0, r7
 8009a3a:	47c8      	blx	r9
 8009a3c:	3001      	adds	r0, #1
 8009a3e:	d103      	bne.n	8009a48 <_printf_common+0xac>
 8009a40:	f04f 30ff 	mov.w	r0, #4294967295
 8009a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a48:	3501      	adds	r5, #1
 8009a4a:	e7c6      	b.n	80099da <_printf_common+0x3e>
 8009a4c:	18e1      	adds	r1, r4, r3
 8009a4e:	1c5a      	adds	r2, r3, #1
 8009a50:	2030      	movs	r0, #48	@ 0x30
 8009a52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009a56:	4422      	add	r2, r4
 8009a58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009a5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009a60:	3302      	adds	r3, #2
 8009a62:	e7c7      	b.n	80099f4 <_printf_common+0x58>
 8009a64:	2301      	movs	r3, #1
 8009a66:	4622      	mov	r2, r4
 8009a68:	4641      	mov	r1, r8
 8009a6a:	4638      	mov	r0, r7
 8009a6c:	47c8      	blx	r9
 8009a6e:	3001      	adds	r0, #1
 8009a70:	d0e6      	beq.n	8009a40 <_printf_common+0xa4>
 8009a72:	3601      	adds	r6, #1
 8009a74:	e7d9      	b.n	8009a2a <_printf_common+0x8e>
	...

08009a78 <_printf_i>:
 8009a78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a7c:	7e0f      	ldrb	r7, [r1, #24]
 8009a7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009a80:	2f78      	cmp	r7, #120	@ 0x78
 8009a82:	4691      	mov	r9, r2
 8009a84:	4680      	mov	r8, r0
 8009a86:	460c      	mov	r4, r1
 8009a88:	469a      	mov	sl, r3
 8009a8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009a8e:	d807      	bhi.n	8009aa0 <_printf_i+0x28>
 8009a90:	2f62      	cmp	r7, #98	@ 0x62
 8009a92:	d80a      	bhi.n	8009aaa <_printf_i+0x32>
 8009a94:	2f00      	cmp	r7, #0
 8009a96:	f000 80d1 	beq.w	8009c3c <_printf_i+0x1c4>
 8009a9a:	2f58      	cmp	r7, #88	@ 0x58
 8009a9c:	f000 80b8 	beq.w	8009c10 <_printf_i+0x198>
 8009aa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009aa4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009aa8:	e03a      	b.n	8009b20 <_printf_i+0xa8>
 8009aaa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009aae:	2b15      	cmp	r3, #21
 8009ab0:	d8f6      	bhi.n	8009aa0 <_printf_i+0x28>
 8009ab2:	a101      	add	r1, pc, #4	@ (adr r1, 8009ab8 <_printf_i+0x40>)
 8009ab4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ab8:	08009b11 	.word	0x08009b11
 8009abc:	08009b25 	.word	0x08009b25
 8009ac0:	08009aa1 	.word	0x08009aa1
 8009ac4:	08009aa1 	.word	0x08009aa1
 8009ac8:	08009aa1 	.word	0x08009aa1
 8009acc:	08009aa1 	.word	0x08009aa1
 8009ad0:	08009b25 	.word	0x08009b25
 8009ad4:	08009aa1 	.word	0x08009aa1
 8009ad8:	08009aa1 	.word	0x08009aa1
 8009adc:	08009aa1 	.word	0x08009aa1
 8009ae0:	08009aa1 	.word	0x08009aa1
 8009ae4:	08009c23 	.word	0x08009c23
 8009ae8:	08009b4f 	.word	0x08009b4f
 8009aec:	08009bdd 	.word	0x08009bdd
 8009af0:	08009aa1 	.word	0x08009aa1
 8009af4:	08009aa1 	.word	0x08009aa1
 8009af8:	08009c45 	.word	0x08009c45
 8009afc:	08009aa1 	.word	0x08009aa1
 8009b00:	08009b4f 	.word	0x08009b4f
 8009b04:	08009aa1 	.word	0x08009aa1
 8009b08:	08009aa1 	.word	0x08009aa1
 8009b0c:	08009be5 	.word	0x08009be5
 8009b10:	6833      	ldr	r3, [r6, #0]
 8009b12:	1d1a      	adds	r2, r3, #4
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	6032      	str	r2, [r6, #0]
 8009b18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009b20:	2301      	movs	r3, #1
 8009b22:	e09c      	b.n	8009c5e <_printf_i+0x1e6>
 8009b24:	6833      	ldr	r3, [r6, #0]
 8009b26:	6820      	ldr	r0, [r4, #0]
 8009b28:	1d19      	adds	r1, r3, #4
 8009b2a:	6031      	str	r1, [r6, #0]
 8009b2c:	0606      	lsls	r6, r0, #24
 8009b2e:	d501      	bpl.n	8009b34 <_printf_i+0xbc>
 8009b30:	681d      	ldr	r5, [r3, #0]
 8009b32:	e003      	b.n	8009b3c <_printf_i+0xc4>
 8009b34:	0645      	lsls	r5, r0, #25
 8009b36:	d5fb      	bpl.n	8009b30 <_printf_i+0xb8>
 8009b38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009b3c:	2d00      	cmp	r5, #0
 8009b3e:	da03      	bge.n	8009b48 <_printf_i+0xd0>
 8009b40:	232d      	movs	r3, #45	@ 0x2d
 8009b42:	426d      	negs	r5, r5
 8009b44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b48:	4858      	ldr	r0, [pc, #352]	@ (8009cac <_printf_i+0x234>)
 8009b4a:	230a      	movs	r3, #10
 8009b4c:	e011      	b.n	8009b72 <_printf_i+0xfa>
 8009b4e:	6821      	ldr	r1, [r4, #0]
 8009b50:	6833      	ldr	r3, [r6, #0]
 8009b52:	0608      	lsls	r0, r1, #24
 8009b54:	f853 5b04 	ldr.w	r5, [r3], #4
 8009b58:	d402      	bmi.n	8009b60 <_printf_i+0xe8>
 8009b5a:	0649      	lsls	r1, r1, #25
 8009b5c:	bf48      	it	mi
 8009b5e:	b2ad      	uxthmi	r5, r5
 8009b60:	2f6f      	cmp	r7, #111	@ 0x6f
 8009b62:	4852      	ldr	r0, [pc, #328]	@ (8009cac <_printf_i+0x234>)
 8009b64:	6033      	str	r3, [r6, #0]
 8009b66:	bf14      	ite	ne
 8009b68:	230a      	movne	r3, #10
 8009b6a:	2308      	moveq	r3, #8
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009b72:	6866      	ldr	r6, [r4, #4]
 8009b74:	60a6      	str	r6, [r4, #8]
 8009b76:	2e00      	cmp	r6, #0
 8009b78:	db05      	blt.n	8009b86 <_printf_i+0x10e>
 8009b7a:	6821      	ldr	r1, [r4, #0]
 8009b7c:	432e      	orrs	r6, r5
 8009b7e:	f021 0104 	bic.w	r1, r1, #4
 8009b82:	6021      	str	r1, [r4, #0]
 8009b84:	d04b      	beq.n	8009c1e <_printf_i+0x1a6>
 8009b86:	4616      	mov	r6, r2
 8009b88:	fbb5 f1f3 	udiv	r1, r5, r3
 8009b8c:	fb03 5711 	mls	r7, r3, r1, r5
 8009b90:	5dc7      	ldrb	r7, [r0, r7]
 8009b92:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009b96:	462f      	mov	r7, r5
 8009b98:	42bb      	cmp	r3, r7
 8009b9a:	460d      	mov	r5, r1
 8009b9c:	d9f4      	bls.n	8009b88 <_printf_i+0x110>
 8009b9e:	2b08      	cmp	r3, #8
 8009ba0:	d10b      	bne.n	8009bba <_printf_i+0x142>
 8009ba2:	6823      	ldr	r3, [r4, #0]
 8009ba4:	07df      	lsls	r7, r3, #31
 8009ba6:	d508      	bpl.n	8009bba <_printf_i+0x142>
 8009ba8:	6923      	ldr	r3, [r4, #16]
 8009baa:	6861      	ldr	r1, [r4, #4]
 8009bac:	4299      	cmp	r1, r3
 8009bae:	bfde      	ittt	le
 8009bb0:	2330      	movle	r3, #48	@ 0x30
 8009bb2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009bb6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009bba:	1b92      	subs	r2, r2, r6
 8009bbc:	6122      	str	r2, [r4, #16]
 8009bbe:	f8cd a000 	str.w	sl, [sp]
 8009bc2:	464b      	mov	r3, r9
 8009bc4:	aa03      	add	r2, sp, #12
 8009bc6:	4621      	mov	r1, r4
 8009bc8:	4640      	mov	r0, r8
 8009bca:	f7ff fee7 	bl	800999c <_printf_common>
 8009bce:	3001      	adds	r0, #1
 8009bd0:	d14a      	bne.n	8009c68 <_printf_i+0x1f0>
 8009bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8009bd6:	b004      	add	sp, #16
 8009bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bdc:	6823      	ldr	r3, [r4, #0]
 8009bde:	f043 0320 	orr.w	r3, r3, #32
 8009be2:	6023      	str	r3, [r4, #0]
 8009be4:	4832      	ldr	r0, [pc, #200]	@ (8009cb0 <_printf_i+0x238>)
 8009be6:	2778      	movs	r7, #120	@ 0x78
 8009be8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009bec:	6823      	ldr	r3, [r4, #0]
 8009bee:	6831      	ldr	r1, [r6, #0]
 8009bf0:	061f      	lsls	r7, r3, #24
 8009bf2:	f851 5b04 	ldr.w	r5, [r1], #4
 8009bf6:	d402      	bmi.n	8009bfe <_printf_i+0x186>
 8009bf8:	065f      	lsls	r7, r3, #25
 8009bfa:	bf48      	it	mi
 8009bfc:	b2ad      	uxthmi	r5, r5
 8009bfe:	6031      	str	r1, [r6, #0]
 8009c00:	07d9      	lsls	r1, r3, #31
 8009c02:	bf44      	itt	mi
 8009c04:	f043 0320 	orrmi.w	r3, r3, #32
 8009c08:	6023      	strmi	r3, [r4, #0]
 8009c0a:	b11d      	cbz	r5, 8009c14 <_printf_i+0x19c>
 8009c0c:	2310      	movs	r3, #16
 8009c0e:	e7ad      	b.n	8009b6c <_printf_i+0xf4>
 8009c10:	4826      	ldr	r0, [pc, #152]	@ (8009cac <_printf_i+0x234>)
 8009c12:	e7e9      	b.n	8009be8 <_printf_i+0x170>
 8009c14:	6823      	ldr	r3, [r4, #0]
 8009c16:	f023 0320 	bic.w	r3, r3, #32
 8009c1a:	6023      	str	r3, [r4, #0]
 8009c1c:	e7f6      	b.n	8009c0c <_printf_i+0x194>
 8009c1e:	4616      	mov	r6, r2
 8009c20:	e7bd      	b.n	8009b9e <_printf_i+0x126>
 8009c22:	6833      	ldr	r3, [r6, #0]
 8009c24:	6825      	ldr	r5, [r4, #0]
 8009c26:	6961      	ldr	r1, [r4, #20]
 8009c28:	1d18      	adds	r0, r3, #4
 8009c2a:	6030      	str	r0, [r6, #0]
 8009c2c:	062e      	lsls	r6, r5, #24
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	d501      	bpl.n	8009c36 <_printf_i+0x1be>
 8009c32:	6019      	str	r1, [r3, #0]
 8009c34:	e002      	b.n	8009c3c <_printf_i+0x1c4>
 8009c36:	0668      	lsls	r0, r5, #25
 8009c38:	d5fb      	bpl.n	8009c32 <_printf_i+0x1ba>
 8009c3a:	8019      	strh	r1, [r3, #0]
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	6123      	str	r3, [r4, #16]
 8009c40:	4616      	mov	r6, r2
 8009c42:	e7bc      	b.n	8009bbe <_printf_i+0x146>
 8009c44:	6833      	ldr	r3, [r6, #0]
 8009c46:	1d1a      	adds	r2, r3, #4
 8009c48:	6032      	str	r2, [r6, #0]
 8009c4a:	681e      	ldr	r6, [r3, #0]
 8009c4c:	6862      	ldr	r2, [r4, #4]
 8009c4e:	2100      	movs	r1, #0
 8009c50:	4630      	mov	r0, r6
 8009c52:	f7f6 fac5 	bl	80001e0 <memchr>
 8009c56:	b108      	cbz	r0, 8009c5c <_printf_i+0x1e4>
 8009c58:	1b80      	subs	r0, r0, r6
 8009c5a:	6060      	str	r0, [r4, #4]
 8009c5c:	6863      	ldr	r3, [r4, #4]
 8009c5e:	6123      	str	r3, [r4, #16]
 8009c60:	2300      	movs	r3, #0
 8009c62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c66:	e7aa      	b.n	8009bbe <_printf_i+0x146>
 8009c68:	6923      	ldr	r3, [r4, #16]
 8009c6a:	4632      	mov	r2, r6
 8009c6c:	4649      	mov	r1, r9
 8009c6e:	4640      	mov	r0, r8
 8009c70:	47d0      	blx	sl
 8009c72:	3001      	adds	r0, #1
 8009c74:	d0ad      	beq.n	8009bd2 <_printf_i+0x15a>
 8009c76:	6823      	ldr	r3, [r4, #0]
 8009c78:	079b      	lsls	r3, r3, #30
 8009c7a:	d413      	bmi.n	8009ca4 <_printf_i+0x22c>
 8009c7c:	68e0      	ldr	r0, [r4, #12]
 8009c7e:	9b03      	ldr	r3, [sp, #12]
 8009c80:	4298      	cmp	r0, r3
 8009c82:	bfb8      	it	lt
 8009c84:	4618      	movlt	r0, r3
 8009c86:	e7a6      	b.n	8009bd6 <_printf_i+0x15e>
 8009c88:	2301      	movs	r3, #1
 8009c8a:	4632      	mov	r2, r6
 8009c8c:	4649      	mov	r1, r9
 8009c8e:	4640      	mov	r0, r8
 8009c90:	47d0      	blx	sl
 8009c92:	3001      	adds	r0, #1
 8009c94:	d09d      	beq.n	8009bd2 <_printf_i+0x15a>
 8009c96:	3501      	adds	r5, #1
 8009c98:	68e3      	ldr	r3, [r4, #12]
 8009c9a:	9903      	ldr	r1, [sp, #12]
 8009c9c:	1a5b      	subs	r3, r3, r1
 8009c9e:	42ab      	cmp	r3, r5
 8009ca0:	dcf2      	bgt.n	8009c88 <_printf_i+0x210>
 8009ca2:	e7eb      	b.n	8009c7c <_printf_i+0x204>
 8009ca4:	2500      	movs	r5, #0
 8009ca6:	f104 0619 	add.w	r6, r4, #25
 8009caa:	e7f5      	b.n	8009c98 <_printf_i+0x220>
 8009cac:	0800c346 	.word	0x0800c346
 8009cb0:	0800c357 	.word	0x0800c357

08009cb4 <std>:
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	b510      	push	{r4, lr}
 8009cb8:	4604      	mov	r4, r0
 8009cba:	e9c0 3300 	strd	r3, r3, [r0]
 8009cbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009cc2:	6083      	str	r3, [r0, #8]
 8009cc4:	8181      	strh	r1, [r0, #12]
 8009cc6:	6643      	str	r3, [r0, #100]	@ 0x64
 8009cc8:	81c2      	strh	r2, [r0, #14]
 8009cca:	6183      	str	r3, [r0, #24]
 8009ccc:	4619      	mov	r1, r3
 8009cce:	2208      	movs	r2, #8
 8009cd0:	305c      	adds	r0, #92	@ 0x5c
 8009cd2:	f000 f93c 	bl	8009f4e <memset>
 8009cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8009d0c <std+0x58>)
 8009cd8:	6263      	str	r3, [r4, #36]	@ 0x24
 8009cda:	4b0d      	ldr	r3, [pc, #52]	@ (8009d10 <std+0x5c>)
 8009cdc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009cde:	4b0d      	ldr	r3, [pc, #52]	@ (8009d14 <std+0x60>)
 8009ce0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8009d18 <std+0x64>)
 8009ce4:	6323      	str	r3, [r4, #48]	@ 0x30
 8009ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8009d1c <std+0x68>)
 8009ce8:	6224      	str	r4, [r4, #32]
 8009cea:	429c      	cmp	r4, r3
 8009cec:	d006      	beq.n	8009cfc <std+0x48>
 8009cee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009cf2:	4294      	cmp	r4, r2
 8009cf4:	d002      	beq.n	8009cfc <std+0x48>
 8009cf6:	33d0      	adds	r3, #208	@ 0xd0
 8009cf8:	429c      	cmp	r4, r3
 8009cfa:	d105      	bne.n	8009d08 <std+0x54>
 8009cfc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d04:	f000 b9fe 	b.w	800a104 <__retarget_lock_init_recursive>
 8009d08:	bd10      	pop	{r4, pc}
 8009d0a:	bf00      	nop
 8009d0c:	08009ec9 	.word	0x08009ec9
 8009d10:	08009eeb 	.word	0x08009eeb
 8009d14:	08009f23 	.word	0x08009f23
 8009d18:	08009f47 	.word	0x08009f47
 8009d1c:	20004ee4 	.word	0x20004ee4

08009d20 <stdio_exit_handler>:
 8009d20:	4a02      	ldr	r2, [pc, #8]	@ (8009d2c <stdio_exit_handler+0xc>)
 8009d22:	4903      	ldr	r1, [pc, #12]	@ (8009d30 <stdio_exit_handler+0x10>)
 8009d24:	4803      	ldr	r0, [pc, #12]	@ (8009d34 <stdio_exit_handler+0x14>)
 8009d26:	f000 b869 	b.w	8009dfc <_fwalk_sglue>
 8009d2a:	bf00      	nop
 8009d2c:	20000010 	.word	0x20000010
 8009d30:	0800bd09 	.word	0x0800bd09
 8009d34:	20000020 	.word	0x20000020

08009d38 <cleanup_stdio>:
 8009d38:	6841      	ldr	r1, [r0, #4]
 8009d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8009d6c <cleanup_stdio+0x34>)
 8009d3c:	4299      	cmp	r1, r3
 8009d3e:	b510      	push	{r4, lr}
 8009d40:	4604      	mov	r4, r0
 8009d42:	d001      	beq.n	8009d48 <cleanup_stdio+0x10>
 8009d44:	f001 ffe0 	bl	800bd08 <_fflush_r>
 8009d48:	68a1      	ldr	r1, [r4, #8]
 8009d4a:	4b09      	ldr	r3, [pc, #36]	@ (8009d70 <cleanup_stdio+0x38>)
 8009d4c:	4299      	cmp	r1, r3
 8009d4e:	d002      	beq.n	8009d56 <cleanup_stdio+0x1e>
 8009d50:	4620      	mov	r0, r4
 8009d52:	f001 ffd9 	bl	800bd08 <_fflush_r>
 8009d56:	68e1      	ldr	r1, [r4, #12]
 8009d58:	4b06      	ldr	r3, [pc, #24]	@ (8009d74 <cleanup_stdio+0x3c>)
 8009d5a:	4299      	cmp	r1, r3
 8009d5c:	d004      	beq.n	8009d68 <cleanup_stdio+0x30>
 8009d5e:	4620      	mov	r0, r4
 8009d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d64:	f001 bfd0 	b.w	800bd08 <_fflush_r>
 8009d68:	bd10      	pop	{r4, pc}
 8009d6a:	bf00      	nop
 8009d6c:	20004ee4 	.word	0x20004ee4
 8009d70:	20004f4c 	.word	0x20004f4c
 8009d74:	20004fb4 	.word	0x20004fb4

08009d78 <global_stdio_init.part.0>:
 8009d78:	b510      	push	{r4, lr}
 8009d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8009da8 <global_stdio_init.part.0+0x30>)
 8009d7c:	4c0b      	ldr	r4, [pc, #44]	@ (8009dac <global_stdio_init.part.0+0x34>)
 8009d7e:	4a0c      	ldr	r2, [pc, #48]	@ (8009db0 <global_stdio_init.part.0+0x38>)
 8009d80:	601a      	str	r2, [r3, #0]
 8009d82:	4620      	mov	r0, r4
 8009d84:	2200      	movs	r2, #0
 8009d86:	2104      	movs	r1, #4
 8009d88:	f7ff ff94 	bl	8009cb4 <std>
 8009d8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009d90:	2201      	movs	r2, #1
 8009d92:	2109      	movs	r1, #9
 8009d94:	f7ff ff8e 	bl	8009cb4 <std>
 8009d98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009d9c:	2202      	movs	r2, #2
 8009d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009da2:	2112      	movs	r1, #18
 8009da4:	f7ff bf86 	b.w	8009cb4 <std>
 8009da8:	2000501c 	.word	0x2000501c
 8009dac:	20004ee4 	.word	0x20004ee4
 8009db0:	08009d21 	.word	0x08009d21

08009db4 <__sfp_lock_acquire>:
 8009db4:	4801      	ldr	r0, [pc, #4]	@ (8009dbc <__sfp_lock_acquire+0x8>)
 8009db6:	f000 b9a6 	b.w	800a106 <__retarget_lock_acquire_recursive>
 8009dba:	bf00      	nop
 8009dbc:	20005025 	.word	0x20005025

08009dc0 <__sfp_lock_release>:
 8009dc0:	4801      	ldr	r0, [pc, #4]	@ (8009dc8 <__sfp_lock_release+0x8>)
 8009dc2:	f000 b9a1 	b.w	800a108 <__retarget_lock_release_recursive>
 8009dc6:	bf00      	nop
 8009dc8:	20005025 	.word	0x20005025

08009dcc <__sinit>:
 8009dcc:	b510      	push	{r4, lr}
 8009dce:	4604      	mov	r4, r0
 8009dd0:	f7ff fff0 	bl	8009db4 <__sfp_lock_acquire>
 8009dd4:	6a23      	ldr	r3, [r4, #32]
 8009dd6:	b11b      	cbz	r3, 8009de0 <__sinit+0x14>
 8009dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ddc:	f7ff bff0 	b.w	8009dc0 <__sfp_lock_release>
 8009de0:	4b04      	ldr	r3, [pc, #16]	@ (8009df4 <__sinit+0x28>)
 8009de2:	6223      	str	r3, [r4, #32]
 8009de4:	4b04      	ldr	r3, [pc, #16]	@ (8009df8 <__sinit+0x2c>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d1f5      	bne.n	8009dd8 <__sinit+0xc>
 8009dec:	f7ff ffc4 	bl	8009d78 <global_stdio_init.part.0>
 8009df0:	e7f2      	b.n	8009dd8 <__sinit+0xc>
 8009df2:	bf00      	nop
 8009df4:	08009d39 	.word	0x08009d39
 8009df8:	2000501c 	.word	0x2000501c

08009dfc <_fwalk_sglue>:
 8009dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e00:	4607      	mov	r7, r0
 8009e02:	4688      	mov	r8, r1
 8009e04:	4614      	mov	r4, r2
 8009e06:	2600      	movs	r6, #0
 8009e08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e0c:	f1b9 0901 	subs.w	r9, r9, #1
 8009e10:	d505      	bpl.n	8009e1e <_fwalk_sglue+0x22>
 8009e12:	6824      	ldr	r4, [r4, #0]
 8009e14:	2c00      	cmp	r4, #0
 8009e16:	d1f7      	bne.n	8009e08 <_fwalk_sglue+0xc>
 8009e18:	4630      	mov	r0, r6
 8009e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e1e:	89ab      	ldrh	r3, [r5, #12]
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d907      	bls.n	8009e34 <_fwalk_sglue+0x38>
 8009e24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e28:	3301      	adds	r3, #1
 8009e2a:	d003      	beq.n	8009e34 <_fwalk_sglue+0x38>
 8009e2c:	4629      	mov	r1, r5
 8009e2e:	4638      	mov	r0, r7
 8009e30:	47c0      	blx	r8
 8009e32:	4306      	orrs	r6, r0
 8009e34:	3568      	adds	r5, #104	@ 0x68
 8009e36:	e7e9      	b.n	8009e0c <_fwalk_sglue+0x10>

08009e38 <iprintf>:
 8009e38:	b40f      	push	{r0, r1, r2, r3}
 8009e3a:	b507      	push	{r0, r1, r2, lr}
 8009e3c:	4906      	ldr	r1, [pc, #24]	@ (8009e58 <iprintf+0x20>)
 8009e3e:	ab04      	add	r3, sp, #16
 8009e40:	6808      	ldr	r0, [r1, #0]
 8009e42:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e46:	6881      	ldr	r1, [r0, #8]
 8009e48:	9301      	str	r3, [sp, #4]
 8009e4a:	f001 fdc1 	bl	800b9d0 <_vfiprintf_r>
 8009e4e:	b003      	add	sp, #12
 8009e50:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e54:	b004      	add	sp, #16
 8009e56:	4770      	bx	lr
 8009e58:	2000001c 	.word	0x2000001c

08009e5c <sniprintf>:
 8009e5c:	b40c      	push	{r2, r3}
 8009e5e:	b530      	push	{r4, r5, lr}
 8009e60:	4b18      	ldr	r3, [pc, #96]	@ (8009ec4 <sniprintf+0x68>)
 8009e62:	1e0c      	subs	r4, r1, #0
 8009e64:	681d      	ldr	r5, [r3, #0]
 8009e66:	b09d      	sub	sp, #116	@ 0x74
 8009e68:	da08      	bge.n	8009e7c <sniprintf+0x20>
 8009e6a:	238b      	movs	r3, #139	@ 0x8b
 8009e6c:	602b      	str	r3, [r5, #0]
 8009e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8009e72:	b01d      	add	sp, #116	@ 0x74
 8009e74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e78:	b002      	add	sp, #8
 8009e7a:	4770      	bx	lr
 8009e7c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009e80:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009e84:	f04f 0300 	mov.w	r3, #0
 8009e88:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009e8a:	bf14      	ite	ne
 8009e8c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009e90:	4623      	moveq	r3, r4
 8009e92:	9304      	str	r3, [sp, #16]
 8009e94:	9307      	str	r3, [sp, #28]
 8009e96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009e9a:	9002      	str	r0, [sp, #8]
 8009e9c:	9006      	str	r0, [sp, #24]
 8009e9e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009ea2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009ea4:	ab21      	add	r3, sp, #132	@ 0x84
 8009ea6:	a902      	add	r1, sp, #8
 8009ea8:	4628      	mov	r0, r5
 8009eaa:	9301      	str	r3, [sp, #4]
 8009eac:	f001 fc6a 	bl	800b784 <_svfiprintf_r>
 8009eb0:	1c43      	adds	r3, r0, #1
 8009eb2:	bfbc      	itt	lt
 8009eb4:	238b      	movlt	r3, #139	@ 0x8b
 8009eb6:	602b      	strlt	r3, [r5, #0]
 8009eb8:	2c00      	cmp	r4, #0
 8009eba:	d0da      	beq.n	8009e72 <sniprintf+0x16>
 8009ebc:	9b02      	ldr	r3, [sp, #8]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	701a      	strb	r2, [r3, #0]
 8009ec2:	e7d6      	b.n	8009e72 <sniprintf+0x16>
 8009ec4:	2000001c 	.word	0x2000001c

08009ec8 <__sread>:
 8009ec8:	b510      	push	{r4, lr}
 8009eca:	460c      	mov	r4, r1
 8009ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ed0:	f000 f8ca 	bl	800a068 <_read_r>
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	bfab      	itete	ge
 8009ed8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009eda:	89a3      	ldrhlt	r3, [r4, #12]
 8009edc:	181b      	addge	r3, r3, r0
 8009ede:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009ee2:	bfac      	ite	ge
 8009ee4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009ee6:	81a3      	strhlt	r3, [r4, #12]
 8009ee8:	bd10      	pop	{r4, pc}

08009eea <__swrite>:
 8009eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eee:	461f      	mov	r7, r3
 8009ef0:	898b      	ldrh	r3, [r1, #12]
 8009ef2:	05db      	lsls	r3, r3, #23
 8009ef4:	4605      	mov	r5, r0
 8009ef6:	460c      	mov	r4, r1
 8009ef8:	4616      	mov	r6, r2
 8009efa:	d505      	bpl.n	8009f08 <__swrite+0x1e>
 8009efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f00:	2302      	movs	r3, #2
 8009f02:	2200      	movs	r2, #0
 8009f04:	f000 f89e 	bl	800a044 <_lseek_r>
 8009f08:	89a3      	ldrh	r3, [r4, #12]
 8009f0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009f12:	81a3      	strh	r3, [r4, #12]
 8009f14:	4632      	mov	r2, r6
 8009f16:	463b      	mov	r3, r7
 8009f18:	4628      	mov	r0, r5
 8009f1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f1e:	f000 b8b5 	b.w	800a08c <_write_r>

08009f22 <__sseek>:
 8009f22:	b510      	push	{r4, lr}
 8009f24:	460c      	mov	r4, r1
 8009f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f2a:	f000 f88b 	bl	800a044 <_lseek_r>
 8009f2e:	1c43      	adds	r3, r0, #1
 8009f30:	89a3      	ldrh	r3, [r4, #12]
 8009f32:	bf15      	itete	ne
 8009f34:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009f36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009f3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009f3e:	81a3      	strheq	r3, [r4, #12]
 8009f40:	bf18      	it	ne
 8009f42:	81a3      	strhne	r3, [r4, #12]
 8009f44:	bd10      	pop	{r4, pc}

08009f46 <__sclose>:
 8009f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f4a:	f000 b80d 	b.w	8009f68 <_close_r>

08009f4e <memset>:
 8009f4e:	4402      	add	r2, r0
 8009f50:	4603      	mov	r3, r0
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d100      	bne.n	8009f58 <memset+0xa>
 8009f56:	4770      	bx	lr
 8009f58:	f803 1b01 	strb.w	r1, [r3], #1
 8009f5c:	e7f9      	b.n	8009f52 <memset+0x4>
	...

08009f60 <_localeconv_r>:
 8009f60:	4800      	ldr	r0, [pc, #0]	@ (8009f64 <_localeconv_r+0x4>)
 8009f62:	4770      	bx	lr
 8009f64:	2000015c 	.word	0x2000015c

08009f68 <_close_r>:
 8009f68:	b538      	push	{r3, r4, r5, lr}
 8009f6a:	4d06      	ldr	r5, [pc, #24]	@ (8009f84 <_close_r+0x1c>)
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	4604      	mov	r4, r0
 8009f70:	4608      	mov	r0, r1
 8009f72:	602b      	str	r3, [r5, #0]
 8009f74:	f7f8 f9e2 	bl	800233c <_close>
 8009f78:	1c43      	adds	r3, r0, #1
 8009f7a:	d102      	bne.n	8009f82 <_close_r+0x1a>
 8009f7c:	682b      	ldr	r3, [r5, #0]
 8009f7e:	b103      	cbz	r3, 8009f82 <_close_r+0x1a>
 8009f80:	6023      	str	r3, [r4, #0]
 8009f82:	bd38      	pop	{r3, r4, r5, pc}
 8009f84:	20005020 	.word	0x20005020

08009f88 <_reclaim_reent>:
 8009f88:	4b2d      	ldr	r3, [pc, #180]	@ (800a040 <_reclaim_reent+0xb8>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4283      	cmp	r3, r0
 8009f8e:	b570      	push	{r4, r5, r6, lr}
 8009f90:	4604      	mov	r4, r0
 8009f92:	d053      	beq.n	800a03c <_reclaim_reent+0xb4>
 8009f94:	69c3      	ldr	r3, [r0, #28]
 8009f96:	b31b      	cbz	r3, 8009fe0 <_reclaim_reent+0x58>
 8009f98:	68db      	ldr	r3, [r3, #12]
 8009f9a:	b163      	cbz	r3, 8009fb6 <_reclaim_reent+0x2e>
 8009f9c:	2500      	movs	r5, #0
 8009f9e:	69e3      	ldr	r3, [r4, #28]
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	5959      	ldr	r1, [r3, r5]
 8009fa4:	b9b1      	cbnz	r1, 8009fd4 <_reclaim_reent+0x4c>
 8009fa6:	3504      	adds	r5, #4
 8009fa8:	2d80      	cmp	r5, #128	@ 0x80
 8009faa:	d1f8      	bne.n	8009f9e <_reclaim_reent+0x16>
 8009fac:	69e3      	ldr	r3, [r4, #28]
 8009fae:	4620      	mov	r0, r4
 8009fb0:	68d9      	ldr	r1, [r3, #12]
 8009fb2:	f000 ff11 	bl	800add8 <_free_r>
 8009fb6:	69e3      	ldr	r3, [r4, #28]
 8009fb8:	6819      	ldr	r1, [r3, #0]
 8009fba:	b111      	cbz	r1, 8009fc2 <_reclaim_reent+0x3a>
 8009fbc:	4620      	mov	r0, r4
 8009fbe:	f000 ff0b 	bl	800add8 <_free_r>
 8009fc2:	69e3      	ldr	r3, [r4, #28]
 8009fc4:	689d      	ldr	r5, [r3, #8]
 8009fc6:	b15d      	cbz	r5, 8009fe0 <_reclaim_reent+0x58>
 8009fc8:	4629      	mov	r1, r5
 8009fca:	4620      	mov	r0, r4
 8009fcc:	682d      	ldr	r5, [r5, #0]
 8009fce:	f000 ff03 	bl	800add8 <_free_r>
 8009fd2:	e7f8      	b.n	8009fc6 <_reclaim_reent+0x3e>
 8009fd4:	680e      	ldr	r6, [r1, #0]
 8009fd6:	4620      	mov	r0, r4
 8009fd8:	f000 fefe 	bl	800add8 <_free_r>
 8009fdc:	4631      	mov	r1, r6
 8009fde:	e7e1      	b.n	8009fa4 <_reclaim_reent+0x1c>
 8009fe0:	6961      	ldr	r1, [r4, #20]
 8009fe2:	b111      	cbz	r1, 8009fea <_reclaim_reent+0x62>
 8009fe4:	4620      	mov	r0, r4
 8009fe6:	f000 fef7 	bl	800add8 <_free_r>
 8009fea:	69e1      	ldr	r1, [r4, #28]
 8009fec:	b111      	cbz	r1, 8009ff4 <_reclaim_reent+0x6c>
 8009fee:	4620      	mov	r0, r4
 8009ff0:	f000 fef2 	bl	800add8 <_free_r>
 8009ff4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009ff6:	b111      	cbz	r1, 8009ffe <_reclaim_reent+0x76>
 8009ff8:	4620      	mov	r0, r4
 8009ffa:	f000 feed 	bl	800add8 <_free_r>
 8009ffe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a000:	b111      	cbz	r1, 800a008 <_reclaim_reent+0x80>
 800a002:	4620      	mov	r0, r4
 800a004:	f000 fee8 	bl	800add8 <_free_r>
 800a008:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a00a:	b111      	cbz	r1, 800a012 <_reclaim_reent+0x8a>
 800a00c:	4620      	mov	r0, r4
 800a00e:	f000 fee3 	bl	800add8 <_free_r>
 800a012:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a014:	b111      	cbz	r1, 800a01c <_reclaim_reent+0x94>
 800a016:	4620      	mov	r0, r4
 800a018:	f000 fede 	bl	800add8 <_free_r>
 800a01c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a01e:	b111      	cbz	r1, 800a026 <_reclaim_reent+0x9e>
 800a020:	4620      	mov	r0, r4
 800a022:	f000 fed9 	bl	800add8 <_free_r>
 800a026:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a028:	b111      	cbz	r1, 800a030 <_reclaim_reent+0xa8>
 800a02a:	4620      	mov	r0, r4
 800a02c:	f000 fed4 	bl	800add8 <_free_r>
 800a030:	6a23      	ldr	r3, [r4, #32]
 800a032:	b11b      	cbz	r3, 800a03c <_reclaim_reent+0xb4>
 800a034:	4620      	mov	r0, r4
 800a036:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a03a:	4718      	bx	r3
 800a03c:	bd70      	pop	{r4, r5, r6, pc}
 800a03e:	bf00      	nop
 800a040:	2000001c 	.word	0x2000001c

0800a044 <_lseek_r>:
 800a044:	b538      	push	{r3, r4, r5, lr}
 800a046:	4d07      	ldr	r5, [pc, #28]	@ (800a064 <_lseek_r+0x20>)
 800a048:	4604      	mov	r4, r0
 800a04a:	4608      	mov	r0, r1
 800a04c:	4611      	mov	r1, r2
 800a04e:	2200      	movs	r2, #0
 800a050:	602a      	str	r2, [r5, #0]
 800a052:	461a      	mov	r2, r3
 800a054:	f7f8 f999 	bl	800238a <_lseek>
 800a058:	1c43      	adds	r3, r0, #1
 800a05a:	d102      	bne.n	800a062 <_lseek_r+0x1e>
 800a05c:	682b      	ldr	r3, [r5, #0]
 800a05e:	b103      	cbz	r3, 800a062 <_lseek_r+0x1e>
 800a060:	6023      	str	r3, [r4, #0]
 800a062:	bd38      	pop	{r3, r4, r5, pc}
 800a064:	20005020 	.word	0x20005020

0800a068 <_read_r>:
 800a068:	b538      	push	{r3, r4, r5, lr}
 800a06a:	4d07      	ldr	r5, [pc, #28]	@ (800a088 <_read_r+0x20>)
 800a06c:	4604      	mov	r4, r0
 800a06e:	4608      	mov	r0, r1
 800a070:	4611      	mov	r1, r2
 800a072:	2200      	movs	r2, #0
 800a074:	602a      	str	r2, [r5, #0]
 800a076:	461a      	mov	r2, r3
 800a078:	f7f8 f927 	bl	80022ca <_read>
 800a07c:	1c43      	adds	r3, r0, #1
 800a07e:	d102      	bne.n	800a086 <_read_r+0x1e>
 800a080:	682b      	ldr	r3, [r5, #0]
 800a082:	b103      	cbz	r3, 800a086 <_read_r+0x1e>
 800a084:	6023      	str	r3, [r4, #0]
 800a086:	bd38      	pop	{r3, r4, r5, pc}
 800a088:	20005020 	.word	0x20005020

0800a08c <_write_r>:
 800a08c:	b538      	push	{r3, r4, r5, lr}
 800a08e:	4d07      	ldr	r5, [pc, #28]	@ (800a0ac <_write_r+0x20>)
 800a090:	4604      	mov	r4, r0
 800a092:	4608      	mov	r0, r1
 800a094:	4611      	mov	r1, r2
 800a096:	2200      	movs	r2, #0
 800a098:	602a      	str	r2, [r5, #0]
 800a09a:	461a      	mov	r2, r3
 800a09c:	f7f8 f932 	bl	8002304 <_write>
 800a0a0:	1c43      	adds	r3, r0, #1
 800a0a2:	d102      	bne.n	800a0aa <_write_r+0x1e>
 800a0a4:	682b      	ldr	r3, [r5, #0]
 800a0a6:	b103      	cbz	r3, 800a0aa <_write_r+0x1e>
 800a0a8:	6023      	str	r3, [r4, #0]
 800a0aa:	bd38      	pop	{r3, r4, r5, pc}
 800a0ac:	20005020 	.word	0x20005020

0800a0b0 <__errno>:
 800a0b0:	4b01      	ldr	r3, [pc, #4]	@ (800a0b8 <__errno+0x8>)
 800a0b2:	6818      	ldr	r0, [r3, #0]
 800a0b4:	4770      	bx	lr
 800a0b6:	bf00      	nop
 800a0b8:	2000001c 	.word	0x2000001c

0800a0bc <__libc_init_array>:
 800a0bc:	b570      	push	{r4, r5, r6, lr}
 800a0be:	4d0d      	ldr	r5, [pc, #52]	@ (800a0f4 <__libc_init_array+0x38>)
 800a0c0:	4c0d      	ldr	r4, [pc, #52]	@ (800a0f8 <__libc_init_array+0x3c>)
 800a0c2:	1b64      	subs	r4, r4, r5
 800a0c4:	10a4      	asrs	r4, r4, #2
 800a0c6:	2600      	movs	r6, #0
 800a0c8:	42a6      	cmp	r6, r4
 800a0ca:	d109      	bne.n	800a0e0 <__libc_init_array+0x24>
 800a0cc:	4d0b      	ldr	r5, [pc, #44]	@ (800a0fc <__libc_init_array+0x40>)
 800a0ce:	4c0c      	ldr	r4, [pc, #48]	@ (800a100 <__libc_init_array+0x44>)
 800a0d0:	f002 f86a 	bl	800c1a8 <_init>
 800a0d4:	1b64      	subs	r4, r4, r5
 800a0d6:	10a4      	asrs	r4, r4, #2
 800a0d8:	2600      	movs	r6, #0
 800a0da:	42a6      	cmp	r6, r4
 800a0dc:	d105      	bne.n	800a0ea <__libc_init_array+0x2e>
 800a0de:	bd70      	pop	{r4, r5, r6, pc}
 800a0e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0e4:	4798      	blx	r3
 800a0e6:	3601      	adds	r6, #1
 800a0e8:	e7ee      	b.n	800a0c8 <__libc_init_array+0xc>
 800a0ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0ee:	4798      	blx	r3
 800a0f0:	3601      	adds	r6, #1
 800a0f2:	e7f2      	b.n	800a0da <__libc_init_array+0x1e>
 800a0f4:	0800c6b4 	.word	0x0800c6b4
 800a0f8:	0800c6b4 	.word	0x0800c6b4
 800a0fc:	0800c6b4 	.word	0x0800c6b4
 800a100:	0800c6b8 	.word	0x0800c6b8

0800a104 <__retarget_lock_init_recursive>:
 800a104:	4770      	bx	lr

0800a106 <__retarget_lock_acquire_recursive>:
 800a106:	4770      	bx	lr

0800a108 <__retarget_lock_release_recursive>:
 800a108:	4770      	bx	lr

0800a10a <memcpy>:
 800a10a:	440a      	add	r2, r1
 800a10c:	4291      	cmp	r1, r2
 800a10e:	f100 33ff 	add.w	r3, r0, #4294967295
 800a112:	d100      	bne.n	800a116 <memcpy+0xc>
 800a114:	4770      	bx	lr
 800a116:	b510      	push	{r4, lr}
 800a118:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a11c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a120:	4291      	cmp	r1, r2
 800a122:	d1f9      	bne.n	800a118 <memcpy+0xe>
 800a124:	bd10      	pop	{r4, pc}

0800a126 <quorem>:
 800a126:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a12a:	6903      	ldr	r3, [r0, #16]
 800a12c:	690c      	ldr	r4, [r1, #16]
 800a12e:	42a3      	cmp	r3, r4
 800a130:	4607      	mov	r7, r0
 800a132:	db7e      	blt.n	800a232 <quorem+0x10c>
 800a134:	3c01      	subs	r4, #1
 800a136:	f101 0814 	add.w	r8, r1, #20
 800a13a:	00a3      	lsls	r3, r4, #2
 800a13c:	f100 0514 	add.w	r5, r0, #20
 800a140:	9300      	str	r3, [sp, #0]
 800a142:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a146:	9301      	str	r3, [sp, #4]
 800a148:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a14c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a150:	3301      	adds	r3, #1
 800a152:	429a      	cmp	r2, r3
 800a154:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a158:	fbb2 f6f3 	udiv	r6, r2, r3
 800a15c:	d32e      	bcc.n	800a1bc <quorem+0x96>
 800a15e:	f04f 0a00 	mov.w	sl, #0
 800a162:	46c4      	mov	ip, r8
 800a164:	46ae      	mov	lr, r5
 800a166:	46d3      	mov	fp, sl
 800a168:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a16c:	b298      	uxth	r0, r3
 800a16e:	fb06 a000 	mla	r0, r6, r0, sl
 800a172:	0c02      	lsrs	r2, r0, #16
 800a174:	0c1b      	lsrs	r3, r3, #16
 800a176:	fb06 2303 	mla	r3, r6, r3, r2
 800a17a:	f8de 2000 	ldr.w	r2, [lr]
 800a17e:	b280      	uxth	r0, r0
 800a180:	b292      	uxth	r2, r2
 800a182:	1a12      	subs	r2, r2, r0
 800a184:	445a      	add	r2, fp
 800a186:	f8de 0000 	ldr.w	r0, [lr]
 800a18a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a18e:	b29b      	uxth	r3, r3
 800a190:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a194:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a198:	b292      	uxth	r2, r2
 800a19a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a19e:	45e1      	cmp	r9, ip
 800a1a0:	f84e 2b04 	str.w	r2, [lr], #4
 800a1a4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a1a8:	d2de      	bcs.n	800a168 <quorem+0x42>
 800a1aa:	9b00      	ldr	r3, [sp, #0]
 800a1ac:	58eb      	ldr	r3, [r5, r3]
 800a1ae:	b92b      	cbnz	r3, 800a1bc <quorem+0x96>
 800a1b0:	9b01      	ldr	r3, [sp, #4]
 800a1b2:	3b04      	subs	r3, #4
 800a1b4:	429d      	cmp	r5, r3
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	d32f      	bcc.n	800a21a <quorem+0xf4>
 800a1ba:	613c      	str	r4, [r7, #16]
 800a1bc:	4638      	mov	r0, r7
 800a1be:	f001 f97d 	bl	800b4bc <__mcmp>
 800a1c2:	2800      	cmp	r0, #0
 800a1c4:	db25      	blt.n	800a212 <quorem+0xec>
 800a1c6:	4629      	mov	r1, r5
 800a1c8:	2000      	movs	r0, #0
 800a1ca:	f858 2b04 	ldr.w	r2, [r8], #4
 800a1ce:	f8d1 c000 	ldr.w	ip, [r1]
 800a1d2:	fa1f fe82 	uxth.w	lr, r2
 800a1d6:	fa1f f38c 	uxth.w	r3, ip
 800a1da:	eba3 030e 	sub.w	r3, r3, lr
 800a1de:	4403      	add	r3, r0
 800a1e0:	0c12      	lsrs	r2, r2, #16
 800a1e2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a1e6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1f0:	45c1      	cmp	r9, r8
 800a1f2:	f841 3b04 	str.w	r3, [r1], #4
 800a1f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a1fa:	d2e6      	bcs.n	800a1ca <quorem+0xa4>
 800a1fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a200:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a204:	b922      	cbnz	r2, 800a210 <quorem+0xea>
 800a206:	3b04      	subs	r3, #4
 800a208:	429d      	cmp	r5, r3
 800a20a:	461a      	mov	r2, r3
 800a20c:	d30b      	bcc.n	800a226 <quorem+0x100>
 800a20e:	613c      	str	r4, [r7, #16]
 800a210:	3601      	adds	r6, #1
 800a212:	4630      	mov	r0, r6
 800a214:	b003      	add	sp, #12
 800a216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a21a:	6812      	ldr	r2, [r2, #0]
 800a21c:	3b04      	subs	r3, #4
 800a21e:	2a00      	cmp	r2, #0
 800a220:	d1cb      	bne.n	800a1ba <quorem+0x94>
 800a222:	3c01      	subs	r4, #1
 800a224:	e7c6      	b.n	800a1b4 <quorem+0x8e>
 800a226:	6812      	ldr	r2, [r2, #0]
 800a228:	3b04      	subs	r3, #4
 800a22a:	2a00      	cmp	r2, #0
 800a22c:	d1ef      	bne.n	800a20e <quorem+0xe8>
 800a22e:	3c01      	subs	r4, #1
 800a230:	e7ea      	b.n	800a208 <quorem+0xe2>
 800a232:	2000      	movs	r0, #0
 800a234:	e7ee      	b.n	800a214 <quorem+0xee>
	...

0800a238 <_dtoa_r>:
 800a238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a23c:	69c7      	ldr	r7, [r0, #28]
 800a23e:	b097      	sub	sp, #92	@ 0x5c
 800a240:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a244:	ec55 4b10 	vmov	r4, r5, d0
 800a248:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a24a:	9107      	str	r1, [sp, #28]
 800a24c:	4681      	mov	r9, r0
 800a24e:	920c      	str	r2, [sp, #48]	@ 0x30
 800a250:	9311      	str	r3, [sp, #68]	@ 0x44
 800a252:	b97f      	cbnz	r7, 800a274 <_dtoa_r+0x3c>
 800a254:	2010      	movs	r0, #16
 800a256:	f000 fe09 	bl	800ae6c <malloc>
 800a25a:	4602      	mov	r2, r0
 800a25c:	f8c9 001c 	str.w	r0, [r9, #28]
 800a260:	b920      	cbnz	r0, 800a26c <_dtoa_r+0x34>
 800a262:	4ba9      	ldr	r3, [pc, #676]	@ (800a508 <_dtoa_r+0x2d0>)
 800a264:	21ef      	movs	r1, #239	@ 0xef
 800a266:	48a9      	ldr	r0, [pc, #676]	@ (800a50c <_dtoa_r+0x2d4>)
 800a268:	f001 fe34 	bl	800bed4 <__assert_func>
 800a26c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a270:	6007      	str	r7, [r0, #0]
 800a272:	60c7      	str	r7, [r0, #12]
 800a274:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a278:	6819      	ldr	r1, [r3, #0]
 800a27a:	b159      	cbz	r1, 800a294 <_dtoa_r+0x5c>
 800a27c:	685a      	ldr	r2, [r3, #4]
 800a27e:	604a      	str	r2, [r1, #4]
 800a280:	2301      	movs	r3, #1
 800a282:	4093      	lsls	r3, r2
 800a284:	608b      	str	r3, [r1, #8]
 800a286:	4648      	mov	r0, r9
 800a288:	f000 fee6 	bl	800b058 <_Bfree>
 800a28c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a290:	2200      	movs	r2, #0
 800a292:	601a      	str	r2, [r3, #0]
 800a294:	1e2b      	subs	r3, r5, #0
 800a296:	bfb9      	ittee	lt
 800a298:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a29c:	9305      	strlt	r3, [sp, #20]
 800a29e:	2300      	movge	r3, #0
 800a2a0:	6033      	strge	r3, [r6, #0]
 800a2a2:	9f05      	ldr	r7, [sp, #20]
 800a2a4:	4b9a      	ldr	r3, [pc, #616]	@ (800a510 <_dtoa_r+0x2d8>)
 800a2a6:	bfbc      	itt	lt
 800a2a8:	2201      	movlt	r2, #1
 800a2aa:	6032      	strlt	r2, [r6, #0]
 800a2ac:	43bb      	bics	r3, r7
 800a2ae:	d112      	bne.n	800a2d6 <_dtoa_r+0x9e>
 800a2b0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a2b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a2b6:	6013      	str	r3, [r2, #0]
 800a2b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a2bc:	4323      	orrs	r3, r4
 800a2be:	f000 855a 	beq.w	800ad76 <_dtoa_r+0xb3e>
 800a2c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a2c4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800a524 <_dtoa_r+0x2ec>
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	f000 855c 	beq.w	800ad86 <_dtoa_r+0xb4e>
 800a2ce:	f10a 0303 	add.w	r3, sl, #3
 800a2d2:	f000 bd56 	b.w	800ad82 <_dtoa_r+0xb4a>
 800a2d6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	ec51 0b17 	vmov	r0, r1, d7
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a2e6:	f7f6 fbf7 	bl	8000ad8 <__aeabi_dcmpeq>
 800a2ea:	4680      	mov	r8, r0
 800a2ec:	b158      	cbz	r0, 800a306 <_dtoa_r+0xce>
 800a2ee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	6013      	str	r3, [r2, #0]
 800a2f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a2f6:	b113      	cbz	r3, 800a2fe <_dtoa_r+0xc6>
 800a2f8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a2fa:	4b86      	ldr	r3, [pc, #536]	@ (800a514 <_dtoa_r+0x2dc>)
 800a2fc:	6013      	str	r3, [r2, #0]
 800a2fe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800a528 <_dtoa_r+0x2f0>
 800a302:	f000 bd40 	b.w	800ad86 <_dtoa_r+0xb4e>
 800a306:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a30a:	aa14      	add	r2, sp, #80	@ 0x50
 800a30c:	a915      	add	r1, sp, #84	@ 0x54
 800a30e:	4648      	mov	r0, r9
 800a310:	f001 f984 	bl	800b61c <__d2b>
 800a314:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a318:	9002      	str	r0, [sp, #8]
 800a31a:	2e00      	cmp	r6, #0
 800a31c:	d078      	beq.n	800a410 <_dtoa_r+0x1d8>
 800a31e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a320:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a324:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a328:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a32c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a330:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a334:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a338:	4619      	mov	r1, r3
 800a33a:	2200      	movs	r2, #0
 800a33c:	4b76      	ldr	r3, [pc, #472]	@ (800a518 <_dtoa_r+0x2e0>)
 800a33e:	f7f5 ffab 	bl	8000298 <__aeabi_dsub>
 800a342:	a36b      	add	r3, pc, #428	@ (adr r3, 800a4f0 <_dtoa_r+0x2b8>)
 800a344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a348:	f7f6 f95e 	bl	8000608 <__aeabi_dmul>
 800a34c:	a36a      	add	r3, pc, #424	@ (adr r3, 800a4f8 <_dtoa_r+0x2c0>)
 800a34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a352:	f7f5 ffa3 	bl	800029c <__adddf3>
 800a356:	4604      	mov	r4, r0
 800a358:	4630      	mov	r0, r6
 800a35a:	460d      	mov	r5, r1
 800a35c:	f7f6 f8ea 	bl	8000534 <__aeabi_i2d>
 800a360:	a367      	add	r3, pc, #412	@ (adr r3, 800a500 <_dtoa_r+0x2c8>)
 800a362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a366:	f7f6 f94f 	bl	8000608 <__aeabi_dmul>
 800a36a:	4602      	mov	r2, r0
 800a36c:	460b      	mov	r3, r1
 800a36e:	4620      	mov	r0, r4
 800a370:	4629      	mov	r1, r5
 800a372:	f7f5 ff93 	bl	800029c <__adddf3>
 800a376:	4604      	mov	r4, r0
 800a378:	460d      	mov	r5, r1
 800a37a:	f7f6 fbf5 	bl	8000b68 <__aeabi_d2iz>
 800a37e:	2200      	movs	r2, #0
 800a380:	4607      	mov	r7, r0
 800a382:	2300      	movs	r3, #0
 800a384:	4620      	mov	r0, r4
 800a386:	4629      	mov	r1, r5
 800a388:	f7f6 fbb0 	bl	8000aec <__aeabi_dcmplt>
 800a38c:	b140      	cbz	r0, 800a3a0 <_dtoa_r+0x168>
 800a38e:	4638      	mov	r0, r7
 800a390:	f7f6 f8d0 	bl	8000534 <__aeabi_i2d>
 800a394:	4622      	mov	r2, r4
 800a396:	462b      	mov	r3, r5
 800a398:	f7f6 fb9e 	bl	8000ad8 <__aeabi_dcmpeq>
 800a39c:	b900      	cbnz	r0, 800a3a0 <_dtoa_r+0x168>
 800a39e:	3f01      	subs	r7, #1
 800a3a0:	2f16      	cmp	r7, #22
 800a3a2:	d852      	bhi.n	800a44a <_dtoa_r+0x212>
 800a3a4:	4b5d      	ldr	r3, [pc, #372]	@ (800a51c <_dtoa_r+0x2e4>)
 800a3a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a3b2:	f7f6 fb9b 	bl	8000aec <__aeabi_dcmplt>
 800a3b6:	2800      	cmp	r0, #0
 800a3b8:	d049      	beq.n	800a44e <_dtoa_r+0x216>
 800a3ba:	3f01      	subs	r7, #1
 800a3bc:	2300      	movs	r3, #0
 800a3be:	9310      	str	r3, [sp, #64]	@ 0x40
 800a3c0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a3c2:	1b9b      	subs	r3, r3, r6
 800a3c4:	1e5a      	subs	r2, r3, #1
 800a3c6:	bf45      	ittet	mi
 800a3c8:	f1c3 0301 	rsbmi	r3, r3, #1
 800a3cc:	9300      	strmi	r3, [sp, #0]
 800a3ce:	2300      	movpl	r3, #0
 800a3d0:	2300      	movmi	r3, #0
 800a3d2:	9206      	str	r2, [sp, #24]
 800a3d4:	bf54      	ite	pl
 800a3d6:	9300      	strpl	r3, [sp, #0]
 800a3d8:	9306      	strmi	r3, [sp, #24]
 800a3da:	2f00      	cmp	r7, #0
 800a3dc:	db39      	blt.n	800a452 <_dtoa_r+0x21a>
 800a3de:	9b06      	ldr	r3, [sp, #24]
 800a3e0:	970d      	str	r7, [sp, #52]	@ 0x34
 800a3e2:	443b      	add	r3, r7
 800a3e4:	9306      	str	r3, [sp, #24]
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	9308      	str	r3, [sp, #32]
 800a3ea:	9b07      	ldr	r3, [sp, #28]
 800a3ec:	2b09      	cmp	r3, #9
 800a3ee:	d863      	bhi.n	800a4b8 <_dtoa_r+0x280>
 800a3f0:	2b05      	cmp	r3, #5
 800a3f2:	bfc4      	itt	gt
 800a3f4:	3b04      	subgt	r3, #4
 800a3f6:	9307      	strgt	r3, [sp, #28]
 800a3f8:	9b07      	ldr	r3, [sp, #28]
 800a3fa:	f1a3 0302 	sub.w	r3, r3, #2
 800a3fe:	bfcc      	ite	gt
 800a400:	2400      	movgt	r4, #0
 800a402:	2401      	movle	r4, #1
 800a404:	2b03      	cmp	r3, #3
 800a406:	d863      	bhi.n	800a4d0 <_dtoa_r+0x298>
 800a408:	e8df f003 	tbb	[pc, r3]
 800a40c:	2b375452 	.word	0x2b375452
 800a410:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a414:	441e      	add	r6, r3
 800a416:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a41a:	2b20      	cmp	r3, #32
 800a41c:	bfc1      	itttt	gt
 800a41e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a422:	409f      	lslgt	r7, r3
 800a424:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a428:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a42c:	bfd6      	itet	le
 800a42e:	f1c3 0320 	rsble	r3, r3, #32
 800a432:	ea47 0003 	orrgt.w	r0, r7, r3
 800a436:	fa04 f003 	lslle.w	r0, r4, r3
 800a43a:	f7f6 f86b 	bl	8000514 <__aeabi_ui2d>
 800a43e:	2201      	movs	r2, #1
 800a440:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a444:	3e01      	subs	r6, #1
 800a446:	9212      	str	r2, [sp, #72]	@ 0x48
 800a448:	e776      	b.n	800a338 <_dtoa_r+0x100>
 800a44a:	2301      	movs	r3, #1
 800a44c:	e7b7      	b.n	800a3be <_dtoa_r+0x186>
 800a44e:	9010      	str	r0, [sp, #64]	@ 0x40
 800a450:	e7b6      	b.n	800a3c0 <_dtoa_r+0x188>
 800a452:	9b00      	ldr	r3, [sp, #0]
 800a454:	1bdb      	subs	r3, r3, r7
 800a456:	9300      	str	r3, [sp, #0]
 800a458:	427b      	negs	r3, r7
 800a45a:	9308      	str	r3, [sp, #32]
 800a45c:	2300      	movs	r3, #0
 800a45e:	930d      	str	r3, [sp, #52]	@ 0x34
 800a460:	e7c3      	b.n	800a3ea <_dtoa_r+0x1b2>
 800a462:	2301      	movs	r3, #1
 800a464:	9309      	str	r3, [sp, #36]	@ 0x24
 800a466:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a468:	eb07 0b03 	add.w	fp, r7, r3
 800a46c:	f10b 0301 	add.w	r3, fp, #1
 800a470:	2b01      	cmp	r3, #1
 800a472:	9303      	str	r3, [sp, #12]
 800a474:	bfb8      	it	lt
 800a476:	2301      	movlt	r3, #1
 800a478:	e006      	b.n	800a488 <_dtoa_r+0x250>
 800a47a:	2301      	movs	r3, #1
 800a47c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a47e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a480:	2b00      	cmp	r3, #0
 800a482:	dd28      	ble.n	800a4d6 <_dtoa_r+0x29e>
 800a484:	469b      	mov	fp, r3
 800a486:	9303      	str	r3, [sp, #12]
 800a488:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a48c:	2100      	movs	r1, #0
 800a48e:	2204      	movs	r2, #4
 800a490:	f102 0514 	add.w	r5, r2, #20
 800a494:	429d      	cmp	r5, r3
 800a496:	d926      	bls.n	800a4e6 <_dtoa_r+0x2ae>
 800a498:	6041      	str	r1, [r0, #4]
 800a49a:	4648      	mov	r0, r9
 800a49c:	f000 fd9c 	bl	800afd8 <_Balloc>
 800a4a0:	4682      	mov	sl, r0
 800a4a2:	2800      	cmp	r0, #0
 800a4a4:	d142      	bne.n	800a52c <_dtoa_r+0x2f4>
 800a4a6:	4b1e      	ldr	r3, [pc, #120]	@ (800a520 <_dtoa_r+0x2e8>)
 800a4a8:	4602      	mov	r2, r0
 800a4aa:	f240 11af 	movw	r1, #431	@ 0x1af
 800a4ae:	e6da      	b.n	800a266 <_dtoa_r+0x2e>
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	e7e3      	b.n	800a47c <_dtoa_r+0x244>
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	e7d5      	b.n	800a464 <_dtoa_r+0x22c>
 800a4b8:	2401      	movs	r4, #1
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	9307      	str	r3, [sp, #28]
 800a4be:	9409      	str	r4, [sp, #36]	@ 0x24
 800a4c0:	f04f 3bff 	mov.w	fp, #4294967295
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	f8cd b00c 	str.w	fp, [sp, #12]
 800a4ca:	2312      	movs	r3, #18
 800a4cc:	920c      	str	r2, [sp, #48]	@ 0x30
 800a4ce:	e7db      	b.n	800a488 <_dtoa_r+0x250>
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4d4:	e7f4      	b.n	800a4c0 <_dtoa_r+0x288>
 800a4d6:	f04f 0b01 	mov.w	fp, #1
 800a4da:	f8cd b00c 	str.w	fp, [sp, #12]
 800a4de:	465b      	mov	r3, fp
 800a4e0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a4e4:	e7d0      	b.n	800a488 <_dtoa_r+0x250>
 800a4e6:	3101      	adds	r1, #1
 800a4e8:	0052      	lsls	r2, r2, #1
 800a4ea:	e7d1      	b.n	800a490 <_dtoa_r+0x258>
 800a4ec:	f3af 8000 	nop.w
 800a4f0:	636f4361 	.word	0x636f4361
 800a4f4:	3fd287a7 	.word	0x3fd287a7
 800a4f8:	8b60c8b3 	.word	0x8b60c8b3
 800a4fc:	3fc68a28 	.word	0x3fc68a28
 800a500:	509f79fb 	.word	0x509f79fb
 800a504:	3fd34413 	.word	0x3fd34413
 800a508:	0800c375 	.word	0x0800c375
 800a50c:	0800c38c 	.word	0x0800c38c
 800a510:	7ff00000 	.word	0x7ff00000
 800a514:	0800c345 	.word	0x0800c345
 800a518:	3ff80000 	.word	0x3ff80000
 800a51c:	0800c4e0 	.word	0x0800c4e0
 800a520:	0800c3e4 	.word	0x0800c3e4
 800a524:	0800c371 	.word	0x0800c371
 800a528:	0800c344 	.word	0x0800c344
 800a52c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a530:	6018      	str	r0, [r3, #0]
 800a532:	9b03      	ldr	r3, [sp, #12]
 800a534:	2b0e      	cmp	r3, #14
 800a536:	f200 80a1 	bhi.w	800a67c <_dtoa_r+0x444>
 800a53a:	2c00      	cmp	r4, #0
 800a53c:	f000 809e 	beq.w	800a67c <_dtoa_r+0x444>
 800a540:	2f00      	cmp	r7, #0
 800a542:	dd33      	ble.n	800a5ac <_dtoa_r+0x374>
 800a544:	4b9c      	ldr	r3, [pc, #624]	@ (800a7b8 <_dtoa_r+0x580>)
 800a546:	f007 020f 	and.w	r2, r7, #15
 800a54a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a54e:	ed93 7b00 	vldr	d7, [r3]
 800a552:	05f8      	lsls	r0, r7, #23
 800a554:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800a558:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a55c:	d516      	bpl.n	800a58c <_dtoa_r+0x354>
 800a55e:	4b97      	ldr	r3, [pc, #604]	@ (800a7bc <_dtoa_r+0x584>)
 800a560:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a564:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a568:	f7f6 f978 	bl	800085c <__aeabi_ddiv>
 800a56c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a570:	f004 040f 	and.w	r4, r4, #15
 800a574:	2603      	movs	r6, #3
 800a576:	4d91      	ldr	r5, [pc, #580]	@ (800a7bc <_dtoa_r+0x584>)
 800a578:	b954      	cbnz	r4, 800a590 <_dtoa_r+0x358>
 800a57a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a57e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a582:	f7f6 f96b 	bl	800085c <__aeabi_ddiv>
 800a586:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a58a:	e028      	b.n	800a5de <_dtoa_r+0x3a6>
 800a58c:	2602      	movs	r6, #2
 800a58e:	e7f2      	b.n	800a576 <_dtoa_r+0x33e>
 800a590:	07e1      	lsls	r1, r4, #31
 800a592:	d508      	bpl.n	800a5a6 <_dtoa_r+0x36e>
 800a594:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a598:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a59c:	f7f6 f834 	bl	8000608 <__aeabi_dmul>
 800a5a0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a5a4:	3601      	adds	r6, #1
 800a5a6:	1064      	asrs	r4, r4, #1
 800a5a8:	3508      	adds	r5, #8
 800a5aa:	e7e5      	b.n	800a578 <_dtoa_r+0x340>
 800a5ac:	f000 80af 	beq.w	800a70e <_dtoa_r+0x4d6>
 800a5b0:	427c      	negs	r4, r7
 800a5b2:	4b81      	ldr	r3, [pc, #516]	@ (800a7b8 <_dtoa_r+0x580>)
 800a5b4:	4d81      	ldr	r5, [pc, #516]	@ (800a7bc <_dtoa_r+0x584>)
 800a5b6:	f004 020f 	and.w	r2, r4, #15
 800a5ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a5c6:	f7f6 f81f 	bl	8000608 <__aeabi_dmul>
 800a5ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5ce:	1124      	asrs	r4, r4, #4
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	2602      	movs	r6, #2
 800a5d4:	2c00      	cmp	r4, #0
 800a5d6:	f040 808f 	bne.w	800a6f8 <_dtoa_r+0x4c0>
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d1d3      	bne.n	800a586 <_dtoa_r+0x34e>
 800a5de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a5e0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	f000 8094 	beq.w	800a712 <_dtoa_r+0x4da>
 800a5ea:	4b75      	ldr	r3, [pc, #468]	@ (800a7c0 <_dtoa_r+0x588>)
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	4620      	mov	r0, r4
 800a5f0:	4629      	mov	r1, r5
 800a5f2:	f7f6 fa7b 	bl	8000aec <__aeabi_dcmplt>
 800a5f6:	2800      	cmp	r0, #0
 800a5f8:	f000 808b 	beq.w	800a712 <_dtoa_r+0x4da>
 800a5fc:	9b03      	ldr	r3, [sp, #12]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	f000 8087 	beq.w	800a712 <_dtoa_r+0x4da>
 800a604:	f1bb 0f00 	cmp.w	fp, #0
 800a608:	dd34      	ble.n	800a674 <_dtoa_r+0x43c>
 800a60a:	4620      	mov	r0, r4
 800a60c:	4b6d      	ldr	r3, [pc, #436]	@ (800a7c4 <_dtoa_r+0x58c>)
 800a60e:	2200      	movs	r2, #0
 800a610:	4629      	mov	r1, r5
 800a612:	f7f5 fff9 	bl	8000608 <__aeabi_dmul>
 800a616:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a61a:	f107 38ff 	add.w	r8, r7, #4294967295
 800a61e:	3601      	adds	r6, #1
 800a620:	465c      	mov	r4, fp
 800a622:	4630      	mov	r0, r6
 800a624:	f7f5 ff86 	bl	8000534 <__aeabi_i2d>
 800a628:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a62c:	f7f5 ffec 	bl	8000608 <__aeabi_dmul>
 800a630:	4b65      	ldr	r3, [pc, #404]	@ (800a7c8 <_dtoa_r+0x590>)
 800a632:	2200      	movs	r2, #0
 800a634:	f7f5 fe32 	bl	800029c <__adddf3>
 800a638:	4605      	mov	r5, r0
 800a63a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a63e:	2c00      	cmp	r4, #0
 800a640:	d16a      	bne.n	800a718 <_dtoa_r+0x4e0>
 800a642:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a646:	4b61      	ldr	r3, [pc, #388]	@ (800a7cc <_dtoa_r+0x594>)
 800a648:	2200      	movs	r2, #0
 800a64a:	f7f5 fe25 	bl	8000298 <__aeabi_dsub>
 800a64e:	4602      	mov	r2, r0
 800a650:	460b      	mov	r3, r1
 800a652:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a656:	462a      	mov	r2, r5
 800a658:	4633      	mov	r3, r6
 800a65a:	f7f6 fa65 	bl	8000b28 <__aeabi_dcmpgt>
 800a65e:	2800      	cmp	r0, #0
 800a660:	f040 8298 	bne.w	800ab94 <_dtoa_r+0x95c>
 800a664:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a668:	462a      	mov	r2, r5
 800a66a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a66e:	f7f6 fa3d 	bl	8000aec <__aeabi_dcmplt>
 800a672:	bb38      	cbnz	r0, 800a6c4 <_dtoa_r+0x48c>
 800a674:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a678:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a67c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a67e:	2b00      	cmp	r3, #0
 800a680:	f2c0 8157 	blt.w	800a932 <_dtoa_r+0x6fa>
 800a684:	2f0e      	cmp	r7, #14
 800a686:	f300 8154 	bgt.w	800a932 <_dtoa_r+0x6fa>
 800a68a:	4b4b      	ldr	r3, [pc, #300]	@ (800a7b8 <_dtoa_r+0x580>)
 800a68c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a690:	ed93 7b00 	vldr	d7, [r3]
 800a694:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a696:	2b00      	cmp	r3, #0
 800a698:	ed8d 7b00 	vstr	d7, [sp]
 800a69c:	f280 80e5 	bge.w	800a86a <_dtoa_r+0x632>
 800a6a0:	9b03      	ldr	r3, [sp, #12]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	f300 80e1 	bgt.w	800a86a <_dtoa_r+0x632>
 800a6a8:	d10c      	bne.n	800a6c4 <_dtoa_r+0x48c>
 800a6aa:	4b48      	ldr	r3, [pc, #288]	@ (800a7cc <_dtoa_r+0x594>)
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	ec51 0b17 	vmov	r0, r1, d7
 800a6b2:	f7f5 ffa9 	bl	8000608 <__aeabi_dmul>
 800a6b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6ba:	f7f6 fa2b 	bl	8000b14 <__aeabi_dcmpge>
 800a6be:	2800      	cmp	r0, #0
 800a6c0:	f000 8266 	beq.w	800ab90 <_dtoa_r+0x958>
 800a6c4:	2400      	movs	r4, #0
 800a6c6:	4625      	mov	r5, r4
 800a6c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a6ca:	4656      	mov	r6, sl
 800a6cc:	ea6f 0803 	mvn.w	r8, r3
 800a6d0:	2700      	movs	r7, #0
 800a6d2:	4621      	mov	r1, r4
 800a6d4:	4648      	mov	r0, r9
 800a6d6:	f000 fcbf 	bl	800b058 <_Bfree>
 800a6da:	2d00      	cmp	r5, #0
 800a6dc:	f000 80bd 	beq.w	800a85a <_dtoa_r+0x622>
 800a6e0:	b12f      	cbz	r7, 800a6ee <_dtoa_r+0x4b6>
 800a6e2:	42af      	cmp	r7, r5
 800a6e4:	d003      	beq.n	800a6ee <_dtoa_r+0x4b6>
 800a6e6:	4639      	mov	r1, r7
 800a6e8:	4648      	mov	r0, r9
 800a6ea:	f000 fcb5 	bl	800b058 <_Bfree>
 800a6ee:	4629      	mov	r1, r5
 800a6f0:	4648      	mov	r0, r9
 800a6f2:	f000 fcb1 	bl	800b058 <_Bfree>
 800a6f6:	e0b0      	b.n	800a85a <_dtoa_r+0x622>
 800a6f8:	07e2      	lsls	r2, r4, #31
 800a6fa:	d505      	bpl.n	800a708 <_dtoa_r+0x4d0>
 800a6fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a700:	f7f5 ff82 	bl	8000608 <__aeabi_dmul>
 800a704:	3601      	adds	r6, #1
 800a706:	2301      	movs	r3, #1
 800a708:	1064      	asrs	r4, r4, #1
 800a70a:	3508      	adds	r5, #8
 800a70c:	e762      	b.n	800a5d4 <_dtoa_r+0x39c>
 800a70e:	2602      	movs	r6, #2
 800a710:	e765      	b.n	800a5de <_dtoa_r+0x3a6>
 800a712:	9c03      	ldr	r4, [sp, #12]
 800a714:	46b8      	mov	r8, r7
 800a716:	e784      	b.n	800a622 <_dtoa_r+0x3ea>
 800a718:	4b27      	ldr	r3, [pc, #156]	@ (800a7b8 <_dtoa_r+0x580>)
 800a71a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a71c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a720:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a724:	4454      	add	r4, sl
 800a726:	2900      	cmp	r1, #0
 800a728:	d054      	beq.n	800a7d4 <_dtoa_r+0x59c>
 800a72a:	4929      	ldr	r1, [pc, #164]	@ (800a7d0 <_dtoa_r+0x598>)
 800a72c:	2000      	movs	r0, #0
 800a72e:	f7f6 f895 	bl	800085c <__aeabi_ddiv>
 800a732:	4633      	mov	r3, r6
 800a734:	462a      	mov	r2, r5
 800a736:	f7f5 fdaf 	bl	8000298 <__aeabi_dsub>
 800a73a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a73e:	4656      	mov	r6, sl
 800a740:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a744:	f7f6 fa10 	bl	8000b68 <__aeabi_d2iz>
 800a748:	4605      	mov	r5, r0
 800a74a:	f7f5 fef3 	bl	8000534 <__aeabi_i2d>
 800a74e:	4602      	mov	r2, r0
 800a750:	460b      	mov	r3, r1
 800a752:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a756:	f7f5 fd9f 	bl	8000298 <__aeabi_dsub>
 800a75a:	3530      	adds	r5, #48	@ 0x30
 800a75c:	4602      	mov	r2, r0
 800a75e:	460b      	mov	r3, r1
 800a760:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a764:	f806 5b01 	strb.w	r5, [r6], #1
 800a768:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a76c:	f7f6 f9be 	bl	8000aec <__aeabi_dcmplt>
 800a770:	2800      	cmp	r0, #0
 800a772:	d172      	bne.n	800a85a <_dtoa_r+0x622>
 800a774:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a778:	4911      	ldr	r1, [pc, #68]	@ (800a7c0 <_dtoa_r+0x588>)
 800a77a:	2000      	movs	r0, #0
 800a77c:	f7f5 fd8c 	bl	8000298 <__aeabi_dsub>
 800a780:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a784:	f7f6 f9b2 	bl	8000aec <__aeabi_dcmplt>
 800a788:	2800      	cmp	r0, #0
 800a78a:	f040 80b4 	bne.w	800a8f6 <_dtoa_r+0x6be>
 800a78e:	42a6      	cmp	r6, r4
 800a790:	f43f af70 	beq.w	800a674 <_dtoa_r+0x43c>
 800a794:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a798:	4b0a      	ldr	r3, [pc, #40]	@ (800a7c4 <_dtoa_r+0x58c>)
 800a79a:	2200      	movs	r2, #0
 800a79c:	f7f5 ff34 	bl	8000608 <__aeabi_dmul>
 800a7a0:	4b08      	ldr	r3, [pc, #32]	@ (800a7c4 <_dtoa_r+0x58c>)
 800a7a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a7ac:	f7f5 ff2c 	bl	8000608 <__aeabi_dmul>
 800a7b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7b4:	e7c4      	b.n	800a740 <_dtoa_r+0x508>
 800a7b6:	bf00      	nop
 800a7b8:	0800c4e0 	.word	0x0800c4e0
 800a7bc:	0800c4b8 	.word	0x0800c4b8
 800a7c0:	3ff00000 	.word	0x3ff00000
 800a7c4:	40240000 	.word	0x40240000
 800a7c8:	401c0000 	.word	0x401c0000
 800a7cc:	40140000 	.word	0x40140000
 800a7d0:	3fe00000 	.word	0x3fe00000
 800a7d4:	4631      	mov	r1, r6
 800a7d6:	4628      	mov	r0, r5
 800a7d8:	f7f5 ff16 	bl	8000608 <__aeabi_dmul>
 800a7dc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a7e0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a7e2:	4656      	mov	r6, sl
 800a7e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a7e8:	f7f6 f9be 	bl	8000b68 <__aeabi_d2iz>
 800a7ec:	4605      	mov	r5, r0
 800a7ee:	f7f5 fea1 	bl	8000534 <__aeabi_i2d>
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	460b      	mov	r3, r1
 800a7f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a7fa:	f7f5 fd4d 	bl	8000298 <__aeabi_dsub>
 800a7fe:	3530      	adds	r5, #48	@ 0x30
 800a800:	f806 5b01 	strb.w	r5, [r6], #1
 800a804:	4602      	mov	r2, r0
 800a806:	460b      	mov	r3, r1
 800a808:	42a6      	cmp	r6, r4
 800a80a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a80e:	f04f 0200 	mov.w	r2, #0
 800a812:	d124      	bne.n	800a85e <_dtoa_r+0x626>
 800a814:	4baf      	ldr	r3, [pc, #700]	@ (800aad4 <_dtoa_r+0x89c>)
 800a816:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a81a:	f7f5 fd3f 	bl	800029c <__adddf3>
 800a81e:	4602      	mov	r2, r0
 800a820:	460b      	mov	r3, r1
 800a822:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a826:	f7f6 f97f 	bl	8000b28 <__aeabi_dcmpgt>
 800a82a:	2800      	cmp	r0, #0
 800a82c:	d163      	bne.n	800a8f6 <_dtoa_r+0x6be>
 800a82e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a832:	49a8      	ldr	r1, [pc, #672]	@ (800aad4 <_dtoa_r+0x89c>)
 800a834:	2000      	movs	r0, #0
 800a836:	f7f5 fd2f 	bl	8000298 <__aeabi_dsub>
 800a83a:	4602      	mov	r2, r0
 800a83c:	460b      	mov	r3, r1
 800a83e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a842:	f7f6 f953 	bl	8000aec <__aeabi_dcmplt>
 800a846:	2800      	cmp	r0, #0
 800a848:	f43f af14 	beq.w	800a674 <_dtoa_r+0x43c>
 800a84c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a84e:	1e73      	subs	r3, r6, #1
 800a850:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a852:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a856:	2b30      	cmp	r3, #48	@ 0x30
 800a858:	d0f8      	beq.n	800a84c <_dtoa_r+0x614>
 800a85a:	4647      	mov	r7, r8
 800a85c:	e03b      	b.n	800a8d6 <_dtoa_r+0x69e>
 800a85e:	4b9e      	ldr	r3, [pc, #632]	@ (800aad8 <_dtoa_r+0x8a0>)
 800a860:	f7f5 fed2 	bl	8000608 <__aeabi_dmul>
 800a864:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a868:	e7bc      	b.n	800a7e4 <_dtoa_r+0x5ac>
 800a86a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a86e:	4656      	mov	r6, sl
 800a870:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a874:	4620      	mov	r0, r4
 800a876:	4629      	mov	r1, r5
 800a878:	f7f5 fff0 	bl	800085c <__aeabi_ddiv>
 800a87c:	f7f6 f974 	bl	8000b68 <__aeabi_d2iz>
 800a880:	4680      	mov	r8, r0
 800a882:	f7f5 fe57 	bl	8000534 <__aeabi_i2d>
 800a886:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a88a:	f7f5 febd 	bl	8000608 <__aeabi_dmul>
 800a88e:	4602      	mov	r2, r0
 800a890:	460b      	mov	r3, r1
 800a892:	4620      	mov	r0, r4
 800a894:	4629      	mov	r1, r5
 800a896:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a89a:	f7f5 fcfd 	bl	8000298 <__aeabi_dsub>
 800a89e:	f806 4b01 	strb.w	r4, [r6], #1
 800a8a2:	9d03      	ldr	r5, [sp, #12]
 800a8a4:	eba6 040a 	sub.w	r4, r6, sl
 800a8a8:	42a5      	cmp	r5, r4
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	460b      	mov	r3, r1
 800a8ae:	d133      	bne.n	800a918 <_dtoa_r+0x6e0>
 800a8b0:	f7f5 fcf4 	bl	800029c <__adddf3>
 800a8b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8b8:	4604      	mov	r4, r0
 800a8ba:	460d      	mov	r5, r1
 800a8bc:	f7f6 f934 	bl	8000b28 <__aeabi_dcmpgt>
 800a8c0:	b9c0      	cbnz	r0, 800a8f4 <_dtoa_r+0x6bc>
 800a8c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	4629      	mov	r1, r5
 800a8ca:	f7f6 f905 	bl	8000ad8 <__aeabi_dcmpeq>
 800a8ce:	b110      	cbz	r0, 800a8d6 <_dtoa_r+0x69e>
 800a8d0:	f018 0f01 	tst.w	r8, #1
 800a8d4:	d10e      	bne.n	800a8f4 <_dtoa_r+0x6bc>
 800a8d6:	9902      	ldr	r1, [sp, #8]
 800a8d8:	4648      	mov	r0, r9
 800a8da:	f000 fbbd 	bl	800b058 <_Bfree>
 800a8de:	2300      	movs	r3, #0
 800a8e0:	7033      	strb	r3, [r6, #0]
 800a8e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a8e4:	3701      	adds	r7, #1
 800a8e6:	601f      	str	r7, [r3, #0]
 800a8e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	f000 824b 	beq.w	800ad86 <_dtoa_r+0xb4e>
 800a8f0:	601e      	str	r6, [r3, #0]
 800a8f2:	e248      	b.n	800ad86 <_dtoa_r+0xb4e>
 800a8f4:	46b8      	mov	r8, r7
 800a8f6:	4633      	mov	r3, r6
 800a8f8:	461e      	mov	r6, r3
 800a8fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a8fe:	2a39      	cmp	r2, #57	@ 0x39
 800a900:	d106      	bne.n	800a910 <_dtoa_r+0x6d8>
 800a902:	459a      	cmp	sl, r3
 800a904:	d1f8      	bne.n	800a8f8 <_dtoa_r+0x6c0>
 800a906:	2230      	movs	r2, #48	@ 0x30
 800a908:	f108 0801 	add.w	r8, r8, #1
 800a90c:	f88a 2000 	strb.w	r2, [sl]
 800a910:	781a      	ldrb	r2, [r3, #0]
 800a912:	3201      	adds	r2, #1
 800a914:	701a      	strb	r2, [r3, #0]
 800a916:	e7a0      	b.n	800a85a <_dtoa_r+0x622>
 800a918:	4b6f      	ldr	r3, [pc, #444]	@ (800aad8 <_dtoa_r+0x8a0>)
 800a91a:	2200      	movs	r2, #0
 800a91c:	f7f5 fe74 	bl	8000608 <__aeabi_dmul>
 800a920:	2200      	movs	r2, #0
 800a922:	2300      	movs	r3, #0
 800a924:	4604      	mov	r4, r0
 800a926:	460d      	mov	r5, r1
 800a928:	f7f6 f8d6 	bl	8000ad8 <__aeabi_dcmpeq>
 800a92c:	2800      	cmp	r0, #0
 800a92e:	d09f      	beq.n	800a870 <_dtoa_r+0x638>
 800a930:	e7d1      	b.n	800a8d6 <_dtoa_r+0x69e>
 800a932:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a934:	2a00      	cmp	r2, #0
 800a936:	f000 80ea 	beq.w	800ab0e <_dtoa_r+0x8d6>
 800a93a:	9a07      	ldr	r2, [sp, #28]
 800a93c:	2a01      	cmp	r2, #1
 800a93e:	f300 80cd 	bgt.w	800aadc <_dtoa_r+0x8a4>
 800a942:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a944:	2a00      	cmp	r2, #0
 800a946:	f000 80c1 	beq.w	800aacc <_dtoa_r+0x894>
 800a94a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a94e:	9c08      	ldr	r4, [sp, #32]
 800a950:	9e00      	ldr	r6, [sp, #0]
 800a952:	9a00      	ldr	r2, [sp, #0]
 800a954:	441a      	add	r2, r3
 800a956:	9200      	str	r2, [sp, #0]
 800a958:	9a06      	ldr	r2, [sp, #24]
 800a95a:	2101      	movs	r1, #1
 800a95c:	441a      	add	r2, r3
 800a95e:	4648      	mov	r0, r9
 800a960:	9206      	str	r2, [sp, #24]
 800a962:	f000 fc2d 	bl	800b1c0 <__i2b>
 800a966:	4605      	mov	r5, r0
 800a968:	b166      	cbz	r6, 800a984 <_dtoa_r+0x74c>
 800a96a:	9b06      	ldr	r3, [sp, #24]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	dd09      	ble.n	800a984 <_dtoa_r+0x74c>
 800a970:	42b3      	cmp	r3, r6
 800a972:	9a00      	ldr	r2, [sp, #0]
 800a974:	bfa8      	it	ge
 800a976:	4633      	movge	r3, r6
 800a978:	1ad2      	subs	r2, r2, r3
 800a97a:	9200      	str	r2, [sp, #0]
 800a97c:	9a06      	ldr	r2, [sp, #24]
 800a97e:	1af6      	subs	r6, r6, r3
 800a980:	1ad3      	subs	r3, r2, r3
 800a982:	9306      	str	r3, [sp, #24]
 800a984:	9b08      	ldr	r3, [sp, #32]
 800a986:	b30b      	cbz	r3, 800a9cc <_dtoa_r+0x794>
 800a988:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	f000 80c6 	beq.w	800ab1c <_dtoa_r+0x8e4>
 800a990:	2c00      	cmp	r4, #0
 800a992:	f000 80c0 	beq.w	800ab16 <_dtoa_r+0x8de>
 800a996:	4629      	mov	r1, r5
 800a998:	4622      	mov	r2, r4
 800a99a:	4648      	mov	r0, r9
 800a99c:	f000 fcc8 	bl	800b330 <__pow5mult>
 800a9a0:	9a02      	ldr	r2, [sp, #8]
 800a9a2:	4601      	mov	r1, r0
 800a9a4:	4605      	mov	r5, r0
 800a9a6:	4648      	mov	r0, r9
 800a9a8:	f000 fc20 	bl	800b1ec <__multiply>
 800a9ac:	9902      	ldr	r1, [sp, #8]
 800a9ae:	4680      	mov	r8, r0
 800a9b0:	4648      	mov	r0, r9
 800a9b2:	f000 fb51 	bl	800b058 <_Bfree>
 800a9b6:	9b08      	ldr	r3, [sp, #32]
 800a9b8:	1b1b      	subs	r3, r3, r4
 800a9ba:	9308      	str	r3, [sp, #32]
 800a9bc:	f000 80b1 	beq.w	800ab22 <_dtoa_r+0x8ea>
 800a9c0:	9a08      	ldr	r2, [sp, #32]
 800a9c2:	4641      	mov	r1, r8
 800a9c4:	4648      	mov	r0, r9
 800a9c6:	f000 fcb3 	bl	800b330 <__pow5mult>
 800a9ca:	9002      	str	r0, [sp, #8]
 800a9cc:	2101      	movs	r1, #1
 800a9ce:	4648      	mov	r0, r9
 800a9d0:	f000 fbf6 	bl	800b1c0 <__i2b>
 800a9d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a9d6:	4604      	mov	r4, r0
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	f000 81d8 	beq.w	800ad8e <_dtoa_r+0xb56>
 800a9de:	461a      	mov	r2, r3
 800a9e0:	4601      	mov	r1, r0
 800a9e2:	4648      	mov	r0, r9
 800a9e4:	f000 fca4 	bl	800b330 <__pow5mult>
 800a9e8:	9b07      	ldr	r3, [sp, #28]
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	4604      	mov	r4, r0
 800a9ee:	f300 809f 	bgt.w	800ab30 <_dtoa_r+0x8f8>
 800a9f2:	9b04      	ldr	r3, [sp, #16]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	f040 8097 	bne.w	800ab28 <_dtoa_r+0x8f0>
 800a9fa:	9b05      	ldr	r3, [sp, #20]
 800a9fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	f040 8093 	bne.w	800ab2c <_dtoa_r+0x8f4>
 800aa06:	9b05      	ldr	r3, [sp, #20]
 800aa08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aa0c:	0d1b      	lsrs	r3, r3, #20
 800aa0e:	051b      	lsls	r3, r3, #20
 800aa10:	b133      	cbz	r3, 800aa20 <_dtoa_r+0x7e8>
 800aa12:	9b00      	ldr	r3, [sp, #0]
 800aa14:	3301      	adds	r3, #1
 800aa16:	9300      	str	r3, [sp, #0]
 800aa18:	9b06      	ldr	r3, [sp, #24]
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	9306      	str	r3, [sp, #24]
 800aa1e:	2301      	movs	r3, #1
 800aa20:	9308      	str	r3, [sp, #32]
 800aa22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	f000 81b8 	beq.w	800ad9a <_dtoa_r+0xb62>
 800aa2a:	6923      	ldr	r3, [r4, #16]
 800aa2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa30:	6918      	ldr	r0, [r3, #16]
 800aa32:	f000 fb79 	bl	800b128 <__hi0bits>
 800aa36:	f1c0 0020 	rsb	r0, r0, #32
 800aa3a:	9b06      	ldr	r3, [sp, #24]
 800aa3c:	4418      	add	r0, r3
 800aa3e:	f010 001f 	ands.w	r0, r0, #31
 800aa42:	f000 8082 	beq.w	800ab4a <_dtoa_r+0x912>
 800aa46:	f1c0 0320 	rsb	r3, r0, #32
 800aa4a:	2b04      	cmp	r3, #4
 800aa4c:	dd73      	ble.n	800ab36 <_dtoa_r+0x8fe>
 800aa4e:	9b00      	ldr	r3, [sp, #0]
 800aa50:	f1c0 001c 	rsb	r0, r0, #28
 800aa54:	4403      	add	r3, r0
 800aa56:	9300      	str	r3, [sp, #0]
 800aa58:	9b06      	ldr	r3, [sp, #24]
 800aa5a:	4403      	add	r3, r0
 800aa5c:	4406      	add	r6, r0
 800aa5e:	9306      	str	r3, [sp, #24]
 800aa60:	9b00      	ldr	r3, [sp, #0]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	dd05      	ble.n	800aa72 <_dtoa_r+0x83a>
 800aa66:	9902      	ldr	r1, [sp, #8]
 800aa68:	461a      	mov	r2, r3
 800aa6a:	4648      	mov	r0, r9
 800aa6c:	f000 fcba 	bl	800b3e4 <__lshift>
 800aa70:	9002      	str	r0, [sp, #8]
 800aa72:	9b06      	ldr	r3, [sp, #24]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	dd05      	ble.n	800aa84 <_dtoa_r+0x84c>
 800aa78:	4621      	mov	r1, r4
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	4648      	mov	r0, r9
 800aa7e:	f000 fcb1 	bl	800b3e4 <__lshift>
 800aa82:	4604      	mov	r4, r0
 800aa84:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d061      	beq.n	800ab4e <_dtoa_r+0x916>
 800aa8a:	9802      	ldr	r0, [sp, #8]
 800aa8c:	4621      	mov	r1, r4
 800aa8e:	f000 fd15 	bl	800b4bc <__mcmp>
 800aa92:	2800      	cmp	r0, #0
 800aa94:	da5b      	bge.n	800ab4e <_dtoa_r+0x916>
 800aa96:	2300      	movs	r3, #0
 800aa98:	9902      	ldr	r1, [sp, #8]
 800aa9a:	220a      	movs	r2, #10
 800aa9c:	4648      	mov	r0, r9
 800aa9e:	f000 fafd 	bl	800b09c <__multadd>
 800aaa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaa4:	9002      	str	r0, [sp, #8]
 800aaa6:	f107 38ff 	add.w	r8, r7, #4294967295
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	f000 8177 	beq.w	800ad9e <_dtoa_r+0xb66>
 800aab0:	4629      	mov	r1, r5
 800aab2:	2300      	movs	r3, #0
 800aab4:	220a      	movs	r2, #10
 800aab6:	4648      	mov	r0, r9
 800aab8:	f000 faf0 	bl	800b09c <__multadd>
 800aabc:	f1bb 0f00 	cmp.w	fp, #0
 800aac0:	4605      	mov	r5, r0
 800aac2:	dc6f      	bgt.n	800aba4 <_dtoa_r+0x96c>
 800aac4:	9b07      	ldr	r3, [sp, #28]
 800aac6:	2b02      	cmp	r3, #2
 800aac8:	dc49      	bgt.n	800ab5e <_dtoa_r+0x926>
 800aaca:	e06b      	b.n	800aba4 <_dtoa_r+0x96c>
 800aacc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800aace:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800aad2:	e73c      	b.n	800a94e <_dtoa_r+0x716>
 800aad4:	3fe00000 	.word	0x3fe00000
 800aad8:	40240000 	.word	0x40240000
 800aadc:	9b03      	ldr	r3, [sp, #12]
 800aade:	1e5c      	subs	r4, r3, #1
 800aae0:	9b08      	ldr	r3, [sp, #32]
 800aae2:	42a3      	cmp	r3, r4
 800aae4:	db09      	blt.n	800aafa <_dtoa_r+0x8c2>
 800aae6:	1b1c      	subs	r4, r3, r4
 800aae8:	9b03      	ldr	r3, [sp, #12]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	f6bf af30 	bge.w	800a950 <_dtoa_r+0x718>
 800aaf0:	9b00      	ldr	r3, [sp, #0]
 800aaf2:	9a03      	ldr	r2, [sp, #12]
 800aaf4:	1a9e      	subs	r6, r3, r2
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	e72b      	b.n	800a952 <_dtoa_r+0x71a>
 800aafa:	9b08      	ldr	r3, [sp, #32]
 800aafc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aafe:	9408      	str	r4, [sp, #32]
 800ab00:	1ae3      	subs	r3, r4, r3
 800ab02:	441a      	add	r2, r3
 800ab04:	9e00      	ldr	r6, [sp, #0]
 800ab06:	9b03      	ldr	r3, [sp, #12]
 800ab08:	920d      	str	r2, [sp, #52]	@ 0x34
 800ab0a:	2400      	movs	r4, #0
 800ab0c:	e721      	b.n	800a952 <_dtoa_r+0x71a>
 800ab0e:	9c08      	ldr	r4, [sp, #32]
 800ab10:	9e00      	ldr	r6, [sp, #0]
 800ab12:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800ab14:	e728      	b.n	800a968 <_dtoa_r+0x730>
 800ab16:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ab1a:	e751      	b.n	800a9c0 <_dtoa_r+0x788>
 800ab1c:	9a08      	ldr	r2, [sp, #32]
 800ab1e:	9902      	ldr	r1, [sp, #8]
 800ab20:	e750      	b.n	800a9c4 <_dtoa_r+0x78c>
 800ab22:	f8cd 8008 	str.w	r8, [sp, #8]
 800ab26:	e751      	b.n	800a9cc <_dtoa_r+0x794>
 800ab28:	2300      	movs	r3, #0
 800ab2a:	e779      	b.n	800aa20 <_dtoa_r+0x7e8>
 800ab2c:	9b04      	ldr	r3, [sp, #16]
 800ab2e:	e777      	b.n	800aa20 <_dtoa_r+0x7e8>
 800ab30:	2300      	movs	r3, #0
 800ab32:	9308      	str	r3, [sp, #32]
 800ab34:	e779      	b.n	800aa2a <_dtoa_r+0x7f2>
 800ab36:	d093      	beq.n	800aa60 <_dtoa_r+0x828>
 800ab38:	9a00      	ldr	r2, [sp, #0]
 800ab3a:	331c      	adds	r3, #28
 800ab3c:	441a      	add	r2, r3
 800ab3e:	9200      	str	r2, [sp, #0]
 800ab40:	9a06      	ldr	r2, [sp, #24]
 800ab42:	441a      	add	r2, r3
 800ab44:	441e      	add	r6, r3
 800ab46:	9206      	str	r2, [sp, #24]
 800ab48:	e78a      	b.n	800aa60 <_dtoa_r+0x828>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	e7f4      	b.n	800ab38 <_dtoa_r+0x900>
 800ab4e:	9b03      	ldr	r3, [sp, #12]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	46b8      	mov	r8, r7
 800ab54:	dc20      	bgt.n	800ab98 <_dtoa_r+0x960>
 800ab56:	469b      	mov	fp, r3
 800ab58:	9b07      	ldr	r3, [sp, #28]
 800ab5a:	2b02      	cmp	r3, #2
 800ab5c:	dd1e      	ble.n	800ab9c <_dtoa_r+0x964>
 800ab5e:	f1bb 0f00 	cmp.w	fp, #0
 800ab62:	f47f adb1 	bne.w	800a6c8 <_dtoa_r+0x490>
 800ab66:	4621      	mov	r1, r4
 800ab68:	465b      	mov	r3, fp
 800ab6a:	2205      	movs	r2, #5
 800ab6c:	4648      	mov	r0, r9
 800ab6e:	f000 fa95 	bl	800b09c <__multadd>
 800ab72:	4601      	mov	r1, r0
 800ab74:	4604      	mov	r4, r0
 800ab76:	9802      	ldr	r0, [sp, #8]
 800ab78:	f000 fca0 	bl	800b4bc <__mcmp>
 800ab7c:	2800      	cmp	r0, #0
 800ab7e:	f77f ada3 	ble.w	800a6c8 <_dtoa_r+0x490>
 800ab82:	4656      	mov	r6, sl
 800ab84:	2331      	movs	r3, #49	@ 0x31
 800ab86:	f806 3b01 	strb.w	r3, [r6], #1
 800ab8a:	f108 0801 	add.w	r8, r8, #1
 800ab8e:	e59f      	b.n	800a6d0 <_dtoa_r+0x498>
 800ab90:	9c03      	ldr	r4, [sp, #12]
 800ab92:	46b8      	mov	r8, r7
 800ab94:	4625      	mov	r5, r4
 800ab96:	e7f4      	b.n	800ab82 <_dtoa_r+0x94a>
 800ab98:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ab9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	f000 8101 	beq.w	800ada6 <_dtoa_r+0xb6e>
 800aba4:	2e00      	cmp	r6, #0
 800aba6:	dd05      	ble.n	800abb4 <_dtoa_r+0x97c>
 800aba8:	4629      	mov	r1, r5
 800abaa:	4632      	mov	r2, r6
 800abac:	4648      	mov	r0, r9
 800abae:	f000 fc19 	bl	800b3e4 <__lshift>
 800abb2:	4605      	mov	r5, r0
 800abb4:	9b08      	ldr	r3, [sp, #32]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d05c      	beq.n	800ac74 <_dtoa_r+0xa3c>
 800abba:	6869      	ldr	r1, [r5, #4]
 800abbc:	4648      	mov	r0, r9
 800abbe:	f000 fa0b 	bl	800afd8 <_Balloc>
 800abc2:	4606      	mov	r6, r0
 800abc4:	b928      	cbnz	r0, 800abd2 <_dtoa_r+0x99a>
 800abc6:	4b82      	ldr	r3, [pc, #520]	@ (800add0 <_dtoa_r+0xb98>)
 800abc8:	4602      	mov	r2, r0
 800abca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800abce:	f7ff bb4a 	b.w	800a266 <_dtoa_r+0x2e>
 800abd2:	692a      	ldr	r2, [r5, #16]
 800abd4:	3202      	adds	r2, #2
 800abd6:	0092      	lsls	r2, r2, #2
 800abd8:	f105 010c 	add.w	r1, r5, #12
 800abdc:	300c      	adds	r0, #12
 800abde:	f7ff fa94 	bl	800a10a <memcpy>
 800abe2:	2201      	movs	r2, #1
 800abe4:	4631      	mov	r1, r6
 800abe6:	4648      	mov	r0, r9
 800abe8:	f000 fbfc 	bl	800b3e4 <__lshift>
 800abec:	f10a 0301 	add.w	r3, sl, #1
 800abf0:	9300      	str	r3, [sp, #0]
 800abf2:	eb0a 030b 	add.w	r3, sl, fp
 800abf6:	9308      	str	r3, [sp, #32]
 800abf8:	9b04      	ldr	r3, [sp, #16]
 800abfa:	f003 0301 	and.w	r3, r3, #1
 800abfe:	462f      	mov	r7, r5
 800ac00:	9306      	str	r3, [sp, #24]
 800ac02:	4605      	mov	r5, r0
 800ac04:	9b00      	ldr	r3, [sp, #0]
 800ac06:	9802      	ldr	r0, [sp, #8]
 800ac08:	4621      	mov	r1, r4
 800ac0a:	f103 3bff 	add.w	fp, r3, #4294967295
 800ac0e:	f7ff fa8a 	bl	800a126 <quorem>
 800ac12:	4603      	mov	r3, r0
 800ac14:	3330      	adds	r3, #48	@ 0x30
 800ac16:	9003      	str	r0, [sp, #12]
 800ac18:	4639      	mov	r1, r7
 800ac1a:	9802      	ldr	r0, [sp, #8]
 800ac1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac1e:	f000 fc4d 	bl	800b4bc <__mcmp>
 800ac22:	462a      	mov	r2, r5
 800ac24:	9004      	str	r0, [sp, #16]
 800ac26:	4621      	mov	r1, r4
 800ac28:	4648      	mov	r0, r9
 800ac2a:	f000 fc63 	bl	800b4f4 <__mdiff>
 800ac2e:	68c2      	ldr	r2, [r0, #12]
 800ac30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac32:	4606      	mov	r6, r0
 800ac34:	bb02      	cbnz	r2, 800ac78 <_dtoa_r+0xa40>
 800ac36:	4601      	mov	r1, r0
 800ac38:	9802      	ldr	r0, [sp, #8]
 800ac3a:	f000 fc3f 	bl	800b4bc <__mcmp>
 800ac3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac40:	4602      	mov	r2, r0
 800ac42:	4631      	mov	r1, r6
 800ac44:	4648      	mov	r0, r9
 800ac46:	920c      	str	r2, [sp, #48]	@ 0x30
 800ac48:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac4a:	f000 fa05 	bl	800b058 <_Bfree>
 800ac4e:	9b07      	ldr	r3, [sp, #28]
 800ac50:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ac52:	9e00      	ldr	r6, [sp, #0]
 800ac54:	ea42 0103 	orr.w	r1, r2, r3
 800ac58:	9b06      	ldr	r3, [sp, #24]
 800ac5a:	4319      	orrs	r1, r3
 800ac5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac5e:	d10d      	bne.n	800ac7c <_dtoa_r+0xa44>
 800ac60:	2b39      	cmp	r3, #57	@ 0x39
 800ac62:	d027      	beq.n	800acb4 <_dtoa_r+0xa7c>
 800ac64:	9a04      	ldr	r2, [sp, #16]
 800ac66:	2a00      	cmp	r2, #0
 800ac68:	dd01      	ble.n	800ac6e <_dtoa_r+0xa36>
 800ac6a:	9b03      	ldr	r3, [sp, #12]
 800ac6c:	3331      	adds	r3, #49	@ 0x31
 800ac6e:	f88b 3000 	strb.w	r3, [fp]
 800ac72:	e52e      	b.n	800a6d2 <_dtoa_r+0x49a>
 800ac74:	4628      	mov	r0, r5
 800ac76:	e7b9      	b.n	800abec <_dtoa_r+0x9b4>
 800ac78:	2201      	movs	r2, #1
 800ac7a:	e7e2      	b.n	800ac42 <_dtoa_r+0xa0a>
 800ac7c:	9904      	ldr	r1, [sp, #16]
 800ac7e:	2900      	cmp	r1, #0
 800ac80:	db04      	blt.n	800ac8c <_dtoa_r+0xa54>
 800ac82:	9807      	ldr	r0, [sp, #28]
 800ac84:	4301      	orrs	r1, r0
 800ac86:	9806      	ldr	r0, [sp, #24]
 800ac88:	4301      	orrs	r1, r0
 800ac8a:	d120      	bne.n	800acce <_dtoa_r+0xa96>
 800ac8c:	2a00      	cmp	r2, #0
 800ac8e:	ddee      	ble.n	800ac6e <_dtoa_r+0xa36>
 800ac90:	9902      	ldr	r1, [sp, #8]
 800ac92:	9300      	str	r3, [sp, #0]
 800ac94:	2201      	movs	r2, #1
 800ac96:	4648      	mov	r0, r9
 800ac98:	f000 fba4 	bl	800b3e4 <__lshift>
 800ac9c:	4621      	mov	r1, r4
 800ac9e:	9002      	str	r0, [sp, #8]
 800aca0:	f000 fc0c 	bl	800b4bc <__mcmp>
 800aca4:	2800      	cmp	r0, #0
 800aca6:	9b00      	ldr	r3, [sp, #0]
 800aca8:	dc02      	bgt.n	800acb0 <_dtoa_r+0xa78>
 800acaa:	d1e0      	bne.n	800ac6e <_dtoa_r+0xa36>
 800acac:	07da      	lsls	r2, r3, #31
 800acae:	d5de      	bpl.n	800ac6e <_dtoa_r+0xa36>
 800acb0:	2b39      	cmp	r3, #57	@ 0x39
 800acb2:	d1da      	bne.n	800ac6a <_dtoa_r+0xa32>
 800acb4:	2339      	movs	r3, #57	@ 0x39
 800acb6:	f88b 3000 	strb.w	r3, [fp]
 800acba:	4633      	mov	r3, r6
 800acbc:	461e      	mov	r6, r3
 800acbe:	3b01      	subs	r3, #1
 800acc0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800acc4:	2a39      	cmp	r2, #57	@ 0x39
 800acc6:	d04e      	beq.n	800ad66 <_dtoa_r+0xb2e>
 800acc8:	3201      	adds	r2, #1
 800acca:	701a      	strb	r2, [r3, #0]
 800accc:	e501      	b.n	800a6d2 <_dtoa_r+0x49a>
 800acce:	2a00      	cmp	r2, #0
 800acd0:	dd03      	ble.n	800acda <_dtoa_r+0xaa2>
 800acd2:	2b39      	cmp	r3, #57	@ 0x39
 800acd4:	d0ee      	beq.n	800acb4 <_dtoa_r+0xa7c>
 800acd6:	3301      	adds	r3, #1
 800acd8:	e7c9      	b.n	800ac6e <_dtoa_r+0xa36>
 800acda:	9a00      	ldr	r2, [sp, #0]
 800acdc:	9908      	ldr	r1, [sp, #32]
 800acde:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ace2:	428a      	cmp	r2, r1
 800ace4:	d028      	beq.n	800ad38 <_dtoa_r+0xb00>
 800ace6:	9902      	ldr	r1, [sp, #8]
 800ace8:	2300      	movs	r3, #0
 800acea:	220a      	movs	r2, #10
 800acec:	4648      	mov	r0, r9
 800acee:	f000 f9d5 	bl	800b09c <__multadd>
 800acf2:	42af      	cmp	r7, r5
 800acf4:	9002      	str	r0, [sp, #8]
 800acf6:	f04f 0300 	mov.w	r3, #0
 800acfa:	f04f 020a 	mov.w	r2, #10
 800acfe:	4639      	mov	r1, r7
 800ad00:	4648      	mov	r0, r9
 800ad02:	d107      	bne.n	800ad14 <_dtoa_r+0xadc>
 800ad04:	f000 f9ca 	bl	800b09c <__multadd>
 800ad08:	4607      	mov	r7, r0
 800ad0a:	4605      	mov	r5, r0
 800ad0c:	9b00      	ldr	r3, [sp, #0]
 800ad0e:	3301      	adds	r3, #1
 800ad10:	9300      	str	r3, [sp, #0]
 800ad12:	e777      	b.n	800ac04 <_dtoa_r+0x9cc>
 800ad14:	f000 f9c2 	bl	800b09c <__multadd>
 800ad18:	4629      	mov	r1, r5
 800ad1a:	4607      	mov	r7, r0
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	220a      	movs	r2, #10
 800ad20:	4648      	mov	r0, r9
 800ad22:	f000 f9bb 	bl	800b09c <__multadd>
 800ad26:	4605      	mov	r5, r0
 800ad28:	e7f0      	b.n	800ad0c <_dtoa_r+0xad4>
 800ad2a:	f1bb 0f00 	cmp.w	fp, #0
 800ad2e:	bfcc      	ite	gt
 800ad30:	465e      	movgt	r6, fp
 800ad32:	2601      	movle	r6, #1
 800ad34:	4456      	add	r6, sl
 800ad36:	2700      	movs	r7, #0
 800ad38:	9902      	ldr	r1, [sp, #8]
 800ad3a:	9300      	str	r3, [sp, #0]
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	4648      	mov	r0, r9
 800ad40:	f000 fb50 	bl	800b3e4 <__lshift>
 800ad44:	4621      	mov	r1, r4
 800ad46:	9002      	str	r0, [sp, #8]
 800ad48:	f000 fbb8 	bl	800b4bc <__mcmp>
 800ad4c:	2800      	cmp	r0, #0
 800ad4e:	dcb4      	bgt.n	800acba <_dtoa_r+0xa82>
 800ad50:	d102      	bne.n	800ad58 <_dtoa_r+0xb20>
 800ad52:	9b00      	ldr	r3, [sp, #0]
 800ad54:	07db      	lsls	r3, r3, #31
 800ad56:	d4b0      	bmi.n	800acba <_dtoa_r+0xa82>
 800ad58:	4633      	mov	r3, r6
 800ad5a:	461e      	mov	r6, r3
 800ad5c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad60:	2a30      	cmp	r2, #48	@ 0x30
 800ad62:	d0fa      	beq.n	800ad5a <_dtoa_r+0xb22>
 800ad64:	e4b5      	b.n	800a6d2 <_dtoa_r+0x49a>
 800ad66:	459a      	cmp	sl, r3
 800ad68:	d1a8      	bne.n	800acbc <_dtoa_r+0xa84>
 800ad6a:	2331      	movs	r3, #49	@ 0x31
 800ad6c:	f108 0801 	add.w	r8, r8, #1
 800ad70:	f88a 3000 	strb.w	r3, [sl]
 800ad74:	e4ad      	b.n	800a6d2 <_dtoa_r+0x49a>
 800ad76:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ad78:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800add4 <_dtoa_r+0xb9c>
 800ad7c:	b11b      	cbz	r3, 800ad86 <_dtoa_r+0xb4e>
 800ad7e:	f10a 0308 	add.w	r3, sl, #8
 800ad82:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ad84:	6013      	str	r3, [r2, #0]
 800ad86:	4650      	mov	r0, sl
 800ad88:	b017      	add	sp, #92	@ 0x5c
 800ad8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad8e:	9b07      	ldr	r3, [sp, #28]
 800ad90:	2b01      	cmp	r3, #1
 800ad92:	f77f ae2e 	ble.w	800a9f2 <_dtoa_r+0x7ba>
 800ad96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ad98:	9308      	str	r3, [sp, #32]
 800ad9a:	2001      	movs	r0, #1
 800ad9c:	e64d      	b.n	800aa3a <_dtoa_r+0x802>
 800ad9e:	f1bb 0f00 	cmp.w	fp, #0
 800ada2:	f77f aed9 	ble.w	800ab58 <_dtoa_r+0x920>
 800ada6:	4656      	mov	r6, sl
 800ada8:	9802      	ldr	r0, [sp, #8]
 800adaa:	4621      	mov	r1, r4
 800adac:	f7ff f9bb 	bl	800a126 <quorem>
 800adb0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800adb4:	f806 3b01 	strb.w	r3, [r6], #1
 800adb8:	eba6 020a 	sub.w	r2, r6, sl
 800adbc:	4593      	cmp	fp, r2
 800adbe:	ddb4      	ble.n	800ad2a <_dtoa_r+0xaf2>
 800adc0:	9902      	ldr	r1, [sp, #8]
 800adc2:	2300      	movs	r3, #0
 800adc4:	220a      	movs	r2, #10
 800adc6:	4648      	mov	r0, r9
 800adc8:	f000 f968 	bl	800b09c <__multadd>
 800adcc:	9002      	str	r0, [sp, #8]
 800adce:	e7eb      	b.n	800ada8 <_dtoa_r+0xb70>
 800add0:	0800c3e4 	.word	0x0800c3e4
 800add4:	0800c368 	.word	0x0800c368

0800add8 <_free_r>:
 800add8:	b538      	push	{r3, r4, r5, lr}
 800adda:	4605      	mov	r5, r0
 800addc:	2900      	cmp	r1, #0
 800adde:	d041      	beq.n	800ae64 <_free_r+0x8c>
 800ade0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ade4:	1f0c      	subs	r4, r1, #4
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	bfb8      	it	lt
 800adea:	18e4      	addlt	r4, r4, r3
 800adec:	f000 f8e8 	bl	800afc0 <__malloc_lock>
 800adf0:	4a1d      	ldr	r2, [pc, #116]	@ (800ae68 <_free_r+0x90>)
 800adf2:	6813      	ldr	r3, [r2, #0]
 800adf4:	b933      	cbnz	r3, 800ae04 <_free_r+0x2c>
 800adf6:	6063      	str	r3, [r4, #4]
 800adf8:	6014      	str	r4, [r2, #0]
 800adfa:	4628      	mov	r0, r5
 800adfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae00:	f000 b8e4 	b.w	800afcc <__malloc_unlock>
 800ae04:	42a3      	cmp	r3, r4
 800ae06:	d908      	bls.n	800ae1a <_free_r+0x42>
 800ae08:	6820      	ldr	r0, [r4, #0]
 800ae0a:	1821      	adds	r1, r4, r0
 800ae0c:	428b      	cmp	r3, r1
 800ae0e:	bf01      	itttt	eq
 800ae10:	6819      	ldreq	r1, [r3, #0]
 800ae12:	685b      	ldreq	r3, [r3, #4]
 800ae14:	1809      	addeq	r1, r1, r0
 800ae16:	6021      	streq	r1, [r4, #0]
 800ae18:	e7ed      	b.n	800adf6 <_free_r+0x1e>
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	b10b      	cbz	r3, 800ae24 <_free_r+0x4c>
 800ae20:	42a3      	cmp	r3, r4
 800ae22:	d9fa      	bls.n	800ae1a <_free_r+0x42>
 800ae24:	6811      	ldr	r1, [r2, #0]
 800ae26:	1850      	adds	r0, r2, r1
 800ae28:	42a0      	cmp	r0, r4
 800ae2a:	d10b      	bne.n	800ae44 <_free_r+0x6c>
 800ae2c:	6820      	ldr	r0, [r4, #0]
 800ae2e:	4401      	add	r1, r0
 800ae30:	1850      	adds	r0, r2, r1
 800ae32:	4283      	cmp	r3, r0
 800ae34:	6011      	str	r1, [r2, #0]
 800ae36:	d1e0      	bne.n	800adfa <_free_r+0x22>
 800ae38:	6818      	ldr	r0, [r3, #0]
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	6053      	str	r3, [r2, #4]
 800ae3e:	4408      	add	r0, r1
 800ae40:	6010      	str	r0, [r2, #0]
 800ae42:	e7da      	b.n	800adfa <_free_r+0x22>
 800ae44:	d902      	bls.n	800ae4c <_free_r+0x74>
 800ae46:	230c      	movs	r3, #12
 800ae48:	602b      	str	r3, [r5, #0]
 800ae4a:	e7d6      	b.n	800adfa <_free_r+0x22>
 800ae4c:	6820      	ldr	r0, [r4, #0]
 800ae4e:	1821      	adds	r1, r4, r0
 800ae50:	428b      	cmp	r3, r1
 800ae52:	bf04      	itt	eq
 800ae54:	6819      	ldreq	r1, [r3, #0]
 800ae56:	685b      	ldreq	r3, [r3, #4]
 800ae58:	6063      	str	r3, [r4, #4]
 800ae5a:	bf04      	itt	eq
 800ae5c:	1809      	addeq	r1, r1, r0
 800ae5e:	6021      	streq	r1, [r4, #0]
 800ae60:	6054      	str	r4, [r2, #4]
 800ae62:	e7ca      	b.n	800adfa <_free_r+0x22>
 800ae64:	bd38      	pop	{r3, r4, r5, pc}
 800ae66:	bf00      	nop
 800ae68:	2000502c 	.word	0x2000502c

0800ae6c <malloc>:
 800ae6c:	4b02      	ldr	r3, [pc, #8]	@ (800ae78 <malloc+0xc>)
 800ae6e:	4601      	mov	r1, r0
 800ae70:	6818      	ldr	r0, [r3, #0]
 800ae72:	f000 b825 	b.w	800aec0 <_malloc_r>
 800ae76:	bf00      	nop
 800ae78:	2000001c 	.word	0x2000001c

0800ae7c <sbrk_aligned>:
 800ae7c:	b570      	push	{r4, r5, r6, lr}
 800ae7e:	4e0f      	ldr	r6, [pc, #60]	@ (800aebc <sbrk_aligned+0x40>)
 800ae80:	460c      	mov	r4, r1
 800ae82:	6831      	ldr	r1, [r6, #0]
 800ae84:	4605      	mov	r5, r0
 800ae86:	b911      	cbnz	r1, 800ae8e <sbrk_aligned+0x12>
 800ae88:	f001 f814 	bl	800beb4 <_sbrk_r>
 800ae8c:	6030      	str	r0, [r6, #0]
 800ae8e:	4621      	mov	r1, r4
 800ae90:	4628      	mov	r0, r5
 800ae92:	f001 f80f 	bl	800beb4 <_sbrk_r>
 800ae96:	1c43      	adds	r3, r0, #1
 800ae98:	d103      	bne.n	800aea2 <sbrk_aligned+0x26>
 800ae9a:	f04f 34ff 	mov.w	r4, #4294967295
 800ae9e:	4620      	mov	r0, r4
 800aea0:	bd70      	pop	{r4, r5, r6, pc}
 800aea2:	1cc4      	adds	r4, r0, #3
 800aea4:	f024 0403 	bic.w	r4, r4, #3
 800aea8:	42a0      	cmp	r0, r4
 800aeaa:	d0f8      	beq.n	800ae9e <sbrk_aligned+0x22>
 800aeac:	1a21      	subs	r1, r4, r0
 800aeae:	4628      	mov	r0, r5
 800aeb0:	f001 f800 	bl	800beb4 <_sbrk_r>
 800aeb4:	3001      	adds	r0, #1
 800aeb6:	d1f2      	bne.n	800ae9e <sbrk_aligned+0x22>
 800aeb8:	e7ef      	b.n	800ae9a <sbrk_aligned+0x1e>
 800aeba:	bf00      	nop
 800aebc:	20005028 	.word	0x20005028

0800aec0 <_malloc_r>:
 800aec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aec4:	1ccd      	adds	r5, r1, #3
 800aec6:	f025 0503 	bic.w	r5, r5, #3
 800aeca:	3508      	adds	r5, #8
 800aecc:	2d0c      	cmp	r5, #12
 800aece:	bf38      	it	cc
 800aed0:	250c      	movcc	r5, #12
 800aed2:	2d00      	cmp	r5, #0
 800aed4:	4606      	mov	r6, r0
 800aed6:	db01      	blt.n	800aedc <_malloc_r+0x1c>
 800aed8:	42a9      	cmp	r1, r5
 800aeda:	d904      	bls.n	800aee6 <_malloc_r+0x26>
 800aedc:	230c      	movs	r3, #12
 800aede:	6033      	str	r3, [r6, #0]
 800aee0:	2000      	movs	r0, #0
 800aee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aee6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800afbc <_malloc_r+0xfc>
 800aeea:	f000 f869 	bl	800afc0 <__malloc_lock>
 800aeee:	f8d8 3000 	ldr.w	r3, [r8]
 800aef2:	461c      	mov	r4, r3
 800aef4:	bb44      	cbnz	r4, 800af48 <_malloc_r+0x88>
 800aef6:	4629      	mov	r1, r5
 800aef8:	4630      	mov	r0, r6
 800aefa:	f7ff ffbf 	bl	800ae7c <sbrk_aligned>
 800aefe:	1c43      	adds	r3, r0, #1
 800af00:	4604      	mov	r4, r0
 800af02:	d158      	bne.n	800afb6 <_malloc_r+0xf6>
 800af04:	f8d8 4000 	ldr.w	r4, [r8]
 800af08:	4627      	mov	r7, r4
 800af0a:	2f00      	cmp	r7, #0
 800af0c:	d143      	bne.n	800af96 <_malloc_r+0xd6>
 800af0e:	2c00      	cmp	r4, #0
 800af10:	d04b      	beq.n	800afaa <_malloc_r+0xea>
 800af12:	6823      	ldr	r3, [r4, #0]
 800af14:	4639      	mov	r1, r7
 800af16:	4630      	mov	r0, r6
 800af18:	eb04 0903 	add.w	r9, r4, r3
 800af1c:	f000 ffca 	bl	800beb4 <_sbrk_r>
 800af20:	4581      	cmp	r9, r0
 800af22:	d142      	bne.n	800afaa <_malloc_r+0xea>
 800af24:	6821      	ldr	r1, [r4, #0]
 800af26:	1a6d      	subs	r5, r5, r1
 800af28:	4629      	mov	r1, r5
 800af2a:	4630      	mov	r0, r6
 800af2c:	f7ff ffa6 	bl	800ae7c <sbrk_aligned>
 800af30:	3001      	adds	r0, #1
 800af32:	d03a      	beq.n	800afaa <_malloc_r+0xea>
 800af34:	6823      	ldr	r3, [r4, #0]
 800af36:	442b      	add	r3, r5
 800af38:	6023      	str	r3, [r4, #0]
 800af3a:	f8d8 3000 	ldr.w	r3, [r8]
 800af3e:	685a      	ldr	r2, [r3, #4]
 800af40:	bb62      	cbnz	r2, 800af9c <_malloc_r+0xdc>
 800af42:	f8c8 7000 	str.w	r7, [r8]
 800af46:	e00f      	b.n	800af68 <_malloc_r+0xa8>
 800af48:	6822      	ldr	r2, [r4, #0]
 800af4a:	1b52      	subs	r2, r2, r5
 800af4c:	d420      	bmi.n	800af90 <_malloc_r+0xd0>
 800af4e:	2a0b      	cmp	r2, #11
 800af50:	d917      	bls.n	800af82 <_malloc_r+0xc2>
 800af52:	1961      	adds	r1, r4, r5
 800af54:	42a3      	cmp	r3, r4
 800af56:	6025      	str	r5, [r4, #0]
 800af58:	bf18      	it	ne
 800af5a:	6059      	strne	r1, [r3, #4]
 800af5c:	6863      	ldr	r3, [r4, #4]
 800af5e:	bf08      	it	eq
 800af60:	f8c8 1000 	streq.w	r1, [r8]
 800af64:	5162      	str	r2, [r4, r5]
 800af66:	604b      	str	r3, [r1, #4]
 800af68:	4630      	mov	r0, r6
 800af6a:	f000 f82f 	bl	800afcc <__malloc_unlock>
 800af6e:	f104 000b 	add.w	r0, r4, #11
 800af72:	1d23      	adds	r3, r4, #4
 800af74:	f020 0007 	bic.w	r0, r0, #7
 800af78:	1ac2      	subs	r2, r0, r3
 800af7a:	bf1c      	itt	ne
 800af7c:	1a1b      	subne	r3, r3, r0
 800af7e:	50a3      	strne	r3, [r4, r2]
 800af80:	e7af      	b.n	800aee2 <_malloc_r+0x22>
 800af82:	6862      	ldr	r2, [r4, #4]
 800af84:	42a3      	cmp	r3, r4
 800af86:	bf0c      	ite	eq
 800af88:	f8c8 2000 	streq.w	r2, [r8]
 800af8c:	605a      	strne	r2, [r3, #4]
 800af8e:	e7eb      	b.n	800af68 <_malloc_r+0xa8>
 800af90:	4623      	mov	r3, r4
 800af92:	6864      	ldr	r4, [r4, #4]
 800af94:	e7ae      	b.n	800aef4 <_malloc_r+0x34>
 800af96:	463c      	mov	r4, r7
 800af98:	687f      	ldr	r7, [r7, #4]
 800af9a:	e7b6      	b.n	800af0a <_malloc_r+0x4a>
 800af9c:	461a      	mov	r2, r3
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	42a3      	cmp	r3, r4
 800afa2:	d1fb      	bne.n	800af9c <_malloc_r+0xdc>
 800afa4:	2300      	movs	r3, #0
 800afa6:	6053      	str	r3, [r2, #4]
 800afa8:	e7de      	b.n	800af68 <_malloc_r+0xa8>
 800afaa:	230c      	movs	r3, #12
 800afac:	6033      	str	r3, [r6, #0]
 800afae:	4630      	mov	r0, r6
 800afb0:	f000 f80c 	bl	800afcc <__malloc_unlock>
 800afb4:	e794      	b.n	800aee0 <_malloc_r+0x20>
 800afb6:	6005      	str	r5, [r0, #0]
 800afb8:	e7d6      	b.n	800af68 <_malloc_r+0xa8>
 800afba:	bf00      	nop
 800afbc:	2000502c 	.word	0x2000502c

0800afc0 <__malloc_lock>:
 800afc0:	4801      	ldr	r0, [pc, #4]	@ (800afc8 <__malloc_lock+0x8>)
 800afc2:	f7ff b8a0 	b.w	800a106 <__retarget_lock_acquire_recursive>
 800afc6:	bf00      	nop
 800afc8:	20005024 	.word	0x20005024

0800afcc <__malloc_unlock>:
 800afcc:	4801      	ldr	r0, [pc, #4]	@ (800afd4 <__malloc_unlock+0x8>)
 800afce:	f7ff b89b 	b.w	800a108 <__retarget_lock_release_recursive>
 800afd2:	bf00      	nop
 800afd4:	20005024 	.word	0x20005024

0800afd8 <_Balloc>:
 800afd8:	b570      	push	{r4, r5, r6, lr}
 800afda:	69c6      	ldr	r6, [r0, #28]
 800afdc:	4604      	mov	r4, r0
 800afde:	460d      	mov	r5, r1
 800afe0:	b976      	cbnz	r6, 800b000 <_Balloc+0x28>
 800afe2:	2010      	movs	r0, #16
 800afe4:	f7ff ff42 	bl	800ae6c <malloc>
 800afe8:	4602      	mov	r2, r0
 800afea:	61e0      	str	r0, [r4, #28]
 800afec:	b920      	cbnz	r0, 800aff8 <_Balloc+0x20>
 800afee:	4b18      	ldr	r3, [pc, #96]	@ (800b050 <_Balloc+0x78>)
 800aff0:	4818      	ldr	r0, [pc, #96]	@ (800b054 <_Balloc+0x7c>)
 800aff2:	216b      	movs	r1, #107	@ 0x6b
 800aff4:	f000 ff6e 	bl	800bed4 <__assert_func>
 800aff8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800affc:	6006      	str	r6, [r0, #0]
 800affe:	60c6      	str	r6, [r0, #12]
 800b000:	69e6      	ldr	r6, [r4, #28]
 800b002:	68f3      	ldr	r3, [r6, #12]
 800b004:	b183      	cbz	r3, 800b028 <_Balloc+0x50>
 800b006:	69e3      	ldr	r3, [r4, #28]
 800b008:	68db      	ldr	r3, [r3, #12]
 800b00a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b00e:	b9b8      	cbnz	r0, 800b040 <_Balloc+0x68>
 800b010:	2101      	movs	r1, #1
 800b012:	fa01 f605 	lsl.w	r6, r1, r5
 800b016:	1d72      	adds	r2, r6, #5
 800b018:	0092      	lsls	r2, r2, #2
 800b01a:	4620      	mov	r0, r4
 800b01c:	f000 ff78 	bl	800bf10 <_calloc_r>
 800b020:	b160      	cbz	r0, 800b03c <_Balloc+0x64>
 800b022:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b026:	e00e      	b.n	800b046 <_Balloc+0x6e>
 800b028:	2221      	movs	r2, #33	@ 0x21
 800b02a:	2104      	movs	r1, #4
 800b02c:	4620      	mov	r0, r4
 800b02e:	f000 ff6f 	bl	800bf10 <_calloc_r>
 800b032:	69e3      	ldr	r3, [r4, #28]
 800b034:	60f0      	str	r0, [r6, #12]
 800b036:	68db      	ldr	r3, [r3, #12]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d1e4      	bne.n	800b006 <_Balloc+0x2e>
 800b03c:	2000      	movs	r0, #0
 800b03e:	bd70      	pop	{r4, r5, r6, pc}
 800b040:	6802      	ldr	r2, [r0, #0]
 800b042:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b046:	2300      	movs	r3, #0
 800b048:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b04c:	e7f7      	b.n	800b03e <_Balloc+0x66>
 800b04e:	bf00      	nop
 800b050:	0800c375 	.word	0x0800c375
 800b054:	0800c3f5 	.word	0x0800c3f5

0800b058 <_Bfree>:
 800b058:	b570      	push	{r4, r5, r6, lr}
 800b05a:	69c6      	ldr	r6, [r0, #28]
 800b05c:	4605      	mov	r5, r0
 800b05e:	460c      	mov	r4, r1
 800b060:	b976      	cbnz	r6, 800b080 <_Bfree+0x28>
 800b062:	2010      	movs	r0, #16
 800b064:	f7ff ff02 	bl	800ae6c <malloc>
 800b068:	4602      	mov	r2, r0
 800b06a:	61e8      	str	r0, [r5, #28]
 800b06c:	b920      	cbnz	r0, 800b078 <_Bfree+0x20>
 800b06e:	4b09      	ldr	r3, [pc, #36]	@ (800b094 <_Bfree+0x3c>)
 800b070:	4809      	ldr	r0, [pc, #36]	@ (800b098 <_Bfree+0x40>)
 800b072:	218f      	movs	r1, #143	@ 0x8f
 800b074:	f000 ff2e 	bl	800bed4 <__assert_func>
 800b078:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b07c:	6006      	str	r6, [r0, #0]
 800b07e:	60c6      	str	r6, [r0, #12]
 800b080:	b13c      	cbz	r4, 800b092 <_Bfree+0x3a>
 800b082:	69eb      	ldr	r3, [r5, #28]
 800b084:	6862      	ldr	r2, [r4, #4]
 800b086:	68db      	ldr	r3, [r3, #12]
 800b088:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b08c:	6021      	str	r1, [r4, #0]
 800b08e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b092:	bd70      	pop	{r4, r5, r6, pc}
 800b094:	0800c375 	.word	0x0800c375
 800b098:	0800c3f5 	.word	0x0800c3f5

0800b09c <__multadd>:
 800b09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0a0:	690d      	ldr	r5, [r1, #16]
 800b0a2:	4607      	mov	r7, r0
 800b0a4:	460c      	mov	r4, r1
 800b0a6:	461e      	mov	r6, r3
 800b0a8:	f101 0c14 	add.w	ip, r1, #20
 800b0ac:	2000      	movs	r0, #0
 800b0ae:	f8dc 3000 	ldr.w	r3, [ip]
 800b0b2:	b299      	uxth	r1, r3
 800b0b4:	fb02 6101 	mla	r1, r2, r1, r6
 800b0b8:	0c1e      	lsrs	r6, r3, #16
 800b0ba:	0c0b      	lsrs	r3, r1, #16
 800b0bc:	fb02 3306 	mla	r3, r2, r6, r3
 800b0c0:	b289      	uxth	r1, r1
 800b0c2:	3001      	adds	r0, #1
 800b0c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b0c8:	4285      	cmp	r5, r0
 800b0ca:	f84c 1b04 	str.w	r1, [ip], #4
 800b0ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b0d2:	dcec      	bgt.n	800b0ae <__multadd+0x12>
 800b0d4:	b30e      	cbz	r6, 800b11a <__multadd+0x7e>
 800b0d6:	68a3      	ldr	r3, [r4, #8]
 800b0d8:	42ab      	cmp	r3, r5
 800b0da:	dc19      	bgt.n	800b110 <__multadd+0x74>
 800b0dc:	6861      	ldr	r1, [r4, #4]
 800b0de:	4638      	mov	r0, r7
 800b0e0:	3101      	adds	r1, #1
 800b0e2:	f7ff ff79 	bl	800afd8 <_Balloc>
 800b0e6:	4680      	mov	r8, r0
 800b0e8:	b928      	cbnz	r0, 800b0f6 <__multadd+0x5a>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	4b0c      	ldr	r3, [pc, #48]	@ (800b120 <__multadd+0x84>)
 800b0ee:	480d      	ldr	r0, [pc, #52]	@ (800b124 <__multadd+0x88>)
 800b0f0:	21ba      	movs	r1, #186	@ 0xba
 800b0f2:	f000 feef 	bl	800bed4 <__assert_func>
 800b0f6:	6922      	ldr	r2, [r4, #16]
 800b0f8:	3202      	adds	r2, #2
 800b0fa:	f104 010c 	add.w	r1, r4, #12
 800b0fe:	0092      	lsls	r2, r2, #2
 800b100:	300c      	adds	r0, #12
 800b102:	f7ff f802 	bl	800a10a <memcpy>
 800b106:	4621      	mov	r1, r4
 800b108:	4638      	mov	r0, r7
 800b10a:	f7ff ffa5 	bl	800b058 <_Bfree>
 800b10e:	4644      	mov	r4, r8
 800b110:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b114:	3501      	adds	r5, #1
 800b116:	615e      	str	r6, [r3, #20]
 800b118:	6125      	str	r5, [r4, #16]
 800b11a:	4620      	mov	r0, r4
 800b11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b120:	0800c3e4 	.word	0x0800c3e4
 800b124:	0800c3f5 	.word	0x0800c3f5

0800b128 <__hi0bits>:
 800b128:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b12c:	4603      	mov	r3, r0
 800b12e:	bf36      	itet	cc
 800b130:	0403      	lslcc	r3, r0, #16
 800b132:	2000      	movcs	r0, #0
 800b134:	2010      	movcc	r0, #16
 800b136:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b13a:	bf3c      	itt	cc
 800b13c:	021b      	lslcc	r3, r3, #8
 800b13e:	3008      	addcc	r0, #8
 800b140:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b144:	bf3c      	itt	cc
 800b146:	011b      	lslcc	r3, r3, #4
 800b148:	3004      	addcc	r0, #4
 800b14a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b14e:	bf3c      	itt	cc
 800b150:	009b      	lslcc	r3, r3, #2
 800b152:	3002      	addcc	r0, #2
 800b154:	2b00      	cmp	r3, #0
 800b156:	db05      	blt.n	800b164 <__hi0bits+0x3c>
 800b158:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b15c:	f100 0001 	add.w	r0, r0, #1
 800b160:	bf08      	it	eq
 800b162:	2020      	moveq	r0, #32
 800b164:	4770      	bx	lr

0800b166 <__lo0bits>:
 800b166:	6803      	ldr	r3, [r0, #0]
 800b168:	4602      	mov	r2, r0
 800b16a:	f013 0007 	ands.w	r0, r3, #7
 800b16e:	d00b      	beq.n	800b188 <__lo0bits+0x22>
 800b170:	07d9      	lsls	r1, r3, #31
 800b172:	d421      	bmi.n	800b1b8 <__lo0bits+0x52>
 800b174:	0798      	lsls	r0, r3, #30
 800b176:	bf49      	itett	mi
 800b178:	085b      	lsrmi	r3, r3, #1
 800b17a:	089b      	lsrpl	r3, r3, #2
 800b17c:	2001      	movmi	r0, #1
 800b17e:	6013      	strmi	r3, [r2, #0]
 800b180:	bf5c      	itt	pl
 800b182:	6013      	strpl	r3, [r2, #0]
 800b184:	2002      	movpl	r0, #2
 800b186:	4770      	bx	lr
 800b188:	b299      	uxth	r1, r3
 800b18a:	b909      	cbnz	r1, 800b190 <__lo0bits+0x2a>
 800b18c:	0c1b      	lsrs	r3, r3, #16
 800b18e:	2010      	movs	r0, #16
 800b190:	b2d9      	uxtb	r1, r3
 800b192:	b909      	cbnz	r1, 800b198 <__lo0bits+0x32>
 800b194:	3008      	adds	r0, #8
 800b196:	0a1b      	lsrs	r3, r3, #8
 800b198:	0719      	lsls	r1, r3, #28
 800b19a:	bf04      	itt	eq
 800b19c:	091b      	lsreq	r3, r3, #4
 800b19e:	3004      	addeq	r0, #4
 800b1a0:	0799      	lsls	r1, r3, #30
 800b1a2:	bf04      	itt	eq
 800b1a4:	089b      	lsreq	r3, r3, #2
 800b1a6:	3002      	addeq	r0, #2
 800b1a8:	07d9      	lsls	r1, r3, #31
 800b1aa:	d403      	bmi.n	800b1b4 <__lo0bits+0x4e>
 800b1ac:	085b      	lsrs	r3, r3, #1
 800b1ae:	f100 0001 	add.w	r0, r0, #1
 800b1b2:	d003      	beq.n	800b1bc <__lo0bits+0x56>
 800b1b4:	6013      	str	r3, [r2, #0]
 800b1b6:	4770      	bx	lr
 800b1b8:	2000      	movs	r0, #0
 800b1ba:	4770      	bx	lr
 800b1bc:	2020      	movs	r0, #32
 800b1be:	4770      	bx	lr

0800b1c0 <__i2b>:
 800b1c0:	b510      	push	{r4, lr}
 800b1c2:	460c      	mov	r4, r1
 800b1c4:	2101      	movs	r1, #1
 800b1c6:	f7ff ff07 	bl	800afd8 <_Balloc>
 800b1ca:	4602      	mov	r2, r0
 800b1cc:	b928      	cbnz	r0, 800b1da <__i2b+0x1a>
 800b1ce:	4b05      	ldr	r3, [pc, #20]	@ (800b1e4 <__i2b+0x24>)
 800b1d0:	4805      	ldr	r0, [pc, #20]	@ (800b1e8 <__i2b+0x28>)
 800b1d2:	f240 1145 	movw	r1, #325	@ 0x145
 800b1d6:	f000 fe7d 	bl	800bed4 <__assert_func>
 800b1da:	2301      	movs	r3, #1
 800b1dc:	6144      	str	r4, [r0, #20]
 800b1de:	6103      	str	r3, [r0, #16]
 800b1e0:	bd10      	pop	{r4, pc}
 800b1e2:	bf00      	nop
 800b1e4:	0800c3e4 	.word	0x0800c3e4
 800b1e8:	0800c3f5 	.word	0x0800c3f5

0800b1ec <__multiply>:
 800b1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1f0:	4617      	mov	r7, r2
 800b1f2:	690a      	ldr	r2, [r1, #16]
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	bfa8      	it	ge
 800b1fa:	463b      	movge	r3, r7
 800b1fc:	4689      	mov	r9, r1
 800b1fe:	bfa4      	itt	ge
 800b200:	460f      	movge	r7, r1
 800b202:	4699      	movge	r9, r3
 800b204:	693d      	ldr	r5, [r7, #16]
 800b206:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	6879      	ldr	r1, [r7, #4]
 800b20e:	eb05 060a 	add.w	r6, r5, sl
 800b212:	42b3      	cmp	r3, r6
 800b214:	b085      	sub	sp, #20
 800b216:	bfb8      	it	lt
 800b218:	3101      	addlt	r1, #1
 800b21a:	f7ff fedd 	bl	800afd8 <_Balloc>
 800b21e:	b930      	cbnz	r0, 800b22e <__multiply+0x42>
 800b220:	4602      	mov	r2, r0
 800b222:	4b41      	ldr	r3, [pc, #260]	@ (800b328 <__multiply+0x13c>)
 800b224:	4841      	ldr	r0, [pc, #260]	@ (800b32c <__multiply+0x140>)
 800b226:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b22a:	f000 fe53 	bl	800bed4 <__assert_func>
 800b22e:	f100 0414 	add.w	r4, r0, #20
 800b232:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b236:	4623      	mov	r3, r4
 800b238:	2200      	movs	r2, #0
 800b23a:	4573      	cmp	r3, lr
 800b23c:	d320      	bcc.n	800b280 <__multiply+0x94>
 800b23e:	f107 0814 	add.w	r8, r7, #20
 800b242:	f109 0114 	add.w	r1, r9, #20
 800b246:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b24a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b24e:	9302      	str	r3, [sp, #8]
 800b250:	1beb      	subs	r3, r5, r7
 800b252:	3b15      	subs	r3, #21
 800b254:	f023 0303 	bic.w	r3, r3, #3
 800b258:	3304      	adds	r3, #4
 800b25a:	3715      	adds	r7, #21
 800b25c:	42bd      	cmp	r5, r7
 800b25e:	bf38      	it	cc
 800b260:	2304      	movcc	r3, #4
 800b262:	9301      	str	r3, [sp, #4]
 800b264:	9b02      	ldr	r3, [sp, #8]
 800b266:	9103      	str	r1, [sp, #12]
 800b268:	428b      	cmp	r3, r1
 800b26a:	d80c      	bhi.n	800b286 <__multiply+0x9a>
 800b26c:	2e00      	cmp	r6, #0
 800b26e:	dd03      	ble.n	800b278 <__multiply+0x8c>
 800b270:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b274:	2b00      	cmp	r3, #0
 800b276:	d055      	beq.n	800b324 <__multiply+0x138>
 800b278:	6106      	str	r6, [r0, #16]
 800b27a:	b005      	add	sp, #20
 800b27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b280:	f843 2b04 	str.w	r2, [r3], #4
 800b284:	e7d9      	b.n	800b23a <__multiply+0x4e>
 800b286:	f8b1 a000 	ldrh.w	sl, [r1]
 800b28a:	f1ba 0f00 	cmp.w	sl, #0
 800b28e:	d01f      	beq.n	800b2d0 <__multiply+0xe4>
 800b290:	46c4      	mov	ip, r8
 800b292:	46a1      	mov	r9, r4
 800b294:	2700      	movs	r7, #0
 800b296:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b29a:	f8d9 3000 	ldr.w	r3, [r9]
 800b29e:	fa1f fb82 	uxth.w	fp, r2
 800b2a2:	b29b      	uxth	r3, r3
 800b2a4:	fb0a 330b 	mla	r3, sl, fp, r3
 800b2a8:	443b      	add	r3, r7
 800b2aa:	f8d9 7000 	ldr.w	r7, [r9]
 800b2ae:	0c12      	lsrs	r2, r2, #16
 800b2b0:	0c3f      	lsrs	r7, r7, #16
 800b2b2:	fb0a 7202 	mla	r2, sl, r2, r7
 800b2b6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b2c0:	4565      	cmp	r5, ip
 800b2c2:	f849 3b04 	str.w	r3, [r9], #4
 800b2c6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b2ca:	d8e4      	bhi.n	800b296 <__multiply+0xaa>
 800b2cc:	9b01      	ldr	r3, [sp, #4]
 800b2ce:	50e7      	str	r7, [r4, r3]
 800b2d0:	9b03      	ldr	r3, [sp, #12]
 800b2d2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b2d6:	3104      	adds	r1, #4
 800b2d8:	f1b9 0f00 	cmp.w	r9, #0
 800b2dc:	d020      	beq.n	800b320 <__multiply+0x134>
 800b2de:	6823      	ldr	r3, [r4, #0]
 800b2e0:	4647      	mov	r7, r8
 800b2e2:	46a4      	mov	ip, r4
 800b2e4:	f04f 0a00 	mov.w	sl, #0
 800b2e8:	f8b7 b000 	ldrh.w	fp, [r7]
 800b2ec:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b2f0:	fb09 220b 	mla	r2, r9, fp, r2
 800b2f4:	4452      	add	r2, sl
 800b2f6:	b29b      	uxth	r3, r3
 800b2f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b2fc:	f84c 3b04 	str.w	r3, [ip], #4
 800b300:	f857 3b04 	ldr.w	r3, [r7], #4
 800b304:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b308:	f8bc 3000 	ldrh.w	r3, [ip]
 800b30c:	fb09 330a 	mla	r3, r9, sl, r3
 800b310:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b314:	42bd      	cmp	r5, r7
 800b316:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b31a:	d8e5      	bhi.n	800b2e8 <__multiply+0xfc>
 800b31c:	9a01      	ldr	r2, [sp, #4]
 800b31e:	50a3      	str	r3, [r4, r2]
 800b320:	3404      	adds	r4, #4
 800b322:	e79f      	b.n	800b264 <__multiply+0x78>
 800b324:	3e01      	subs	r6, #1
 800b326:	e7a1      	b.n	800b26c <__multiply+0x80>
 800b328:	0800c3e4 	.word	0x0800c3e4
 800b32c:	0800c3f5 	.word	0x0800c3f5

0800b330 <__pow5mult>:
 800b330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b334:	4615      	mov	r5, r2
 800b336:	f012 0203 	ands.w	r2, r2, #3
 800b33a:	4607      	mov	r7, r0
 800b33c:	460e      	mov	r6, r1
 800b33e:	d007      	beq.n	800b350 <__pow5mult+0x20>
 800b340:	4c25      	ldr	r4, [pc, #148]	@ (800b3d8 <__pow5mult+0xa8>)
 800b342:	3a01      	subs	r2, #1
 800b344:	2300      	movs	r3, #0
 800b346:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b34a:	f7ff fea7 	bl	800b09c <__multadd>
 800b34e:	4606      	mov	r6, r0
 800b350:	10ad      	asrs	r5, r5, #2
 800b352:	d03d      	beq.n	800b3d0 <__pow5mult+0xa0>
 800b354:	69fc      	ldr	r4, [r7, #28]
 800b356:	b97c      	cbnz	r4, 800b378 <__pow5mult+0x48>
 800b358:	2010      	movs	r0, #16
 800b35a:	f7ff fd87 	bl	800ae6c <malloc>
 800b35e:	4602      	mov	r2, r0
 800b360:	61f8      	str	r0, [r7, #28]
 800b362:	b928      	cbnz	r0, 800b370 <__pow5mult+0x40>
 800b364:	4b1d      	ldr	r3, [pc, #116]	@ (800b3dc <__pow5mult+0xac>)
 800b366:	481e      	ldr	r0, [pc, #120]	@ (800b3e0 <__pow5mult+0xb0>)
 800b368:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b36c:	f000 fdb2 	bl	800bed4 <__assert_func>
 800b370:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b374:	6004      	str	r4, [r0, #0]
 800b376:	60c4      	str	r4, [r0, #12]
 800b378:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b37c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b380:	b94c      	cbnz	r4, 800b396 <__pow5mult+0x66>
 800b382:	f240 2171 	movw	r1, #625	@ 0x271
 800b386:	4638      	mov	r0, r7
 800b388:	f7ff ff1a 	bl	800b1c0 <__i2b>
 800b38c:	2300      	movs	r3, #0
 800b38e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b392:	4604      	mov	r4, r0
 800b394:	6003      	str	r3, [r0, #0]
 800b396:	f04f 0900 	mov.w	r9, #0
 800b39a:	07eb      	lsls	r3, r5, #31
 800b39c:	d50a      	bpl.n	800b3b4 <__pow5mult+0x84>
 800b39e:	4631      	mov	r1, r6
 800b3a0:	4622      	mov	r2, r4
 800b3a2:	4638      	mov	r0, r7
 800b3a4:	f7ff ff22 	bl	800b1ec <__multiply>
 800b3a8:	4631      	mov	r1, r6
 800b3aa:	4680      	mov	r8, r0
 800b3ac:	4638      	mov	r0, r7
 800b3ae:	f7ff fe53 	bl	800b058 <_Bfree>
 800b3b2:	4646      	mov	r6, r8
 800b3b4:	106d      	asrs	r5, r5, #1
 800b3b6:	d00b      	beq.n	800b3d0 <__pow5mult+0xa0>
 800b3b8:	6820      	ldr	r0, [r4, #0]
 800b3ba:	b938      	cbnz	r0, 800b3cc <__pow5mult+0x9c>
 800b3bc:	4622      	mov	r2, r4
 800b3be:	4621      	mov	r1, r4
 800b3c0:	4638      	mov	r0, r7
 800b3c2:	f7ff ff13 	bl	800b1ec <__multiply>
 800b3c6:	6020      	str	r0, [r4, #0]
 800b3c8:	f8c0 9000 	str.w	r9, [r0]
 800b3cc:	4604      	mov	r4, r0
 800b3ce:	e7e4      	b.n	800b39a <__pow5mult+0x6a>
 800b3d0:	4630      	mov	r0, r6
 800b3d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3d6:	bf00      	nop
 800b3d8:	0800c4a8 	.word	0x0800c4a8
 800b3dc:	0800c375 	.word	0x0800c375
 800b3e0:	0800c3f5 	.word	0x0800c3f5

0800b3e4 <__lshift>:
 800b3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3e8:	460c      	mov	r4, r1
 800b3ea:	6849      	ldr	r1, [r1, #4]
 800b3ec:	6923      	ldr	r3, [r4, #16]
 800b3ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b3f2:	68a3      	ldr	r3, [r4, #8]
 800b3f4:	4607      	mov	r7, r0
 800b3f6:	4691      	mov	r9, r2
 800b3f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b3fc:	f108 0601 	add.w	r6, r8, #1
 800b400:	42b3      	cmp	r3, r6
 800b402:	db0b      	blt.n	800b41c <__lshift+0x38>
 800b404:	4638      	mov	r0, r7
 800b406:	f7ff fde7 	bl	800afd8 <_Balloc>
 800b40a:	4605      	mov	r5, r0
 800b40c:	b948      	cbnz	r0, 800b422 <__lshift+0x3e>
 800b40e:	4602      	mov	r2, r0
 800b410:	4b28      	ldr	r3, [pc, #160]	@ (800b4b4 <__lshift+0xd0>)
 800b412:	4829      	ldr	r0, [pc, #164]	@ (800b4b8 <__lshift+0xd4>)
 800b414:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b418:	f000 fd5c 	bl	800bed4 <__assert_func>
 800b41c:	3101      	adds	r1, #1
 800b41e:	005b      	lsls	r3, r3, #1
 800b420:	e7ee      	b.n	800b400 <__lshift+0x1c>
 800b422:	2300      	movs	r3, #0
 800b424:	f100 0114 	add.w	r1, r0, #20
 800b428:	f100 0210 	add.w	r2, r0, #16
 800b42c:	4618      	mov	r0, r3
 800b42e:	4553      	cmp	r3, sl
 800b430:	db33      	blt.n	800b49a <__lshift+0xb6>
 800b432:	6920      	ldr	r0, [r4, #16]
 800b434:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b438:	f104 0314 	add.w	r3, r4, #20
 800b43c:	f019 091f 	ands.w	r9, r9, #31
 800b440:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b444:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b448:	d02b      	beq.n	800b4a2 <__lshift+0xbe>
 800b44a:	f1c9 0e20 	rsb	lr, r9, #32
 800b44e:	468a      	mov	sl, r1
 800b450:	2200      	movs	r2, #0
 800b452:	6818      	ldr	r0, [r3, #0]
 800b454:	fa00 f009 	lsl.w	r0, r0, r9
 800b458:	4310      	orrs	r0, r2
 800b45a:	f84a 0b04 	str.w	r0, [sl], #4
 800b45e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b462:	459c      	cmp	ip, r3
 800b464:	fa22 f20e 	lsr.w	r2, r2, lr
 800b468:	d8f3      	bhi.n	800b452 <__lshift+0x6e>
 800b46a:	ebac 0304 	sub.w	r3, ip, r4
 800b46e:	3b15      	subs	r3, #21
 800b470:	f023 0303 	bic.w	r3, r3, #3
 800b474:	3304      	adds	r3, #4
 800b476:	f104 0015 	add.w	r0, r4, #21
 800b47a:	4560      	cmp	r0, ip
 800b47c:	bf88      	it	hi
 800b47e:	2304      	movhi	r3, #4
 800b480:	50ca      	str	r2, [r1, r3]
 800b482:	b10a      	cbz	r2, 800b488 <__lshift+0xa4>
 800b484:	f108 0602 	add.w	r6, r8, #2
 800b488:	3e01      	subs	r6, #1
 800b48a:	4638      	mov	r0, r7
 800b48c:	612e      	str	r6, [r5, #16]
 800b48e:	4621      	mov	r1, r4
 800b490:	f7ff fde2 	bl	800b058 <_Bfree>
 800b494:	4628      	mov	r0, r5
 800b496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b49a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b49e:	3301      	adds	r3, #1
 800b4a0:	e7c5      	b.n	800b42e <__lshift+0x4a>
 800b4a2:	3904      	subs	r1, #4
 800b4a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4a8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b4ac:	459c      	cmp	ip, r3
 800b4ae:	d8f9      	bhi.n	800b4a4 <__lshift+0xc0>
 800b4b0:	e7ea      	b.n	800b488 <__lshift+0xa4>
 800b4b2:	bf00      	nop
 800b4b4:	0800c3e4 	.word	0x0800c3e4
 800b4b8:	0800c3f5 	.word	0x0800c3f5

0800b4bc <__mcmp>:
 800b4bc:	690a      	ldr	r2, [r1, #16]
 800b4be:	4603      	mov	r3, r0
 800b4c0:	6900      	ldr	r0, [r0, #16]
 800b4c2:	1a80      	subs	r0, r0, r2
 800b4c4:	b530      	push	{r4, r5, lr}
 800b4c6:	d10e      	bne.n	800b4e6 <__mcmp+0x2a>
 800b4c8:	3314      	adds	r3, #20
 800b4ca:	3114      	adds	r1, #20
 800b4cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b4d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b4d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b4d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b4dc:	4295      	cmp	r5, r2
 800b4de:	d003      	beq.n	800b4e8 <__mcmp+0x2c>
 800b4e0:	d205      	bcs.n	800b4ee <__mcmp+0x32>
 800b4e2:	f04f 30ff 	mov.w	r0, #4294967295
 800b4e6:	bd30      	pop	{r4, r5, pc}
 800b4e8:	42a3      	cmp	r3, r4
 800b4ea:	d3f3      	bcc.n	800b4d4 <__mcmp+0x18>
 800b4ec:	e7fb      	b.n	800b4e6 <__mcmp+0x2a>
 800b4ee:	2001      	movs	r0, #1
 800b4f0:	e7f9      	b.n	800b4e6 <__mcmp+0x2a>
	...

0800b4f4 <__mdiff>:
 800b4f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4f8:	4689      	mov	r9, r1
 800b4fa:	4606      	mov	r6, r0
 800b4fc:	4611      	mov	r1, r2
 800b4fe:	4648      	mov	r0, r9
 800b500:	4614      	mov	r4, r2
 800b502:	f7ff ffdb 	bl	800b4bc <__mcmp>
 800b506:	1e05      	subs	r5, r0, #0
 800b508:	d112      	bne.n	800b530 <__mdiff+0x3c>
 800b50a:	4629      	mov	r1, r5
 800b50c:	4630      	mov	r0, r6
 800b50e:	f7ff fd63 	bl	800afd8 <_Balloc>
 800b512:	4602      	mov	r2, r0
 800b514:	b928      	cbnz	r0, 800b522 <__mdiff+0x2e>
 800b516:	4b3f      	ldr	r3, [pc, #252]	@ (800b614 <__mdiff+0x120>)
 800b518:	f240 2137 	movw	r1, #567	@ 0x237
 800b51c:	483e      	ldr	r0, [pc, #248]	@ (800b618 <__mdiff+0x124>)
 800b51e:	f000 fcd9 	bl	800bed4 <__assert_func>
 800b522:	2301      	movs	r3, #1
 800b524:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b528:	4610      	mov	r0, r2
 800b52a:	b003      	add	sp, #12
 800b52c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b530:	bfbc      	itt	lt
 800b532:	464b      	movlt	r3, r9
 800b534:	46a1      	movlt	r9, r4
 800b536:	4630      	mov	r0, r6
 800b538:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b53c:	bfba      	itte	lt
 800b53e:	461c      	movlt	r4, r3
 800b540:	2501      	movlt	r5, #1
 800b542:	2500      	movge	r5, #0
 800b544:	f7ff fd48 	bl	800afd8 <_Balloc>
 800b548:	4602      	mov	r2, r0
 800b54a:	b918      	cbnz	r0, 800b554 <__mdiff+0x60>
 800b54c:	4b31      	ldr	r3, [pc, #196]	@ (800b614 <__mdiff+0x120>)
 800b54e:	f240 2145 	movw	r1, #581	@ 0x245
 800b552:	e7e3      	b.n	800b51c <__mdiff+0x28>
 800b554:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b558:	6926      	ldr	r6, [r4, #16]
 800b55a:	60c5      	str	r5, [r0, #12]
 800b55c:	f109 0310 	add.w	r3, r9, #16
 800b560:	f109 0514 	add.w	r5, r9, #20
 800b564:	f104 0e14 	add.w	lr, r4, #20
 800b568:	f100 0b14 	add.w	fp, r0, #20
 800b56c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b570:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b574:	9301      	str	r3, [sp, #4]
 800b576:	46d9      	mov	r9, fp
 800b578:	f04f 0c00 	mov.w	ip, #0
 800b57c:	9b01      	ldr	r3, [sp, #4]
 800b57e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b582:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b586:	9301      	str	r3, [sp, #4]
 800b588:	fa1f f38a 	uxth.w	r3, sl
 800b58c:	4619      	mov	r1, r3
 800b58e:	b283      	uxth	r3, r0
 800b590:	1acb      	subs	r3, r1, r3
 800b592:	0c00      	lsrs	r0, r0, #16
 800b594:	4463      	add	r3, ip
 800b596:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b59a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b59e:	b29b      	uxth	r3, r3
 800b5a0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b5a4:	4576      	cmp	r6, lr
 800b5a6:	f849 3b04 	str.w	r3, [r9], #4
 800b5aa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b5ae:	d8e5      	bhi.n	800b57c <__mdiff+0x88>
 800b5b0:	1b33      	subs	r3, r6, r4
 800b5b2:	3b15      	subs	r3, #21
 800b5b4:	f023 0303 	bic.w	r3, r3, #3
 800b5b8:	3415      	adds	r4, #21
 800b5ba:	3304      	adds	r3, #4
 800b5bc:	42a6      	cmp	r6, r4
 800b5be:	bf38      	it	cc
 800b5c0:	2304      	movcc	r3, #4
 800b5c2:	441d      	add	r5, r3
 800b5c4:	445b      	add	r3, fp
 800b5c6:	461e      	mov	r6, r3
 800b5c8:	462c      	mov	r4, r5
 800b5ca:	4544      	cmp	r4, r8
 800b5cc:	d30e      	bcc.n	800b5ec <__mdiff+0xf8>
 800b5ce:	f108 0103 	add.w	r1, r8, #3
 800b5d2:	1b49      	subs	r1, r1, r5
 800b5d4:	f021 0103 	bic.w	r1, r1, #3
 800b5d8:	3d03      	subs	r5, #3
 800b5da:	45a8      	cmp	r8, r5
 800b5dc:	bf38      	it	cc
 800b5de:	2100      	movcc	r1, #0
 800b5e0:	440b      	add	r3, r1
 800b5e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b5e6:	b191      	cbz	r1, 800b60e <__mdiff+0x11a>
 800b5e8:	6117      	str	r7, [r2, #16]
 800b5ea:	e79d      	b.n	800b528 <__mdiff+0x34>
 800b5ec:	f854 1b04 	ldr.w	r1, [r4], #4
 800b5f0:	46e6      	mov	lr, ip
 800b5f2:	0c08      	lsrs	r0, r1, #16
 800b5f4:	fa1c fc81 	uxtah	ip, ip, r1
 800b5f8:	4471      	add	r1, lr
 800b5fa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b5fe:	b289      	uxth	r1, r1
 800b600:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b604:	f846 1b04 	str.w	r1, [r6], #4
 800b608:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b60c:	e7dd      	b.n	800b5ca <__mdiff+0xd6>
 800b60e:	3f01      	subs	r7, #1
 800b610:	e7e7      	b.n	800b5e2 <__mdiff+0xee>
 800b612:	bf00      	nop
 800b614:	0800c3e4 	.word	0x0800c3e4
 800b618:	0800c3f5 	.word	0x0800c3f5

0800b61c <__d2b>:
 800b61c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b620:	460f      	mov	r7, r1
 800b622:	2101      	movs	r1, #1
 800b624:	ec59 8b10 	vmov	r8, r9, d0
 800b628:	4616      	mov	r6, r2
 800b62a:	f7ff fcd5 	bl	800afd8 <_Balloc>
 800b62e:	4604      	mov	r4, r0
 800b630:	b930      	cbnz	r0, 800b640 <__d2b+0x24>
 800b632:	4602      	mov	r2, r0
 800b634:	4b23      	ldr	r3, [pc, #140]	@ (800b6c4 <__d2b+0xa8>)
 800b636:	4824      	ldr	r0, [pc, #144]	@ (800b6c8 <__d2b+0xac>)
 800b638:	f240 310f 	movw	r1, #783	@ 0x30f
 800b63c:	f000 fc4a 	bl	800bed4 <__assert_func>
 800b640:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b644:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b648:	b10d      	cbz	r5, 800b64e <__d2b+0x32>
 800b64a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b64e:	9301      	str	r3, [sp, #4]
 800b650:	f1b8 0300 	subs.w	r3, r8, #0
 800b654:	d023      	beq.n	800b69e <__d2b+0x82>
 800b656:	4668      	mov	r0, sp
 800b658:	9300      	str	r3, [sp, #0]
 800b65a:	f7ff fd84 	bl	800b166 <__lo0bits>
 800b65e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b662:	b1d0      	cbz	r0, 800b69a <__d2b+0x7e>
 800b664:	f1c0 0320 	rsb	r3, r0, #32
 800b668:	fa02 f303 	lsl.w	r3, r2, r3
 800b66c:	430b      	orrs	r3, r1
 800b66e:	40c2      	lsrs	r2, r0
 800b670:	6163      	str	r3, [r4, #20]
 800b672:	9201      	str	r2, [sp, #4]
 800b674:	9b01      	ldr	r3, [sp, #4]
 800b676:	61a3      	str	r3, [r4, #24]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	bf0c      	ite	eq
 800b67c:	2201      	moveq	r2, #1
 800b67e:	2202      	movne	r2, #2
 800b680:	6122      	str	r2, [r4, #16]
 800b682:	b1a5      	cbz	r5, 800b6ae <__d2b+0x92>
 800b684:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b688:	4405      	add	r5, r0
 800b68a:	603d      	str	r5, [r7, #0]
 800b68c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b690:	6030      	str	r0, [r6, #0]
 800b692:	4620      	mov	r0, r4
 800b694:	b003      	add	sp, #12
 800b696:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b69a:	6161      	str	r1, [r4, #20]
 800b69c:	e7ea      	b.n	800b674 <__d2b+0x58>
 800b69e:	a801      	add	r0, sp, #4
 800b6a0:	f7ff fd61 	bl	800b166 <__lo0bits>
 800b6a4:	9b01      	ldr	r3, [sp, #4]
 800b6a6:	6163      	str	r3, [r4, #20]
 800b6a8:	3020      	adds	r0, #32
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	e7e8      	b.n	800b680 <__d2b+0x64>
 800b6ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b6b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b6b6:	6038      	str	r0, [r7, #0]
 800b6b8:	6918      	ldr	r0, [r3, #16]
 800b6ba:	f7ff fd35 	bl	800b128 <__hi0bits>
 800b6be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b6c2:	e7e5      	b.n	800b690 <__d2b+0x74>
 800b6c4:	0800c3e4 	.word	0x0800c3e4
 800b6c8:	0800c3f5 	.word	0x0800c3f5

0800b6cc <__ssputs_r>:
 800b6cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6d0:	688e      	ldr	r6, [r1, #8]
 800b6d2:	461f      	mov	r7, r3
 800b6d4:	42be      	cmp	r6, r7
 800b6d6:	680b      	ldr	r3, [r1, #0]
 800b6d8:	4682      	mov	sl, r0
 800b6da:	460c      	mov	r4, r1
 800b6dc:	4690      	mov	r8, r2
 800b6de:	d82d      	bhi.n	800b73c <__ssputs_r+0x70>
 800b6e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b6e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b6e8:	d026      	beq.n	800b738 <__ssputs_r+0x6c>
 800b6ea:	6965      	ldr	r5, [r4, #20]
 800b6ec:	6909      	ldr	r1, [r1, #16]
 800b6ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b6f2:	eba3 0901 	sub.w	r9, r3, r1
 800b6f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b6fa:	1c7b      	adds	r3, r7, #1
 800b6fc:	444b      	add	r3, r9
 800b6fe:	106d      	asrs	r5, r5, #1
 800b700:	429d      	cmp	r5, r3
 800b702:	bf38      	it	cc
 800b704:	461d      	movcc	r5, r3
 800b706:	0553      	lsls	r3, r2, #21
 800b708:	d527      	bpl.n	800b75a <__ssputs_r+0x8e>
 800b70a:	4629      	mov	r1, r5
 800b70c:	f7ff fbd8 	bl	800aec0 <_malloc_r>
 800b710:	4606      	mov	r6, r0
 800b712:	b360      	cbz	r0, 800b76e <__ssputs_r+0xa2>
 800b714:	6921      	ldr	r1, [r4, #16]
 800b716:	464a      	mov	r2, r9
 800b718:	f7fe fcf7 	bl	800a10a <memcpy>
 800b71c:	89a3      	ldrh	r3, [r4, #12]
 800b71e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b726:	81a3      	strh	r3, [r4, #12]
 800b728:	6126      	str	r6, [r4, #16]
 800b72a:	6165      	str	r5, [r4, #20]
 800b72c:	444e      	add	r6, r9
 800b72e:	eba5 0509 	sub.w	r5, r5, r9
 800b732:	6026      	str	r6, [r4, #0]
 800b734:	60a5      	str	r5, [r4, #8]
 800b736:	463e      	mov	r6, r7
 800b738:	42be      	cmp	r6, r7
 800b73a:	d900      	bls.n	800b73e <__ssputs_r+0x72>
 800b73c:	463e      	mov	r6, r7
 800b73e:	6820      	ldr	r0, [r4, #0]
 800b740:	4632      	mov	r2, r6
 800b742:	4641      	mov	r1, r8
 800b744:	f000 fb9c 	bl	800be80 <memmove>
 800b748:	68a3      	ldr	r3, [r4, #8]
 800b74a:	1b9b      	subs	r3, r3, r6
 800b74c:	60a3      	str	r3, [r4, #8]
 800b74e:	6823      	ldr	r3, [r4, #0]
 800b750:	4433      	add	r3, r6
 800b752:	6023      	str	r3, [r4, #0]
 800b754:	2000      	movs	r0, #0
 800b756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b75a:	462a      	mov	r2, r5
 800b75c:	f000 fbfe 	bl	800bf5c <_realloc_r>
 800b760:	4606      	mov	r6, r0
 800b762:	2800      	cmp	r0, #0
 800b764:	d1e0      	bne.n	800b728 <__ssputs_r+0x5c>
 800b766:	6921      	ldr	r1, [r4, #16]
 800b768:	4650      	mov	r0, sl
 800b76a:	f7ff fb35 	bl	800add8 <_free_r>
 800b76e:	230c      	movs	r3, #12
 800b770:	f8ca 3000 	str.w	r3, [sl]
 800b774:	89a3      	ldrh	r3, [r4, #12]
 800b776:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b77a:	81a3      	strh	r3, [r4, #12]
 800b77c:	f04f 30ff 	mov.w	r0, #4294967295
 800b780:	e7e9      	b.n	800b756 <__ssputs_r+0x8a>
	...

0800b784 <_svfiprintf_r>:
 800b784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b788:	4698      	mov	r8, r3
 800b78a:	898b      	ldrh	r3, [r1, #12]
 800b78c:	061b      	lsls	r3, r3, #24
 800b78e:	b09d      	sub	sp, #116	@ 0x74
 800b790:	4607      	mov	r7, r0
 800b792:	460d      	mov	r5, r1
 800b794:	4614      	mov	r4, r2
 800b796:	d510      	bpl.n	800b7ba <_svfiprintf_r+0x36>
 800b798:	690b      	ldr	r3, [r1, #16]
 800b79a:	b973      	cbnz	r3, 800b7ba <_svfiprintf_r+0x36>
 800b79c:	2140      	movs	r1, #64	@ 0x40
 800b79e:	f7ff fb8f 	bl	800aec0 <_malloc_r>
 800b7a2:	6028      	str	r0, [r5, #0]
 800b7a4:	6128      	str	r0, [r5, #16]
 800b7a6:	b930      	cbnz	r0, 800b7b6 <_svfiprintf_r+0x32>
 800b7a8:	230c      	movs	r3, #12
 800b7aa:	603b      	str	r3, [r7, #0]
 800b7ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b7b0:	b01d      	add	sp, #116	@ 0x74
 800b7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7b6:	2340      	movs	r3, #64	@ 0x40
 800b7b8:	616b      	str	r3, [r5, #20]
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7be:	2320      	movs	r3, #32
 800b7c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b7c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7c8:	2330      	movs	r3, #48	@ 0x30
 800b7ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b968 <_svfiprintf_r+0x1e4>
 800b7ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b7d2:	f04f 0901 	mov.w	r9, #1
 800b7d6:	4623      	mov	r3, r4
 800b7d8:	469a      	mov	sl, r3
 800b7da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7de:	b10a      	cbz	r2, 800b7e4 <_svfiprintf_r+0x60>
 800b7e0:	2a25      	cmp	r2, #37	@ 0x25
 800b7e2:	d1f9      	bne.n	800b7d8 <_svfiprintf_r+0x54>
 800b7e4:	ebba 0b04 	subs.w	fp, sl, r4
 800b7e8:	d00b      	beq.n	800b802 <_svfiprintf_r+0x7e>
 800b7ea:	465b      	mov	r3, fp
 800b7ec:	4622      	mov	r2, r4
 800b7ee:	4629      	mov	r1, r5
 800b7f0:	4638      	mov	r0, r7
 800b7f2:	f7ff ff6b 	bl	800b6cc <__ssputs_r>
 800b7f6:	3001      	adds	r0, #1
 800b7f8:	f000 80a7 	beq.w	800b94a <_svfiprintf_r+0x1c6>
 800b7fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b7fe:	445a      	add	r2, fp
 800b800:	9209      	str	r2, [sp, #36]	@ 0x24
 800b802:	f89a 3000 	ldrb.w	r3, [sl]
 800b806:	2b00      	cmp	r3, #0
 800b808:	f000 809f 	beq.w	800b94a <_svfiprintf_r+0x1c6>
 800b80c:	2300      	movs	r3, #0
 800b80e:	f04f 32ff 	mov.w	r2, #4294967295
 800b812:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b816:	f10a 0a01 	add.w	sl, sl, #1
 800b81a:	9304      	str	r3, [sp, #16]
 800b81c:	9307      	str	r3, [sp, #28]
 800b81e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b822:	931a      	str	r3, [sp, #104]	@ 0x68
 800b824:	4654      	mov	r4, sl
 800b826:	2205      	movs	r2, #5
 800b828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b82c:	484e      	ldr	r0, [pc, #312]	@ (800b968 <_svfiprintf_r+0x1e4>)
 800b82e:	f7f4 fcd7 	bl	80001e0 <memchr>
 800b832:	9a04      	ldr	r2, [sp, #16]
 800b834:	b9d8      	cbnz	r0, 800b86e <_svfiprintf_r+0xea>
 800b836:	06d0      	lsls	r0, r2, #27
 800b838:	bf44      	itt	mi
 800b83a:	2320      	movmi	r3, #32
 800b83c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b840:	0711      	lsls	r1, r2, #28
 800b842:	bf44      	itt	mi
 800b844:	232b      	movmi	r3, #43	@ 0x2b
 800b846:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b84a:	f89a 3000 	ldrb.w	r3, [sl]
 800b84e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b850:	d015      	beq.n	800b87e <_svfiprintf_r+0xfa>
 800b852:	9a07      	ldr	r2, [sp, #28]
 800b854:	4654      	mov	r4, sl
 800b856:	2000      	movs	r0, #0
 800b858:	f04f 0c0a 	mov.w	ip, #10
 800b85c:	4621      	mov	r1, r4
 800b85e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b862:	3b30      	subs	r3, #48	@ 0x30
 800b864:	2b09      	cmp	r3, #9
 800b866:	d94b      	bls.n	800b900 <_svfiprintf_r+0x17c>
 800b868:	b1b0      	cbz	r0, 800b898 <_svfiprintf_r+0x114>
 800b86a:	9207      	str	r2, [sp, #28]
 800b86c:	e014      	b.n	800b898 <_svfiprintf_r+0x114>
 800b86e:	eba0 0308 	sub.w	r3, r0, r8
 800b872:	fa09 f303 	lsl.w	r3, r9, r3
 800b876:	4313      	orrs	r3, r2
 800b878:	9304      	str	r3, [sp, #16]
 800b87a:	46a2      	mov	sl, r4
 800b87c:	e7d2      	b.n	800b824 <_svfiprintf_r+0xa0>
 800b87e:	9b03      	ldr	r3, [sp, #12]
 800b880:	1d19      	adds	r1, r3, #4
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	9103      	str	r1, [sp, #12]
 800b886:	2b00      	cmp	r3, #0
 800b888:	bfbb      	ittet	lt
 800b88a:	425b      	neglt	r3, r3
 800b88c:	f042 0202 	orrlt.w	r2, r2, #2
 800b890:	9307      	strge	r3, [sp, #28]
 800b892:	9307      	strlt	r3, [sp, #28]
 800b894:	bfb8      	it	lt
 800b896:	9204      	strlt	r2, [sp, #16]
 800b898:	7823      	ldrb	r3, [r4, #0]
 800b89a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b89c:	d10a      	bne.n	800b8b4 <_svfiprintf_r+0x130>
 800b89e:	7863      	ldrb	r3, [r4, #1]
 800b8a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8a2:	d132      	bne.n	800b90a <_svfiprintf_r+0x186>
 800b8a4:	9b03      	ldr	r3, [sp, #12]
 800b8a6:	1d1a      	adds	r2, r3, #4
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	9203      	str	r2, [sp, #12]
 800b8ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b8b0:	3402      	adds	r4, #2
 800b8b2:	9305      	str	r3, [sp, #20]
 800b8b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b978 <_svfiprintf_r+0x1f4>
 800b8b8:	7821      	ldrb	r1, [r4, #0]
 800b8ba:	2203      	movs	r2, #3
 800b8bc:	4650      	mov	r0, sl
 800b8be:	f7f4 fc8f 	bl	80001e0 <memchr>
 800b8c2:	b138      	cbz	r0, 800b8d4 <_svfiprintf_r+0x150>
 800b8c4:	9b04      	ldr	r3, [sp, #16]
 800b8c6:	eba0 000a 	sub.w	r0, r0, sl
 800b8ca:	2240      	movs	r2, #64	@ 0x40
 800b8cc:	4082      	lsls	r2, r0
 800b8ce:	4313      	orrs	r3, r2
 800b8d0:	3401      	adds	r4, #1
 800b8d2:	9304      	str	r3, [sp, #16]
 800b8d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8d8:	4824      	ldr	r0, [pc, #144]	@ (800b96c <_svfiprintf_r+0x1e8>)
 800b8da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b8de:	2206      	movs	r2, #6
 800b8e0:	f7f4 fc7e 	bl	80001e0 <memchr>
 800b8e4:	2800      	cmp	r0, #0
 800b8e6:	d036      	beq.n	800b956 <_svfiprintf_r+0x1d2>
 800b8e8:	4b21      	ldr	r3, [pc, #132]	@ (800b970 <_svfiprintf_r+0x1ec>)
 800b8ea:	bb1b      	cbnz	r3, 800b934 <_svfiprintf_r+0x1b0>
 800b8ec:	9b03      	ldr	r3, [sp, #12]
 800b8ee:	3307      	adds	r3, #7
 800b8f0:	f023 0307 	bic.w	r3, r3, #7
 800b8f4:	3308      	adds	r3, #8
 800b8f6:	9303      	str	r3, [sp, #12]
 800b8f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8fa:	4433      	add	r3, r6
 800b8fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8fe:	e76a      	b.n	800b7d6 <_svfiprintf_r+0x52>
 800b900:	fb0c 3202 	mla	r2, ip, r2, r3
 800b904:	460c      	mov	r4, r1
 800b906:	2001      	movs	r0, #1
 800b908:	e7a8      	b.n	800b85c <_svfiprintf_r+0xd8>
 800b90a:	2300      	movs	r3, #0
 800b90c:	3401      	adds	r4, #1
 800b90e:	9305      	str	r3, [sp, #20]
 800b910:	4619      	mov	r1, r3
 800b912:	f04f 0c0a 	mov.w	ip, #10
 800b916:	4620      	mov	r0, r4
 800b918:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b91c:	3a30      	subs	r2, #48	@ 0x30
 800b91e:	2a09      	cmp	r2, #9
 800b920:	d903      	bls.n	800b92a <_svfiprintf_r+0x1a6>
 800b922:	2b00      	cmp	r3, #0
 800b924:	d0c6      	beq.n	800b8b4 <_svfiprintf_r+0x130>
 800b926:	9105      	str	r1, [sp, #20]
 800b928:	e7c4      	b.n	800b8b4 <_svfiprintf_r+0x130>
 800b92a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b92e:	4604      	mov	r4, r0
 800b930:	2301      	movs	r3, #1
 800b932:	e7f0      	b.n	800b916 <_svfiprintf_r+0x192>
 800b934:	ab03      	add	r3, sp, #12
 800b936:	9300      	str	r3, [sp, #0]
 800b938:	462a      	mov	r2, r5
 800b93a:	4b0e      	ldr	r3, [pc, #56]	@ (800b974 <_svfiprintf_r+0x1f0>)
 800b93c:	a904      	add	r1, sp, #16
 800b93e:	4638      	mov	r0, r7
 800b940:	f7fd fe02 	bl	8009548 <_printf_float>
 800b944:	1c42      	adds	r2, r0, #1
 800b946:	4606      	mov	r6, r0
 800b948:	d1d6      	bne.n	800b8f8 <_svfiprintf_r+0x174>
 800b94a:	89ab      	ldrh	r3, [r5, #12]
 800b94c:	065b      	lsls	r3, r3, #25
 800b94e:	f53f af2d 	bmi.w	800b7ac <_svfiprintf_r+0x28>
 800b952:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b954:	e72c      	b.n	800b7b0 <_svfiprintf_r+0x2c>
 800b956:	ab03      	add	r3, sp, #12
 800b958:	9300      	str	r3, [sp, #0]
 800b95a:	462a      	mov	r2, r5
 800b95c:	4b05      	ldr	r3, [pc, #20]	@ (800b974 <_svfiprintf_r+0x1f0>)
 800b95e:	a904      	add	r1, sp, #16
 800b960:	4638      	mov	r0, r7
 800b962:	f7fe f889 	bl	8009a78 <_printf_i>
 800b966:	e7ed      	b.n	800b944 <_svfiprintf_r+0x1c0>
 800b968:	0800c44e 	.word	0x0800c44e
 800b96c:	0800c458 	.word	0x0800c458
 800b970:	08009549 	.word	0x08009549
 800b974:	0800b6cd 	.word	0x0800b6cd
 800b978:	0800c454 	.word	0x0800c454

0800b97c <__sfputc_r>:
 800b97c:	6893      	ldr	r3, [r2, #8]
 800b97e:	3b01      	subs	r3, #1
 800b980:	2b00      	cmp	r3, #0
 800b982:	b410      	push	{r4}
 800b984:	6093      	str	r3, [r2, #8]
 800b986:	da08      	bge.n	800b99a <__sfputc_r+0x1e>
 800b988:	6994      	ldr	r4, [r2, #24]
 800b98a:	42a3      	cmp	r3, r4
 800b98c:	db01      	blt.n	800b992 <__sfputc_r+0x16>
 800b98e:	290a      	cmp	r1, #10
 800b990:	d103      	bne.n	800b99a <__sfputc_r+0x1e>
 800b992:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b996:	f000 b9df 	b.w	800bd58 <__swbuf_r>
 800b99a:	6813      	ldr	r3, [r2, #0]
 800b99c:	1c58      	adds	r0, r3, #1
 800b99e:	6010      	str	r0, [r2, #0]
 800b9a0:	7019      	strb	r1, [r3, #0]
 800b9a2:	4608      	mov	r0, r1
 800b9a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9a8:	4770      	bx	lr

0800b9aa <__sfputs_r>:
 800b9aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ac:	4606      	mov	r6, r0
 800b9ae:	460f      	mov	r7, r1
 800b9b0:	4614      	mov	r4, r2
 800b9b2:	18d5      	adds	r5, r2, r3
 800b9b4:	42ac      	cmp	r4, r5
 800b9b6:	d101      	bne.n	800b9bc <__sfputs_r+0x12>
 800b9b8:	2000      	movs	r0, #0
 800b9ba:	e007      	b.n	800b9cc <__sfputs_r+0x22>
 800b9bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9c0:	463a      	mov	r2, r7
 800b9c2:	4630      	mov	r0, r6
 800b9c4:	f7ff ffda 	bl	800b97c <__sfputc_r>
 800b9c8:	1c43      	adds	r3, r0, #1
 800b9ca:	d1f3      	bne.n	800b9b4 <__sfputs_r+0xa>
 800b9cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b9d0 <_vfiprintf_r>:
 800b9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d4:	460d      	mov	r5, r1
 800b9d6:	b09d      	sub	sp, #116	@ 0x74
 800b9d8:	4614      	mov	r4, r2
 800b9da:	4698      	mov	r8, r3
 800b9dc:	4606      	mov	r6, r0
 800b9de:	b118      	cbz	r0, 800b9e8 <_vfiprintf_r+0x18>
 800b9e0:	6a03      	ldr	r3, [r0, #32]
 800b9e2:	b90b      	cbnz	r3, 800b9e8 <_vfiprintf_r+0x18>
 800b9e4:	f7fe f9f2 	bl	8009dcc <__sinit>
 800b9e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b9ea:	07d9      	lsls	r1, r3, #31
 800b9ec:	d405      	bmi.n	800b9fa <_vfiprintf_r+0x2a>
 800b9ee:	89ab      	ldrh	r3, [r5, #12]
 800b9f0:	059a      	lsls	r2, r3, #22
 800b9f2:	d402      	bmi.n	800b9fa <_vfiprintf_r+0x2a>
 800b9f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b9f6:	f7fe fb86 	bl	800a106 <__retarget_lock_acquire_recursive>
 800b9fa:	89ab      	ldrh	r3, [r5, #12]
 800b9fc:	071b      	lsls	r3, r3, #28
 800b9fe:	d501      	bpl.n	800ba04 <_vfiprintf_r+0x34>
 800ba00:	692b      	ldr	r3, [r5, #16]
 800ba02:	b99b      	cbnz	r3, 800ba2c <_vfiprintf_r+0x5c>
 800ba04:	4629      	mov	r1, r5
 800ba06:	4630      	mov	r0, r6
 800ba08:	f000 f9e4 	bl	800bdd4 <__swsetup_r>
 800ba0c:	b170      	cbz	r0, 800ba2c <_vfiprintf_r+0x5c>
 800ba0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba10:	07dc      	lsls	r4, r3, #31
 800ba12:	d504      	bpl.n	800ba1e <_vfiprintf_r+0x4e>
 800ba14:	f04f 30ff 	mov.w	r0, #4294967295
 800ba18:	b01d      	add	sp, #116	@ 0x74
 800ba1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba1e:	89ab      	ldrh	r3, [r5, #12]
 800ba20:	0598      	lsls	r0, r3, #22
 800ba22:	d4f7      	bmi.n	800ba14 <_vfiprintf_r+0x44>
 800ba24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba26:	f7fe fb6f 	bl	800a108 <__retarget_lock_release_recursive>
 800ba2a:	e7f3      	b.n	800ba14 <_vfiprintf_r+0x44>
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba30:	2320      	movs	r3, #32
 800ba32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ba36:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba3a:	2330      	movs	r3, #48	@ 0x30
 800ba3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bbec <_vfiprintf_r+0x21c>
 800ba40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ba44:	f04f 0901 	mov.w	r9, #1
 800ba48:	4623      	mov	r3, r4
 800ba4a:	469a      	mov	sl, r3
 800ba4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba50:	b10a      	cbz	r2, 800ba56 <_vfiprintf_r+0x86>
 800ba52:	2a25      	cmp	r2, #37	@ 0x25
 800ba54:	d1f9      	bne.n	800ba4a <_vfiprintf_r+0x7a>
 800ba56:	ebba 0b04 	subs.w	fp, sl, r4
 800ba5a:	d00b      	beq.n	800ba74 <_vfiprintf_r+0xa4>
 800ba5c:	465b      	mov	r3, fp
 800ba5e:	4622      	mov	r2, r4
 800ba60:	4629      	mov	r1, r5
 800ba62:	4630      	mov	r0, r6
 800ba64:	f7ff ffa1 	bl	800b9aa <__sfputs_r>
 800ba68:	3001      	adds	r0, #1
 800ba6a:	f000 80a7 	beq.w	800bbbc <_vfiprintf_r+0x1ec>
 800ba6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba70:	445a      	add	r2, fp
 800ba72:	9209      	str	r2, [sp, #36]	@ 0x24
 800ba74:	f89a 3000 	ldrb.w	r3, [sl]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	f000 809f 	beq.w	800bbbc <_vfiprintf_r+0x1ec>
 800ba7e:	2300      	movs	r3, #0
 800ba80:	f04f 32ff 	mov.w	r2, #4294967295
 800ba84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba88:	f10a 0a01 	add.w	sl, sl, #1
 800ba8c:	9304      	str	r3, [sp, #16]
 800ba8e:	9307      	str	r3, [sp, #28]
 800ba90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ba94:	931a      	str	r3, [sp, #104]	@ 0x68
 800ba96:	4654      	mov	r4, sl
 800ba98:	2205      	movs	r2, #5
 800ba9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba9e:	4853      	ldr	r0, [pc, #332]	@ (800bbec <_vfiprintf_r+0x21c>)
 800baa0:	f7f4 fb9e 	bl	80001e0 <memchr>
 800baa4:	9a04      	ldr	r2, [sp, #16]
 800baa6:	b9d8      	cbnz	r0, 800bae0 <_vfiprintf_r+0x110>
 800baa8:	06d1      	lsls	r1, r2, #27
 800baaa:	bf44      	itt	mi
 800baac:	2320      	movmi	r3, #32
 800baae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bab2:	0713      	lsls	r3, r2, #28
 800bab4:	bf44      	itt	mi
 800bab6:	232b      	movmi	r3, #43	@ 0x2b
 800bab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800babc:	f89a 3000 	ldrb.w	r3, [sl]
 800bac0:	2b2a      	cmp	r3, #42	@ 0x2a
 800bac2:	d015      	beq.n	800baf0 <_vfiprintf_r+0x120>
 800bac4:	9a07      	ldr	r2, [sp, #28]
 800bac6:	4654      	mov	r4, sl
 800bac8:	2000      	movs	r0, #0
 800baca:	f04f 0c0a 	mov.w	ip, #10
 800bace:	4621      	mov	r1, r4
 800bad0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bad4:	3b30      	subs	r3, #48	@ 0x30
 800bad6:	2b09      	cmp	r3, #9
 800bad8:	d94b      	bls.n	800bb72 <_vfiprintf_r+0x1a2>
 800bada:	b1b0      	cbz	r0, 800bb0a <_vfiprintf_r+0x13a>
 800badc:	9207      	str	r2, [sp, #28]
 800bade:	e014      	b.n	800bb0a <_vfiprintf_r+0x13a>
 800bae0:	eba0 0308 	sub.w	r3, r0, r8
 800bae4:	fa09 f303 	lsl.w	r3, r9, r3
 800bae8:	4313      	orrs	r3, r2
 800baea:	9304      	str	r3, [sp, #16]
 800baec:	46a2      	mov	sl, r4
 800baee:	e7d2      	b.n	800ba96 <_vfiprintf_r+0xc6>
 800baf0:	9b03      	ldr	r3, [sp, #12]
 800baf2:	1d19      	adds	r1, r3, #4
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	9103      	str	r1, [sp, #12]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	bfbb      	ittet	lt
 800bafc:	425b      	neglt	r3, r3
 800bafe:	f042 0202 	orrlt.w	r2, r2, #2
 800bb02:	9307      	strge	r3, [sp, #28]
 800bb04:	9307      	strlt	r3, [sp, #28]
 800bb06:	bfb8      	it	lt
 800bb08:	9204      	strlt	r2, [sp, #16]
 800bb0a:	7823      	ldrb	r3, [r4, #0]
 800bb0c:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb0e:	d10a      	bne.n	800bb26 <_vfiprintf_r+0x156>
 800bb10:	7863      	ldrb	r3, [r4, #1]
 800bb12:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb14:	d132      	bne.n	800bb7c <_vfiprintf_r+0x1ac>
 800bb16:	9b03      	ldr	r3, [sp, #12]
 800bb18:	1d1a      	adds	r2, r3, #4
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	9203      	str	r2, [sp, #12]
 800bb1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bb22:	3402      	adds	r4, #2
 800bb24:	9305      	str	r3, [sp, #20]
 800bb26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bbfc <_vfiprintf_r+0x22c>
 800bb2a:	7821      	ldrb	r1, [r4, #0]
 800bb2c:	2203      	movs	r2, #3
 800bb2e:	4650      	mov	r0, sl
 800bb30:	f7f4 fb56 	bl	80001e0 <memchr>
 800bb34:	b138      	cbz	r0, 800bb46 <_vfiprintf_r+0x176>
 800bb36:	9b04      	ldr	r3, [sp, #16]
 800bb38:	eba0 000a 	sub.w	r0, r0, sl
 800bb3c:	2240      	movs	r2, #64	@ 0x40
 800bb3e:	4082      	lsls	r2, r0
 800bb40:	4313      	orrs	r3, r2
 800bb42:	3401      	adds	r4, #1
 800bb44:	9304      	str	r3, [sp, #16]
 800bb46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb4a:	4829      	ldr	r0, [pc, #164]	@ (800bbf0 <_vfiprintf_r+0x220>)
 800bb4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bb50:	2206      	movs	r2, #6
 800bb52:	f7f4 fb45 	bl	80001e0 <memchr>
 800bb56:	2800      	cmp	r0, #0
 800bb58:	d03f      	beq.n	800bbda <_vfiprintf_r+0x20a>
 800bb5a:	4b26      	ldr	r3, [pc, #152]	@ (800bbf4 <_vfiprintf_r+0x224>)
 800bb5c:	bb1b      	cbnz	r3, 800bba6 <_vfiprintf_r+0x1d6>
 800bb5e:	9b03      	ldr	r3, [sp, #12]
 800bb60:	3307      	adds	r3, #7
 800bb62:	f023 0307 	bic.w	r3, r3, #7
 800bb66:	3308      	adds	r3, #8
 800bb68:	9303      	str	r3, [sp, #12]
 800bb6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb6c:	443b      	add	r3, r7
 800bb6e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb70:	e76a      	b.n	800ba48 <_vfiprintf_r+0x78>
 800bb72:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb76:	460c      	mov	r4, r1
 800bb78:	2001      	movs	r0, #1
 800bb7a:	e7a8      	b.n	800bace <_vfiprintf_r+0xfe>
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	3401      	adds	r4, #1
 800bb80:	9305      	str	r3, [sp, #20]
 800bb82:	4619      	mov	r1, r3
 800bb84:	f04f 0c0a 	mov.w	ip, #10
 800bb88:	4620      	mov	r0, r4
 800bb8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb8e:	3a30      	subs	r2, #48	@ 0x30
 800bb90:	2a09      	cmp	r2, #9
 800bb92:	d903      	bls.n	800bb9c <_vfiprintf_r+0x1cc>
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d0c6      	beq.n	800bb26 <_vfiprintf_r+0x156>
 800bb98:	9105      	str	r1, [sp, #20]
 800bb9a:	e7c4      	b.n	800bb26 <_vfiprintf_r+0x156>
 800bb9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bba0:	4604      	mov	r4, r0
 800bba2:	2301      	movs	r3, #1
 800bba4:	e7f0      	b.n	800bb88 <_vfiprintf_r+0x1b8>
 800bba6:	ab03      	add	r3, sp, #12
 800bba8:	9300      	str	r3, [sp, #0]
 800bbaa:	462a      	mov	r2, r5
 800bbac:	4b12      	ldr	r3, [pc, #72]	@ (800bbf8 <_vfiprintf_r+0x228>)
 800bbae:	a904      	add	r1, sp, #16
 800bbb0:	4630      	mov	r0, r6
 800bbb2:	f7fd fcc9 	bl	8009548 <_printf_float>
 800bbb6:	4607      	mov	r7, r0
 800bbb8:	1c78      	adds	r0, r7, #1
 800bbba:	d1d6      	bne.n	800bb6a <_vfiprintf_r+0x19a>
 800bbbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bbbe:	07d9      	lsls	r1, r3, #31
 800bbc0:	d405      	bmi.n	800bbce <_vfiprintf_r+0x1fe>
 800bbc2:	89ab      	ldrh	r3, [r5, #12]
 800bbc4:	059a      	lsls	r2, r3, #22
 800bbc6:	d402      	bmi.n	800bbce <_vfiprintf_r+0x1fe>
 800bbc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bbca:	f7fe fa9d 	bl	800a108 <__retarget_lock_release_recursive>
 800bbce:	89ab      	ldrh	r3, [r5, #12]
 800bbd0:	065b      	lsls	r3, r3, #25
 800bbd2:	f53f af1f 	bmi.w	800ba14 <_vfiprintf_r+0x44>
 800bbd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bbd8:	e71e      	b.n	800ba18 <_vfiprintf_r+0x48>
 800bbda:	ab03      	add	r3, sp, #12
 800bbdc:	9300      	str	r3, [sp, #0]
 800bbde:	462a      	mov	r2, r5
 800bbe0:	4b05      	ldr	r3, [pc, #20]	@ (800bbf8 <_vfiprintf_r+0x228>)
 800bbe2:	a904      	add	r1, sp, #16
 800bbe4:	4630      	mov	r0, r6
 800bbe6:	f7fd ff47 	bl	8009a78 <_printf_i>
 800bbea:	e7e4      	b.n	800bbb6 <_vfiprintf_r+0x1e6>
 800bbec:	0800c44e 	.word	0x0800c44e
 800bbf0:	0800c458 	.word	0x0800c458
 800bbf4:	08009549 	.word	0x08009549
 800bbf8:	0800b9ab 	.word	0x0800b9ab
 800bbfc:	0800c454 	.word	0x0800c454

0800bc00 <__sflush_r>:
 800bc00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc08:	0716      	lsls	r6, r2, #28
 800bc0a:	4605      	mov	r5, r0
 800bc0c:	460c      	mov	r4, r1
 800bc0e:	d454      	bmi.n	800bcba <__sflush_r+0xba>
 800bc10:	684b      	ldr	r3, [r1, #4]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	dc02      	bgt.n	800bc1c <__sflush_r+0x1c>
 800bc16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	dd48      	ble.n	800bcae <__sflush_r+0xae>
 800bc1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc1e:	2e00      	cmp	r6, #0
 800bc20:	d045      	beq.n	800bcae <__sflush_r+0xae>
 800bc22:	2300      	movs	r3, #0
 800bc24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bc28:	682f      	ldr	r7, [r5, #0]
 800bc2a:	6a21      	ldr	r1, [r4, #32]
 800bc2c:	602b      	str	r3, [r5, #0]
 800bc2e:	d030      	beq.n	800bc92 <__sflush_r+0x92>
 800bc30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bc32:	89a3      	ldrh	r3, [r4, #12]
 800bc34:	0759      	lsls	r1, r3, #29
 800bc36:	d505      	bpl.n	800bc44 <__sflush_r+0x44>
 800bc38:	6863      	ldr	r3, [r4, #4]
 800bc3a:	1ad2      	subs	r2, r2, r3
 800bc3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bc3e:	b10b      	cbz	r3, 800bc44 <__sflush_r+0x44>
 800bc40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bc42:	1ad2      	subs	r2, r2, r3
 800bc44:	2300      	movs	r3, #0
 800bc46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc48:	6a21      	ldr	r1, [r4, #32]
 800bc4a:	4628      	mov	r0, r5
 800bc4c:	47b0      	blx	r6
 800bc4e:	1c43      	adds	r3, r0, #1
 800bc50:	89a3      	ldrh	r3, [r4, #12]
 800bc52:	d106      	bne.n	800bc62 <__sflush_r+0x62>
 800bc54:	6829      	ldr	r1, [r5, #0]
 800bc56:	291d      	cmp	r1, #29
 800bc58:	d82b      	bhi.n	800bcb2 <__sflush_r+0xb2>
 800bc5a:	4a2a      	ldr	r2, [pc, #168]	@ (800bd04 <__sflush_r+0x104>)
 800bc5c:	40ca      	lsrs	r2, r1
 800bc5e:	07d6      	lsls	r6, r2, #31
 800bc60:	d527      	bpl.n	800bcb2 <__sflush_r+0xb2>
 800bc62:	2200      	movs	r2, #0
 800bc64:	6062      	str	r2, [r4, #4]
 800bc66:	04d9      	lsls	r1, r3, #19
 800bc68:	6922      	ldr	r2, [r4, #16]
 800bc6a:	6022      	str	r2, [r4, #0]
 800bc6c:	d504      	bpl.n	800bc78 <__sflush_r+0x78>
 800bc6e:	1c42      	adds	r2, r0, #1
 800bc70:	d101      	bne.n	800bc76 <__sflush_r+0x76>
 800bc72:	682b      	ldr	r3, [r5, #0]
 800bc74:	b903      	cbnz	r3, 800bc78 <__sflush_r+0x78>
 800bc76:	6560      	str	r0, [r4, #84]	@ 0x54
 800bc78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bc7a:	602f      	str	r7, [r5, #0]
 800bc7c:	b1b9      	cbz	r1, 800bcae <__sflush_r+0xae>
 800bc7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bc82:	4299      	cmp	r1, r3
 800bc84:	d002      	beq.n	800bc8c <__sflush_r+0x8c>
 800bc86:	4628      	mov	r0, r5
 800bc88:	f7ff f8a6 	bl	800add8 <_free_r>
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	6363      	str	r3, [r4, #52]	@ 0x34
 800bc90:	e00d      	b.n	800bcae <__sflush_r+0xae>
 800bc92:	2301      	movs	r3, #1
 800bc94:	4628      	mov	r0, r5
 800bc96:	47b0      	blx	r6
 800bc98:	4602      	mov	r2, r0
 800bc9a:	1c50      	adds	r0, r2, #1
 800bc9c:	d1c9      	bne.n	800bc32 <__sflush_r+0x32>
 800bc9e:	682b      	ldr	r3, [r5, #0]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d0c6      	beq.n	800bc32 <__sflush_r+0x32>
 800bca4:	2b1d      	cmp	r3, #29
 800bca6:	d001      	beq.n	800bcac <__sflush_r+0xac>
 800bca8:	2b16      	cmp	r3, #22
 800bcaa:	d11e      	bne.n	800bcea <__sflush_r+0xea>
 800bcac:	602f      	str	r7, [r5, #0]
 800bcae:	2000      	movs	r0, #0
 800bcb0:	e022      	b.n	800bcf8 <__sflush_r+0xf8>
 800bcb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcb6:	b21b      	sxth	r3, r3
 800bcb8:	e01b      	b.n	800bcf2 <__sflush_r+0xf2>
 800bcba:	690f      	ldr	r7, [r1, #16]
 800bcbc:	2f00      	cmp	r7, #0
 800bcbe:	d0f6      	beq.n	800bcae <__sflush_r+0xae>
 800bcc0:	0793      	lsls	r3, r2, #30
 800bcc2:	680e      	ldr	r6, [r1, #0]
 800bcc4:	bf08      	it	eq
 800bcc6:	694b      	ldreq	r3, [r1, #20]
 800bcc8:	600f      	str	r7, [r1, #0]
 800bcca:	bf18      	it	ne
 800bccc:	2300      	movne	r3, #0
 800bcce:	eba6 0807 	sub.w	r8, r6, r7
 800bcd2:	608b      	str	r3, [r1, #8]
 800bcd4:	f1b8 0f00 	cmp.w	r8, #0
 800bcd8:	dde9      	ble.n	800bcae <__sflush_r+0xae>
 800bcda:	6a21      	ldr	r1, [r4, #32]
 800bcdc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bcde:	4643      	mov	r3, r8
 800bce0:	463a      	mov	r2, r7
 800bce2:	4628      	mov	r0, r5
 800bce4:	47b0      	blx	r6
 800bce6:	2800      	cmp	r0, #0
 800bce8:	dc08      	bgt.n	800bcfc <__sflush_r+0xfc>
 800bcea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcf2:	81a3      	strh	r3, [r4, #12]
 800bcf4:	f04f 30ff 	mov.w	r0, #4294967295
 800bcf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcfc:	4407      	add	r7, r0
 800bcfe:	eba8 0800 	sub.w	r8, r8, r0
 800bd02:	e7e7      	b.n	800bcd4 <__sflush_r+0xd4>
 800bd04:	20400001 	.word	0x20400001

0800bd08 <_fflush_r>:
 800bd08:	b538      	push	{r3, r4, r5, lr}
 800bd0a:	690b      	ldr	r3, [r1, #16]
 800bd0c:	4605      	mov	r5, r0
 800bd0e:	460c      	mov	r4, r1
 800bd10:	b913      	cbnz	r3, 800bd18 <_fflush_r+0x10>
 800bd12:	2500      	movs	r5, #0
 800bd14:	4628      	mov	r0, r5
 800bd16:	bd38      	pop	{r3, r4, r5, pc}
 800bd18:	b118      	cbz	r0, 800bd22 <_fflush_r+0x1a>
 800bd1a:	6a03      	ldr	r3, [r0, #32]
 800bd1c:	b90b      	cbnz	r3, 800bd22 <_fflush_r+0x1a>
 800bd1e:	f7fe f855 	bl	8009dcc <__sinit>
 800bd22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d0f3      	beq.n	800bd12 <_fflush_r+0xa>
 800bd2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bd2c:	07d0      	lsls	r0, r2, #31
 800bd2e:	d404      	bmi.n	800bd3a <_fflush_r+0x32>
 800bd30:	0599      	lsls	r1, r3, #22
 800bd32:	d402      	bmi.n	800bd3a <_fflush_r+0x32>
 800bd34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd36:	f7fe f9e6 	bl	800a106 <__retarget_lock_acquire_recursive>
 800bd3a:	4628      	mov	r0, r5
 800bd3c:	4621      	mov	r1, r4
 800bd3e:	f7ff ff5f 	bl	800bc00 <__sflush_r>
 800bd42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bd44:	07da      	lsls	r2, r3, #31
 800bd46:	4605      	mov	r5, r0
 800bd48:	d4e4      	bmi.n	800bd14 <_fflush_r+0xc>
 800bd4a:	89a3      	ldrh	r3, [r4, #12]
 800bd4c:	059b      	lsls	r3, r3, #22
 800bd4e:	d4e1      	bmi.n	800bd14 <_fflush_r+0xc>
 800bd50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd52:	f7fe f9d9 	bl	800a108 <__retarget_lock_release_recursive>
 800bd56:	e7dd      	b.n	800bd14 <_fflush_r+0xc>

0800bd58 <__swbuf_r>:
 800bd58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd5a:	460e      	mov	r6, r1
 800bd5c:	4614      	mov	r4, r2
 800bd5e:	4605      	mov	r5, r0
 800bd60:	b118      	cbz	r0, 800bd6a <__swbuf_r+0x12>
 800bd62:	6a03      	ldr	r3, [r0, #32]
 800bd64:	b90b      	cbnz	r3, 800bd6a <__swbuf_r+0x12>
 800bd66:	f7fe f831 	bl	8009dcc <__sinit>
 800bd6a:	69a3      	ldr	r3, [r4, #24]
 800bd6c:	60a3      	str	r3, [r4, #8]
 800bd6e:	89a3      	ldrh	r3, [r4, #12]
 800bd70:	071a      	lsls	r2, r3, #28
 800bd72:	d501      	bpl.n	800bd78 <__swbuf_r+0x20>
 800bd74:	6923      	ldr	r3, [r4, #16]
 800bd76:	b943      	cbnz	r3, 800bd8a <__swbuf_r+0x32>
 800bd78:	4621      	mov	r1, r4
 800bd7a:	4628      	mov	r0, r5
 800bd7c:	f000 f82a 	bl	800bdd4 <__swsetup_r>
 800bd80:	b118      	cbz	r0, 800bd8a <__swbuf_r+0x32>
 800bd82:	f04f 37ff 	mov.w	r7, #4294967295
 800bd86:	4638      	mov	r0, r7
 800bd88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd8a:	6823      	ldr	r3, [r4, #0]
 800bd8c:	6922      	ldr	r2, [r4, #16]
 800bd8e:	1a98      	subs	r0, r3, r2
 800bd90:	6963      	ldr	r3, [r4, #20]
 800bd92:	b2f6      	uxtb	r6, r6
 800bd94:	4283      	cmp	r3, r0
 800bd96:	4637      	mov	r7, r6
 800bd98:	dc05      	bgt.n	800bda6 <__swbuf_r+0x4e>
 800bd9a:	4621      	mov	r1, r4
 800bd9c:	4628      	mov	r0, r5
 800bd9e:	f7ff ffb3 	bl	800bd08 <_fflush_r>
 800bda2:	2800      	cmp	r0, #0
 800bda4:	d1ed      	bne.n	800bd82 <__swbuf_r+0x2a>
 800bda6:	68a3      	ldr	r3, [r4, #8]
 800bda8:	3b01      	subs	r3, #1
 800bdaa:	60a3      	str	r3, [r4, #8]
 800bdac:	6823      	ldr	r3, [r4, #0]
 800bdae:	1c5a      	adds	r2, r3, #1
 800bdb0:	6022      	str	r2, [r4, #0]
 800bdb2:	701e      	strb	r6, [r3, #0]
 800bdb4:	6962      	ldr	r2, [r4, #20]
 800bdb6:	1c43      	adds	r3, r0, #1
 800bdb8:	429a      	cmp	r2, r3
 800bdba:	d004      	beq.n	800bdc6 <__swbuf_r+0x6e>
 800bdbc:	89a3      	ldrh	r3, [r4, #12]
 800bdbe:	07db      	lsls	r3, r3, #31
 800bdc0:	d5e1      	bpl.n	800bd86 <__swbuf_r+0x2e>
 800bdc2:	2e0a      	cmp	r6, #10
 800bdc4:	d1df      	bne.n	800bd86 <__swbuf_r+0x2e>
 800bdc6:	4621      	mov	r1, r4
 800bdc8:	4628      	mov	r0, r5
 800bdca:	f7ff ff9d 	bl	800bd08 <_fflush_r>
 800bdce:	2800      	cmp	r0, #0
 800bdd0:	d0d9      	beq.n	800bd86 <__swbuf_r+0x2e>
 800bdd2:	e7d6      	b.n	800bd82 <__swbuf_r+0x2a>

0800bdd4 <__swsetup_r>:
 800bdd4:	b538      	push	{r3, r4, r5, lr}
 800bdd6:	4b29      	ldr	r3, [pc, #164]	@ (800be7c <__swsetup_r+0xa8>)
 800bdd8:	4605      	mov	r5, r0
 800bdda:	6818      	ldr	r0, [r3, #0]
 800bddc:	460c      	mov	r4, r1
 800bdde:	b118      	cbz	r0, 800bde8 <__swsetup_r+0x14>
 800bde0:	6a03      	ldr	r3, [r0, #32]
 800bde2:	b90b      	cbnz	r3, 800bde8 <__swsetup_r+0x14>
 800bde4:	f7fd fff2 	bl	8009dcc <__sinit>
 800bde8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdec:	0719      	lsls	r1, r3, #28
 800bdee:	d422      	bmi.n	800be36 <__swsetup_r+0x62>
 800bdf0:	06da      	lsls	r2, r3, #27
 800bdf2:	d407      	bmi.n	800be04 <__swsetup_r+0x30>
 800bdf4:	2209      	movs	r2, #9
 800bdf6:	602a      	str	r2, [r5, #0]
 800bdf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdfc:	81a3      	strh	r3, [r4, #12]
 800bdfe:	f04f 30ff 	mov.w	r0, #4294967295
 800be02:	e033      	b.n	800be6c <__swsetup_r+0x98>
 800be04:	0758      	lsls	r0, r3, #29
 800be06:	d512      	bpl.n	800be2e <__swsetup_r+0x5a>
 800be08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be0a:	b141      	cbz	r1, 800be1e <__swsetup_r+0x4a>
 800be0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be10:	4299      	cmp	r1, r3
 800be12:	d002      	beq.n	800be1a <__swsetup_r+0x46>
 800be14:	4628      	mov	r0, r5
 800be16:	f7fe ffdf 	bl	800add8 <_free_r>
 800be1a:	2300      	movs	r3, #0
 800be1c:	6363      	str	r3, [r4, #52]	@ 0x34
 800be1e:	89a3      	ldrh	r3, [r4, #12]
 800be20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800be24:	81a3      	strh	r3, [r4, #12]
 800be26:	2300      	movs	r3, #0
 800be28:	6063      	str	r3, [r4, #4]
 800be2a:	6923      	ldr	r3, [r4, #16]
 800be2c:	6023      	str	r3, [r4, #0]
 800be2e:	89a3      	ldrh	r3, [r4, #12]
 800be30:	f043 0308 	orr.w	r3, r3, #8
 800be34:	81a3      	strh	r3, [r4, #12]
 800be36:	6923      	ldr	r3, [r4, #16]
 800be38:	b94b      	cbnz	r3, 800be4e <__swsetup_r+0x7a>
 800be3a:	89a3      	ldrh	r3, [r4, #12]
 800be3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800be40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be44:	d003      	beq.n	800be4e <__swsetup_r+0x7a>
 800be46:	4621      	mov	r1, r4
 800be48:	4628      	mov	r0, r5
 800be4a:	f000 f8fb 	bl	800c044 <__smakebuf_r>
 800be4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be52:	f013 0201 	ands.w	r2, r3, #1
 800be56:	d00a      	beq.n	800be6e <__swsetup_r+0x9a>
 800be58:	2200      	movs	r2, #0
 800be5a:	60a2      	str	r2, [r4, #8]
 800be5c:	6962      	ldr	r2, [r4, #20]
 800be5e:	4252      	negs	r2, r2
 800be60:	61a2      	str	r2, [r4, #24]
 800be62:	6922      	ldr	r2, [r4, #16]
 800be64:	b942      	cbnz	r2, 800be78 <__swsetup_r+0xa4>
 800be66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800be6a:	d1c5      	bne.n	800bdf8 <__swsetup_r+0x24>
 800be6c:	bd38      	pop	{r3, r4, r5, pc}
 800be6e:	0799      	lsls	r1, r3, #30
 800be70:	bf58      	it	pl
 800be72:	6962      	ldrpl	r2, [r4, #20]
 800be74:	60a2      	str	r2, [r4, #8]
 800be76:	e7f4      	b.n	800be62 <__swsetup_r+0x8e>
 800be78:	2000      	movs	r0, #0
 800be7a:	e7f7      	b.n	800be6c <__swsetup_r+0x98>
 800be7c:	2000001c 	.word	0x2000001c

0800be80 <memmove>:
 800be80:	4288      	cmp	r0, r1
 800be82:	b510      	push	{r4, lr}
 800be84:	eb01 0402 	add.w	r4, r1, r2
 800be88:	d902      	bls.n	800be90 <memmove+0x10>
 800be8a:	4284      	cmp	r4, r0
 800be8c:	4623      	mov	r3, r4
 800be8e:	d807      	bhi.n	800bea0 <memmove+0x20>
 800be90:	1e43      	subs	r3, r0, #1
 800be92:	42a1      	cmp	r1, r4
 800be94:	d008      	beq.n	800bea8 <memmove+0x28>
 800be96:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be9e:	e7f8      	b.n	800be92 <memmove+0x12>
 800bea0:	4402      	add	r2, r0
 800bea2:	4601      	mov	r1, r0
 800bea4:	428a      	cmp	r2, r1
 800bea6:	d100      	bne.n	800beaa <memmove+0x2a>
 800bea8:	bd10      	pop	{r4, pc}
 800beaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800beae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800beb2:	e7f7      	b.n	800bea4 <memmove+0x24>

0800beb4 <_sbrk_r>:
 800beb4:	b538      	push	{r3, r4, r5, lr}
 800beb6:	4d06      	ldr	r5, [pc, #24]	@ (800bed0 <_sbrk_r+0x1c>)
 800beb8:	2300      	movs	r3, #0
 800beba:	4604      	mov	r4, r0
 800bebc:	4608      	mov	r0, r1
 800bebe:	602b      	str	r3, [r5, #0]
 800bec0:	f7f6 fa70 	bl	80023a4 <_sbrk>
 800bec4:	1c43      	adds	r3, r0, #1
 800bec6:	d102      	bne.n	800bece <_sbrk_r+0x1a>
 800bec8:	682b      	ldr	r3, [r5, #0]
 800beca:	b103      	cbz	r3, 800bece <_sbrk_r+0x1a>
 800becc:	6023      	str	r3, [r4, #0]
 800bece:	bd38      	pop	{r3, r4, r5, pc}
 800bed0:	20005020 	.word	0x20005020

0800bed4 <__assert_func>:
 800bed4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bed6:	4614      	mov	r4, r2
 800bed8:	461a      	mov	r2, r3
 800beda:	4b09      	ldr	r3, [pc, #36]	@ (800bf00 <__assert_func+0x2c>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	4605      	mov	r5, r0
 800bee0:	68d8      	ldr	r0, [r3, #12]
 800bee2:	b14c      	cbz	r4, 800bef8 <__assert_func+0x24>
 800bee4:	4b07      	ldr	r3, [pc, #28]	@ (800bf04 <__assert_func+0x30>)
 800bee6:	9100      	str	r1, [sp, #0]
 800bee8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800beec:	4906      	ldr	r1, [pc, #24]	@ (800bf08 <__assert_func+0x34>)
 800beee:	462b      	mov	r3, r5
 800bef0:	f000 f870 	bl	800bfd4 <fiprintf>
 800bef4:	f000 f904 	bl	800c100 <abort>
 800bef8:	4b04      	ldr	r3, [pc, #16]	@ (800bf0c <__assert_func+0x38>)
 800befa:	461c      	mov	r4, r3
 800befc:	e7f3      	b.n	800bee6 <__assert_func+0x12>
 800befe:	bf00      	nop
 800bf00:	2000001c 	.word	0x2000001c
 800bf04:	0800c469 	.word	0x0800c469
 800bf08:	0800c476 	.word	0x0800c476
 800bf0c:	0800c4a4 	.word	0x0800c4a4

0800bf10 <_calloc_r>:
 800bf10:	b570      	push	{r4, r5, r6, lr}
 800bf12:	fba1 5402 	umull	r5, r4, r1, r2
 800bf16:	b934      	cbnz	r4, 800bf26 <_calloc_r+0x16>
 800bf18:	4629      	mov	r1, r5
 800bf1a:	f7fe ffd1 	bl	800aec0 <_malloc_r>
 800bf1e:	4606      	mov	r6, r0
 800bf20:	b928      	cbnz	r0, 800bf2e <_calloc_r+0x1e>
 800bf22:	4630      	mov	r0, r6
 800bf24:	bd70      	pop	{r4, r5, r6, pc}
 800bf26:	220c      	movs	r2, #12
 800bf28:	6002      	str	r2, [r0, #0]
 800bf2a:	2600      	movs	r6, #0
 800bf2c:	e7f9      	b.n	800bf22 <_calloc_r+0x12>
 800bf2e:	462a      	mov	r2, r5
 800bf30:	4621      	mov	r1, r4
 800bf32:	f7fe f80c 	bl	8009f4e <memset>
 800bf36:	e7f4      	b.n	800bf22 <_calloc_r+0x12>

0800bf38 <__ascii_mbtowc>:
 800bf38:	b082      	sub	sp, #8
 800bf3a:	b901      	cbnz	r1, 800bf3e <__ascii_mbtowc+0x6>
 800bf3c:	a901      	add	r1, sp, #4
 800bf3e:	b142      	cbz	r2, 800bf52 <__ascii_mbtowc+0x1a>
 800bf40:	b14b      	cbz	r3, 800bf56 <__ascii_mbtowc+0x1e>
 800bf42:	7813      	ldrb	r3, [r2, #0]
 800bf44:	600b      	str	r3, [r1, #0]
 800bf46:	7812      	ldrb	r2, [r2, #0]
 800bf48:	1e10      	subs	r0, r2, #0
 800bf4a:	bf18      	it	ne
 800bf4c:	2001      	movne	r0, #1
 800bf4e:	b002      	add	sp, #8
 800bf50:	4770      	bx	lr
 800bf52:	4610      	mov	r0, r2
 800bf54:	e7fb      	b.n	800bf4e <__ascii_mbtowc+0x16>
 800bf56:	f06f 0001 	mvn.w	r0, #1
 800bf5a:	e7f8      	b.n	800bf4e <__ascii_mbtowc+0x16>

0800bf5c <_realloc_r>:
 800bf5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf60:	4607      	mov	r7, r0
 800bf62:	4614      	mov	r4, r2
 800bf64:	460d      	mov	r5, r1
 800bf66:	b921      	cbnz	r1, 800bf72 <_realloc_r+0x16>
 800bf68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf6c:	4611      	mov	r1, r2
 800bf6e:	f7fe bfa7 	b.w	800aec0 <_malloc_r>
 800bf72:	b92a      	cbnz	r2, 800bf80 <_realloc_r+0x24>
 800bf74:	f7fe ff30 	bl	800add8 <_free_r>
 800bf78:	4625      	mov	r5, r4
 800bf7a:	4628      	mov	r0, r5
 800bf7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf80:	f000 f8c5 	bl	800c10e <_malloc_usable_size_r>
 800bf84:	4284      	cmp	r4, r0
 800bf86:	4606      	mov	r6, r0
 800bf88:	d802      	bhi.n	800bf90 <_realloc_r+0x34>
 800bf8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bf8e:	d8f4      	bhi.n	800bf7a <_realloc_r+0x1e>
 800bf90:	4621      	mov	r1, r4
 800bf92:	4638      	mov	r0, r7
 800bf94:	f7fe ff94 	bl	800aec0 <_malloc_r>
 800bf98:	4680      	mov	r8, r0
 800bf9a:	b908      	cbnz	r0, 800bfa0 <_realloc_r+0x44>
 800bf9c:	4645      	mov	r5, r8
 800bf9e:	e7ec      	b.n	800bf7a <_realloc_r+0x1e>
 800bfa0:	42b4      	cmp	r4, r6
 800bfa2:	4622      	mov	r2, r4
 800bfa4:	4629      	mov	r1, r5
 800bfa6:	bf28      	it	cs
 800bfa8:	4632      	movcs	r2, r6
 800bfaa:	f7fe f8ae 	bl	800a10a <memcpy>
 800bfae:	4629      	mov	r1, r5
 800bfb0:	4638      	mov	r0, r7
 800bfb2:	f7fe ff11 	bl	800add8 <_free_r>
 800bfb6:	e7f1      	b.n	800bf9c <_realloc_r+0x40>

0800bfb8 <__ascii_wctomb>:
 800bfb8:	4603      	mov	r3, r0
 800bfba:	4608      	mov	r0, r1
 800bfbc:	b141      	cbz	r1, 800bfd0 <__ascii_wctomb+0x18>
 800bfbe:	2aff      	cmp	r2, #255	@ 0xff
 800bfc0:	d904      	bls.n	800bfcc <__ascii_wctomb+0x14>
 800bfc2:	228a      	movs	r2, #138	@ 0x8a
 800bfc4:	601a      	str	r2, [r3, #0]
 800bfc6:	f04f 30ff 	mov.w	r0, #4294967295
 800bfca:	4770      	bx	lr
 800bfcc:	700a      	strb	r2, [r1, #0]
 800bfce:	2001      	movs	r0, #1
 800bfd0:	4770      	bx	lr
	...

0800bfd4 <fiprintf>:
 800bfd4:	b40e      	push	{r1, r2, r3}
 800bfd6:	b503      	push	{r0, r1, lr}
 800bfd8:	4601      	mov	r1, r0
 800bfda:	ab03      	add	r3, sp, #12
 800bfdc:	4805      	ldr	r0, [pc, #20]	@ (800bff4 <fiprintf+0x20>)
 800bfde:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfe2:	6800      	ldr	r0, [r0, #0]
 800bfe4:	9301      	str	r3, [sp, #4]
 800bfe6:	f7ff fcf3 	bl	800b9d0 <_vfiprintf_r>
 800bfea:	b002      	add	sp, #8
 800bfec:	f85d eb04 	ldr.w	lr, [sp], #4
 800bff0:	b003      	add	sp, #12
 800bff2:	4770      	bx	lr
 800bff4:	2000001c 	.word	0x2000001c

0800bff8 <__swhatbuf_r>:
 800bff8:	b570      	push	{r4, r5, r6, lr}
 800bffa:	460c      	mov	r4, r1
 800bffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c000:	2900      	cmp	r1, #0
 800c002:	b096      	sub	sp, #88	@ 0x58
 800c004:	4615      	mov	r5, r2
 800c006:	461e      	mov	r6, r3
 800c008:	da0d      	bge.n	800c026 <__swhatbuf_r+0x2e>
 800c00a:	89a3      	ldrh	r3, [r4, #12]
 800c00c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c010:	f04f 0100 	mov.w	r1, #0
 800c014:	bf14      	ite	ne
 800c016:	2340      	movne	r3, #64	@ 0x40
 800c018:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c01c:	2000      	movs	r0, #0
 800c01e:	6031      	str	r1, [r6, #0]
 800c020:	602b      	str	r3, [r5, #0]
 800c022:	b016      	add	sp, #88	@ 0x58
 800c024:	bd70      	pop	{r4, r5, r6, pc}
 800c026:	466a      	mov	r2, sp
 800c028:	f000 f848 	bl	800c0bc <_fstat_r>
 800c02c:	2800      	cmp	r0, #0
 800c02e:	dbec      	blt.n	800c00a <__swhatbuf_r+0x12>
 800c030:	9901      	ldr	r1, [sp, #4]
 800c032:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c036:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c03a:	4259      	negs	r1, r3
 800c03c:	4159      	adcs	r1, r3
 800c03e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c042:	e7eb      	b.n	800c01c <__swhatbuf_r+0x24>

0800c044 <__smakebuf_r>:
 800c044:	898b      	ldrh	r3, [r1, #12]
 800c046:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c048:	079d      	lsls	r5, r3, #30
 800c04a:	4606      	mov	r6, r0
 800c04c:	460c      	mov	r4, r1
 800c04e:	d507      	bpl.n	800c060 <__smakebuf_r+0x1c>
 800c050:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c054:	6023      	str	r3, [r4, #0]
 800c056:	6123      	str	r3, [r4, #16]
 800c058:	2301      	movs	r3, #1
 800c05a:	6163      	str	r3, [r4, #20]
 800c05c:	b003      	add	sp, #12
 800c05e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c060:	ab01      	add	r3, sp, #4
 800c062:	466a      	mov	r2, sp
 800c064:	f7ff ffc8 	bl	800bff8 <__swhatbuf_r>
 800c068:	9f00      	ldr	r7, [sp, #0]
 800c06a:	4605      	mov	r5, r0
 800c06c:	4639      	mov	r1, r7
 800c06e:	4630      	mov	r0, r6
 800c070:	f7fe ff26 	bl	800aec0 <_malloc_r>
 800c074:	b948      	cbnz	r0, 800c08a <__smakebuf_r+0x46>
 800c076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c07a:	059a      	lsls	r2, r3, #22
 800c07c:	d4ee      	bmi.n	800c05c <__smakebuf_r+0x18>
 800c07e:	f023 0303 	bic.w	r3, r3, #3
 800c082:	f043 0302 	orr.w	r3, r3, #2
 800c086:	81a3      	strh	r3, [r4, #12]
 800c088:	e7e2      	b.n	800c050 <__smakebuf_r+0xc>
 800c08a:	89a3      	ldrh	r3, [r4, #12]
 800c08c:	6020      	str	r0, [r4, #0]
 800c08e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c092:	81a3      	strh	r3, [r4, #12]
 800c094:	9b01      	ldr	r3, [sp, #4]
 800c096:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c09a:	b15b      	cbz	r3, 800c0b4 <__smakebuf_r+0x70>
 800c09c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0a0:	4630      	mov	r0, r6
 800c0a2:	f000 f81d 	bl	800c0e0 <_isatty_r>
 800c0a6:	b128      	cbz	r0, 800c0b4 <__smakebuf_r+0x70>
 800c0a8:	89a3      	ldrh	r3, [r4, #12]
 800c0aa:	f023 0303 	bic.w	r3, r3, #3
 800c0ae:	f043 0301 	orr.w	r3, r3, #1
 800c0b2:	81a3      	strh	r3, [r4, #12]
 800c0b4:	89a3      	ldrh	r3, [r4, #12]
 800c0b6:	431d      	orrs	r5, r3
 800c0b8:	81a5      	strh	r5, [r4, #12]
 800c0ba:	e7cf      	b.n	800c05c <__smakebuf_r+0x18>

0800c0bc <_fstat_r>:
 800c0bc:	b538      	push	{r3, r4, r5, lr}
 800c0be:	4d07      	ldr	r5, [pc, #28]	@ (800c0dc <_fstat_r+0x20>)
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	4604      	mov	r4, r0
 800c0c4:	4608      	mov	r0, r1
 800c0c6:	4611      	mov	r1, r2
 800c0c8:	602b      	str	r3, [r5, #0]
 800c0ca:	f7f6 f943 	bl	8002354 <_fstat>
 800c0ce:	1c43      	adds	r3, r0, #1
 800c0d0:	d102      	bne.n	800c0d8 <_fstat_r+0x1c>
 800c0d2:	682b      	ldr	r3, [r5, #0]
 800c0d4:	b103      	cbz	r3, 800c0d8 <_fstat_r+0x1c>
 800c0d6:	6023      	str	r3, [r4, #0]
 800c0d8:	bd38      	pop	{r3, r4, r5, pc}
 800c0da:	bf00      	nop
 800c0dc:	20005020 	.word	0x20005020

0800c0e0 <_isatty_r>:
 800c0e0:	b538      	push	{r3, r4, r5, lr}
 800c0e2:	4d06      	ldr	r5, [pc, #24]	@ (800c0fc <_isatty_r+0x1c>)
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	4604      	mov	r4, r0
 800c0e8:	4608      	mov	r0, r1
 800c0ea:	602b      	str	r3, [r5, #0]
 800c0ec:	f7f6 f942 	bl	8002374 <_isatty>
 800c0f0:	1c43      	adds	r3, r0, #1
 800c0f2:	d102      	bne.n	800c0fa <_isatty_r+0x1a>
 800c0f4:	682b      	ldr	r3, [r5, #0]
 800c0f6:	b103      	cbz	r3, 800c0fa <_isatty_r+0x1a>
 800c0f8:	6023      	str	r3, [r4, #0]
 800c0fa:	bd38      	pop	{r3, r4, r5, pc}
 800c0fc:	20005020 	.word	0x20005020

0800c100 <abort>:
 800c100:	b508      	push	{r3, lr}
 800c102:	2006      	movs	r0, #6
 800c104:	f000 f834 	bl	800c170 <raise>
 800c108:	2001      	movs	r0, #1
 800c10a:	f7f6 f8d3 	bl	80022b4 <_exit>

0800c10e <_malloc_usable_size_r>:
 800c10e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c112:	1f18      	subs	r0, r3, #4
 800c114:	2b00      	cmp	r3, #0
 800c116:	bfbc      	itt	lt
 800c118:	580b      	ldrlt	r3, [r1, r0]
 800c11a:	18c0      	addlt	r0, r0, r3
 800c11c:	4770      	bx	lr

0800c11e <_raise_r>:
 800c11e:	291f      	cmp	r1, #31
 800c120:	b538      	push	{r3, r4, r5, lr}
 800c122:	4605      	mov	r5, r0
 800c124:	460c      	mov	r4, r1
 800c126:	d904      	bls.n	800c132 <_raise_r+0x14>
 800c128:	2316      	movs	r3, #22
 800c12a:	6003      	str	r3, [r0, #0]
 800c12c:	f04f 30ff 	mov.w	r0, #4294967295
 800c130:	bd38      	pop	{r3, r4, r5, pc}
 800c132:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c134:	b112      	cbz	r2, 800c13c <_raise_r+0x1e>
 800c136:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c13a:	b94b      	cbnz	r3, 800c150 <_raise_r+0x32>
 800c13c:	4628      	mov	r0, r5
 800c13e:	f000 f831 	bl	800c1a4 <_getpid_r>
 800c142:	4622      	mov	r2, r4
 800c144:	4601      	mov	r1, r0
 800c146:	4628      	mov	r0, r5
 800c148:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c14c:	f000 b818 	b.w	800c180 <_kill_r>
 800c150:	2b01      	cmp	r3, #1
 800c152:	d00a      	beq.n	800c16a <_raise_r+0x4c>
 800c154:	1c59      	adds	r1, r3, #1
 800c156:	d103      	bne.n	800c160 <_raise_r+0x42>
 800c158:	2316      	movs	r3, #22
 800c15a:	6003      	str	r3, [r0, #0]
 800c15c:	2001      	movs	r0, #1
 800c15e:	e7e7      	b.n	800c130 <_raise_r+0x12>
 800c160:	2100      	movs	r1, #0
 800c162:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c166:	4620      	mov	r0, r4
 800c168:	4798      	blx	r3
 800c16a:	2000      	movs	r0, #0
 800c16c:	e7e0      	b.n	800c130 <_raise_r+0x12>
	...

0800c170 <raise>:
 800c170:	4b02      	ldr	r3, [pc, #8]	@ (800c17c <raise+0xc>)
 800c172:	4601      	mov	r1, r0
 800c174:	6818      	ldr	r0, [r3, #0]
 800c176:	f7ff bfd2 	b.w	800c11e <_raise_r>
 800c17a:	bf00      	nop
 800c17c:	2000001c 	.word	0x2000001c

0800c180 <_kill_r>:
 800c180:	b538      	push	{r3, r4, r5, lr}
 800c182:	4d07      	ldr	r5, [pc, #28]	@ (800c1a0 <_kill_r+0x20>)
 800c184:	2300      	movs	r3, #0
 800c186:	4604      	mov	r4, r0
 800c188:	4608      	mov	r0, r1
 800c18a:	4611      	mov	r1, r2
 800c18c:	602b      	str	r3, [r5, #0]
 800c18e:	f7f6 f881 	bl	8002294 <_kill>
 800c192:	1c43      	adds	r3, r0, #1
 800c194:	d102      	bne.n	800c19c <_kill_r+0x1c>
 800c196:	682b      	ldr	r3, [r5, #0]
 800c198:	b103      	cbz	r3, 800c19c <_kill_r+0x1c>
 800c19a:	6023      	str	r3, [r4, #0]
 800c19c:	bd38      	pop	{r3, r4, r5, pc}
 800c19e:	bf00      	nop
 800c1a0:	20005020 	.word	0x20005020

0800c1a4 <_getpid_r>:
 800c1a4:	f7f6 b86e 	b.w	8002284 <_getpid>

0800c1a8 <_init>:
 800c1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1aa:	bf00      	nop
 800c1ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1ae:	bc08      	pop	{r3}
 800c1b0:	469e      	mov	lr, r3
 800c1b2:	4770      	bx	lr

0800c1b4 <_fini>:
 800c1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1b6:	bf00      	nop
 800c1b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1ba:	bc08      	pop	{r3}
 800c1bc:	469e      	mov	lr, r3
 800c1be:	4770      	bx	lr
=======
 800994e:	d10c      	bne.n	800996a <_printf_float+0x412>
 8009950:	e65d      	b.n	800960e <_printf_float+0xb6>
 8009952:	2301      	movs	r3, #1
 8009954:	465a      	mov	r2, fp
 8009956:	4631      	mov	r1, r6
 8009958:	4628      	mov	r0, r5
 800995a:	47b8      	blx	r7
 800995c:	3001      	adds	r0, #1
 800995e:	f43f ae56 	beq.w	800960e <_printf_float+0xb6>
 8009962:	f108 0801 	add.w	r8, r8, #1
 8009966:	45d0      	cmp	r8, sl
 8009968:	dbf3      	blt.n	8009952 <_printf_float+0x3fa>
 800996a:	464b      	mov	r3, r9
 800996c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009970:	e6df      	b.n	8009732 <_printf_float+0x1da>
 8009972:	f04f 0800 	mov.w	r8, #0
 8009976:	f104 0b1a 	add.w	fp, r4, #26
 800997a:	e7f4      	b.n	8009966 <_printf_float+0x40e>
 800997c:	2301      	movs	r3, #1
 800997e:	4642      	mov	r2, r8
 8009980:	e7e1      	b.n	8009946 <_printf_float+0x3ee>
 8009982:	2301      	movs	r3, #1
 8009984:	464a      	mov	r2, r9
 8009986:	4631      	mov	r1, r6
 8009988:	4628      	mov	r0, r5
 800998a:	47b8      	blx	r7
 800998c:	3001      	adds	r0, #1
 800998e:	f43f ae3e 	beq.w	800960e <_printf_float+0xb6>
 8009992:	f108 0801 	add.w	r8, r8, #1
 8009996:	68e3      	ldr	r3, [r4, #12]
 8009998:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800999a:	1a5b      	subs	r3, r3, r1
 800999c:	4543      	cmp	r3, r8
 800999e:	dcf0      	bgt.n	8009982 <_printf_float+0x42a>
 80099a0:	e6fc      	b.n	800979c <_printf_float+0x244>
 80099a2:	f04f 0800 	mov.w	r8, #0
 80099a6:	f104 0919 	add.w	r9, r4, #25
 80099aa:	e7f4      	b.n	8009996 <_printf_float+0x43e>

080099ac <_printf_common>:
 80099ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099b0:	4616      	mov	r6, r2
 80099b2:	4698      	mov	r8, r3
 80099b4:	688a      	ldr	r2, [r1, #8]
 80099b6:	690b      	ldr	r3, [r1, #16]
 80099b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80099bc:	4293      	cmp	r3, r2
 80099be:	bfb8      	it	lt
 80099c0:	4613      	movlt	r3, r2
 80099c2:	6033      	str	r3, [r6, #0]
 80099c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80099c8:	4607      	mov	r7, r0
 80099ca:	460c      	mov	r4, r1
 80099cc:	b10a      	cbz	r2, 80099d2 <_printf_common+0x26>
 80099ce:	3301      	adds	r3, #1
 80099d0:	6033      	str	r3, [r6, #0]
 80099d2:	6823      	ldr	r3, [r4, #0]
 80099d4:	0699      	lsls	r1, r3, #26
 80099d6:	bf42      	ittt	mi
 80099d8:	6833      	ldrmi	r3, [r6, #0]
 80099da:	3302      	addmi	r3, #2
 80099dc:	6033      	strmi	r3, [r6, #0]
 80099de:	6825      	ldr	r5, [r4, #0]
 80099e0:	f015 0506 	ands.w	r5, r5, #6
 80099e4:	d106      	bne.n	80099f4 <_printf_common+0x48>
 80099e6:	f104 0a19 	add.w	sl, r4, #25
 80099ea:	68e3      	ldr	r3, [r4, #12]
 80099ec:	6832      	ldr	r2, [r6, #0]
 80099ee:	1a9b      	subs	r3, r3, r2
 80099f0:	42ab      	cmp	r3, r5
 80099f2:	dc26      	bgt.n	8009a42 <_printf_common+0x96>
 80099f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80099f8:	6822      	ldr	r2, [r4, #0]
 80099fa:	3b00      	subs	r3, #0
 80099fc:	bf18      	it	ne
 80099fe:	2301      	movne	r3, #1
 8009a00:	0692      	lsls	r2, r2, #26
 8009a02:	d42b      	bmi.n	8009a5c <_printf_common+0xb0>
 8009a04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009a08:	4641      	mov	r1, r8
 8009a0a:	4638      	mov	r0, r7
 8009a0c:	47c8      	blx	r9
 8009a0e:	3001      	adds	r0, #1
 8009a10:	d01e      	beq.n	8009a50 <_printf_common+0xa4>
 8009a12:	6823      	ldr	r3, [r4, #0]
 8009a14:	6922      	ldr	r2, [r4, #16]
 8009a16:	f003 0306 	and.w	r3, r3, #6
 8009a1a:	2b04      	cmp	r3, #4
 8009a1c:	bf02      	ittt	eq
 8009a1e:	68e5      	ldreq	r5, [r4, #12]
 8009a20:	6833      	ldreq	r3, [r6, #0]
 8009a22:	1aed      	subeq	r5, r5, r3
 8009a24:	68a3      	ldr	r3, [r4, #8]
 8009a26:	bf0c      	ite	eq
 8009a28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a2c:	2500      	movne	r5, #0
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	bfc4      	itt	gt
 8009a32:	1a9b      	subgt	r3, r3, r2
 8009a34:	18ed      	addgt	r5, r5, r3
 8009a36:	2600      	movs	r6, #0
 8009a38:	341a      	adds	r4, #26
 8009a3a:	42b5      	cmp	r5, r6
 8009a3c:	d11a      	bne.n	8009a74 <_printf_common+0xc8>
 8009a3e:	2000      	movs	r0, #0
 8009a40:	e008      	b.n	8009a54 <_printf_common+0xa8>
 8009a42:	2301      	movs	r3, #1
 8009a44:	4652      	mov	r2, sl
 8009a46:	4641      	mov	r1, r8
 8009a48:	4638      	mov	r0, r7
 8009a4a:	47c8      	blx	r9
 8009a4c:	3001      	adds	r0, #1
 8009a4e:	d103      	bne.n	8009a58 <_printf_common+0xac>
 8009a50:	f04f 30ff 	mov.w	r0, #4294967295
 8009a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a58:	3501      	adds	r5, #1
 8009a5a:	e7c6      	b.n	80099ea <_printf_common+0x3e>
 8009a5c:	18e1      	adds	r1, r4, r3
 8009a5e:	1c5a      	adds	r2, r3, #1
 8009a60:	2030      	movs	r0, #48	@ 0x30
 8009a62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009a66:	4422      	add	r2, r4
 8009a68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009a6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009a70:	3302      	adds	r3, #2
 8009a72:	e7c7      	b.n	8009a04 <_printf_common+0x58>
 8009a74:	2301      	movs	r3, #1
 8009a76:	4622      	mov	r2, r4
 8009a78:	4641      	mov	r1, r8
 8009a7a:	4638      	mov	r0, r7
 8009a7c:	47c8      	blx	r9
 8009a7e:	3001      	adds	r0, #1
 8009a80:	d0e6      	beq.n	8009a50 <_printf_common+0xa4>
 8009a82:	3601      	adds	r6, #1
 8009a84:	e7d9      	b.n	8009a3a <_printf_common+0x8e>
	...

08009a88 <_printf_i>:
 8009a88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a8c:	7e0f      	ldrb	r7, [r1, #24]
 8009a8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009a90:	2f78      	cmp	r7, #120	@ 0x78
 8009a92:	4691      	mov	r9, r2
 8009a94:	4680      	mov	r8, r0
 8009a96:	460c      	mov	r4, r1
 8009a98:	469a      	mov	sl, r3
 8009a9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009a9e:	d807      	bhi.n	8009ab0 <_printf_i+0x28>
 8009aa0:	2f62      	cmp	r7, #98	@ 0x62
 8009aa2:	d80a      	bhi.n	8009aba <_printf_i+0x32>
 8009aa4:	2f00      	cmp	r7, #0
 8009aa6:	f000 80d1 	beq.w	8009c4c <_printf_i+0x1c4>
 8009aaa:	2f58      	cmp	r7, #88	@ 0x58
 8009aac:	f000 80b8 	beq.w	8009c20 <_printf_i+0x198>
 8009ab0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009ab4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009ab8:	e03a      	b.n	8009b30 <_printf_i+0xa8>
 8009aba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009abe:	2b15      	cmp	r3, #21
 8009ac0:	d8f6      	bhi.n	8009ab0 <_printf_i+0x28>
 8009ac2:	a101      	add	r1, pc, #4	@ (adr r1, 8009ac8 <_printf_i+0x40>)
 8009ac4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ac8:	08009b21 	.word	0x08009b21
 8009acc:	08009b35 	.word	0x08009b35
 8009ad0:	08009ab1 	.word	0x08009ab1
 8009ad4:	08009ab1 	.word	0x08009ab1
 8009ad8:	08009ab1 	.word	0x08009ab1
 8009adc:	08009ab1 	.word	0x08009ab1
 8009ae0:	08009b35 	.word	0x08009b35
 8009ae4:	08009ab1 	.word	0x08009ab1
 8009ae8:	08009ab1 	.word	0x08009ab1
 8009aec:	08009ab1 	.word	0x08009ab1
 8009af0:	08009ab1 	.word	0x08009ab1
 8009af4:	08009c33 	.word	0x08009c33
 8009af8:	08009b5f 	.word	0x08009b5f
 8009afc:	08009bed 	.word	0x08009bed
 8009b00:	08009ab1 	.word	0x08009ab1
 8009b04:	08009ab1 	.word	0x08009ab1
 8009b08:	08009c55 	.word	0x08009c55
 8009b0c:	08009ab1 	.word	0x08009ab1
 8009b10:	08009b5f 	.word	0x08009b5f
 8009b14:	08009ab1 	.word	0x08009ab1
 8009b18:	08009ab1 	.word	0x08009ab1
 8009b1c:	08009bf5 	.word	0x08009bf5
 8009b20:	6833      	ldr	r3, [r6, #0]
 8009b22:	1d1a      	adds	r2, r3, #4
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	6032      	str	r2, [r6, #0]
 8009b28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009b30:	2301      	movs	r3, #1
 8009b32:	e09c      	b.n	8009c6e <_printf_i+0x1e6>
 8009b34:	6833      	ldr	r3, [r6, #0]
 8009b36:	6820      	ldr	r0, [r4, #0]
 8009b38:	1d19      	adds	r1, r3, #4
 8009b3a:	6031      	str	r1, [r6, #0]
 8009b3c:	0606      	lsls	r6, r0, #24
 8009b3e:	d501      	bpl.n	8009b44 <_printf_i+0xbc>
 8009b40:	681d      	ldr	r5, [r3, #0]
 8009b42:	e003      	b.n	8009b4c <_printf_i+0xc4>
 8009b44:	0645      	lsls	r5, r0, #25
 8009b46:	d5fb      	bpl.n	8009b40 <_printf_i+0xb8>
 8009b48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009b4c:	2d00      	cmp	r5, #0
 8009b4e:	da03      	bge.n	8009b58 <_printf_i+0xd0>
 8009b50:	232d      	movs	r3, #45	@ 0x2d
 8009b52:	426d      	negs	r5, r5
 8009b54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b58:	4858      	ldr	r0, [pc, #352]	@ (8009cbc <_printf_i+0x234>)
 8009b5a:	230a      	movs	r3, #10
 8009b5c:	e011      	b.n	8009b82 <_printf_i+0xfa>
 8009b5e:	6821      	ldr	r1, [r4, #0]
 8009b60:	6833      	ldr	r3, [r6, #0]
 8009b62:	0608      	lsls	r0, r1, #24
 8009b64:	f853 5b04 	ldr.w	r5, [r3], #4
 8009b68:	d402      	bmi.n	8009b70 <_printf_i+0xe8>
 8009b6a:	0649      	lsls	r1, r1, #25
 8009b6c:	bf48      	it	mi
 8009b6e:	b2ad      	uxthmi	r5, r5
 8009b70:	2f6f      	cmp	r7, #111	@ 0x6f
 8009b72:	4852      	ldr	r0, [pc, #328]	@ (8009cbc <_printf_i+0x234>)
 8009b74:	6033      	str	r3, [r6, #0]
 8009b76:	bf14      	ite	ne
 8009b78:	230a      	movne	r3, #10
 8009b7a:	2308      	moveq	r3, #8
 8009b7c:	2100      	movs	r1, #0
 8009b7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009b82:	6866      	ldr	r6, [r4, #4]
 8009b84:	60a6      	str	r6, [r4, #8]
 8009b86:	2e00      	cmp	r6, #0
 8009b88:	db05      	blt.n	8009b96 <_printf_i+0x10e>
 8009b8a:	6821      	ldr	r1, [r4, #0]
 8009b8c:	432e      	orrs	r6, r5
 8009b8e:	f021 0104 	bic.w	r1, r1, #4
 8009b92:	6021      	str	r1, [r4, #0]
 8009b94:	d04b      	beq.n	8009c2e <_printf_i+0x1a6>
 8009b96:	4616      	mov	r6, r2
 8009b98:	fbb5 f1f3 	udiv	r1, r5, r3
 8009b9c:	fb03 5711 	mls	r7, r3, r1, r5
 8009ba0:	5dc7      	ldrb	r7, [r0, r7]
 8009ba2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009ba6:	462f      	mov	r7, r5
 8009ba8:	42bb      	cmp	r3, r7
 8009baa:	460d      	mov	r5, r1
 8009bac:	d9f4      	bls.n	8009b98 <_printf_i+0x110>
 8009bae:	2b08      	cmp	r3, #8
 8009bb0:	d10b      	bne.n	8009bca <_printf_i+0x142>
 8009bb2:	6823      	ldr	r3, [r4, #0]
 8009bb4:	07df      	lsls	r7, r3, #31
 8009bb6:	d508      	bpl.n	8009bca <_printf_i+0x142>
 8009bb8:	6923      	ldr	r3, [r4, #16]
 8009bba:	6861      	ldr	r1, [r4, #4]
 8009bbc:	4299      	cmp	r1, r3
 8009bbe:	bfde      	ittt	le
 8009bc0:	2330      	movle	r3, #48	@ 0x30
 8009bc2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009bc6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009bca:	1b92      	subs	r2, r2, r6
 8009bcc:	6122      	str	r2, [r4, #16]
 8009bce:	f8cd a000 	str.w	sl, [sp]
 8009bd2:	464b      	mov	r3, r9
 8009bd4:	aa03      	add	r2, sp, #12
 8009bd6:	4621      	mov	r1, r4
 8009bd8:	4640      	mov	r0, r8
 8009bda:	f7ff fee7 	bl	80099ac <_printf_common>
 8009bde:	3001      	adds	r0, #1
 8009be0:	d14a      	bne.n	8009c78 <_printf_i+0x1f0>
 8009be2:	f04f 30ff 	mov.w	r0, #4294967295
 8009be6:	b004      	add	sp, #16
 8009be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bec:	6823      	ldr	r3, [r4, #0]
 8009bee:	f043 0320 	orr.w	r3, r3, #32
 8009bf2:	6023      	str	r3, [r4, #0]
 8009bf4:	4832      	ldr	r0, [pc, #200]	@ (8009cc0 <_printf_i+0x238>)
 8009bf6:	2778      	movs	r7, #120	@ 0x78
 8009bf8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009bfc:	6823      	ldr	r3, [r4, #0]
 8009bfe:	6831      	ldr	r1, [r6, #0]
 8009c00:	061f      	lsls	r7, r3, #24
 8009c02:	f851 5b04 	ldr.w	r5, [r1], #4
 8009c06:	d402      	bmi.n	8009c0e <_printf_i+0x186>
 8009c08:	065f      	lsls	r7, r3, #25
 8009c0a:	bf48      	it	mi
 8009c0c:	b2ad      	uxthmi	r5, r5
 8009c0e:	6031      	str	r1, [r6, #0]
 8009c10:	07d9      	lsls	r1, r3, #31
 8009c12:	bf44      	itt	mi
 8009c14:	f043 0320 	orrmi.w	r3, r3, #32
 8009c18:	6023      	strmi	r3, [r4, #0]
 8009c1a:	b11d      	cbz	r5, 8009c24 <_printf_i+0x19c>
 8009c1c:	2310      	movs	r3, #16
 8009c1e:	e7ad      	b.n	8009b7c <_printf_i+0xf4>
 8009c20:	4826      	ldr	r0, [pc, #152]	@ (8009cbc <_printf_i+0x234>)
 8009c22:	e7e9      	b.n	8009bf8 <_printf_i+0x170>
 8009c24:	6823      	ldr	r3, [r4, #0]
 8009c26:	f023 0320 	bic.w	r3, r3, #32
 8009c2a:	6023      	str	r3, [r4, #0]
 8009c2c:	e7f6      	b.n	8009c1c <_printf_i+0x194>
 8009c2e:	4616      	mov	r6, r2
 8009c30:	e7bd      	b.n	8009bae <_printf_i+0x126>
 8009c32:	6833      	ldr	r3, [r6, #0]
 8009c34:	6825      	ldr	r5, [r4, #0]
 8009c36:	6961      	ldr	r1, [r4, #20]
 8009c38:	1d18      	adds	r0, r3, #4
 8009c3a:	6030      	str	r0, [r6, #0]
 8009c3c:	062e      	lsls	r6, r5, #24
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	d501      	bpl.n	8009c46 <_printf_i+0x1be>
 8009c42:	6019      	str	r1, [r3, #0]
 8009c44:	e002      	b.n	8009c4c <_printf_i+0x1c4>
 8009c46:	0668      	lsls	r0, r5, #25
 8009c48:	d5fb      	bpl.n	8009c42 <_printf_i+0x1ba>
 8009c4a:	8019      	strh	r1, [r3, #0]
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	6123      	str	r3, [r4, #16]
 8009c50:	4616      	mov	r6, r2
 8009c52:	e7bc      	b.n	8009bce <_printf_i+0x146>
 8009c54:	6833      	ldr	r3, [r6, #0]
 8009c56:	1d1a      	adds	r2, r3, #4
 8009c58:	6032      	str	r2, [r6, #0]
 8009c5a:	681e      	ldr	r6, [r3, #0]
 8009c5c:	6862      	ldr	r2, [r4, #4]
 8009c5e:	2100      	movs	r1, #0
 8009c60:	4630      	mov	r0, r6
 8009c62:	f7f6 fabd 	bl	80001e0 <memchr>
 8009c66:	b108      	cbz	r0, 8009c6c <_printf_i+0x1e4>
 8009c68:	1b80      	subs	r0, r0, r6
 8009c6a:	6060      	str	r0, [r4, #4]
 8009c6c:	6863      	ldr	r3, [r4, #4]
 8009c6e:	6123      	str	r3, [r4, #16]
 8009c70:	2300      	movs	r3, #0
 8009c72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c76:	e7aa      	b.n	8009bce <_printf_i+0x146>
 8009c78:	6923      	ldr	r3, [r4, #16]
 8009c7a:	4632      	mov	r2, r6
 8009c7c:	4649      	mov	r1, r9
 8009c7e:	4640      	mov	r0, r8
 8009c80:	47d0      	blx	sl
 8009c82:	3001      	adds	r0, #1
 8009c84:	d0ad      	beq.n	8009be2 <_printf_i+0x15a>
 8009c86:	6823      	ldr	r3, [r4, #0]
 8009c88:	079b      	lsls	r3, r3, #30
 8009c8a:	d413      	bmi.n	8009cb4 <_printf_i+0x22c>
 8009c8c:	68e0      	ldr	r0, [r4, #12]
 8009c8e:	9b03      	ldr	r3, [sp, #12]
 8009c90:	4298      	cmp	r0, r3
 8009c92:	bfb8      	it	lt
 8009c94:	4618      	movlt	r0, r3
 8009c96:	e7a6      	b.n	8009be6 <_printf_i+0x15e>
 8009c98:	2301      	movs	r3, #1
 8009c9a:	4632      	mov	r2, r6
 8009c9c:	4649      	mov	r1, r9
 8009c9e:	4640      	mov	r0, r8
 8009ca0:	47d0      	blx	sl
 8009ca2:	3001      	adds	r0, #1
 8009ca4:	d09d      	beq.n	8009be2 <_printf_i+0x15a>
 8009ca6:	3501      	adds	r5, #1
 8009ca8:	68e3      	ldr	r3, [r4, #12]
 8009caa:	9903      	ldr	r1, [sp, #12]
 8009cac:	1a5b      	subs	r3, r3, r1
 8009cae:	42ab      	cmp	r3, r5
 8009cb0:	dcf2      	bgt.n	8009c98 <_printf_i+0x210>
 8009cb2:	e7eb      	b.n	8009c8c <_printf_i+0x204>
 8009cb4:	2500      	movs	r5, #0
 8009cb6:	f104 0619 	add.w	r6, r4, #25
 8009cba:	e7f5      	b.n	8009ca8 <_printf_i+0x220>
 8009cbc:	0800c426 	.word	0x0800c426
 8009cc0:	0800c437 	.word	0x0800c437

08009cc4 <std>:
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	b510      	push	{r4, lr}
 8009cc8:	4604      	mov	r4, r0
 8009cca:	e9c0 3300 	strd	r3, r3, [r0]
 8009cce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009cd2:	6083      	str	r3, [r0, #8]
 8009cd4:	8181      	strh	r1, [r0, #12]
 8009cd6:	6643      	str	r3, [r0, #100]	@ 0x64
 8009cd8:	81c2      	strh	r2, [r0, #14]
 8009cda:	6183      	str	r3, [r0, #24]
 8009cdc:	4619      	mov	r1, r3
 8009cde:	2208      	movs	r2, #8
 8009ce0:	305c      	adds	r0, #92	@ 0x5c
 8009ce2:	f000 fa2f 	bl	800a144 <memset>
 8009ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8009d1c <std+0x58>)
 8009ce8:	6263      	str	r3, [r4, #36]	@ 0x24
 8009cea:	4b0d      	ldr	r3, [pc, #52]	@ (8009d20 <std+0x5c>)
 8009cec:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009cee:	4b0d      	ldr	r3, [pc, #52]	@ (8009d24 <std+0x60>)
 8009cf0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8009d28 <std+0x64>)
 8009cf4:	6323      	str	r3, [r4, #48]	@ 0x30
 8009cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8009d2c <std+0x68>)
 8009cf8:	6224      	str	r4, [r4, #32]
 8009cfa:	429c      	cmp	r4, r3
 8009cfc:	d006      	beq.n	8009d0c <std+0x48>
 8009cfe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009d02:	4294      	cmp	r4, r2
 8009d04:	d002      	beq.n	8009d0c <std+0x48>
 8009d06:	33d0      	adds	r3, #208	@ 0xd0
 8009d08:	429c      	cmp	r4, r3
 8009d0a:	d105      	bne.n	8009d18 <std+0x54>
 8009d0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d14:	f000 baf0 	b.w	800a2f8 <__retarget_lock_init_recursive>
 8009d18:	bd10      	pop	{r4, pc}
 8009d1a:	bf00      	nop
 8009d1c:	08009f95 	.word	0x08009f95
 8009d20:	08009fb7 	.word	0x08009fb7
 8009d24:	08009fef 	.word	0x08009fef
 8009d28:	0800a013 	.word	0x0800a013
 8009d2c:	20004eec 	.word	0x20004eec

08009d30 <stdio_exit_handler>:
 8009d30:	4a02      	ldr	r2, [pc, #8]	@ (8009d3c <stdio_exit_handler+0xc>)
 8009d32:	4903      	ldr	r1, [pc, #12]	@ (8009d40 <stdio_exit_handler+0x10>)
 8009d34:	4803      	ldr	r0, [pc, #12]	@ (8009d44 <stdio_exit_handler+0x14>)
 8009d36:	f000 b869 	b.w	8009e0c <_fwalk_sglue>
 8009d3a:	bf00      	nop
 8009d3c:	20000010 	.word	0x20000010
 8009d40:	0800bf01 	.word	0x0800bf01
 8009d44:	20000020 	.word	0x20000020

08009d48 <cleanup_stdio>:
 8009d48:	6841      	ldr	r1, [r0, #4]
 8009d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8009d7c <cleanup_stdio+0x34>)
 8009d4c:	4299      	cmp	r1, r3
 8009d4e:	b510      	push	{r4, lr}
 8009d50:	4604      	mov	r4, r0
 8009d52:	d001      	beq.n	8009d58 <cleanup_stdio+0x10>
 8009d54:	f002 f8d4 	bl	800bf00 <_fflush_r>
 8009d58:	68a1      	ldr	r1, [r4, #8]
 8009d5a:	4b09      	ldr	r3, [pc, #36]	@ (8009d80 <cleanup_stdio+0x38>)
 8009d5c:	4299      	cmp	r1, r3
 8009d5e:	d002      	beq.n	8009d66 <cleanup_stdio+0x1e>
 8009d60:	4620      	mov	r0, r4
 8009d62:	f002 f8cd 	bl	800bf00 <_fflush_r>
 8009d66:	68e1      	ldr	r1, [r4, #12]
 8009d68:	4b06      	ldr	r3, [pc, #24]	@ (8009d84 <cleanup_stdio+0x3c>)
 8009d6a:	4299      	cmp	r1, r3
 8009d6c:	d004      	beq.n	8009d78 <cleanup_stdio+0x30>
 8009d6e:	4620      	mov	r0, r4
 8009d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d74:	f002 b8c4 	b.w	800bf00 <_fflush_r>
 8009d78:	bd10      	pop	{r4, pc}
 8009d7a:	bf00      	nop
 8009d7c:	20004eec 	.word	0x20004eec
 8009d80:	20004f54 	.word	0x20004f54
 8009d84:	20004fbc 	.word	0x20004fbc

08009d88 <global_stdio_init.part.0>:
 8009d88:	b510      	push	{r4, lr}
 8009d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8009db8 <global_stdio_init.part.0+0x30>)
 8009d8c:	4c0b      	ldr	r4, [pc, #44]	@ (8009dbc <global_stdio_init.part.0+0x34>)
 8009d8e:	4a0c      	ldr	r2, [pc, #48]	@ (8009dc0 <global_stdio_init.part.0+0x38>)
 8009d90:	601a      	str	r2, [r3, #0]
 8009d92:	4620      	mov	r0, r4
 8009d94:	2200      	movs	r2, #0
 8009d96:	2104      	movs	r1, #4
 8009d98:	f7ff ff94 	bl	8009cc4 <std>
 8009d9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009da0:	2201      	movs	r2, #1
 8009da2:	2109      	movs	r1, #9
 8009da4:	f7ff ff8e 	bl	8009cc4 <std>
 8009da8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009dac:	2202      	movs	r2, #2
 8009dae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009db2:	2112      	movs	r1, #18
 8009db4:	f7ff bf86 	b.w	8009cc4 <std>
 8009db8:	20005024 	.word	0x20005024
 8009dbc:	20004eec 	.word	0x20004eec
 8009dc0:	08009d31 	.word	0x08009d31

08009dc4 <__sfp_lock_acquire>:
 8009dc4:	4801      	ldr	r0, [pc, #4]	@ (8009dcc <__sfp_lock_acquire+0x8>)
 8009dc6:	f000 ba98 	b.w	800a2fa <__retarget_lock_acquire_recursive>
 8009dca:	bf00      	nop
 8009dcc:	2000502d 	.word	0x2000502d

08009dd0 <__sfp_lock_release>:
 8009dd0:	4801      	ldr	r0, [pc, #4]	@ (8009dd8 <__sfp_lock_release+0x8>)
 8009dd2:	f000 ba93 	b.w	800a2fc <__retarget_lock_release_recursive>
 8009dd6:	bf00      	nop
 8009dd8:	2000502d 	.word	0x2000502d

08009ddc <__sinit>:
 8009ddc:	b510      	push	{r4, lr}
 8009dde:	4604      	mov	r4, r0
 8009de0:	f7ff fff0 	bl	8009dc4 <__sfp_lock_acquire>
 8009de4:	6a23      	ldr	r3, [r4, #32]
 8009de6:	b11b      	cbz	r3, 8009df0 <__sinit+0x14>
 8009de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dec:	f7ff bff0 	b.w	8009dd0 <__sfp_lock_release>
 8009df0:	4b04      	ldr	r3, [pc, #16]	@ (8009e04 <__sinit+0x28>)
 8009df2:	6223      	str	r3, [r4, #32]
 8009df4:	4b04      	ldr	r3, [pc, #16]	@ (8009e08 <__sinit+0x2c>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d1f5      	bne.n	8009de8 <__sinit+0xc>
 8009dfc:	f7ff ffc4 	bl	8009d88 <global_stdio_init.part.0>
 8009e00:	e7f2      	b.n	8009de8 <__sinit+0xc>
 8009e02:	bf00      	nop
 8009e04:	08009d49 	.word	0x08009d49
 8009e08:	20005024 	.word	0x20005024

08009e0c <_fwalk_sglue>:
 8009e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e10:	4607      	mov	r7, r0
 8009e12:	4688      	mov	r8, r1
 8009e14:	4614      	mov	r4, r2
 8009e16:	2600      	movs	r6, #0
 8009e18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e1c:	f1b9 0901 	subs.w	r9, r9, #1
 8009e20:	d505      	bpl.n	8009e2e <_fwalk_sglue+0x22>
 8009e22:	6824      	ldr	r4, [r4, #0]
 8009e24:	2c00      	cmp	r4, #0
 8009e26:	d1f7      	bne.n	8009e18 <_fwalk_sglue+0xc>
 8009e28:	4630      	mov	r0, r6
 8009e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e2e:	89ab      	ldrh	r3, [r5, #12]
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d907      	bls.n	8009e44 <_fwalk_sglue+0x38>
 8009e34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e38:	3301      	adds	r3, #1
 8009e3a:	d003      	beq.n	8009e44 <_fwalk_sglue+0x38>
 8009e3c:	4629      	mov	r1, r5
 8009e3e:	4638      	mov	r0, r7
 8009e40:	47c0      	blx	r8
 8009e42:	4306      	orrs	r6, r0
 8009e44:	3568      	adds	r5, #104	@ 0x68
 8009e46:	e7e9      	b.n	8009e1c <_fwalk_sglue+0x10>

08009e48 <iprintf>:
 8009e48:	b40f      	push	{r0, r1, r2, r3}
 8009e4a:	b507      	push	{r0, r1, r2, lr}
 8009e4c:	4906      	ldr	r1, [pc, #24]	@ (8009e68 <iprintf+0x20>)
 8009e4e:	ab04      	add	r3, sp, #16
 8009e50:	6808      	ldr	r0, [r1, #0]
 8009e52:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e56:	6881      	ldr	r1, [r0, #8]
 8009e58:	9301      	str	r3, [sp, #4]
 8009e5a:	f001 feb5 	bl	800bbc8 <_vfiprintf_r>
 8009e5e:	b003      	add	sp, #12
 8009e60:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e64:	b004      	add	sp, #16
 8009e66:	4770      	bx	lr
 8009e68:	2000001c 	.word	0x2000001c

08009e6c <_puts_r>:
 8009e6c:	6a03      	ldr	r3, [r0, #32]
 8009e6e:	b570      	push	{r4, r5, r6, lr}
 8009e70:	6884      	ldr	r4, [r0, #8]
 8009e72:	4605      	mov	r5, r0
 8009e74:	460e      	mov	r6, r1
 8009e76:	b90b      	cbnz	r3, 8009e7c <_puts_r+0x10>
 8009e78:	f7ff ffb0 	bl	8009ddc <__sinit>
 8009e7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e7e:	07db      	lsls	r3, r3, #31
 8009e80:	d405      	bmi.n	8009e8e <_puts_r+0x22>
 8009e82:	89a3      	ldrh	r3, [r4, #12]
 8009e84:	0598      	lsls	r0, r3, #22
 8009e86:	d402      	bmi.n	8009e8e <_puts_r+0x22>
 8009e88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e8a:	f000 fa36 	bl	800a2fa <__retarget_lock_acquire_recursive>
 8009e8e:	89a3      	ldrh	r3, [r4, #12]
 8009e90:	0719      	lsls	r1, r3, #28
 8009e92:	d502      	bpl.n	8009e9a <_puts_r+0x2e>
 8009e94:	6923      	ldr	r3, [r4, #16]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d135      	bne.n	8009f06 <_puts_r+0x9a>
 8009e9a:	4621      	mov	r1, r4
 8009e9c:	4628      	mov	r0, r5
 8009e9e:	f000 f8fb 	bl	800a098 <__swsetup_r>
 8009ea2:	b380      	cbz	r0, 8009f06 <_puts_r+0x9a>
 8009ea4:	f04f 35ff 	mov.w	r5, #4294967295
 8009ea8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009eaa:	07da      	lsls	r2, r3, #31
 8009eac:	d405      	bmi.n	8009eba <_puts_r+0x4e>
 8009eae:	89a3      	ldrh	r3, [r4, #12]
 8009eb0:	059b      	lsls	r3, r3, #22
 8009eb2:	d402      	bmi.n	8009eba <_puts_r+0x4e>
 8009eb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009eb6:	f000 fa21 	bl	800a2fc <__retarget_lock_release_recursive>
 8009eba:	4628      	mov	r0, r5
 8009ebc:	bd70      	pop	{r4, r5, r6, pc}
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	da04      	bge.n	8009ecc <_puts_r+0x60>
 8009ec2:	69a2      	ldr	r2, [r4, #24]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	dc17      	bgt.n	8009ef8 <_puts_r+0x8c>
 8009ec8:	290a      	cmp	r1, #10
 8009eca:	d015      	beq.n	8009ef8 <_puts_r+0x8c>
 8009ecc:	6823      	ldr	r3, [r4, #0]
 8009ece:	1c5a      	adds	r2, r3, #1
 8009ed0:	6022      	str	r2, [r4, #0]
 8009ed2:	7019      	strb	r1, [r3, #0]
 8009ed4:	68a3      	ldr	r3, [r4, #8]
 8009ed6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009eda:	3b01      	subs	r3, #1
 8009edc:	60a3      	str	r3, [r4, #8]
 8009ede:	2900      	cmp	r1, #0
 8009ee0:	d1ed      	bne.n	8009ebe <_puts_r+0x52>
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	da11      	bge.n	8009f0a <_puts_r+0x9e>
 8009ee6:	4622      	mov	r2, r4
 8009ee8:	210a      	movs	r1, #10
 8009eea:	4628      	mov	r0, r5
 8009eec:	f000 f895 	bl	800a01a <__swbuf_r>
 8009ef0:	3001      	adds	r0, #1
 8009ef2:	d0d7      	beq.n	8009ea4 <_puts_r+0x38>
 8009ef4:	250a      	movs	r5, #10
 8009ef6:	e7d7      	b.n	8009ea8 <_puts_r+0x3c>
 8009ef8:	4622      	mov	r2, r4
 8009efa:	4628      	mov	r0, r5
 8009efc:	f000 f88d 	bl	800a01a <__swbuf_r>
 8009f00:	3001      	adds	r0, #1
 8009f02:	d1e7      	bne.n	8009ed4 <_puts_r+0x68>
 8009f04:	e7ce      	b.n	8009ea4 <_puts_r+0x38>
 8009f06:	3e01      	subs	r6, #1
 8009f08:	e7e4      	b.n	8009ed4 <_puts_r+0x68>
 8009f0a:	6823      	ldr	r3, [r4, #0]
 8009f0c:	1c5a      	adds	r2, r3, #1
 8009f0e:	6022      	str	r2, [r4, #0]
 8009f10:	220a      	movs	r2, #10
 8009f12:	701a      	strb	r2, [r3, #0]
 8009f14:	e7ee      	b.n	8009ef4 <_puts_r+0x88>
	...

08009f18 <puts>:
 8009f18:	4b02      	ldr	r3, [pc, #8]	@ (8009f24 <puts+0xc>)
 8009f1a:	4601      	mov	r1, r0
 8009f1c:	6818      	ldr	r0, [r3, #0]
 8009f1e:	f7ff bfa5 	b.w	8009e6c <_puts_r>
 8009f22:	bf00      	nop
 8009f24:	2000001c 	.word	0x2000001c

08009f28 <sniprintf>:
 8009f28:	b40c      	push	{r2, r3}
 8009f2a:	b530      	push	{r4, r5, lr}
 8009f2c:	4b18      	ldr	r3, [pc, #96]	@ (8009f90 <sniprintf+0x68>)
 8009f2e:	1e0c      	subs	r4, r1, #0
 8009f30:	681d      	ldr	r5, [r3, #0]
 8009f32:	b09d      	sub	sp, #116	@ 0x74
 8009f34:	da08      	bge.n	8009f48 <sniprintf+0x20>
 8009f36:	238b      	movs	r3, #139	@ 0x8b
 8009f38:	602b      	str	r3, [r5, #0]
 8009f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f3e:	b01d      	add	sp, #116	@ 0x74
 8009f40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f44:	b002      	add	sp, #8
 8009f46:	4770      	bx	lr
 8009f48:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009f4c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009f50:	f04f 0300 	mov.w	r3, #0
 8009f54:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009f56:	bf14      	ite	ne
 8009f58:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009f5c:	4623      	moveq	r3, r4
 8009f5e:	9304      	str	r3, [sp, #16]
 8009f60:	9307      	str	r3, [sp, #28]
 8009f62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009f66:	9002      	str	r0, [sp, #8]
 8009f68:	9006      	str	r0, [sp, #24]
 8009f6a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009f6e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009f70:	ab21      	add	r3, sp, #132	@ 0x84
 8009f72:	a902      	add	r1, sp, #8
 8009f74:	4628      	mov	r0, r5
 8009f76:	9301      	str	r3, [sp, #4]
 8009f78:	f001 fd00 	bl	800b97c <_svfiprintf_r>
 8009f7c:	1c43      	adds	r3, r0, #1
 8009f7e:	bfbc      	itt	lt
 8009f80:	238b      	movlt	r3, #139	@ 0x8b
 8009f82:	602b      	strlt	r3, [r5, #0]
 8009f84:	2c00      	cmp	r4, #0
 8009f86:	d0da      	beq.n	8009f3e <sniprintf+0x16>
 8009f88:	9b02      	ldr	r3, [sp, #8]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	701a      	strb	r2, [r3, #0]
 8009f8e:	e7d6      	b.n	8009f3e <sniprintf+0x16>
 8009f90:	2000001c 	.word	0x2000001c

08009f94 <__sread>:
 8009f94:	b510      	push	{r4, lr}
 8009f96:	460c      	mov	r4, r1
 8009f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f9c:	f000 f95e 	bl	800a25c <_read_r>
 8009fa0:	2800      	cmp	r0, #0
 8009fa2:	bfab      	itete	ge
 8009fa4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009fa6:	89a3      	ldrhlt	r3, [r4, #12]
 8009fa8:	181b      	addge	r3, r3, r0
 8009faa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009fae:	bfac      	ite	ge
 8009fb0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009fb2:	81a3      	strhlt	r3, [r4, #12]
 8009fb4:	bd10      	pop	{r4, pc}

08009fb6 <__swrite>:
 8009fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fba:	461f      	mov	r7, r3
 8009fbc:	898b      	ldrh	r3, [r1, #12]
 8009fbe:	05db      	lsls	r3, r3, #23
 8009fc0:	4605      	mov	r5, r0
 8009fc2:	460c      	mov	r4, r1
 8009fc4:	4616      	mov	r6, r2
 8009fc6:	d505      	bpl.n	8009fd4 <__swrite+0x1e>
 8009fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fcc:	2302      	movs	r3, #2
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f000 f932 	bl	800a238 <_lseek_r>
 8009fd4:	89a3      	ldrh	r3, [r4, #12]
 8009fd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009fde:	81a3      	strh	r3, [r4, #12]
 8009fe0:	4632      	mov	r2, r6
 8009fe2:	463b      	mov	r3, r7
 8009fe4:	4628      	mov	r0, r5
 8009fe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fea:	f000 b949 	b.w	800a280 <_write_r>

08009fee <__sseek>:
 8009fee:	b510      	push	{r4, lr}
 8009ff0:	460c      	mov	r4, r1
 8009ff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ff6:	f000 f91f 	bl	800a238 <_lseek_r>
 8009ffa:	1c43      	adds	r3, r0, #1
 8009ffc:	89a3      	ldrh	r3, [r4, #12]
 8009ffe:	bf15      	itete	ne
 800a000:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a002:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a006:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a00a:	81a3      	strheq	r3, [r4, #12]
 800a00c:	bf18      	it	ne
 800a00e:	81a3      	strhne	r3, [r4, #12]
 800a010:	bd10      	pop	{r4, pc}

0800a012 <__sclose>:
 800a012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a016:	f000 b8a1 	b.w	800a15c <_close_r>

0800a01a <__swbuf_r>:
 800a01a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a01c:	460e      	mov	r6, r1
 800a01e:	4614      	mov	r4, r2
 800a020:	4605      	mov	r5, r0
 800a022:	b118      	cbz	r0, 800a02c <__swbuf_r+0x12>
 800a024:	6a03      	ldr	r3, [r0, #32]
 800a026:	b90b      	cbnz	r3, 800a02c <__swbuf_r+0x12>
 800a028:	f7ff fed8 	bl	8009ddc <__sinit>
 800a02c:	69a3      	ldr	r3, [r4, #24]
 800a02e:	60a3      	str	r3, [r4, #8]
 800a030:	89a3      	ldrh	r3, [r4, #12]
 800a032:	071a      	lsls	r2, r3, #28
 800a034:	d501      	bpl.n	800a03a <__swbuf_r+0x20>
 800a036:	6923      	ldr	r3, [r4, #16]
 800a038:	b943      	cbnz	r3, 800a04c <__swbuf_r+0x32>
 800a03a:	4621      	mov	r1, r4
 800a03c:	4628      	mov	r0, r5
 800a03e:	f000 f82b 	bl	800a098 <__swsetup_r>
 800a042:	b118      	cbz	r0, 800a04c <__swbuf_r+0x32>
 800a044:	f04f 37ff 	mov.w	r7, #4294967295
 800a048:	4638      	mov	r0, r7
 800a04a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a04c:	6823      	ldr	r3, [r4, #0]
 800a04e:	6922      	ldr	r2, [r4, #16]
 800a050:	1a98      	subs	r0, r3, r2
 800a052:	6963      	ldr	r3, [r4, #20]
 800a054:	b2f6      	uxtb	r6, r6
 800a056:	4283      	cmp	r3, r0
 800a058:	4637      	mov	r7, r6
 800a05a:	dc05      	bgt.n	800a068 <__swbuf_r+0x4e>
 800a05c:	4621      	mov	r1, r4
 800a05e:	4628      	mov	r0, r5
 800a060:	f001 ff4e 	bl	800bf00 <_fflush_r>
 800a064:	2800      	cmp	r0, #0
 800a066:	d1ed      	bne.n	800a044 <__swbuf_r+0x2a>
 800a068:	68a3      	ldr	r3, [r4, #8]
 800a06a:	3b01      	subs	r3, #1
 800a06c:	60a3      	str	r3, [r4, #8]
 800a06e:	6823      	ldr	r3, [r4, #0]
 800a070:	1c5a      	adds	r2, r3, #1
 800a072:	6022      	str	r2, [r4, #0]
 800a074:	701e      	strb	r6, [r3, #0]
 800a076:	6962      	ldr	r2, [r4, #20]
 800a078:	1c43      	adds	r3, r0, #1
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d004      	beq.n	800a088 <__swbuf_r+0x6e>
 800a07e:	89a3      	ldrh	r3, [r4, #12]
 800a080:	07db      	lsls	r3, r3, #31
 800a082:	d5e1      	bpl.n	800a048 <__swbuf_r+0x2e>
 800a084:	2e0a      	cmp	r6, #10
 800a086:	d1df      	bne.n	800a048 <__swbuf_r+0x2e>
 800a088:	4621      	mov	r1, r4
 800a08a:	4628      	mov	r0, r5
 800a08c:	f001 ff38 	bl	800bf00 <_fflush_r>
 800a090:	2800      	cmp	r0, #0
 800a092:	d0d9      	beq.n	800a048 <__swbuf_r+0x2e>
 800a094:	e7d6      	b.n	800a044 <__swbuf_r+0x2a>
	...

0800a098 <__swsetup_r>:
 800a098:	b538      	push	{r3, r4, r5, lr}
 800a09a:	4b29      	ldr	r3, [pc, #164]	@ (800a140 <__swsetup_r+0xa8>)
 800a09c:	4605      	mov	r5, r0
 800a09e:	6818      	ldr	r0, [r3, #0]
 800a0a0:	460c      	mov	r4, r1
 800a0a2:	b118      	cbz	r0, 800a0ac <__swsetup_r+0x14>
 800a0a4:	6a03      	ldr	r3, [r0, #32]
 800a0a6:	b90b      	cbnz	r3, 800a0ac <__swsetup_r+0x14>
 800a0a8:	f7ff fe98 	bl	8009ddc <__sinit>
 800a0ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0b0:	0719      	lsls	r1, r3, #28
 800a0b2:	d422      	bmi.n	800a0fa <__swsetup_r+0x62>
 800a0b4:	06da      	lsls	r2, r3, #27
 800a0b6:	d407      	bmi.n	800a0c8 <__swsetup_r+0x30>
 800a0b8:	2209      	movs	r2, #9
 800a0ba:	602a      	str	r2, [r5, #0]
 800a0bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0c0:	81a3      	strh	r3, [r4, #12]
 800a0c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c6:	e033      	b.n	800a130 <__swsetup_r+0x98>
 800a0c8:	0758      	lsls	r0, r3, #29
 800a0ca:	d512      	bpl.n	800a0f2 <__swsetup_r+0x5a>
 800a0cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a0ce:	b141      	cbz	r1, 800a0e2 <__swsetup_r+0x4a>
 800a0d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a0d4:	4299      	cmp	r1, r3
 800a0d6:	d002      	beq.n	800a0de <__swsetup_r+0x46>
 800a0d8:	4628      	mov	r0, r5
 800a0da:	f000 ff79 	bl	800afd0 <_free_r>
 800a0de:	2300      	movs	r3, #0
 800a0e0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a0e2:	89a3      	ldrh	r3, [r4, #12]
 800a0e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a0e8:	81a3      	strh	r3, [r4, #12]
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	6063      	str	r3, [r4, #4]
 800a0ee:	6923      	ldr	r3, [r4, #16]
 800a0f0:	6023      	str	r3, [r4, #0]
 800a0f2:	89a3      	ldrh	r3, [r4, #12]
 800a0f4:	f043 0308 	orr.w	r3, r3, #8
 800a0f8:	81a3      	strh	r3, [r4, #12]
 800a0fa:	6923      	ldr	r3, [r4, #16]
 800a0fc:	b94b      	cbnz	r3, 800a112 <__swsetup_r+0x7a>
 800a0fe:	89a3      	ldrh	r3, [r4, #12]
 800a100:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a108:	d003      	beq.n	800a112 <__swsetup_r+0x7a>
 800a10a:	4621      	mov	r1, r4
 800a10c:	4628      	mov	r0, r5
 800a10e:	f001 ff45 	bl	800bf9c <__smakebuf_r>
 800a112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a116:	f013 0201 	ands.w	r2, r3, #1
 800a11a:	d00a      	beq.n	800a132 <__swsetup_r+0x9a>
 800a11c:	2200      	movs	r2, #0
 800a11e:	60a2      	str	r2, [r4, #8]
 800a120:	6962      	ldr	r2, [r4, #20]
 800a122:	4252      	negs	r2, r2
 800a124:	61a2      	str	r2, [r4, #24]
 800a126:	6922      	ldr	r2, [r4, #16]
 800a128:	b942      	cbnz	r2, 800a13c <__swsetup_r+0xa4>
 800a12a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a12e:	d1c5      	bne.n	800a0bc <__swsetup_r+0x24>
 800a130:	bd38      	pop	{r3, r4, r5, pc}
 800a132:	0799      	lsls	r1, r3, #30
 800a134:	bf58      	it	pl
 800a136:	6962      	ldrpl	r2, [r4, #20]
 800a138:	60a2      	str	r2, [r4, #8]
 800a13a:	e7f4      	b.n	800a126 <__swsetup_r+0x8e>
 800a13c:	2000      	movs	r0, #0
 800a13e:	e7f7      	b.n	800a130 <__swsetup_r+0x98>
 800a140:	2000001c 	.word	0x2000001c

0800a144 <memset>:
 800a144:	4402      	add	r2, r0
 800a146:	4603      	mov	r3, r0
 800a148:	4293      	cmp	r3, r2
 800a14a:	d100      	bne.n	800a14e <memset+0xa>
 800a14c:	4770      	bx	lr
 800a14e:	f803 1b01 	strb.w	r1, [r3], #1
 800a152:	e7f9      	b.n	800a148 <memset+0x4>

0800a154 <_localeconv_r>:
 800a154:	4800      	ldr	r0, [pc, #0]	@ (800a158 <_localeconv_r+0x4>)
 800a156:	4770      	bx	lr
 800a158:	2000015c 	.word	0x2000015c

0800a15c <_close_r>:
 800a15c:	b538      	push	{r3, r4, r5, lr}
 800a15e:	4d06      	ldr	r5, [pc, #24]	@ (800a178 <_close_r+0x1c>)
 800a160:	2300      	movs	r3, #0
 800a162:	4604      	mov	r4, r0
 800a164:	4608      	mov	r0, r1
 800a166:	602b      	str	r3, [r5, #0]
 800a168:	f7f8 f8f6 	bl	8002358 <_close>
 800a16c:	1c43      	adds	r3, r0, #1
 800a16e:	d102      	bne.n	800a176 <_close_r+0x1a>
 800a170:	682b      	ldr	r3, [r5, #0]
 800a172:	b103      	cbz	r3, 800a176 <_close_r+0x1a>
 800a174:	6023      	str	r3, [r4, #0]
 800a176:	bd38      	pop	{r3, r4, r5, pc}
 800a178:	20005028 	.word	0x20005028

0800a17c <_reclaim_reent>:
 800a17c:	4b2d      	ldr	r3, [pc, #180]	@ (800a234 <_reclaim_reent+0xb8>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4283      	cmp	r3, r0
 800a182:	b570      	push	{r4, r5, r6, lr}
 800a184:	4604      	mov	r4, r0
 800a186:	d053      	beq.n	800a230 <_reclaim_reent+0xb4>
 800a188:	69c3      	ldr	r3, [r0, #28]
 800a18a:	b31b      	cbz	r3, 800a1d4 <_reclaim_reent+0x58>
 800a18c:	68db      	ldr	r3, [r3, #12]
 800a18e:	b163      	cbz	r3, 800a1aa <_reclaim_reent+0x2e>
 800a190:	2500      	movs	r5, #0
 800a192:	69e3      	ldr	r3, [r4, #28]
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	5959      	ldr	r1, [r3, r5]
 800a198:	b9b1      	cbnz	r1, 800a1c8 <_reclaim_reent+0x4c>
 800a19a:	3504      	adds	r5, #4
 800a19c:	2d80      	cmp	r5, #128	@ 0x80
 800a19e:	d1f8      	bne.n	800a192 <_reclaim_reent+0x16>
 800a1a0:	69e3      	ldr	r3, [r4, #28]
 800a1a2:	4620      	mov	r0, r4
 800a1a4:	68d9      	ldr	r1, [r3, #12]
 800a1a6:	f000 ff13 	bl	800afd0 <_free_r>
 800a1aa:	69e3      	ldr	r3, [r4, #28]
 800a1ac:	6819      	ldr	r1, [r3, #0]
 800a1ae:	b111      	cbz	r1, 800a1b6 <_reclaim_reent+0x3a>
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	f000 ff0d 	bl	800afd0 <_free_r>
 800a1b6:	69e3      	ldr	r3, [r4, #28]
 800a1b8:	689d      	ldr	r5, [r3, #8]
 800a1ba:	b15d      	cbz	r5, 800a1d4 <_reclaim_reent+0x58>
 800a1bc:	4629      	mov	r1, r5
 800a1be:	4620      	mov	r0, r4
 800a1c0:	682d      	ldr	r5, [r5, #0]
 800a1c2:	f000 ff05 	bl	800afd0 <_free_r>
 800a1c6:	e7f8      	b.n	800a1ba <_reclaim_reent+0x3e>
 800a1c8:	680e      	ldr	r6, [r1, #0]
 800a1ca:	4620      	mov	r0, r4
 800a1cc:	f000 ff00 	bl	800afd0 <_free_r>
 800a1d0:	4631      	mov	r1, r6
 800a1d2:	e7e1      	b.n	800a198 <_reclaim_reent+0x1c>
 800a1d4:	6961      	ldr	r1, [r4, #20]
 800a1d6:	b111      	cbz	r1, 800a1de <_reclaim_reent+0x62>
 800a1d8:	4620      	mov	r0, r4
 800a1da:	f000 fef9 	bl	800afd0 <_free_r>
 800a1de:	69e1      	ldr	r1, [r4, #28]
 800a1e0:	b111      	cbz	r1, 800a1e8 <_reclaim_reent+0x6c>
 800a1e2:	4620      	mov	r0, r4
 800a1e4:	f000 fef4 	bl	800afd0 <_free_r>
 800a1e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a1ea:	b111      	cbz	r1, 800a1f2 <_reclaim_reent+0x76>
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	f000 feef 	bl	800afd0 <_free_r>
 800a1f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a1f4:	b111      	cbz	r1, 800a1fc <_reclaim_reent+0x80>
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	f000 feea 	bl	800afd0 <_free_r>
 800a1fc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a1fe:	b111      	cbz	r1, 800a206 <_reclaim_reent+0x8a>
 800a200:	4620      	mov	r0, r4
 800a202:	f000 fee5 	bl	800afd0 <_free_r>
 800a206:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a208:	b111      	cbz	r1, 800a210 <_reclaim_reent+0x94>
 800a20a:	4620      	mov	r0, r4
 800a20c:	f000 fee0 	bl	800afd0 <_free_r>
 800a210:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a212:	b111      	cbz	r1, 800a21a <_reclaim_reent+0x9e>
 800a214:	4620      	mov	r0, r4
 800a216:	f000 fedb 	bl	800afd0 <_free_r>
 800a21a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a21c:	b111      	cbz	r1, 800a224 <_reclaim_reent+0xa8>
 800a21e:	4620      	mov	r0, r4
 800a220:	f000 fed6 	bl	800afd0 <_free_r>
 800a224:	6a23      	ldr	r3, [r4, #32]
 800a226:	b11b      	cbz	r3, 800a230 <_reclaim_reent+0xb4>
 800a228:	4620      	mov	r0, r4
 800a22a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a22e:	4718      	bx	r3
 800a230:	bd70      	pop	{r4, r5, r6, pc}
 800a232:	bf00      	nop
 800a234:	2000001c 	.word	0x2000001c

0800a238 <_lseek_r>:
 800a238:	b538      	push	{r3, r4, r5, lr}
 800a23a:	4d07      	ldr	r5, [pc, #28]	@ (800a258 <_lseek_r+0x20>)
 800a23c:	4604      	mov	r4, r0
 800a23e:	4608      	mov	r0, r1
 800a240:	4611      	mov	r1, r2
 800a242:	2200      	movs	r2, #0
 800a244:	602a      	str	r2, [r5, #0]
 800a246:	461a      	mov	r2, r3
 800a248:	f7f8 f8ad 	bl	80023a6 <_lseek>
 800a24c:	1c43      	adds	r3, r0, #1
 800a24e:	d102      	bne.n	800a256 <_lseek_r+0x1e>
 800a250:	682b      	ldr	r3, [r5, #0]
 800a252:	b103      	cbz	r3, 800a256 <_lseek_r+0x1e>
 800a254:	6023      	str	r3, [r4, #0]
 800a256:	bd38      	pop	{r3, r4, r5, pc}
 800a258:	20005028 	.word	0x20005028

0800a25c <_read_r>:
 800a25c:	b538      	push	{r3, r4, r5, lr}
 800a25e:	4d07      	ldr	r5, [pc, #28]	@ (800a27c <_read_r+0x20>)
 800a260:	4604      	mov	r4, r0
 800a262:	4608      	mov	r0, r1
 800a264:	4611      	mov	r1, r2
 800a266:	2200      	movs	r2, #0
 800a268:	602a      	str	r2, [r5, #0]
 800a26a:	461a      	mov	r2, r3
 800a26c:	f7f8 f83b 	bl	80022e6 <_read>
 800a270:	1c43      	adds	r3, r0, #1
 800a272:	d102      	bne.n	800a27a <_read_r+0x1e>
 800a274:	682b      	ldr	r3, [r5, #0]
 800a276:	b103      	cbz	r3, 800a27a <_read_r+0x1e>
 800a278:	6023      	str	r3, [r4, #0]
 800a27a:	bd38      	pop	{r3, r4, r5, pc}
 800a27c:	20005028 	.word	0x20005028

0800a280 <_write_r>:
 800a280:	b538      	push	{r3, r4, r5, lr}
 800a282:	4d07      	ldr	r5, [pc, #28]	@ (800a2a0 <_write_r+0x20>)
 800a284:	4604      	mov	r4, r0
 800a286:	4608      	mov	r0, r1
 800a288:	4611      	mov	r1, r2
 800a28a:	2200      	movs	r2, #0
 800a28c:	602a      	str	r2, [r5, #0]
 800a28e:	461a      	mov	r2, r3
 800a290:	f7f8 f846 	bl	8002320 <_write>
 800a294:	1c43      	adds	r3, r0, #1
 800a296:	d102      	bne.n	800a29e <_write_r+0x1e>
 800a298:	682b      	ldr	r3, [r5, #0]
 800a29a:	b103      	cbz	r3, 800a29e <_write_r+0x1e>
 800a29c:	6023      	str	r3, [r4, #0]
 800a29e:	bd38      	pop	{r3, r4, r5, pc}
 800a2a0:	20005028 	.word	0x20005028

0800a2a4 <__errno>:
 800a2a4:	4b01      	ldr	r3, [pc, #4]	@ (800a2ac <__errno+0x8>)
 800a2a6:	6818      	ldr	r0, [r3, #0]
 800a2a8:	4770      	bx	lr
 800a2aa:	bf00      	nop
 800a2ac:	2000001c 	.word	0x2000001c

0800a2b0 <__libc_init_array>:
 800a2b0:	b570      	push	{r4, r5, r6, lr}
 800a2b2:	4d0d      	ldr	r5, [pc, #52]	@ (800a2e8 <__libc_init_array+0x38>)
 800a2b4:	4c0d      	ldr	r4, [pc, #52]	@ (800a2ec <__libc_init_array+0x3c>)
 800a2b6:	1b64      	subs	r4, r4, r5
 800a2b8:	10a4      	asrs	r4, r4, #2
 800a2ba:	2600      	movs	r6, #0
 800a2bc:	42a6      	cmp	r6, r4
 800a2be:	d109      	bne.n	800a2d4 <__libc_init_array+0x24>
 800a2c0:	4d0b      	ldr	r5, [pc, #44]	@ (800a2f0 <__libc_init_array+0x40>)
 800a2c2:	4c0c      	ldr	r4, [pc, #48]	@ (800a2f4 <__libc_init_array+0x44>)
 800a2c4:	f001 ffd8 	bl	800c278 <_init>
 800a2c8:	1b64      	subs	r4, r4, r5
 800a2ca:	10a4      	asrs	r4, r4, #2
 800a2cc:	2600      	movs	r6, #0
 800a2ce:	42a6      	cmp	r6, r4
 800a2d0:	d105      	bne.n	800a2de <__libc_init_array+0x2e>
 800a2d2:	bd70      	pop	{r4, r5, r6, pc}
 800a2d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2d8:	4798      	blx	r3
 800a2da:	3601      	adds	r6, #1
 800a2dc:	e7ee      	b.n	800a2bc <__libc_init_array+0xc>
 800a2de:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2e2:	4798      	blx	r3
 800a2e4:	3601      	adds	r6, #1
 800a2e6:	e7f2      	b.n	800a2ce <__libc_init_array+0x1e>
 800a2e8:	0800c794 	.word	0x0800c794
 800a2ec:	0800c794 	.word	0x0800c794
 800a2f0:	0800c794 	.word	0x0800c794
 800a2f4:	0800c798 	.word	0x0800c798

0800a2f8 <__retarget_lock_init_recursive>:
 800a2f8:	4770      	bx	lr

0800a2fa <__retarget_lock_acquire_recursive>:
 800a2fa:	4770      	bx	lr

0800a2fc <__retarget_lock_release_recursive>:
 800a2fc:	4770      	bx	lr

0800a2fe <memcpy>:
 800a2fe:	440a      	add	r2, r1
 800a300:	4291      	cmp	r1, r2
 800a302:	f100 33ff 	add.w	r3, r0, #4294967295
 800a306:	d100      	bne.n	800a30a <memcpy+0xc>
 800a308:	4770      	bx	lr
 800a30a:	b510      	push	{r4, lr}
 800a30c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a310:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a314:	4291      	cmp	r1, r2
 800a316:	d1f9      	bne.n	800a30c <memcpy+0xe>
 800a318:	bd10      	pop	{r4, pc}

0800a31a <quorem>:
 800a31a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a31e:	6903      	ldr	r3, [r0, #16]
 800a320:	690c      	ldr	r4, [r1, #16]
 800a322:	42a3      	cmp	r3, r4
 800a324:	4607      	mov	r7, r0
 800a326:	db7e      	blt.n	800a426 <quorem+0x10c>
 800a328:	3c01      	subs	r4, #1
 800a32a:	f101 0814 	add.w	r8, r1, #20
 800a32e:	00a3      	lsls	r3, r4, #2
 800a330:	f100 0514 	add.w	r5, r0, #20
 800a334:	9300      	str	r3, [sp, #0]
 800a336:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a33a:	9301      	str	r3, [sp, #4]
 800a33c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a340:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a344:	3301      	adds	r3, #1
 800a346:	429a      	cmp	r2, r3
 800a348:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a34c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a350:	d32e      	bcc.n	800a3b0 <quorem+0x96>
 800a352:	f04f 0a00 	mov.w	sl, #0
 800a356:	46c4      	mov	ip, r8
 800a358:	46ae      	mov	lr, r5
 800a35a:	46d3      	mov	fp, sl
 800a35c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a360:	b298      	uxth	r0, r3
 800a362:	fb06 a000 	mla	r0, r6, r0, sl
 800a366:	0c02      	lsrs	r2, r0, #16
 800a368:	0c1b      	lsrs	r3, r3, #16
 800a36a:	fb06 2303 	mla	r3, r6, r3, r2
 800a36e:	f8de 2000 	ldr.w	r2, [lr]
 800a372:	b280      	uxth	r0, r0
 800a374:	b292      	uxth	r2, r2
 800a376:	1a12      	subs	r2, r2, r0
 800a378:	445a      	add	r2, fp
 800a37a:	f8de 0000 	ldr.w	r0, [lr]
 800a37e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a382:	b29b      	uxth	r3, r3
 800a384:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a388:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a38c:	b292      	uxth	r2, r2
 800a38e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a392:	45e1      	cmp	r9, ip
 800a394:	f84e 2b04 	str.w	r2, [lr], #4
 800a398:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a39c:	d2de      	bcs.n	800a35c <quorem+0x42>
 800a39e:	9b00      	ldr	r3, [sp, #0]
 800a3a0:	58eb      	ldr	r3, [r5, r3]
 800a3a2:	b92b      	cbnz	r3, 800a3b0 <quorem+0x96>
 800a3a4:	9b01      	ldr	r3, [sp, #4]
 800a3a6:	3b04      	subs	r3, #4
 800a3a8:	429d      	cmp	r5, r3
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	d32f      	bcc.n	800a40e <quorem+0xf4>
 800a3ae:	613c      	str	r4, [r7, #16]
 800a3b0:	4638      	mov	r0, r7
 800a3b2:	f001 f97f 	bl	800b6b4 <__mcmp>
 800a3b6:	2800      	cmp	r0, #0
 800a3b8:	db25      	blt.n	800a406 <quorem+0xec>
 800a3ba:	4629      	mov	r1, r5
 800a3bc:	2000      	movs	r0, #0
 800a3be:	f858 2b04 	ldr.w	r2, [r8], #4
 800a3c2:	f8d1 c000 	ldr.w	ip, [r1]
 800a3c6:	fa1f fe82 	uxth.w	lr, r2
 800a3ca:	fa1f f38c 	uxth.w	r3, ip
 800a3ce:	eba3 030e 	sub.w	r3, r3, lr
 800a3d2:	4403      	add	r3, r0
 800a3d4:	0c12      	lsrs	r2, r2, #16
 800a3d6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a3da:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3e4:	45c1      	cmp	r9, r8
 800a3e6:	f841 3b04 	str.w	r3, [r1], #4
 800a3ea:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a3ee:	d2e6      	bcs.n	800a3be <quorem+0xa4>
 800a3f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a3f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a3f8:	b922      	cbnz	r2, 800a404 <quorem+0xea>
 800a3fa:	3b04      	subs	r3, #4
 800a3fc:	429d      	cmp	r5, r3
 800a3fe:	461a      	mov	r2, r3
 800a400:	d30b      	bcc.n	800a41a <quorem+0x100>
 800a402:	613c      	str	r4, [r7, #16]
 800a404:	3601      	adds	r6, #1
 800a406:	4630      	mov	r0, r6
 800a408:	b003      	add	sp, #12
 800a40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a40e:	6812      	ldr	r2, [r2, #0]
 800a410:	3b04      	subs	r3, #4
 800a412:	2a00      	cmp	r2, #0
 800a414:	d1cb      	bne.n	800a3ae <quorem+0x94>
 800a416:	3c01      	subs	r4, #1
 800a418:	e7c6      	b.n	800a3a8 <quorem+0x8e>
 800a41a:	6812      	ldr	r2, [r2, #0]
 800a41c:	3b04      	subs	r3, #4
 800a41e:	2a00      	cmp	r2, #0
 800a420:	d1ef      	bne.n	800a402 <quorem+0xe8>
 800a422:	3c01      	subs	r4, #1
 800a424:	e7ea      	b.n	800a3fc <quorem+0xe2>
 800a426:	2000      	movs	r0, #0
 800a428:	e7ee      	b.n	800a408 <quorem+0xee>
 800a42a:	0000      	movs	r0, r0
 800a42c:	0000      	movs	r0, r0
	...

0800a430 <_dtoa_r>:
 800a430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a434:	69c7      	ldr	r7, [r0, #28]
 800a436:	b097      	sub	sp, #92	@ 0x5c
 800a438:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a43c:	ec55 4b10 	vmov	r4, r5, d0
 800a440:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a442:	9107      	str	r1, [sp, #28]
 800a444:	4681      	mov	r9, r0
 800a446:	920c      	str	r2, [sp, #48]	@ 0x30
 800a448:	9311      	str	r3, [sp, #68]	@ 0x44
 800a44a:	b97f      	cbnz	r7, 800a46c <_dtoa_r+0x3c>
 800a44c:	2010      	movs	r0, #16
 800a44e:	f000 fe09 	bl	800b064 <malloc>
 800a452:	4602      	mov	r2, r0
 800a454:	f8c9 001c 	str.w	r0, [r9, #28]
 800a458:	b920      	cbnz	r0, 800a464 <_dtoa_r+0x34>
 800a45a:	4ba9      	ldr	r3, [pc, #676]	@ (800a700 <_dtoa_r+0x2d0>)
 800a45c:	21ef      	movs	r1, #239	@ 0xef
 800a45e:	48a9      	ldr	r0, [pc, #676]	@ (800a704 <_dtoa_r+0x2d4>)
 800a460:	f001 fe24 	bl	800c0ac <__assert_func>
 800a464:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a468:	6007      	str	r7, [r0, #0]
 800a46a:	60c7      	str	r7, [r0, #12]
 800a46c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a470:	6819      	ldr	r1, [r3, #0]
 800a472:	b159      	cbz	r1, 800a48c <_dtoa_r+0x5c>
 800a474:	685a      	ldr	r2, [r3, #4]
 800a476:	604a      	str	r2, [r1, #4]
 800a478:	2301      	movs	r3, #1
 800a47a:	4093      	lsls	r3, r2
 800a47c:	608b      	str	r3, [r1, #8]
 800a47e:	4648      	mov	r0, r9
 800a480:	f000 fee6 	bl	800b250 <_Bfree>
 800a484:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a488:	2200      	movs	r2, #0
 800a48a:	601a      	str	r2, [r3, #0]
 800a48c:	1e2b      	subs	r3, r5, #0
 800a48e:	bfb9      	ittee	lt
 800a490:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a494:	9305      	strlt	r3, [sp, #20]
 800a496:	2300      	movge	r3, #0
 800a498:	6033      	strge	r3, [r6, #0]
 800a49a:	9f05      	ldr	r7, [sp, #20]
 800a49c:	4b9a      	ldr	r3, [pc, #616]	@ (800a708 <_dtoa_r+0x2d8>)
 800a49e:	bfbc      	itt	lt
 800a4a0:	2201      	movlt	r2, #1
 800a4a2:	6032      	strlt	r2, [r6, #0]
 800a4a4:	43bb      	bics	r3, r7
 800a4a6:	d112      	bne.n	800a4ce <_dtoa_r+0x9e>
 800a4a8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a4aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a4ae:	6013      	str	r3, [r2, #0]
 800a4b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a4b4:	4323      	orrs	r3, r4
 800a4b6:	f000 855a 	beq.w	800af6e <_dtoa_r+0xb3e>
 800a4ba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a4bc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800a71c <_dtoa_r+0x2ec>
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	f000 855c 	beq.w	800af7e <_dtoa_r+0xb4e>
 800a4c6:	f10a 0303 	add.w	r3, sl, #3
 800a4ca:	f000 bd56 	b.w	800af7a <_dtoa_r+0xb4a>
 800a4ce:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	ec51 0b17 	vmov	r0, r1, d7
 800a4d8:	2300      	movs	r3, #0
 800a4da:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a4de:	f7f6 fafb 	bl	8000ad8 <__aeabi_dcmpeq>
 800a4e2:	4680      	mov	r8, r0
 800a4e4:	b158      	cbz	r0, 800a4fe <_dtoa_r+0xce>
 800a4e6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	6013      	str	r3, [r2, #0]
 800a4ec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a4ee:	b113      	cbz	r3, 800a4f6 <_dtoa_r+0xc6>
 800a4f0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a4f2:	4b86      	ldr	r3, [pc, #536]	@ (800a70c <_dtoa_r+0x2dc>)
 800a4f4:	6013      	str	r3, [r2, #0]
 800a4f6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800a720 <_dtoa_r+0x2f0>
 800a4fa:	f000 bd40 	b.w	800af7e <_dtoa_r+0xb4e>
 800a4fe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a502:	aa14      	add	r2, sp, #80	@ 0x50
 800a504:	a915      	add	r1, sp, #84	@ 0x54
 800a506:	4648      	mov	r0, r9
 800a508:	f001 f984 	bl	800b814 <__d2b>
 800a50c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a510:	9002      	str	r0, [sp, #8]
 800a512:	2e00      	cmp	r6, #0
 800a514:	d078      	beq.n	800a608 <_dtoa_r+0x1d8>
 800a516:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a518:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a51c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a520:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a524:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a528:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a52c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a530:	4619      	mov	r1, r3
 800a532:	2200      	movs	r2, #0
 800a534:	4b76      	ldr	r3, [pc, #472]	@ (800a710 <_dtoa_r+0x2e0>)
 800a536:	f7f5 feaf 	bl	8000298 <__aeabi_dsub>
 800a53a:	a36b      	add	r3, pc, #428	@ (adr r3, 800a6e8 <_dtoa_r+0x2b8>)
 800a53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a540:	f7f6 f862 	bl	8000608 <__aeabi_dmul>
 800a544:	a36a      	add	r3, pc, #424	@ (adr r3, 800a6f0 <_dtoa_r+0x2c0>)
 800a546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54a:	f7f5 fea7 	bl	800029c <__adddf3>
 800a54e:	4604      	mov	r4, r0
 800a550:	4630      	mov	r0, r6
 800a552:	460d      	mov	r5, r1
 800a554:	f7f5 ffee 	bl	8000534 <__aeabi_i2d>
 800a558:	a367      	add	r3, pc, #412	@ (adr r3, 800a6f8 <_dtoa_r+0x2c8>)
 800a55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a55e:	f7f6 f853 	bl	8000608 <__aeabi_dmul>
 800a562:	4602      	mov	r2, r0
 800a564:	460b      	mov	r3, r1
 800a566:	4620      	mov	r0, r4
 800a568:	4629      	mov	r1, r5
 800a56a:	f7f5 fe97 	bl	800029c <__adddf3>
 800a56e:	4604      	mov	r4, r0
 800a570:	460d      	mov	r5, r1
 800a572:	f7f6 faf9 	bl	8000b68 <__aeabi_d2iz>
 800a576:	2200      	movs	r2, #0
 800a578:	4607      	mov	r7, r0
 800a57a:	2300      	movs	r3, #0
 800a57c:	4620      	mov	r0, r4
 800a57e:	4629      	mov	r1, r5
 800a580:	f7f6 fab4 	bl	8000aec <__aeabi_dcmplt>
 800a584:	b140      	cbz	r0, 800a598 <_dtoa_r+0x168>
 800a586:	4638      	mov	r0, r7
 800a588:	f7f5 ffd4 	bl	8000534 <__aeabi_i2d>
 800a58c:	4622      	mov	r2, r4
 800a58e:	462b      	mov	r3, r5
 800a590:	f7f6 faa2 	bl	8000ad8 <__aeabi_dcmpeq>
 800a594:	b900      	cbnz	r0, 800a598 <_dtoa_r+0x168>
 800a596:	3f01      	subs	r7, #1
 800a598:	2f16      	cmp	r7, #22
 800a59a:	d852      	bhi.n	800a642 <_dtoa_r+0x212>
 800a59c:	4b5d      	ldr	r3, [pc, #372]	@ (800a714 <_dtoa_r+0x2e4>)
 800a59e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a5aa:	f7f6 fa9f 	bl	8000aec <__aeabi_dcmplt>
 800a5ae:	2800      	cmp	r0, #0
 800a5b0:	d049      	beq.n	800a646 <_dtoa_r+0x216>
 800a5b2:	3f01      	subs	r7, #1
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	9310      	str	r3, [sp, #64]	@ 0x40
 800a5b8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a5ba:	1b9b      	subs	r3, r3, r6
 800a5bc:	1e5a      	subs	r2, r3, #1
 800a5be:	bf45      	ittet	mi
 800a5c0:	f1c3 0301 	rsbmi	r3, r3, #1
 800a5c4:	9300      	strmi	r3, [sp, #0]
 800a5c6:	2300      	movpl	r3, #0
 800a5c8:	2300      	movmi	r3, #0
 800a5ca:	9206      	str	r2, [sp, #24]
 800a5cc:	bf54      	ite	pl
 800a5ce:	9300      	strpl	r3, [sp, #0]
 800a5d0:	9306      	strmi	r3, [sp, #24]
 800a5d2:	2f00      	cmp	r7, #0
 800a5d4:	db39      	blt.n	800a64a <_dtoa_r+0x21a>
 800a5d6:	9b06      	ldr	r3, [sp, #24]
 800a5d8:	970d      	str	r7, [sp, #52]	@ 0x34
 800a5da:	443b      	add	r3, r7
 800a5dc:	9306      	str	r3, [sp, #24]
 800a5de:	2300      	movs	r3, #0
 800a5e0:	9308      	str	r3, [sp, #32]
 800a5e2:	9b07      	ldr	r3, [sp, #28]
 800a5e4:	2b09      	cmp	r3, #9
 800a5e6:	d863      	bhi.n	800a6b0 <_dtoa_r+0x280>
 800a5e8:	2b05      	cmp	r3, #5
 800a5ea:	bfc4      	itt	gt
 800a5ec:	3b04      	subgt	r3, #4
 800a5ee:	9307      	strgt	r3, [sp, #28]
 800a5f0:	9b07      	ldr	r3, [sp, #28]
 800a5f2:	f1a3 0302 	sub.w	r3, r3, #2
 800a5f6:	bfcc      	ite	gt
 800a5f8:	2400      	movgt	r4, #0
 800a5fa:	2401      	movle	r4, #1
 800a5fc:	2b03      	cmp	r3, #3
 800a5fe:	d863      	bhi.n	800a6c8 <_dtoa_r+0x298>
 800a600:	e8df f003 	tbb	[pc, r3]
 800a604:	2b375452 	.word	0x2b375452
 800a608:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a60c:	441e      	add	r6, r3
 800a60e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a612:	2b20      	cmp	r3, #32
 800a614:	bfc1      	itttt	gt
 800a616:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a61a:	409f      	lslgt	r7, r3
 800a61c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a620:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a624:	bfd6      	itet	le
 800a626:	f1c3 0320 	rsble	r3, r3, #32
 800a62a:	ea47 0003 	orrgt.w	r0, r7, r3
 800a62e:	fa04 f003 	lslle.w	r0, r4, r3
 800a632:	f7f5 ff6f 	bl	8000514 <__aeabi_ui2d>
 800a636:	2201      	movs	r2, #1
 800a638:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a63c:	3e01      	subs	r6, #1
 800a63e:	9212      	str	r2, [sp, #72]	@ 0x48
 800a640:	e776      	b.n	800a530 <_dtoa_r+0x100>
 800a642:	2301      	movs	r3, #1
 800a644:	e7b7      	b.n	800a5b6 <_dtoa_r+0x186>
 800a646:	9010      	str	r0, [sp, #64]	@ 0x40
 800a648:	e7b6      	b.n	800a5b8 <_dtoa_r+0x188>
 800a64a:	9b00      	ldr	r3, [sp, #0]
 800a64c:	1bdb      	subs	r3, r3, r7
 800a64e:	9300      	str	r3, [sp, #0]
 800a650:	427b      	negs	r3, r7
 800a652:	9308      	str	r3, [sp, #32]
 800a654:	2300      	movs	r3, #0
 800a656:	930d      	str	r3, [sp, #52]	@ 0x34
 800a658:	e7c3      	b.n	800a5e2 <_dtoa_r+0x1b2>
 800a65a:	2301      	movs	r3, #1
 800a65c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a65e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a660:	eb07 0b03 	add.w	fp, r7, r3
 800a664:	f10b 0301 	add.w	r3, fp, #1
 800a668:	2b01      	cmp	r3, #1
 800a66a:	9303      	str	r3, [sp, #12]
 800a66c:	bfb8      	it	lt
 800a66e:	2301      	movlt	r3, #1
 800a670:	e006      	b.n	800a680 <_dtoa_r+0x250>
 800a672:	2301      	movs	r3, #1
 800a674:	9309      	str	r3, [sp, #36]	@ 0x24
 800a676:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a678:	2b00      	cmp	r3, #0
 800a67a:	dd28      	ble.n	800a6ce <_dtoa_r+0x29e>
 800a67c:	469b      	mov	fp, r3
 800a67e:	9303      	str	r3, [sp, #12]
 800a680:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a684:	2100      	movs	r1, #0
 800a686:	2204      	movs	r2, #4
 800a688:	f102 0514 	add.w	r5, r2, #20
 800a68c:	429d      	cmp	r5, r3
 800a68e:	d926      	bls.n	800a6de <_dtoa_r+0x2ae>
 800a690:	6041      	str	r1, [r0, #4]
 800a692:	4648      	mov	r0, r9
 800a694:	f000 fd9c 	bl	800b1d0 <_Balloc>
 800a698:	4682      	mov	sl, r0
 800a69a:	2800      	cmp	r0, #0
 800a69c:	d142      	bne.n	800a724 <_dtoa_r+0x2f4>
 800a69e:	4b1e      	ldr	r3, [pc, #120]	@ (800a718 <_dtoa_r+0x2e8>)
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	f240 11af 	movw	r1, #431	@ 0x1af
 800a6a6:	e6da      	b.n	800a45e <_dtoa_r+0x2e>
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	e7e3      	b.n	800a674 <_dtoa_r+0x244>
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	e7d5      	b.n	800a65c <_dtoa_r+0x22c>
 800a6b0:	2401      	movs	r4, #1
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	9307      	str	r3, [sp, #28]
 800a6b6:	9409      	str	r4, [sp, #36]	@ 0x24
 800a6b8:	f04f 3bff 	mov.w	fp, #4294967295
 800a6bc:	2200      	movs	r2, #0
 800a6be:	f8cd b00c 	str.w	fp, [sp, #12]
 800a6c2:	2312      	movs	r3, #18
 800a6c4:	920c      	str	r2, [sp, #48]	@ 0x30
 800a6c6:	e7db      	b.n	800a680 <_dtoa_r+0x250>
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6cc:	e7f4      	b.n	800a6b8 <_dtoa_r+0x288>
 800a6ce:	f04f 0b01 	mov.w	fp, #1
 800a6d2:	f8cd b00c 	str.w	fp, [sp, #12]
 800a6d6:	465b      	mov	r3, fp
 800a6d8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a6dc:	e7d0      	b.n	800a680 <_dtoa_r+0x250>
 800a6de:	3101      	adds	r1, #1
 800a6e0:	0052      	lsls	r2, r2, #1
 800a6e2:	e7d1      	b.n	800a688 <_dtoa_r+0x258>
 800a6e4:	f3af 8000 	nop.w
 800a6e8:	636f4361 	.word	0x636f4361
 800a6ec:	3fd287a7 	.word	0x3fd287a7
 800a6f0:	8b60c8b3 	.word	0x8b60c8b3
 800a6f4:	3fc68a28 	.word	0x3fc68a28
 800a6f8:	509f79fb 	.word	0x509f79fb
 800a6fc:	3fd34413 	.word	0x3fd34413
 800a700:	0800c455 	.word	0x0800c455
 800a704:	0800c46c 	.word	0x0800c46c
 800a708:	7ff00000 	.word	0x7ff00000
 800a70c:	0800c425 	.word	0x0800c425
 800a710:	3ff80000 	.word	0x3ff80000
 800a714:	0800c5c0 	.word	0x0800c5c0
 800a718:	0800c4c4 	.word	0x0800c4c4
 800a71c:	0800c451 	.word	0x0800c451
 800a720:	0800c424 	.word	0x0800c424
 800a724:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a728:	6018      	str	r0, [r3, #0]
 800a72a:	9b03      	ldr	r3, [sp, #12]
 800a72c:	2b0e      	cmp	r3, #14
 800a72e:	f200 80a1 	bhi.w	800a874 <_dtoa_r+0x444>
 800a732:	2c00      	cmp	r4, #0
 800a734:	f000 809e 	beq.w	800a874 <_dtoa_r+0x444>
 800a738:	2f00      	cmp	r7, #0
 800a73a:	dd33      	ble.n	800a7a4 <_dtoa_r+0x374>
 800a73c:	4b9c      	ldr	r3, [pc, #624]	@ (800a9b0 <_dtoa_r+0x580>)
 800a73e:	f007 020f 	and.w	r2, r7, #15
 800a742:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a746:	ed93 7b00 	vldr	d7, [r3]
 800a74a:	05f8      	lsls	r0, r7, #23
 800a74c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800a750:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a754:	d516      	bpl.n	800a784 <_dtoa_r+0x354>
 800a756:	4b97      	ldr	r3, [pc, #604]	@ (800a9b4 <_dtoa_r+0x584>)
 800a758:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a75c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a760:	f7f6 f87c 	bl	800085c <__aeabi_ddiv>
 800a764:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a768:	f004 040f 	and.w	r4, r4, #15
 800a76c:	2603      	movs	r6, #3
 800a76e:	4d91      	ldr	r5, [pc, #580]	@ (800a9b4 <_dtoa_r+0x584>)
 800a770:	b954      	cbnz	r4, 800a788 <_dtoa_r+0x358>
 800a772:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a776:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a77a:	f7f6 f86f 	bl	800085c <__aeabi_ddiv>
 800a77e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a782:	e028      	b.n	800a7d6 <_dtoa_r+0x3a6>
 800a784:	2602      	movs	r6, #2
 800a786:	e7f2      	b.n	800a76e <_dtoa_r+0x33e>
 800a788:	07e1      	lsls	r1, r4, #31
 800a78a:	d508      	bpl.n	800a79e <_dtoa_r+0x36e>
 800a78c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a790:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a794:	f7f5 ff38 	bl	8000608 <__aeabi_dmul>
 800a798:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a79c:	3601      	adds	r6, #1
 800a79e:	1064      	asrs	r4, r4, #1
 800a7a0:	3508      	adds	r5, #8
 800a7a2:	e7e5      	b.n	800a770 <_dtoa_r+0x340>
 800a7a4:	f000 80af 	beq.w	800a906 <_dtoa_r+0x4d6>
 800a7a8:	427c      	negs	r4, r7
 800a7aa:	4b81      	ldr	r3, [pc, #516]	@ (800a9b0 <_dtoa_r+0x580>)
 800a7ac:	4d81      	ldr	r5, [pc, #516]	@ (800a9b4 <_dtoa_r+0x584>)
 800a7ae:	f004 020f 	and.w	r2, r4, #15
 800a7b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a7be:	f7f5 ff23 	bl	8000608 <__aeabi_dmul>
 800a7c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7c6:	1124      	asrs	r4, r4, #4
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	2602      	movs	r6, #2
 800a7cc:	2c00      	cmp	r4, #0
 800a7ce:	f040 808f 	bne.w	800a8f0 <_dtoa_r+0x4c0>
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d1d3      	bne.n	800a77e <_dtoa_r+0x34e>
 800a7d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a7d8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	f000 8094 	beq.w	800a90a <_dtoa_r+0x4da>
 800a7e2:	4b75      	ldr	r3, [pc, #468]	@ (800a9b8 <_dtoa_r+0x588>)
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	4629      	mov	r1, r5
 800a7ea:	f7f6 f97f 	bl	8000aec <__aeabi_dcmplt>
 800a7ee:	2800      	cmp	r0, #0
 800a7f0:	f000 808b 	beq.w	800a90a <_dtoa_r+0x4da>
 800a7f4:	9b03      	ldr	r3, [sp, #12]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	f000 8087 	beq.w	800a90a <_dtoa_r+0x4da>
 800a7fc:	f1bb 0f00 	cmp.w	fp, #0
 800a800:	dd34      	ble.n	800a86c <_dtoa_r+0x43c>
 800a802:	4620      	mov	r0, r4
 800a804:	4b6d      	ldr	r3, [pc, #436]	@ (800a9bc <_dtoa_r+0x58c>)
 800a806:	2200      	movs	r2, #0
 800a808:	4629      	mov	r1, r5
 800a80a:	f7f5 fefd 	bl	8000608 <__aeabi_dmul>
 800a80e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a812:	f107 38ff 	add.w	r8, r7, #4294967295
 800a816:	3601      	adds	r6, #1
 800a818:	465c      	mov	r4, fp
 800a81a:	4630      	mov	r0, r6
 800a81c:	f7f5 fe8a 	bl	8000534 <__aeabi_i2d>
 800a820:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a824:	f7f5 fef0 	bl	8000608 <__aeabi_dmul>
 800a828:	4b65      	ldr	r3, [pc, #404]	@ (800a9c0 <_dtoa_r+0x590>)
 800a82a:	2200      	movs	r2, #0
 800a82c:	f7f5 fd36 	bl	800029c <__adddf3>
 800a830:	4605      	mov	r5, r0
 800a832:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a836:	2c00      	cmp	r4, #0
 800a838:	d16a      	bne.n	800a910 <_dtoa_r+0x4e0>
 800a83a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a83e:	4b61      	ldr	r3, [pc, #388]	@ (800a9c4 <_dtoa_r+0x594>)
 800a840:	2200      	movs	r2, #0
 800a842:	f7f5 fd29 	bl	8000298 <__aeabi_dsub>
 800a846:	4602      	mov	r2, r0
 800a848:	460b      	mov	r3, r1
 800a84a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a84e:	462a      	mov	r2, r5
 800a850:	4633      	mov	r3, r6
 800a852:	f7f6 f969 	bl	8000b28 <__aeabi_dcmpgt>
 800a856:	2800      	cmp	r0, #0
 800a858:	f040 8298 	bne.w	800ad8c <_dtoa_r+0x95c>
 800a85c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a860:	462a      	mov	r2, r5
 800a862:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a866:	f7f6 f941 	bl	8000aec <__aeabi_dcmplt>
 800a86a:	bb38      	cbnz	r0, 800a8bc <_dtoa_r+0x48c>
 800a86c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a870:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a874:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a876:	2b00      	cmp	r3, #0
 800a878:	f2c0 8157 	blt.w	800ab2a <_dtoa_r+0x6fa>
 800a87c:	2f0e      	cmp	r7, #14
 800a87e:	f300 8154 	bgt.w	800ab2a <_dtoa_r+0x6fa>
 800a882:	4b4b      	ldr	r3, [pc, #300]	@ (800a9b0 <_dtoa_r+0x580>)
 800a884:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a888:	ed93 7b00 	vldr	d7, [r3]
 800a88c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a88e:	2b00      	cmp	r3, #0
 800a890:	ed8d 7b00 	vstr	d7, [sp]
 800a894:	f280 80e5 	bge.w	800aa62 <_dtoa_r+0x632>
 800a898:	9b03      	ldr	r3, [sp, #12]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	f300 80e1 	bgt.w	800aa62 <_dtoa_r+0x632>
 800a8a0:	d10c      	bne.n	800a8bc <_dtoa_r+0x48c>
 800a8a2:	4b48      	ldr	r3, [pc, #288]	@ (800a9c4 <_dtoa_r+0x594>)
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	ec51 0b17 	vmov	r0, r1, d7
 800a8aa:	f7f5 fead 	bl	8000608 <__aeabi_dmul>
 800a8ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8b2:	f7f6 f92f 	bl	8000b14 <__aeabi_dcmpge>
 800a8b6:	2800      	cmp	r0, #0
 800a8b8:	f000 8266 	beq.w	800ad88 <_dtoa_r+0x958>
 800a8bc:	2400      	movs	r4, #0
 800a8be:	4625      	mov	r5, r4
 800a8c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a8c2:	4656      	mov	r6, sl
 800a8c4:	ea6f 0803 	mvn.w	r8, r3
 800a8c8:	2700      	movs	r7, #0
 800a8ca:	4621      	mov	r1, r4
 800a8cc:	4648      	mov	r0, r9
 800a8ce:	f000 fcbf 	bl	800b250 <_Bfree>
 800a8d2:	2d00      	cmp	r5, #0
 800a8d4:	f000 80bd 	beq.w	800aa52 <_dtoa_r+0x622>
 800a8d8:	b12f      	cbz	r7, 800a8e6 <_dtoa_r+0x4b6>
 800a8da:	42af      	cmp	r7, r5
 800a8dc:	d003      	beq.n	800a8e6 <_dtoa_r+0x4b6>
 800a8de:	4639      	mov	r1, r7
 800a8e0:	4648      	mov	r0, r9
 800a8e2:	f000 fcb5 	bl	800b250 <_Bfree>
 800a8e6:	4629      	mov	r1, r5
 800a8e8:	4648      	mov	r0, r9
 800a8ea:	f000 fcb1 	bl	800b250 <_Bfree>
 800a8ee:	e0b0      	b.n	800aa52 <_dtoa_r+0x622>
 800a8f0:	07e2      	lsls	r2, r4, #31
 800a8f2:	d505      	bpl.n	800a900 <_dtoa_r+0x4d0>
 800a8f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a8f8:	f7f5 fe86 	bl	8000608 <__aeabi_dmul>
 800a8fc:	3601      	adds	r6, #1
 800a8fe:	2301      	movs	r3, #1
 800a900:	1064      	asrs	r4, r4, #1
 800a902:	3508      	adds	r5, #8
 800a904:	e762      	b.n	800a7cc <_dtoa_r+0x39c>
 800a906:	2602      	movs	r6, #2
 800a908:	e765      	b.n	800a7d6 <_dtoa_r+0x3a6>
 800a90a:	9c03      	ldr	r4, [sp, #12]
 800a90c:	46b8      	mov	r8, r7
 800a90e:	e784      	b.n	800a81a <_dtoa_r+0x3ea>
 800a910:	4b27      	ldr	r3, [pc, #156]	@ (800a9b0 <_dtoa_r+0x580>)
 800a912:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a914:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a918:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a91c:	4454      	add	r4, sl
 800a91e:	2900      	cmp	r1, #0
 800a920:	d054      	beq.n	800a9cc <_dtoa_r+0x59c>
 800a922:	4929      	ldr	r1, [pc, #164]	@ (800a9c8 <_dtoa_r+0x598>)
 800a924:	2000      	movs	r0, #0
 800a926:	f7f5 ff99 	bl	800085c <__aeabi_ddiv>
 800a92a:	4633      	mov	r3, r6
 800a92c:	462a      	mov	r2, r5
 800a92e:	f7f5 fcb3 	bl	8000298 <__aeabi_dsub>
 800a932:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a936:	4656      	mov	r6, sl
 800a938:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a93c:	f7f6 f914 	bl	8000b68 <__aeabi_d2iz>
 800a940:	4605      	mov	r5, r0
 800a942:	f7f5 fdf7 	bl	8000534 <__aeabi_i2d>
 800a946:	4602      	mov	r2, r0
 800a948:	460b      	mov	r3, r1
 800a94a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a94e:	f7f5 fca3 	bl	8000298 <__aeabi_dsub>
 800a952:	3530      	adds	r5, #48	@ 0x30
 800a954:	4602      	mov	r2, r0
 800a956:	460b      	mov	r3, r1
 800a958:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a95c:	f806 5b01 	strb.w	r5, [r6], #1
 800a960:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a964:	f7f6 f8c2 	bl	8000aec <__aeabi_dcmplt>
 800a968:	2800      	cmp	r0, #0
 800a96a:	d172      	bne.n	800aa52 <_dtoa_r+0x622>
 800a96c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a970:	4911      	ldr	r1, [pc, #68]	@ (800a9b8 <_dtoa_r+0x588>)
 800a972:	2000      	movs	r0, #0
 800a974:	f7f5 fc90 	bl	8000298 <__aeabi_dsub>
 800a978:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a97c:	f7f6 f8b6 	bl	8000aec <__aeabi_dcmplt>
 800a980:	2800      	cmp	r0, #0
 800a982:	f040 80b4 	bne.w	800aaee <_dtoa_r+0x6be>
 800a986:	42a6      	cmp	r6, r4
 800a988:	f43f af70 	beq.w	800a86c <_dtoa_r+0x43c>
 800a98c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a990:	4b0a      	ldr	r3, [pc, #40]	@ (800a9bc <_dtoa_r+0x58c>)
 800a992:	2200      	movs	r2, #0
 800a994:	f7f5 fe38 	bl	8000608 <__aeabi_dmul>
 800a998:	4b08      	ldr	r3, [pc, #32]	@ (800a9bc <_dtoa_r+0x58c>)
 800a99a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a99e:	2200      	movs	r2, #0
 800a9a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9a4:	f7f5 fe30 	bl	8000608 <__aeabi_dmul>
 800a9a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9ac:	e7c4      	b.n	800a938 <_dtoa_r+0x508>
 800a9ae:	bf00      	nop
 800a9b0:	0800c5c0 	.word	0x0800c5c0
 800a9b4:	0800c598 	.word	0x0800c598
 800a9b8:	3ff00000 	.word	0x3ff00000
 800a9bc:	40240000 	.word	0x40240000
 800a9c0:	401c0000 	.word	0x401c0000
 800a9c4:	40140000 	.word	0x40140000
 800a9c8:	3fe00000 	.word	0x3fe00000
 800a9cc:	4631      	mov	r1, r6
 800a9ce:	4628      	mov	r0, r5
 800a9d0:	f7f5 fe1a 	bl	8000608 <__aeabi_dmul>
 800a9d4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a9d8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a9da:	4656      	mov	r6, sl
 800a9dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9e0:	f7f6 f8c2 	bl	8000b68 <__aeabi_d2iz>
 800a9e4:	4605      	mov	r5, r0
 800a9e6:	f7f5 fda5 	bl	8000534 <__aeabi_i2d>
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9f2:	f7f5 fc51 	bl	8000298 <__aeabi_dsub>
 800a9f6:	3530      	adds	r5, #48	@ 0x30
 800a9f8:	f806 5b01 	strb.w	r5, [r6], #1
 800a9fc:	4602      	mov	r2, r0
 800a9fe:	460b      	mov	r3, r1
 800aa00:	42a6      	cmp	r6, r4
 800aa02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aa06:	f04f 0200 	mov.w	r2, #0
 800aa0a:	d124      	bne.n	800aa56 <_dtoa_r+0x626>
 800aa0c:	4baf      	ldr	r3, [pc, #700]	@ (800accc <_dtoa_r+0x89c>)
 800aa0e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800aa12:	f7f5 fc43 	bl	800029c <__adddf3>
 800aa16:	4602      	mov	r2, r0
 800aa18:	460b      	mov	r3, r1
 800aa1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa1e:	f7f6 f883 	bl	8000b28 <__aeabi_dcmpgt>
 800aa22:	2800      	cmp	r0, #0
 800aa24:	d163      	bne.n	800aaee <_dtoa_r+0x6be>
 800aa26:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800aa2a:	49a8      	ldr	r1, [pc, #672]	@ (800accc <_dtoa_r+0x89c>)
 800aa2c:	2000      	movs	r0, #0
 800aa2e:	f7f5 fc33 	bl	8000298 <__aeabi_dsub>
 800aa32:	4602      	mov	r2, r0
 800aa34:	460b      	mov	r3, r1
 800aa36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa3a:	f7f6 f857 	bl	8000aec <__aeabi_dcmplt>
 800aa3e:	2800      	cmp	r0, #0
 800aa40:	f43f af14 	beq.w	800a86c <_dtoa_r+0x43c>
 800aa44:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800aa46:	1e73      	subs	r3, r6, #1
 800aa48:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aa4a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aa4e:	2b30      	cmp	r3, #48	@ 0x30
 800aa50:	d0f8      	beq.n	800aa44 <_dtoa_r+0x614>
 800aa52:	4647      	mov	r7, r8
 800aa54:	e03b      	b.n	800aace <_dtoa_r+0x69e>
 800aa56:	4b9e      	ldr	r3, [pc, #632]	@ (800acd0 <_dtoa_r+0x8a0>)
 800aa58:	f7f5 fdd6 	bl	8000608 <__aeabi_dmul>
 800aa5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa60:	e7bc      	b.n	800a9dc <_dtoa_r+0x5ac>
 800aa62:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800aa66:	4656      	mov	r6, sl
 800aa68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	4629      	mov	r1, r5
 800aa70:	f7f5 fef4 	bl	800085c <__aeabi_ddiv>
 800aa74:	f7f6 f878 	bl	8000b68 <__aeabi_d2iz>
 800aa78:	4680      	mov	r8, r0
 800aa7a:	f7f5 fd5b 	bl	8000534 <__aeabi_i2d>
 800aa7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa82:	f7f5 fdc1 	bl	8000608 <__aeabi_dmul>
 800aa86:	4602      	mov	r2, r0
 800aa88:	460b      	mov	r3, r1
 800aa8a:	4620      	mov	r0, r4
 800aa8c:	4629      	mov	r1, r5
 800aa8e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800aa92:	f7f5 fc01 	bl	8000298 <__aeabi_dsub>
 800aa96:	f806 4b01 	strb.w	r4, [r6], #1
 800aa9a:	9d03      	ldr	r5, [sp, #12]
 800aa9c:	eba6 040a 	sub.w	r4, r6, sl
 800aaa0:	42a5      	cmp	r5, r4
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	460b      	mov	r3, r1
 800aaa6:	d133      	bne.n	800ab10 <_dtoa_r+0x6e0>
 800aaa8:	f7f5 fbf8 	bl	800029c <__adddf3>
 800aaac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aab0:	4604      	mov	r4, r0
 800aab2:	460d      	mov	r5, r1
 800aab4:	f7f6 f838 	bl	8000b28 <__aeabi_dcmpgt>
 800aab8:	b9c0      	cbnz	r0, 800aaec <_dtoa_r+0x6bc>
 800aaba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aabe:	4620      	mov	r0, r4
 800aac0:	4629      	mov	r1, r5
 800aac2:	f7f6 f809 	bl	8000ad8 <__aeabi_dcmpeq>
 800aac6:	b110      	cbz	r0, 800aace <_dtoa_r+0x69e>
 800aac8:	f018 0f01 	tst.w	r8, #1
 800aacc:	d10e      	bne.n	800aaec <_dtoa_r+0x6bc>
 800aace:	9902      	ldr	r1, [sp, #8]
 800aad0:	4648      	mov	r0, r9
 800aad2:	f000 fbbd 	bl	800b250 <_Bfree>
 800aad6:	2300      	movs	r3, #0
 800aad8:	7033      	strb	r3, [r6, #0]
 800aada:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aadc:	3701      	adds	r7, #1
 800aade:	601f      	str	r7, [r3, #0]
 800aae0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	f000 824b 	beq.w	800af7e <_dtoa_r+0xb4e>
 800aae8:	601e      	str	r6, [r3, #0]
 800aaea:	e248      	b.n	800af7e <_dtoa_r+0xb4e>
 800aaec:	46b8      	mov	r8, r7
 800aaee:	4633      	mov	r3, r6
 800aaf0:	461e      	mov	r6, r3
 800aaf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aaf6:	2a39      	cmp	r2, #57	@ 0x39
 800aaf8:	d106      	bne.n	800ab08 <_dtoa_r+0x6d8>
 800aafa:	459a      	cmp	sl, r3
 800aafc:	d1f8      	bne.n	800aaf0 <_dtoa_r+0x6c0>
 800aafe:	2230      	movs	r2, #48	@ 0x30
 800ab00:	f108 0801 	add.w	r8, r8, #1
 800ab04:	f88a 2000 	strb.w	r2, [sl]
 800ab08:	781a      	ldrb	r2, [r3, #0]
 800ab0a:	3201      	adds	r2, #1
 800ab0c:	701a      	strb	r2, [r3, #0]
 800ab0e:	e7a0      	b.n	800aa52 <_dtoa_r+0x622>
 800ab10:	4b6f      	ldr	r3, [pc, #444]	@ (800acd0 <_dtoa_r+0x8a0>)
 800ab12:	2200      	movs	r2, #0
 800ab14:	f7f5 fd78 	bl	8000608 <__aeabi_dmul>
 800ab18:	2200      	movs	r2, #0
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	4604      	mov	r4, r0
 800ab1e:	460d      	mov	r5, r1
 800ab20:	f7f5 ffda 	bl	8000ad8 <__aeabi_dcmpeq>
 800ab24:	2800      	cmp	r0, #0
 800ab26:	d09f      	beq.n	800aa68 <_dtoa_r+0x638>
 800ab28:	e7d1      	b.n	800aace <_dtoa_r+0x69e>
 800ab2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab2c:	2a00      	cmp	r2, #0
 800ab2e:	f000 80ea 	beq.w	800ad06 <_dtoa_r+0x8d6>
 800ab32:	9a07      	ldr	r2, [sp, #28]
 800ab34:	2a01      	cmp	r2, #1
 800ab36:	f300 80cd 	bgt.w	800acd4 <_dtoa_r+0x8a4>
 800ab3a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ab3c:	2a00      	cmp	r2, #0
 800ab3e:	f000 80c1 	beq.w	800acc4 <_dtoa_r+0x894>
 800ab42:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ab46:	9c08      	ldr	r4, [sp, #32]
 800ab48:	9e00      	ldr	r6, [sp, #0]
 800ab4a:	9a00      	ldr	r2, [sp, #0]
 800ab4c:	441a      	add	r2, r3
 800ab4e:	9200      	str	r2, [sp, #0]
 800ab50:	9a06      	ldr	r2, [sp, #24]
 800ab52:	2101      	movs	r1, #1
 800ab54:	441a      	add	r2, r3
 800ab56:	4648      	mov	r0, r9
 800ab58:	9206      	str	r2, [sp, #24]
 800ab5a:	f000 fc2d 	bl	800b3b8 <__i2b>
 800ab5e:	4605      	mov	r5, r0
 800ab60:	b166      	cbz	r6, 800ab7c <_dtoa_r+0x74c>
 800ab62:	9b06      	ldr	r3, [sp, #24]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	dd09      	ble.n	800ab7c <_dtoa_r+0x74c>
 800ab68:	42b3      	cmp	r3, r6
 800ab6a:	9a00      	ldr	r2, [sp, #0]
 800ab6c:	bfa8      	it	ge
 800ab6e:	4633      	movge	r3, r6
 800ab70:	1ad2      	subs	r2, r2, r3
 800ab72:	9200      	str	r2, [sp, #0]
 800ab74:	9a06      	ldr	r2, [sp, #24]
 800ab76:	1af6      	subs	r6, r6, r3
 800ab78:	1ad3      	subs	r3, r2, r3
 800ab7a:	9306      	str	r3, [sp, #24]
 800ab7c:	9b08      	ldr	r3, [sp, #32]
 800ab7e:	b30b      	cbz	r3, 800abc4 <_dtoa_r+0x794>
 800ab80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	f000 80c6 	beq.w	800ad14 <_dtoa_r+0x8e4>
 800ab88:	2c00      	cmp	r4, #0
 800ab8a:	f000 80c0 	beq.w	800ad0e <_dtoa_r+0x8de>
 800ab8e:	4629      	mov	r1, r5
 800ab90:	4622      	mov	r2, r4
 800ab92:	4648      	mov	r0, r9
 800ab94:	f000 fcc8 	bl	800b528 <__pow5mult>
 800ab98:	9a02      	ldr	r2, [sp, #8]
 800ab9a:	4601      	mov	r1, r0
 800ab9c:	4605      	mov	r5, r0
 800ab9e:	4648      	mov	r0, r9
 800aba0:	f000 fc20 	bl	800b3e4 <__multiply>
 800aba4:	9902      	ldr	r1, [sp, #8]
 800aba6:	4680      	mov	r8, r0
 800aba8:	4648      	mov	r0, r9
 800abaa:	f000 fb51 	bl	800b250 <_Bfree>
 800abae:	9b08      	ldr	r3, [sp, #32]
 800abb0:	1b1b      	subs	r3, r3, r4
 800abb2:	9308      	str	r3, [sp, #32]
 800abb4:	f000 80b1 	beq.w	800ad1a <_dtoa_r+0x8ea>
 800abb8:	9a08      	ldr	r2, [sp, #32]
 800abba:	4641      	mov	r1, r8
 800abbc:	4648      	mov	r0, r9
 800abbe:	f000 fcb3 	bl	800b528 <__pow5mult>
 800abc2:	9002      	str	r0, [sp, #8]
 800abc4:	2101      	movs	r1, #1
 800abc6:	4648      	mov	r0, r9
 800abc8:	f000 fbf6 	bl	800b3b8 <__i2b>
 800abcc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800abce:	4604      	mov	r4, r0
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	f000 81d8 	beq.w	800af86 <_dtoa_r+0xb56>
 800abd6:	461a      	mov	r2, r3
 800abd8:	4601      	mov	r1, r0
 800abda:	4648      	mov	r0, r9
 800abdc:	f000 fca4 	bl	800b528 <__pow5mult>
 800abe0:	9b07      	ldr	r3, [sp, #28]
 800abe2:	2b01      	cmp	r3, #1
 800abe4:	4604      	mov	r4, r0
 800abe6:	f300 809f 	bgt.w	800ad28 <_dtoa_r+0x8f8>
 800abea:	9b04      	ldr	r3, [sp, #16]
 800abec:	2b00      	cmp	r3, #0
 800abee:	f040 8097 	bne.w	800ad20 <_dtoa_r+0x8f0>
 800abf2:	9b05      	ldr	r3, [sp, #20]
 800abf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	f040 8093 	bne.w	800ad24 <_dtoa_r+0x8f4>
 800abfe:	9b05      	ldr	r3, [sp, #20]
 800ac00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ac04:	0d1b      	lsrs	r3, r3, #20
 800ac06:	051b      	lsls	r3, r3, #20
 800ac08:	b133      	cbz	r3, 800ac18 <_dtoa_r+0x7e8>
 800ac0a:	9b00      	ldr	r3, [sp, #0]
 800ac0c:	3301      	adds	r3, #1
 800ac0e:	9300      	str	r3, [sp, #0]
 800ac10:	9b06      	ldr	r3, [sp, #24]
 800ac12:	3301      	adds	r3, #1
 800ac14:	9306      	str	r3, [sp, #24]
 800ac16:	2301      	movs	r3, #1
 800ac18:	9308      	str	r3, [sp, #32]
 800ac1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	f000 81b8 	beq.w	800af92 <_dtoa_r+0xb62>
 800ac22:	6923      	ldr	r3, [r4, #16]
 800ac24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ac28:	6918      	ldr	r0, [r3, #16]
 800ac2a:	f000 fb79 	bl	800b320 <__hi0bits>
 800ac2e:	f1c0 0020 	rsb	r0, r0, #32
 800ac32:	9b06      	ldr	r3, [sp, #24]
 800ac34:	4418      	add	r0, r3
 800ac36:	f010 001f 	ands.w	r0, r0, #31
 800ac3a:	f000 8082 	beq.w	800ad42 <_dtoa_r+0x912>
 800ac3e:	f1c0 0320 	rsb	r3, r0, #32
 800ac42:	2b04      	cmp	r3, #4
 800ac44:	dd73      	ble.n	800ad2e <_dtoa_r+0x8fe>
 800ac46:	9b00      	ldr	r3, [sp, #0]
 800ac48:	f1c0 001c 	rsb	r0, r0, #28
 800ac4c:	4403      	add	r3, r0
 800ac4e:	9300      	str	r3, [sp, #0]
 800ac50:	9b06      	ldr	r3, [sp, #24]
 800ac52:	4403      	add	r3, r0
 800ac54:	4406      	add	r6, r0
 800ac56:	9306      	str	r3, [sp, #24]
 800ac58:	9b00      	ldr	r3, [sp, #0]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	dd05      	ble.n	800ac6a <_dtoa_r+0x83a>
 800ac5e:	9902      	ldr	r1, [sp, #8]
 800ac60:	461a      	mov	r2, r3
 800ac62:	4648      	mov	r0, r9
 800ac64:	f000 fcba 	bl	800b5dc <__lshift>
 800ac68:	9002      	str	r0, [sp, #8]
 800ac6a:	9b06      	ldr	r3, [sp, #24]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	dd05      	ble.n	800ac7c <_dtoa_r+0x84c>
 800ac70:	4621      	mov	r1, r4
 800ac72:	461a      	mov	r2, r3
 800ac74:	4648      	mov	r0, r9
 800ac76:	f000 fcb1 	bl	800b5dc <__lshift>
 800ac7a:	4604      	mov	r4, r0
 800ac7c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d061      	beq.n	800ad46 <_dtoa_r+0x916>
 800ac82:	9802      	ldr	r0, [sp, #8]
 800ac84:	4621      	mov	r1, r4
 800ac86:	f000 fd15 	bl	800b6b4 <__mcmp>
 800ac8a:	2800      	cmp	r0, #0
 800ac8c:	da5b      	bge.n	800ad46 <_dtoa_r+0x916>
 800ac8e:	2300      	movs	r3, #0
 800ac90:	9902      	ldr	r1, [sp, #8]
 800ac92:	220a      	movs	r2, #10
 800ac94:	4648      	mov	r0, r9
 800ac96:	f000 fafd 	bl	800b294 <__multadd>
 800ac9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac9c:	9002      	str	r0, [sp, #8]
 800ac9e:	f107 38ff 	add.w	r8, r7, #4294967295
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	f000 8177 	beq.w	800af96 <_dtoa_r+0xb66>
 800aca8:	4629      	mov	r1, r5
 800acaa:	2300      	movs	r3, #0
 800acac:	220a      	movs	r2, #10
 800acae:	4648      	mov	r0, r9
 800acb0:	f000 faf0 	bl	800b294 <__multadd>
 800acb4:	f1bb 0f00 	cmp.w	fp, #0
 800acb8:	4605      	mov	r5, r0
 800acba:	dc6f      	bgt.n	800ad9c <_dtoa_r+0x96c>
 800acbc:	9b07      	ldr	r3, [sp, #28]
 800acbe:	2b02      	cmp	r3, #2
 800acc0:	dc49      	bgt.n	800ad56 <_dtoa_r+0x926>
 800acc2:	e06b      	b.n	800ad9c <_dtoa_r+0x96c>
 800acc4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800acc6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800acca:	e73c      	b.n	800ab46 <_dtoa_r+0x716>
 800accc:	3fe00000 	.word	0x3fe00000
 800acd0:	40240000 	.word	0x40240000
 800acd4:	9b03      	ldr	r3, [sp, #12]
 800acd6:	1e5c      	subs	r4, r3, #1
 800acd8:	9b08      	ldr	r3, [sp, #32]
 800acda:	42a3      	cmp	r3, r4
 800acdc:	db09      	blt.n	800acf2 <_dtoa_r+0x8c2>
 800acde:	1b1c      	subs	r4, r3, r4
 800ace0:	9b03      	ldr	r3, [sp, #12]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	f6bf af30 	bge.w	800ab48 <_dtoa_r+0x718>
 800ace8:	9b00      	ldr	r3, [sp, #0]
 800acea:	9a03      	ldr	r2, [sp, #12]
 800acec:	1a9e      	subs	r6, r3, r2
 800acee:	2300      	movs	r3, #0
 800acf0:	e72b      	b.n	800ab4a <_dtoa_r+0x71a>
 800acf2:	9b08      	ldr	r3, [sp, #32]
 800acf4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800acf6:	9408      	str	r4, [sp, #32]
 800acf8:	1ae3      	subs	r3, r4, r3
 800acfa:	441a      	add	r2, r3
 800acfc:	9e00      	ldr	r6, [sp, #0]
 800acfe:	9b03      	ldr	r3, [sp, #12]
 800ad00:	920d      	str	r2, [sp, #52]	@ 0x34
 800ad02:	2400      	movs	r4, #0
 800ad04:	e721      	b.n	800ab4a <_dtoa_r+0x71a>
 800ad06:	9c08      	ldr	r4, [sp, #32]
 800ad08:	9e00      	ldr	r6, [sp, #0]
 800ad0a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800ad0c:	e728      	b.n	800ab60 <_dtoa_r+0x730>
 800ad0e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ad12:	e751      	b.n	800abb8 <_dtoa_r+0x788>
 800ad14:	9a08      	ldr	r2, [sp, #32]
 800ad16:	9902      	ldr	r1, [sp, #8]
 800ad18:	e750      	b.n	800abbc <_dtoa_r+0x78c>
 800ad1a:	f8cd 8008 	str.w	r8, [sp, #8]
 800ad1e:	e751      	b.n	800abc4 <_dtoa_r+0x794>
 800ad20:	2300      	movs	r3, #0
 800ad22:	e779      	b.n	800ac18 <_dtoa_r+0x7e8>
 800ad24:	9b04      	ldr	r3, [sp, #16]
 800ad26:	e777      	b.n	800ac18 <_dtoa_r+0x7e8>
 800ad28:	2300      	movs	r3, #0
 800ad2a:	9308      	str	r3, [sp, #32]
 800ad2c:	e779      	b.n	800ac22 <_dtoa_r+0x7f2>
 800ad2e:	d093      	beq.n	800ac58 <_dtoa_r+0x828>
 800ad30:	9a00      	ldr	r2, [sp, #0]
 800ad32:	331c      	adds	r3, #28
 800ad34:	441a      	add	r2, r3
 800ad36:	9200      	str	r2, [sp, #0]
 800ad38:	9a06      	ldr	r2, [sp, #24]
 800ad3a:	441a      	add	r2, r3
 800ad3c:	441e      	add	r6, r3
 800ad3e:	9206      	str	r2, [sp, #24]
 800ad40:	e78a      	b.n	800ac58 <_dtoa_r+0x828>
 800ad42:	4603      	mov	r3, r0
 800ad44:	e7f4      	b.n	800ad30 <_dtoa_r+0x900>
 800ad46:	9b03      	ldr	r3, [sp, #12]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	46b8      	mov	r8, r7
 800ad4c:	dc20      	bgt.n	800ad90 <_dtoa_r+0x960>
 800ad4e:	469b      	mov	fp, r3
 800ad50:	9b07      	ldr	r3, [sp, #28]
 800ad52:	2b02      	cmp	r3, #2
 800ad54:	dd1e      	ble.n	800ad94 <_dtoa_r+0x964>
 800ad56:	f1bb 0f00 	cmp.w	fp, #0
 800ad5a:	f47f adb1 	bne.w	800a8c0 <_dtoa_r+0x490>
 800ad5e:	4621      	mov	r1, r4
 800ad60:	465b      	mov	r3, fp
 800ad62:	2205      	movs	r2, #5
 800ad64:	4648      	mov	r0, r9
 800ad66:	f000 fa95 	bl	800b294 <__multadd>
 800ad6a:	4601      	mov	r1, r0
 800ad6c:	4604      	mov	r4, r0
 800ad6e:	9802      	ldr	r0, [sp, #8]
 800ad70:	f000 fca0 	bl	800b6b4 <__mcmp>
 800ad74:	2800      	cmp	r0, #0
 800ad76:	f77f ada3 	ble.w	800a8c0 <_dtoa_r+0x490>
 800ad7a:	4656      	mov	r6, sl
 800ad7c:	2331      	movs	r3, #49	@ 0x31
 800ad7e:	f806 3b01 	strb.w	r3, [r6], #1
 800ad82:	f108 0801 	add.w	r8, r8, #1
 800ad86:	e59f      	b.n	800a8c8 <_dtoa_r+0x498>
 800ad88:	9c03      	ldr	r4, [sp, #12]
 800ad8a:	46b8      	mov	r8, r7
 800ad8c:	4625      	mov	r5, r4
 800ad8e:	e7f4      	b.n	800ad7a <_dtoa_r+0x94a>
 800ad90:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ad94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	f000 8101 	beq.w	800af9e <_dtoa_r+0xb6e>
 800ad9c:	2e00      	cmp	r6, #0
 800ad9e:	dd05      	ble.n	800adac <_dtoa_r+0x97c>
 800ada0:	4629      	mov	r1, r5
 800ada2:	4632      	mov	r2, r6
 800ada4:	4648      	mov	r0, r9
 800ada6:	f000 fc19 	bl	800b5dc <__lshift>
 800adaa:	4605      	mov	r5, r0
 800adac:	9b08      	ldr	r3, [sp, #32]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d05c      	beq.n	800ae6c <_dtoa_r+0xa3c>
 800adb2:	6869      	ldr	r1, [r5, #4]
 800adb4:	4648      	mov	r0, r9
 800adb6:	f000 fa0b 	bl	800b1d0 <_Balloc>
 800adba:	4606      	mov	r6, r0
 800adbc:	b928      	cbnz	r0, 800adca <_dtoa_r+0x99a>
 800adbe:	4b82      	ldr	r3, [pc, #520]	@ (800afc8 <_dtoa_r+0xb98>)
 800adc0:	4602      	mov	r2, r0
 800adc2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800adc6:	f7ff bb4a 	b.w	800a45e <_dtoa_r+0x2e>
 800adca:	692a      	ldr	r2, [r5, #16]
 800adcc:	3202      	adds	r2, #2
 800adce:	0092      	lsls	r2, r2, #2
 800add0:	f105 010c 	add.w	r1, r5, #12
 800add4:	300c      	adds	r0, #12
 800add6:	f7ff fa92 	bl	800a2fe <memcpy>
 800adda:	2201      	movs	r2, #1
 800addc:	4631      	mov	r1, r6
 800adde:	4648      	mov	r0, r9
 800ade0:	f000 fbfc 	bl	800b5dc <__lshift>
 800ade4:	f10a 0301 	add.w	r3, sl, #1
 800ade8:	9300      	str	r3, [sp, #0]
 800adea:	eb0a 030b 	add.w	r3, sl, fp
 800adee:	9308      	str	r3, [sp, #32]
 800adf0:	9b04      	ldr	r3, [sp, #16]
 800adf2:	f003 0301 	and.w	r3, r3, #1
 800adf6:	462f      	mov	r7, r5
 800adf8:	9306      	str	r3, [sp, #24]
 800adfa:	4605      	mov	r5, r0
 800adfc:	9b00      	ldr	r3, [sp, #0]
 800adfe:	9802      	ldr	r0, [sp, #8]
 800ae00:	4621      	mov	r1, r4
 800ae02:	f103 3bff 	add.w	fp, r3, #4294967295
 800ae06:	f7ff fa88 	bl	800a31a <quorem>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	3330      	adds	r3, #48	@ 0x30
 800ae0e:	9003      	str	r0, [sp, #12]
 800ae10:	4639      	mov	r1, r7
 800ae12:	9802      	ldr	r0, [sp, #8]
 800ae14:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae16:	f000 fc4d 	bl	800b6b4 <__mcmp>
 800ae1a:	462a      	mov	r2, r5
 800ae1c:	9004      	str	r0, [sp, #16]
 800ae1e:	4621      	mov	r1, r4
 800ae20:	4648      	mov	r0, r9
 800ae22:	f000 fc63 	bl	800b6ec <__mdiff>
 800ae26:	68c2      	ldr	r2, [r0, #12]
 800ae28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae2a:	4606      	mov	r6, r0
 800ae2c:	bb02      	cbnz	r2, 800ae70 <_dtoa_r+0xa40>
 800ae2e:	4601      	mov	r1, r0
 800ae30:	9802      	ldr	r0, [sp, #8]
 800ae32:	f000 fc3f 	bl	800b6b4 <__mcmp>
 800ae36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae38:	4602      	mov	r2, r0
 800ae3a:	4631      	mov	r1, r6
 800ae3c:	4648      	mov	r0, r9
 800ae3e:	920c      	str	r2, [sp, #48]	@ 0x30
 800ae40:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae42:	f000 fa05 	bl	800b250 <_Bfree>
 800ae46:	9b07      	ldr	r3, [sp, #28]
 800ae48:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ae4a:	9e00      	ldr	r6, [sp, #0]
 800ae4c:	ea42 0103 	orr.w	r1, r2, r3
 800ae50:	9b06      	ldr	r3, [sp, #24]
 800ae52:	4319      	orrs	r1, r3
 800ae54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae56:	d10d      	bne.n	800ae74 <_dtoa_r+0xa44>
 800ae58:	2b39      	cmp	r3, #57	@ 0x39
 800ae5a:	d027      	beq.n	800aeac <_dtoa_r+0xa7c>
 800ae5c:	9a04      	ldr	r2, [sp, #16]
 800ae5e:	2a00      	cmp	r2, #0
 800ae60:	dd01      	ble.n	800ae66 <_dtoa_r+0xa36>
 800ae62:	9b03      	ldr	r3, [sp, #12]
 800ae64:	3331      	adds	r3, #49	@ 0x31
 800ae66:	f88b 3000 	strb.w	r3, [fp]
 800ae6a:	e52e      	b.n	800a8ca <_dtoa_r+0x49a>
 800ae6c:	4628      	mov	r0, r5
 800ae6e:	e7b9      	b.n	800ade4 <_dtoa_r+0x9b4>
 800ae70:	2201      	movs	r2, #1
 800ae72:	e7e2      	b.n	800ae3a <_dtoa_r+0xa0a>
 800ae74:	9904      	ldr	r1, [sp, #16]
 800ae76:	2900      	cmp	r1, #0
 800ae78:	db04      	blt.n	800ae84 <_dtoa_r+0xa54>
 800ae7a:	9807      	ldr	r0, [sp, #28]
 800ae7c:	4301      	orrs	r1, r0
 800ae7e:	9806      	ldr	r0, [sp, #24]
 800ae80:	4301      	orrs	r1, r0
 800ae82:	d120      	bne.n	800aec6 <_dtoa_r+0xa96>
 800ae84:	2a00      	cmp	r2, #0
 800ae86:	ddee      	ble.n	800ae66 <_dtoa_r+0xa36>
 800ae88:	9902      	ldr	r1, [sp, #8]
 800ae8a:	9300      	str	r3, [sp, #0]
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	4648      	mov	r0, r9
 800ae90:	f000 fba4 	bl	800b5dc <__lshift>
 800ae94:	4621      	mov	r1, r4
 800ae96:	9002      	str	r0, [sp, #8]
 800ae98:	f000 fc0c 	bl	800b6b4 <__mcmp>
 800ae9c:	2800      	cmp	r0, #0
 800ae9e:	9b00      	ldr	r3, [sp, #0]
 800aea0:	dc02      	bgt.n	800aea8 <_dtoa_r+0xa78>
 800aea2:	d1e0      	bne.n	800ae66 <_dtoa_r+0xa36>
 800aea4:	07da      	lsls	r2, r3, #31
 800aea6:	d5de      	bpl.n	800ae66 <_dtoa_r+0xa36>
 800aea8:	2b39      	cmp	r3, #57	@ 0x39
 800aeaa:	d1da      	bne.n	800ae62 <_dtoa_r+0xa32>
 800aeac:	2339      	movs	r3, #57	@ 0x39
 800aeae:	f88b 3000 	strb.w	r3, [fp]
 800aeb2:	4633      	mov	r3, r6
 800aeb4:	461e      	mov	r6, r3
 800aeb6:	3b01      	subs	r3, #1
 800aeb8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800aebc:	2a39      	cmp	r2, #57	@ 0x39
 800aebe:	d04e      	beq.n	800af5e <_dtoa_r+0xb2e>
 800aec0:	3201      	adds	r2, #1
 800aec2:	701a      	strb	r2, [r3, #0]
 800aec4:	e501      	b.n	800a8ca <_dtoa_r+0x49a>
 800aec6:	2a00      	cmp	r2, #0
 800aec8:	dd03      	ble.n	800aed2 <_dtoa_r+0xaa2>
 800aeca:	2b39      	cmp	r3, #57	@ 0x39
 800aecc:	d0ee      	beq.n	800aeac <_dtoa_r+0xa7c>
 800aece:	3301      	adds	r3, #1
 800aed0:	e7c9      	b.n	800ae66 <_dtoa_r+0xa36>
 800aed2:	9a00      	ldr	r2, [sp, #0]
 800aed4:	9908      	ldr	r1, [sp, #32]
 800aed6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aeda:	428a      	cmp	r2, r1
 800aedc:	d028      	beq.n	800af30 <_dtoa_r+0xb00>
 800aede:	9902      	ldr	r1, [sp, #8]
 800aee0:	2300      	movs	r3, #0
 800aee2:	220a      	movs	r2, #10
 800aee4:	4648      	mov	r0, r9
 800aee6:	f000 f9d5 	bl	800b294 <__multadd>
 800aeea:	42af      	cmp	r7, r5
 800aeec:	9002      	str	r0, [sp, #8]
 800aeee:	f04f 0300 	mov.w	r3, #0
 800aef2:	f04f 020a 	mov.w	r2, #10
 800aef6:	4639      	mov	r1, r7
 800aef8:	4648      	mov	r0, r9
 800aefa:	d107      	bne.n	800af0c <_dtoa_r+0xadc>
 800aefc:	f000 f9ca 	bl	800b294 <__multadd>
 800af00:	4607      	mov	r7, r0
 800af02:	4605      	mov	r5, r0
 800af04:	9b00      	ldr	r3, [sp, #0]
 800af06:	3301      	adds	r3, #1
 800af08:	9300      	str	r3, [sp, #0]
 800af0a:	e777      	b.n	800adfc <_dtoa_r+0x9cc>
 800af0c:	f000 f9c2 	bl	800b294 <__multadd>
 800af10:	4629      	mov	r1, r5
 800af12:	4607      	mov	r7, r0
 800af14:	2300      	movs	r3, #0
 800af16:	220a      	movs	r2, #10
 800af18:	4648      	mov	r0, r9
 800af1a:	f000 f9bb 	bl	800b294 <__multadd>
 800af1e:	4605      	mov	r5, r0
 800af20:	e7f0      	b.n	800af04 <_dtoa_r+0xad4>
 800af22:	f1bb 0f00 	cmp.w	fp, #0
 800af26:	bfcc      	ite	gt
 800af28:	465e      	movgt	r6, fp
 800af2a:	2601      	movle	r6, #1
 800af2c:	4456      	add	r6, sl
 800af2e:	2700      	movs	r7, #0
 800af30:	9902      	ldr	r1, [sp, #8]
 800af32:	9300      	str	r3, [sp, #0]
 800af34:	2201      	movs	r2, #1
 800af36:	4648      	mov	r0, r9
 800af38:	f000 fb50 	bl	800b5dc <__lshift>
 800af3c:	4621      	mov	r1, r4
 800af3e:	9002      	str	r0, [sp, #8]
 800af40:	f000 fbb8 	bl	800b6b4 <__mcmp>
 800af44:	2800      	cmp	r0, #0
 800af46:	dcb4      	bgt.n	800aeb2 <_dtoa_r+0xa82>
 800af48:	d102      	bne.n	800af50 <_dtoa_r+0xb20>
 800af4a:	9b00      	ldr	r3, [sp, #0]
 800af4c:	07db      	lsls	r3, r3, #31
 800af4e:	d4b0      	bmi.n	800aeb2 <_dtoa_r+0xa82>
 800af50:	4633      	mov	r3, r6
 800af52:	461e      	mov	r6, r3
 800af54:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af58:	2a30      	cmp	r2, #48	@ 0x30
 800af5a:	d0fa      	beq.n	800af52 <_dtoa_r+0xb22>
 800af5c:	e4b5      	b.n	800a8ca <_dtoa_r+0x49a>
 800af5e:	459a      	cmp	sl, r3
 800af60:	d1a8      	bne.n	800aeb4 <_dtoa_r+0xa84>
 800af62:	2331      	movs	r3, #49	@ 0x31
 800af64:	f108 0801 	add.w	r8, r8, #1
 800af68:	f88a 3000 	strb.w	r3, [sl]
 800af6c:	e4ad      	b.n	800a8ca <_dtoa_r+0x49a>
 800af6e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800af70:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800afcc <_dtoa_r+0xb9c>
 800af74:	b11b      	cbz	r3, 800af7e <_dtoa_r+0xb4e>
 800af76:	f10a 0308 	add.w	r3, sl, #8
 800af7a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800af7c:	6013      	str	r3, [r2, #0]
 800af7e:	4650      	mov	r0, sl
 800af80:	b017      	add	sp, #92	@ 0x5c
 800af82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af86:	9b07      	ldr	r3, [sp, #28]
 800af88:	2b01      	cmp	r3, #1
 800af8a:	f77f ae2e 	ble.w	800abea <_dtoa_r+0x7ba>
 800af8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800af90:	9308      	str	r3, [sp, #32]
 800af92:	2001      	movs	r0, #1
 800af94:	e64d      	b.n	800ac32 <_dtoa_r+0x802>
 800af96:	f1bb 0f00 	cmp.w	fp, #0
 800af9a:	f77f aed9 	ble.w	800ad50 <_dtoa_r+0x920>
 800af9e:	4656      	mov	r6, sl
 800afa0:	9802      	ldr	r0, [sp, #8]
 800afa2:	4621      	mov	r1, r4
 800afa4:	f7ff f9b9 	bl	800a31a <quorem>
 800afa8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800afac:	f806 3b01 	strb.w	r3, [r6], #1
 800afb0:	eba6 020a 	sub.w	r2, r6, sl
 800afb4:	4593      	cmp	fp, r2
 800afb6:	ddb4      	ble.n	800af22 <_dtoa_r+0xaf2>
 800afb8:	9902      	ldr	r1, [sp, #8]
 800afba:	2300      	movs	r3, #0
 800afbc:	220a      	movs	r2, #10
 800afbe:	4648      	mov	r0, r9
 800afc0:	f000 f968 	bl	800b294 <__multadd>
 800afc4:	9002      	str	r0, [sp, #8]
 800afc6:	e7eb      	b.n	800afa0 <_dtoa_r+0xb70>
 800afc8:	0800c4c4 	.word	0x0800c4c4
 800afcc:	0800c448 	.word	0x0800c448

0800afd0 <_free_r>:
 800afd0:	b538      	push	{r3, r4, r5, lr}
 800afd2:	4605      	mov	r5, r0
 800afd4:	2900      	cmp	r1, #0
 800afd6:	d041      	beq.n	800b05c <_free_r+0x8c>
 800afd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afdc:	1f0c      	subs	r4, r1, #4
 800afde:	2b00      	cmp	r3, #0
 800afe0:	bfb8      	it	lt
 800afe2:	18e4      	addlt	r4, r4, r3
 800afe4:	f000 f8e8 	bl	800b1b8 <__malloc_lock>
 800afe8:	4a1d      	ldr	r2, [pc, #116]	@ (800b060 <_free_r+0x90>)
 800afea:	6813      	ldr	r3, [r2, #0]
 800afec:	b933      	cbnz	r3, 800affc <_free_r+0x2c>
 800afee:	6063      	str	r3, [r4, #4]
 800aff0:	6014      	str	r4, [r2, #0]
 800aff2:	4628      	mov	r0, r5
 800aff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aff8:	f000 b8e4 	b.w	800b1c4 <__malloc_unlock>
 800affc:	42a3      	cmp	r3, r4
 800affe:	d908      	bls.n	800b012 <_free_r+0x42>
 800b000:	6820      	ldr	r0, [r4, #0]
 800b002:	1821      	adds	r1, r4, r0
 800b004:	428b      	cmp	r3, r1
 800b006:	bf01      	itttt	eq
 800b008:	6819      	ldreq	r1, [r3, #0]
 800b00a:	685b      	ldreq	r3, [r3, #4]
 800b00c:	1809      	addeq	r1, r1, r0
 800b00e:	6021      	streq	r1, [r4, #0]
 800b010:	e7ed      	b.n	800afee <_free_r+0x1e>
 800b012:	461a      	mov	r2, r3
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	b10b      	cbz	r3, 800b01c <_free_r+0x4c>
 800b018:	42a3      	cmp	r3, r4
 800b01a:	d9fa      	bls.n	800b012 <_free_r+0x42>
 800b01c:	6811      	ldr	r1, [r2, #0]
 800b01e:	1850      	adds	r0, r2, r1
 800b020:	42a0      	cmp	r0, r4
 800b022:	d10b      	bne.n	800b03c <_free_r+0x6c>
 800b024:	6820      	ldr	r0, [r4, #0]
 800b026:	4401      	add	r1, r0
 800b028:	1850      	adds	r0, r2, r1
 800b02a:	4283      	cmp	r3, r0
 800b02c:	6011      	str	r1, [r2, #0]
 800b02e:	d1e0      	bne.n	800aff2 <_free_r+0x22>
 800b030:	6818      	ldr	r0, [r3, #0]
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	6053      	str	r3, [r2, #4]
 800b036:	4408      	add	r0, r1
 800b038:	6010      	str	r0, [r2, #0]
 800b03a:	e7da      	b.n	800aff2 <_free_r+0x22>
 800b03c:	d902      	bls.n	800b044 <_free_r+0x74>
 800b03e:	230c      	movs	r3, #12
 800b040:	602b      	str	r3, [r5, #0]
 800b042:	e7d6      	b.n	800aff2 <_free_r+0x22>
 800b044:	6820      	ldr	r0, [r4, #0]
 800b046:	1821      	adds	r1, r4, r0
 800b048:	428b      	cmp	r3, r1
 800b04a:	bf04      	itt	eq
 800b04c:	6819      	ldreq	r1, [r3, #0]
 800b04e:	685b      	ldreq	r3, [r3, #4]
 800b050:	6063      	str	r3, [r4, #4]
 800b052:	bf04      	itt	eq
 800b054:	1809      	addeq	r1, r1, r0
 800b056:	6021      	streq	r1, [r4, #0]
 800b058:	6054      	str	r4, [r2, #4]
 800b05a:	e7ca      	b.n	800aff2 <_free_r+0x22>
 800b05c:	bd38      	pop	{r3, r4, r5, pc}
 800b05e:	bf00      	nop
 800b060:	20005034 	.word	0x20005034

0800b064 <malloc>:
 800b064:	4b02      	ldr	r3, [pc, #8]	@ (800b070 <malloc+0xc>)
 800b066:	4601      	mov	r1, r0
 800b068:	6818      	ldr	r0, [r3, #0]
 800b06a:	f000 b825 	b.w	800b0b8 <_malloc_r>
 800b06e:	bf00      	nop
 800b070:	2000001c 	.word	0x2000001c

0800b074 <sbrk_aligned>:
 800b074:	b570      	push	{r4, r5, r6, lr}
 800b076:	4e0f      	ldr	r6, [pc, #60]	@ (800b0b4 <sbrk_aligned+0x40>)
 800b078:	460c      	mov	r4, r1
 800b07a:	6831      	ldr	r1, [r6, #0]
 800b07c:	4605      	mov	r5, r0
 800b07e:	b911      	cbnz	r1, 800b086 <sbrk_aligned+0x12>
 800b080:	f001 f804 	bl	800c08c <_sbrk_r>
 800b084:	6030      	str	r0, [r6, #0]
 800b086:	4621      	mov	r1, r4
 800b088:	4628      	mov	r0, r5
 800b08a:	f000 ffff 	bl	800c08c <_sbrk_r>
 800b08e:	1c43      	adds	r3, r0, #1
 800b090:	d103      	bne.n	800b09a <sbrk_aligned+0x26>
 800b092:	f04f 34ff 	mov.w	r4, #4294967295
 800b096:	4620      	mov	r0, r4
 800b098:	bd70      	pop	{r4, r5, r6, pc}
 800b09a:	1cc4      	adds	r4, r0, #3
 800b09c:	f024 0403 	bic.w	r4, r4, #3
 800b0a0:	42a0      	cmp	r0, r4
 800b0a2:	d0f8      	beq.n	800b096 <sbrk_aligned+0x22>
 800b0a4:	1a21      	subs	r1, r4, r0
 800b0a6:	4628      	mov	r0, r5
 800b0a8:	f000 fff0 	bl	800c08c <_sbrk_r>
 800b0ac:	3001      	adds	r0, #1
 800b0ae:	d1f2      	bne.n	800b096 <sbrk_aligned+0x22>
 800b0b0:	e7ef      	b.n	800b092 <sbrk_aligned+0x1e>
 800b0b2:	bf00      	nop
 800b0b4:	20005030 	.word	0x20005030

0800b0b8 <_malloc_r>:
 800b0b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0bc:	1ccd      	adds	r5, r1, #3
 800b0be:	f025 0503 	bic.w	r5, r5, #3
 800b0c2:	3508      	adds	r5, #8
 800b0c4:	2d0c      	cmp	r5, #12
 800b0c6:	bf38      	it	cc
 800b0c8:	250c      	movcc	r5, #12
 800b0ca:	2d00      	cmp	r5, #0
 800b0cc:	4606      	mov	r6, r0
 800b0ce:	db01      	blt.n	800b0d4 <_malloc_r+0x1c>
 800b0d0:	42a9      	cmp	r1, r5
 800b0d2:	d904      	bls.n	800b0de <_malloc_r+0x26>
 800b0d4:	230c      	movs	r3, #12
 800b0d6:	6033      	str	r3, [r6, #0]
 800b0d8:	2000      	movs	r0, #0
 800b0da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b1b4 <_malloc_r+0xfc>
 800b0e2:	f000 f869 	bl	800b1b8 <__malloc_lock>
 800b0e6:	f8d8 3000 	ldr.w	r3, [r8]
 800b0ea:	461c      	mov	r4, r3
 800b0ec:	bb44      	cbnz	r4, 800b140 <_malloc_r+0x88>
 800b0ee:	4629      	mov	r1, r5
 800b0f0:	4630      	mov	r0, r6
 800b0f2:	f7ff ffbf 	bl	800b074 <sbrk_aligned>
 800b0f6:	1c43      	adds	r3, r0, #1
 800b0f8:	4604      	mov	r4, r0
 800b0fa:	d158      	bne.n	800b1ae <_malloc_r+0xf6>
 800b0fc:	f8d8 4000 	ldr.w	r4, [r8]
 800b100:	4627      	mov	r7, r4
 800b102:	2f00      	cmp	r7, #0
 800b104:	d143      	bne.n	800b18e <_malloc_r+0xd6>
 800b106:	2c00      	cmp	r4, #0
 800b108:	d04b      	beq.n	800b1a2 <_malloc_r+0xea>
 800b10a:	6823      	ldr	r3, [r4, #0]
 800b10c:	4639      	mov	r1, r7
 800b10e:	4630      	mov	r0, r6
 800b110:	eb04 0903 	add.w	r9, r4, r3
 800b114:	f000 ffba 	bl	800c08c <_sbrk_r>
 800b118:	4581      	cmp	r9, r0
 800b11a:	d142      	bne.n	800b1a2 <_malloc_r+0xea>
 800b11c:	6821      	ldr	r1, [r4, #0]
 800b11e:	1a6d      	subs	r5, r5, r1
 800b120:	4629      	mov	r1, r5
 800b122:	4630      	mov	r0, r6
 800b124:	f7ff ffa6 	bl	800b074 <sbrk_aligned>
 800b128:	3001      	adds	r0, #1
 800b12a:	d03a      	beq.n	800b1a2 <_malloc_r+0xea>
 800b12c:	6823      	ldr	r3, [r4, #0]
 800b12e:	442b      	add	r3, r5
 800b130:	6023      	str	r3, [r4, #0]
 800b132:	f8d8 3000 	ldr.w	r3, [r8]
 800b136:	685a      	ldr	r2, [r3, #4]
 800b138:	bb62      	cbnz	r2, 800b194 <_malloc_r+0xdc>
 800b13a:	f8c8 7000 	str.w	r7, [r8]
 800b13e:	e00f      	b.n	800b160 <_malloc_r+0xa8>
 800b140:	6822      	ldr	r2, [r4, #0]
 800b142:	1b52      	subs	r2, r2, r5
 800b144:	d420      	bmi.n	800b188 <_malloc_r+0xd0>
 800b146:	2a0b      	cmp	r2, #11
 800b148:	d917      	bls.n	800b17a <_malloc_r+0xc2>
 800b14a:	1961      	adds	r1, r4, r5
 800b14c:	42a3      	cmp	r3, r4
 800b14e:	6025      	str	r5, [r4, #0]
 800b150:	bf18      	it	ne
 800b152:	6059      	strne	r1, [r3, #4]
 800b154:	6863      	ldr	r3, [r4, #4]
 800b156:	bf08      	it	eq
 800b158:	f8c8 1000 	streq.w	r1, [r8]
 800b15c:	5162      	str	r2, [r4, r5]
 800b15e:	604b      	str	r3, [r1, #4]
 800b160:	4630      	mov	r0, r6
 800b162:	f000 f82f 	bl	800b1c4 <__malloc_unlock>
 800b166:	f104 000b 	add.w	r0, r4, #11
 800b16a:	1d23      	adds	r3, r4, #4
 800b16c:	f020 0007 	bic.w	r0, r0, #7
 800b170:	1ac2      	subs	r2, r0, r3
 800b172:	bf1c      	itt	ne
 800b174:	1a1b      	subne	r3, r3, r0
 800b176:	50a3      	strne	r3, [r4, r2]
 800b178:	e7af      	b.n	800b0da <_malloc_r+0x22>
 800b17a:	6862      	ldr	r2, [r4, #4]
 800b17c:	42a3      	cmp	r3, r4
 800b17e:	bf0c      	ite	eq
 800b180:	f8c8 2000 	streq.w	r2, [r8]
 800b184:	605a      	strne	r2, [r3, #4]
 800b186:	e7eb      	b.n	800b160 <_malloc_r+0xa8>
 800b188:	4623      	mov	r3, r4
 800b18a:	6864      	ldr	r4, [r4, #4]
 800b18c:	e7ae      	b.n	800b0ec <_malloc_r+0x34>
 800b18e:	463c      	mov	r4, r7
 800b190:	687f      	ldr	r7, [r7, #4]
 800b192:	e7b6      	b.n	800b102 <_malloc_r+0x4a>
 800b194:	461a      	mov	r2, r3
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	42a3      	cmp	r3, r4
 800b19a:	d1fb      	bne.n	800b194 <_malloc_r+0xdc>
 800b19c:	2300      	movs	r3, #0
 800b19e:	6053      	str	r3, [r2, #4]
 800b1a0:	e7de      	b.n	800b160 <_malloc_r+0xa8>
 800b1a2:	230c      	movs	r3, #12
 800b1a4:	6033      	str	r3, [r6, #0]
 800b1a6:	4630      	mov	r0, r6
 800b1a8:	f000 f80c 	bl	800b1c4 <__malloc_unlock>
 800b1ac:	e794      	b.n	800b0d8 <_malloc_r+0x20>
 800b1ae:	6005      	str	r5, [r0, #0]
 800b1b0:	e7d6      	b.n	800b160 <_malloc_r+0xa8>
 800b1b2:	bf00      	nop
 800b1b4:	20005034 	.word	0x20005034

0800b1b8 <__malloc_lock>:
 800b1b8:	4801      	ldr	r0, [pc, #4]	@ (800b1c0 <__malloc_lock+0x8>)
 800b1ba:	f7ff b89e 	b.w	800a2fa <__retarget_lock_acquire_recursive>
 800b1be:	bf00      	nop
 800b1c0:	2000502c 	.word	0x2000502c

0800b1c4 <__malloc_unlock>:
 800b1c4:	4801      	ldr	r0, [pc, #4]	@ (800b1cc <__malloc_unlock+0x8>)
 800b1c6:	f7ff b899 	b.w	800a2fc <__retarget_lock_release_recursive>
 800b1ca:	bf00      	nop
 800b1cc:	2000502c 	.word	0x2000502c

0800b1d0 <_Balloc>:
 800b1d0:	b570      	push	{r4, r5, r6, lr}
 800b1d2:	69c6      	ldr	r6, [r0, #28]
 800b1d4:	4604      	mov	r4, r0
 800b1d6:	460d      	mov	r5, r1
 800b1d8:	b976      	cbnz	r6, 800b1f8 <_Balloc+0x28>
 800b1da:	2010      	movs	r0, #16
 800b1dc:	f7ff ff42 	bl	800b064 <malloc>
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	61e0      	str	r0, [r4, #28]
 800b1e4:	b920      	cbnz	r0, 800b1f0 <_Balloc+0x20>
 800b1e6:	4b18      	ldr	r3, [pc, #96]	@ (800b248 <_Balloc+0x78>)
 800b1e8:	4818      	ldr	r0, [pc, #96]	@ (800b24c <_Balloc+0x7c>)
 800b1ea:	216b      	movs	r1, #107	@ 0x6b
 800b1ec:	f000 ff5e 	bl	800c0ac <__assert_func>
 800b1f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1f4:	6006      	str	r6, [r0, #0]
 800b1f6:	60c6      	str	r6, [r0, #12]
 800b1f8:	69e6      	ldr	r6, [r4, #28]
 800b1fa:	68f3      	ldr	r3, [r6, #12]
 800b1fc:	b183      	cbz	r3, 800b220 <_Balloc+0x50>
 800b1fe:	69e3      	ldr	r3, [r4, #28]
 800b200:	68db      	ldr	r3, [r3, #12]
 800b202:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b206:	b9b8      	cbnz	r0, 800b238 <_Balloc+0x68>
 800b208:	2101      	movs	r1, #1
 800b20a:	fa01 f605 	lsl.w	r6, r1, r5
 800b20e:	1d72      	adds	r2, r6, #5
 800b210:	0092      	lsls	r2, r2, #2
 800b212:	4620      	mov	r0, r4
 800b214:	f000 ff68 	bl	800c0e8 <_calloc_r>
 800b218:	b160      	cbz	r0, 800b234 <_Balloc+0x64>
 800b21a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b21e:	e00e      	b.n	800b23e <_Balloc+0x6e>
 800b220:	2221      	movs	r2, #33	@ 0x21
 800b222:	2104      	movs	r1, #4
 800b224:	4620      	mov	r0, r4
 800b226:	f000 ff5f 	bl	800c0e8 <_calloc_r>
 800b22a:	69e3      	ldr	r3, [r4, #28]
 800b22c:	60f0      	str	r0, [r6, #12]
 800b22e:	68db      	ldr	r3, [r3, #12]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d1e4      	bne.n	800b1fe <_Balloc+0x2e>
 800b234:	2000      	movs	r0, #0
 800b236:	bd70      	pop	{r4, r5, r6, pc}
 800b238:	6802      	ldr	r2, [r0, #0]
 800b23a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b23e:	2300      	movs	r3, #0
 800b240:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b244:	e7f7      	b.n	800b236 <_Balloc+0x66>
 800b246:	bf00      	nop
 800b248:	0800c455 	.word	0x0800c455
 800b24c:	0800c4d5 	.word	0x0800c4d5

0800b250 <_Bfree>:
 800b250:	b570      	push	{r4, r5, r6, lr}
 800b252:	69c6      	ldr	r6, [r0, #28]
 800b254:	4605      	mov	r5, r0
 800b256:	460c      	mov	r4, r1
 800b258:	b976      	cbnz	r6, 800b278 <_Bfree+0x28>
 800b25a:	2010      	movs	r0, #16
 800b25c:	f7ff ff02 	bl	800b064 <malloc>
 800b260:	4602      	mov	r2, r0
 800b262:	61e8      	str	r0, [r5, #28]
 800b264:	b920      	cbnz	r0, 800b270 <_Bfree+0x20>
 800b266:	4b09      	ldr	r3, [pc, #36]	@ (800b28c <_Bfree+0x3c>)
 800b268:	4809      	ldr	r0, [pc, #36]	@ (800b290 <_Bfree+0x40>)
 800b26a:	218f      	movs	r1, #143	@ 0x8f
 800b26c:	f000 ff1e 	bl	800c0ac <__assert_func>
 800b270:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b274:	6006      	str	r6, [r0, #0]
 800b276:	60c6      	str	r6, [r0, #12]
 800b278:	b13c      	cbz	r4, 800b28a <_Bfree+0x3a>
 800b27a:	69eb      	ldr	r3, [r5, #28]
 800b27c:	6862      	ldr	r2, [r4, #4]
 800b27e:	68db      	ldr	r3, [r3, #12]
 800b280:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b284:	6021      	str	r1, [r4, #0]
 800b286:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b28a:	bd70      	pop	{r4, r5, r6, pc}
 800b28c:	0800c455 	.word	0x0800c455
 800b290:	0800c4d5 	.word	0x0800c4d5

0800b294 <__multadd>:
 800b294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b298:	690d      	ldr	r5, [r1, #16]
 800b29a:	4607      	mov	r7, r0
 800b29c:	460c      	mov	r4, r1
 800b29e:	461e      	mov	r6, r3
 800b2a0:	f101 0c14 	add.w	ip, r1, #20
 800b2a4:	2000      	movs	r0, #0
 800b2a6:	f8dc 3000 	ldr.w	r3, [ip]
 800b2aa:	b299      	uxth	r1, r3
 800b2ac:	fb02 6101 	mla	r1, r2, r1, r6
 800b2b0:	0c1e      	lsrs	r6, r3, #16
 800b2b2:	0c0b      	lsrs	r3, r1, #16
 800b2b4:	fb02 3306 	mla	r3, r2, r6, r3
 800b2b8:	b289      	uxth	r1, r1
 800b2ba:	3001      	adds	r0, #1
 800b2bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b2c0:	4285      	cmp	r5, r0
 800b2c2:	f84c 1b04 	str.w	r1, [ip], #4
 800b2c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b2ca:	dcec      	bgt.n	800b2a6 <__multadd+0x12>
 800b2cc:	b30e      	cbz	r6, 800b312 <__multadd+0x7e>
 800b2ce:	68a3      	ldr	r3, [r4, #8]
 800b2d0:	42ab      	cmp	r3, r5
 800b2d2:	dc19      	bgt.n	800b308 <__multadd+0x74>
 800b2d4:	6861      	ldr	r1, [r4, #4]
 800b2d6:	4638      	mov	r0, r7
 800b2d8:	3101      	adds	r1, #1
 800b2da:	f7ff ff79 	bl	800b1d0 <_Balloc>
 800b2de:	4680      	mov	r8, r0
 800b2e0:	b928      	cbnz	r0, 800b2ee <__multadd+0x5a>
 800b2e2:	4602      	mov	r2, r0
 800b2e4:	4b0c      	ldr	r3, [pc, #48]	@ (800b318 <__multadd+0x84>)
 800b2e6:	480d      	ldr	r0, [pc, #52]	@ (800b31c <__multadd+0x88>)
 800b2e8:	21ba      	movs	r1, #186	@ 0xba
 800b2ea:	f000 fedf 	bl	800c0ac <__assert_func>
 800b2ee:	6922      	ldr	r2, [r4, #16]
 800b2f0:	3202      	adds	r2, #2
 800b2f2:	f104 010c 	add.w	r1, r4, #12
 800b2f6:	0092      	lsls	r2, r2, #2
 800b2f8:	300c      	adds	r0, #12
 800b2fa:	f7ff f800 	bl	800a2fe <memcpy>
 800b2fe:	4621      	mov	r1, r4
 800b300:	4638      	mov	r0, r7
 800b302:	f7ff ffa5 	bl	800b250 <_Bfree>
 800b306:	4644      	mov	r4, r8
 800b308:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b30c:	3501      	adds	r5, #1
 800b30e:	615e      	str	r6, [r3, #20]
 800b310:	6125      	str	r5, [r4, #16]
 800b312:	4620      	mov	r0, r4
 800b314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b318:	0800c4c4 	.word	0x0800c4c4
 800b31c:	0800c4d5 	.word	0x0800c4d5

0800b320 <__hi0bits>:
 800b320:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b324:	4603      	mov	r3, r0
 800b326:	bf36      	itet	cc
 800b328:	0403      	lslcc	r3, r0, #16
 800b32a:	2000      	movcs	r0, #0
 800b32c:	2010      	movcc	r0, #16
 800b32e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b332:	bf3c      	itt	cc
 800b334:	021b      	lslcc	r3, r3, #8
 800b336:	3008      	addcc	r0, #8
 800b338:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b33c:	bf3c      	itt	cc
 800b33e:	011b      	lslcc	r3, r3, #4
 800b340:	3004      	addcc	r0, #4
 800b342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b346:	bf3c      	itt	cc
 800b348:	009b      	lslcc	r3, r3, #2
 800b34a:	3002      	addcc	r0, #2
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	db05      	blt.n	800b35c <__hi0bits+0x3c>
 800b350:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b354:	f100 0001 	add.w	r0, r0, #1
 800b358:	bf08      	it	eq
 800b35a:	2020      	moveq	r0, #32
 800b35c:	4770      	bx	lr

0800b35e <__lo0bits>:
 800b35e:	6803      	ldr	r3, [r0, #0]
 800b360:	4602      	mov	r2, r0
 800b362:	f013 0007 	ands.w	r0, r3, #7
 800b366:	d00b      	beq.n	800b380 <__lo0bits+0x22>
 800b368:	07d9      	lsls	r1, r3, #31
 800b36a:	d421      	bmi.n	800b3b0 <__lo0bits+0x52>
 800b36c:	0798      	lsls	r0, r3, #30
 800b36e:	bf49      	itett	mi
 800b370:	085b      	lsrmi	r3, r3, #1
 800b372:	089b      	lsrpl	r3, r3, #2
 800b374:	2001      	movmi	r0, #1
 800b376:	6013      	strmi	r3, [r2, #0]
 800b378:	bf5c      	itt	pl
 800b37a:	6013      	strpl	r3, [r2, #0]
 800b37c:	2002      	movpl	r0, #2
 800b37e:	4770      	bx	lr
 800b380:	b299      	uxth	r1, r3
 800b382:	b909      	cbnz	r1, 800b388 <__lo0bits+0x2a>
 800b384:	0c1b      	lsrs	r3, r3, #16
 800b386:	2010      	movs	r0, #16
 800b388:	b2d9      	uxtb	r1, r3
 800b38a:	b909      	cbnz	r1, 800b390 <__lo0bits+0x32>
 800b38c:	3008      	adds	r0, #8
 800b38e:	0a1b      	lsrs	r3, r3, #8
 800b390:	0719      	lsls	r1, r3, #28
 800b392:	bf04      	itt	eq
 800b394:	091b      	lsreq	r3, r3, #4
 800b396:	3004      	addeq	r0, #4
 800b398:	0799      	lsls	r1, r3, #30
 800b39a:	bf04      	itt	eq
 800b39c:	089b      	lsreq	r3, r3, #2
 800b39e:	3002      	addeq	r0, #2
 800b3a0:	07d9      	lsls	r1, r3, #31
 800b3a2:	d403      	bmi.n	800b3ac <__lo0bits+0x4e>
 800b3a4:	085b      	lsrs	r3, r3, #1
 800b3a6:	f100 0001 	add.w	r0, r0, #1
 800b3aa:	d003      	beq.n	800b3b4 <__lo0bits+0x56>
 800b3ac:	6013      	str	r3, [r2, #0]
 800b3ae:	4770      	bx	lr
 800b3b0:	2000      	movs	r0, #0
 800b3b2:	4770      	bx	lr
 800b3b4:	2020      	movs	r0, #32
 800b3b6:	4770      	bx	lr

0800b3b8 <__i2b>:
 800b3b8:	b510      	push	{r4, lr}
 800b3ba:	460c      	mov	r4, r1
 800b3bc:	2101      	movs	r1, #1
 800b3be:	f7ff ff07 	bl	800b1d0 <_Balloc>
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	b928      	cbnz	r0, 800b3d2 <__i2b+0x1a>
 800b3c6:	4b05      	ldr	r3, [pc, #20]	@ (800b3dc <__i2b+0x24>)
 800b3c8:	4805      	ldr	r0, [pc, #20]	@ (800b3e0 <__i2b+0x28>)
 800b3ca:	f240 1145 	movw	r1, #325	@ 0x145
 800b3ce:	f000 fe6d 	bl	800c0ac <__assert_func>
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	6144      	str	r4, [r0, #20]
 800b3d6:	6103      	str	r3, [r0, #16]
 800b3d8:	bd10      	pop	{r4, pc}
 800b3da:	bf00      	nop
 800b3dc:	0800c4c4 	.word	0x0800c4c4
 800b3e0:	0800c4d5 	.word	0x0800c4d5

0800b3e4 <__multiply>:
 800b3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3e8:	4617      	mov	r7, r2
 800b3ea:	690a      	ldr	r2, [r1, #16]
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	bfa8      	it	ge
 800b3f2:	463b      	movge	r3, r7
 800b3f4:	4689      	mov	r9, r1
 800b3f6:	bfa4      	itt	ge
 800b3f8:	460f      	movge	r7, r1
 800b3fa:	4699      	movge	r9, r3
 800b3fc:	693d      	ldr	r5, [r7, #16]
 800b3fe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	6879      	ldr	r1, [r7, #4]
 800b406:	eb05 060a 	add.w	r6, r5, sl
 800b40a:	42b3      	cmp	r3, r6
 800b40c:	b085      	sub	sp, #20
 800b40e:	bfb8      	it	lt
 800b410:	3101      	addlt	r1, #1
 800b412:	f7ff fedd 	bl	800b1d0 <_Balloc>
 800b416:	b930      	cbnz	r0, 800b426 <__multiply+0x42>
 800b418:	4602      	mov	r2, r0
 800b41a:	4b41      	ldr	r3, [pc, #260]	@ (800b520 <__multiply+0x13c>)
 800b41c:	4841      	ldr	r0, [pc, #260]	@ (800b524 <__multiply+0x140>)
 800b41e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b422:	f000 fe43 	bl	800c0ac <__assert_func>
 800b426:	f100 0414 	add.w	r4, r0, #20
 800b42a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b42e:	4623      	mov	r3, r4
 800b430:	2200      	movs	r2, #0
 800b432:	4573      	cmp	r3, lr
 800b434:	d320      	bcc.n	800b478 <__multiply+0x94>
 800b436:	f107 0814 	add.w	r8, r7, #20
 800b43a:	f109 0114 	add.w	r1, r9, #20
 800b43e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b442:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b446:	9302      	str	r3, [sp, #8]
 800b448:	1beb      	subs	r3, r5, r7
 800b44a:	3b15      	subs	r3, #21
 800b44c:	f023 0303 	bic.w	r3, r3, #3
 800b450:	3304      	adds	r3, #4
 800b452:	3715      	adds	r7, #21
 800b454:	42bd      	cmp	r5, r7
 800b456:	bf38      	it	cc
 800b458:	2304      	movcc	r3, #4
 800b45a:	9301      	str	r3, [sp, #4]
 800b45c:	9b02      	ldr	r3, [sp, #8]
 800b45e:	9103      	str	r1, [sp, #12]
 800b460:	428b      	cmp	r3, r1
 800b462:	d80c      	bhi.n	800b47e <__multiply+0x9a>
 800b464:	2e00      	cmp	r6, #0
 800b466:	dd03      	ble.n	800b470 <__multiply+0x8c>
 800b468:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d055      	beq.n	800b51c <__multiply+0x138>
 800b470:	6106      	str	r6, [r0, #16]
 800b472:	b005      	add	sp, #20
 800b474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b478:	f843 2b04 	str.w	r2, [r3], #4
 800b47c:	e7d9      	b.n	800b432 <__multiply+0x4e>
 800b47e:	f8b1 a000 	ldrh.w	sl, [r1]
 800b482:	f1ba 0f00 	cmp.w	sl, #0
 800b486:	d01f      	beq.n	800b4c8 <__multiply+0xe4>
 800b488:	46c4      	mov	ip, r8
 800b48a:	46a1      	mov	r9, r4
 800b48c:	2700      	movs	r7, #0
 800b48e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b492:	f8d9 3000 	ldr.w	r3, [r9]
 800b496:	fa1f fb82 	uxth.w	fp, r2
 800b49a:	b29b      	uxth	r3, r3
 800b49c:	fb0a 330b 	mla	r3, sl, fp, r3
 800b4a0:	443b      	add	r3, r7
 800b4a2:	f8d9 7000 	ldr.w	r7, [r9]
 800b4a6:	0c12      	lsrs	r2, r2, #16
 800b4a8:	0c3f      	lsrs	r7, r7, #16
 800b4aa:	fb0a 7202 	mla	r2, sl, r2, r7
 800b4ae:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b4b2:	b29b      	uxth	r3, r3
 800b4b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4b8:	4565      	cmp	r5, ip
 800b4ba:	f849 3b04 	str.w	r3, [r9], #4
 800b4be:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b4c2:	d8e4      	bhi.n	800b48e <__multiply+0xaa>
 800b4c4:	9b01      	ldr	r3, [sp, #4]
 800b4c6:	50e7      	str	r7, [r4, r3]
 800b4c8:	9b03      	ldr	r3, [sp, #12]
 800b4ca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b4ce:	3104      	adds	r1, #4
 800b4d0:	f1b9 0f00 	cmp.w	r9, #0
 800b4d4:	d020      	beq.n	800b518 <__multiply+0x134>
 800b4d6:	6823      	ldr	r3, [r4, #0]
 800b4d8:	4647      	mov	r7, r8
 800b4da:	46a4      	mov	ip, r4
 800b4dc:	f04f 0a00 	mov.w	sl, #0
 800b4e0:	f8b7 b000 	ldrh.w	fp, [r7]
 800b4e4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b4e8:	fb09 220b 	mla	r2, r9, fp, r2
 800b4ec:	4452      	add	r2, sl
 800b4ee:	b29b      	uxth	r3, r3
 800b4f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4f4:	f84c 3b04 	str.w	r3, [ip], #4
 800b4f8:	f857 3b04 	ldr.w	r3, [r7], #4
 800b4fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b500:	f8bc 3000 	ldrh.w	r3, [ip]
 800b504:	fb09 330a 	mla	r3, r9, sl, r3
 800b508:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b50c:	42bd      	cmp	r5, r7
 800b50e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b512:	d8e5      	bhi.n	800b4e0 <__multiply+0xfc>
 800b514:	9a01      	ldr	r2, [sp, #4]
 800b516:	50a3      	str	r3, [r4, r2]
 800b518:	3404      	adds	r4, #4
 800b51a:	e79f      	b.n	800b45c <__multiply+0x78>
 800b51c:	3e01      	subs	r6, #1
 800b51e:	e7a1      	b.n	800b464 <__multiply+0x80>
 800b520:	0800c4c4 	.word	0x0800c4c4
 800b524:	0800c4d5 	.word	0x0800c4d5

0800b528 <__pow5mult>:
 800b528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b52c:	4615      	mov	r5, r2
 800b52e:	f012 0203 	ands.w	r2, r2, #3
 800b532:	4607      	mov	r7, r0
 800b534:	460e      	mov	r6, r1
 800b536:	d007      	beq.n	800b548 <__pow5mult+0x20>
 800b538:	4c25      	ldr	r4, [pc, #148]	@ (800b5d0 <__pow5mult+0xa8>)
 800b53a:	3a01      	subs	r2, #1
 800b53c:	2300      	movs	r3, #0
 800b53e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b542:	f7ff fea7 	bl	800b294 <__multadd>
 800b546:	4606      	mov	r6, r0
 800b548:	10ad      	asrs	r5, r5, #2
 800b54a:	d03d      	beq.n	800b5c8 <__pow5mult+0xa0>
 800b54c:	69fc      	ldr	r4, [r7, #28]
 800b54e:	b97c      	cbnz	r4, 800b570 <__pow5mult+0x48>
 800b550:	2010      	movs	r0, #16
 800b552:	f7ff fd87 	bl	800b064 <malloc>
 800b556:	4602      	mov	r2, r0
 800b558:	61f8      	str	r0, [r7, #28]
 800b55a:	b928      	cbnz	r0, 800b568 <__pow5mult+0x40>
 800b55c:	4b1d      	ldr	r3, [pc, #116]	@ (800b5d4 <__pow5mult+0xac>)
 800b55e:	481e      	ldr	r0, [pc, #120]	@ (800b5d8 <__pow5mult+0xb0>)
 800b560:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b564:	f000 fda2 	bl	800c0ac <__assert_func>
 800b568:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b56c:	6004      	str	r4, [r0, #0]
 800b56e:	60c4      	str	r4, [r0, #12]
 800b570:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b574:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b578:	b94c      	cbnz	r4, 800b58e <__pow5mult+0x66>
 800b57a:	f240 2171 	movw	r1, #625	@ 0x271
 800b57e:	4638      	mov	r0, r7
 800b580:	f7ff ff1a 	bl	800b3b8 <__i2b>
 800b584:	2300      	movs	r3, #0
 800b586:	f8c8 0008 	str.w	r0, [r8, #8]
 800b58a:	4604      	mov	r4, r0
 800b58c:	6003      	str	r3, [r0, #0]
 800b58e:	f04f 0900 	mov.w	r9, #0
 800b592:	07eb      	lsls	r3, r5, #31
 800b594:	d50a      	bpl.n	800b5ac <__pow5mult+0x84>
 800b596:	4631      	mov	r1, r6
 800b598:	4622      	mov	r2, r4
 800b59a:	4638      	mov	r0, r7
 800b59c:	f7ff ff22 	bl	800b3e4 <__multiply>
 800b5a0:	4631      	mov	r1, r6
 800b5a2:	4680      	mov	r8, r0
 800b5a4:	4638      	mov	r0, r7
 800b5a6:	f7ff fe53 	bl	800b250 <_Bfree>
 800b5aa:	4646      	mov	r6, r8
 800b5ac:	106d      	asrs	r5, r5, #1
 800b5ae:	d00b      	beq.n	800b5c8 <__pow5mult+0xa0>
 800b5b0:	6820      	ldr	r0, [r4, #0]
 800b5b2:	b938      	cbnz	r0, 800b5c4 <__pow5mult+0x9c>
 800b5b4:	4622      	mov	r2, r4
 800b5b6:	4621      	mov	r1, r4
 800b5b8:	4638      	mov	r0, r7
 800b5ba:	f7ff ff13 	bl	800b3e4 <__multiply>
 800b5be:	6020      	str	r0, [r4, #0]
 800b5c0:	f8c0 9000 	str.w	r9, [r0]
 800b5c4:	4604      	mov	r4, r0
 800b5c6:	e7e4      	b.n	800b592 <__pow5mult+0x6a>
 800b5c8:	4630      	mov	r0, r6
 800b5ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5ce:	bf00      	nop
 800b5d0:	0800c588 	.word	0x0800c588
 800b5d4:	0800c455 	.word	0x0800c455
 800b5d8:	0800c4d5 	.word	0x0800c4d5

0800b5dc <__lshift>:
 800b5dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5e0:	460c      	mov	r4, r1
 800b5e2:	6849      	ldr	r1, [r1, #4]
 800b5e4:	6923      	ldr	r3, [r4, #16]
 800b5e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b5ea:	68a3      	ldr	r3, [r4, #8]
 800b5ec:	4607      	mov	r7, r0
 800b5ee:	4691      	mov	r9, r2
 800b5f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b5f4:	f108 0601 	add.w	r6, r8, #1
 800b5f8:	42b3      	cmp	r3, r6
 800b5fa:	db0b      	blt.n	800b614 <__lshift+0x38>
 800b5fc:	4638      	mov	r0, r7
 800b5fe:	f7ff fde7 	bl	800b1d0 <_Balloc>
 800b602:	4605      	mov	r5, r0
 800b604:	b948      	cbnz	r0, 800b61a <__lshift+0x3e>
 800b606:	4602      	mov	r2, r0
 800b608:	4b28      	ldr	r3, [pc, #160]	@ (800b6ac <__lshift+0xd0>)
 800b60a:	4829      	ldr	r0, [pc, #164]	@ (800b6b0 <__lshift+0xd4>)
 800b60c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b610:	f000 fd4c 	bl	800c0ac <__assert_func>
 800b614:	3101      	adds	r1, #1
 800b616:	005b      	lsls	r3, r3, #1
 800b618:	e7ee      	b.n	800b5f8 <__lshift+0x1c>
 800b61a:	2300      	movs	r3, #0
 800b61c:	f100 0114 	add.w	r1, r0, #20
 800b620:	f100 0210 	add.w	r2, r0, #16
 800b624:	4618      	mov	r0, r3
 800b626:	4553      	cmp	r3, sl
 800b628:	db33      	blt.n	800b692 <__lshift+0xb6>
 800b62a:	6920      	ldr	r0, [r4, #16]
 800b62c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b630:	f104 0314 	add.w	r3, r4, #20
 800b634:	f019 091f 	ands.w	r9, r9, #31
 800b638:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b63c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b640:	d02b      	beq.n	800b69a <__lshift+0xbe>
 800b642:	f1c9 0e20 	rsb	lr, r9, #32
 800b646:	468a      	mov	sl, r1
 800b648:	2200      	movs	r2, #0
 800b64a:	6818      	ldr	r0, [r3, #0]
 800b64c:	fa00 f009 	lsl.w	r0, r0, r9
 800b650:	4310      	orrs	r0, r2
 800b652:	f84a 0b04 	str.w	r0, [sl], #4
 800b656:	f853 2b04 	ldr.w	r2, [r3], #4
 800b65a:	459c      	cmp	ip, r3
 800b65c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b660:	d8f3      	bhi.n	800b64a <__lshift+0x6e>
 800b662:	ebac 0304 	sub.w	r3, ip, r4
 800b666:	3b15      	subs	r3, #21
 800b668:	f023 0303 	bic.w	r3, r3, #3
 800b66c:	3304      	adds	r3, #4
 800b66e:	f104 0015 	add.w	r0, r4, #21
 800b672:	4560      	cmp	r0, ip
 800b674:	bf88      	it	hi
 800b676:	2304      	movhi	r3, #4
 800b678:	50ca      	str	r2, [r1, r3]
 800b67a:	b10a      	cbz	r2, 800b680 <__lshift+0xa4>
 800b67c:	f108 0602 	add.w	r6, r8, #2
 800b680:	3e01      	subs	r6, #1
 800b682:	4638      	mov	r0, r7
 800b684:	612e      	str	r6, [r5, #16]
 800b686:	4621      	mov	r1, r4
 800b688:	f7ff fde2 	bl	800b250 <_Bfree>
 800b68c:	4628      	mov	r0, r5
 800b68e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b692:	f842 0f04 	str.w	r0, [r2, #4]!
 800b696:	3301      	adds	r3, #1
 800b698:	e7c5      	b.n	800b626 <__lshift+0x4a>
 800b69a:	3904      	subs	r1, #4
 800b69c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800b6a4:	459c      	cmp	ip, r3
 800b6a6:	d8f9      	bhi.n	800b69c <__lshift+0xc0>
 800b6a8:	e7ea      	b.n	800b680 <__lshift+0xa4>
 800b6aa:	bf00      	nop
 800b6ac:	0800c4c4 	.word	0x0800c4c4
 800b6b0:	0800c4d5 	.word	0x0800c4d5

0800b6b4 <__mcmp>:
 800b6b4:	690a      	ldr	r2, [r1, #16]
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	6900      	ldr	r0, [r0, #16]
 800b6ba:	1a80      	subs	r0, r0, r2
 800b6bc:	b530      	push	{r4, r5, lr}
 800b6be:	d10e      	bne.n	800b6de <__mcmp+0x2a>
 800b6c0:	3314      	adds	r3, #20
 800b6c2:	3114      	adds	r1, #20
 800b6c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b6c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b6cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b6d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b6d4:	4295      	cmp	r5, r2
 800b6d6:	d003      	beq.n	800b6e0 <__mcmp+0x2c>
 800b6d8:	d205      	bcs.n	800b6e6 <__mcmp+0x32>
 800b6da:	f04f 30ff 	mov.w	r0, #4294967295
 800b6de:	bd30      	pop	{r4, r5, pc}
 800b6e0:	42a3      	cmp	r3, r4
 800b6e2:	d3f3      	bcc.n	800b6cc <__mcmp+0x18>
 800b6e4:	e7fb      	b.n	800b6de <__mcmp+0x2a>
 800b6e6:	2001      	movs	r0, #1
 800b6e8:	e7f9      	b.n	800b6de <__mcmp+0x2a>
	...

0800b6ec <__mdiff>:
 800b6ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6f0:	4689      	mov	r9, r1
 800b6f2:	4606      	mov	r6, r0
 800b6f4:	4611      	mov	r1, r2
 800b6f6:	4648      	mov	r0, r9
 800b6f8:	4614      	mov	r4, r2
 800b6fa:	f7ff ffdb 	bl	800b6b4 <__mcmp>
 800b6fe:	1e05      	subs	r5, r0, #0
 800b700:	d112      	bne.n	800b728 <__mdiff+0x3c>
 800b702:	4629      	mov	r1, r5
 800b704:	4630      	mov	r0, r6
 800b706:	f7ff fd63 	bl	800b1d0 <_Balloc>
 800b70a:	4602      	mov	r2, r0
 800b70c:	b928      	cbnz	r0, 800b71a <__mdiff+0x2e>
 800b70e:	4b3f      	ldr	r3, [pc, #252]	@ (800b80c <__mdiff+0x120>)
 800b710:	f240 2137 	movw	r1, #567	@ 0x237
 800b714:	483e      	ldr	r0, [pc, #248]	@ (800b810 <__mdiff+0x124>)
 800b716:	f000 fcc9 	bl	800c0ac <__assert_func>
 800b71a:	2301      	movs	r3, #1
 800b71c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b720:	4610      	mov	r0, r2
 800b722:	b003      	add	sp, #12
 800b724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b728:	bfbc      	itt	lt
 800b72a:	464b      	movlt	r3, r9
 800b72c:	46a1      	movlt	r9, r4
 800b72e:	4630      	mov	r0, r6
 800b730:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b734:	bfba      	itte	lt
 800b736:	461c      	movlt	r4, r3
 800b738:	2501      	movlt	r5, #1
 800b73a:	2500      	movge	r5, #0
 800b73c:	f7ff fd48 	bl	800b1d0 <_Balloc>
 800b740:	4602      	mov	r2, r0
 800b742:	b918      	cbnz	r0, 800b74c <__mdiff+0x60>
 800b744:	4b31      	ldr	r3, [pc, #196]	@ (800b80c <__mdiff+0x120>)
 800b746:	f240 2145 	movw	r1, #581	@ 0x245
 800b74a:	e7e3      	b.n	800b714 <__mdiff+0x28>
 800b74c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b750:	6926      	ldr	r6, [r4, #16]
 800b752:	60c5      	str	r5, [r0, #12]
 800b754:	f109 0310 	add.w	r3, r9, #16
 800b758:	f109 0514 	add.w	r5, r9, #20
 800b75c:	f104 0e14 	add.w	lr, r4, #20
 800b760:	f100 0b14 	add.w	fp, r0, #20
 800b764:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b768:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b76c:	9301      	str	r3, [sp, #4]
 800b76e:	46d9      	mov	r9, fp
 800b770:	f04f 0c00 	mov.w	ip, #0
 800b774:	9b01      	ldr	r3, [sp, #4]
 800b776:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b77a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b77e:	9301      	str	r3, [sp, #4]
 800b780:	fa1f f38a 	uxth.w	r3, sl
 800b784:	4619      	mov	r1, r3
 800b786:	b283      	uxth	r3, r0
 800b788:	1acb      	subs	r3, r1, r3
 800b78a:	0c00      	lsrs	r0, r0, #16
 800b78c:	4463      	add	r3, ip
 800b78e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b792:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b796:	b29b      	uxth	r3, r3
 800b798:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b79c:	4576      	cmp	r6, lr
 800b79e:	f849 3b04 	str.w	r3, [r9], #4
 800b7a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b7a6:	d8e5      	bhi.n	800b774 <__mdiff+0x88>
 800b7a8:	1b33      	subs	r3, r6, r4
 800b7aa:	3b15      	subs	r3, #21
 800b7ac:	f023 0303 	bic.w	r3, r3, #3
 800b7b0:	3415      	adds	r4, #21
 800b7b2:	3304      	adds	r3, #4
 800b7b4:	42a6      	cmp	r6, r4
 800b7b6:	bf38      	it	cc
 800b7b8:	2304      	movcc	r3, #4
 800b7ba:	441d      	add	r5, r3
 800b7bc:	445b      	add	r3, fp
 800b7be:	461e      	mov	r6, r3
 800b7c0:	462c      	mov	r4, r5
 800b7c2:	4544      	cmp	r4, r8
 800b7c4:	d30e      	bcc.n	800b7e4 <__mdiff+0xf8>
 800b7c6:	f108 0103 	add.w	r1, r8, #3
 800b7ca:	1b49      	subs	r1, r1, r5
 800b7cc:	f021 0103 	bic.w	r1, r1, #3
 800b7d0:	3d03      	subs	r5, #3
 800b7d2:	45a8      	cmp	r8, r5
 800b7d4:	bf38      	it	cc
 800b7d6:	2100      	movcc	r1, #0
 800b7d8:	440b      	add	r3, r1
 800b7da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b7de:	b191      	cbz	r1, 800b806 <__mdiff+0x11a>
 800b7e0:	6117      	str	r7, [r2, #16]
 800b7e2:	e79d      	b.n	800b720 <__mdiff+0x34>
 800b7e4:	f854 1b04 	ldr.w	r1, [r4], #4
 800b7e8:	46e6      	mov	lr, ip
 800b7ea:	0c08      	lsrs	r0, r1, #16
 800b7ec:	fa1c fc81 	uxtah	ip, ip, r1
 800b7f0:	4471      	add	r1, lr
 800b7f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b7f6:	b289      	uxth	r1, r1
 800b7f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b7fc:	f846 1b04 	str.w	r1, [r6], #4
 800b800:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b804:	e7dd      	b.n	800b7c2 <__mdiff+0xd6>
 800b806:	3f01      	subs	r7, #1
 800b808:	e7e7      	b.n	800b7da <__mdiff+0xee>
 800b80a:	bf00      	nop
 800b80c:	0800c4c4 	.word	0x0800c4c4
 800b810:	0800c4d5 	.word	0x0800c4d5

0800b814 <__d2b>:
 800b814:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b818:	460f      	mov	r7, r1
 800b81a:	2101      	movs	r1, #1
 800b81c:	ec59 8b10 	vmov	r8, r9, d0
 800b820:	4616      	mov	r6, r2
 800b822:	f7ff fcd5 	bl	800b1d0 <_Balloc>
 800b826:	4604      	mov	r4, r0
 800b828:	b930      	cbnz	r0, 800b838 <__d2b+0x24>
 800b82a:	4602      	mov	r2, r0
 800b82c:	4b23      	ldr	r3, [pc, #140]	@ (800b8bc <__d2b+0xa8>)
 800b82e:	4824      	ldr	r0, [pc, #144]	@ (800b8c0 <__d2b+0xac>)
 800b830:	f240 310f 	movw	r1, #783	@ 0x30f
 800b834:	f000 fc3a 	bl	800c0ac <__assert_func>
 800b838:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b83c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b840:	b10d      	cbz	r5, 800b846 <__d2b+0x32>
 800b842:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b846:	9301      	str	r3, [sp, #4]
 800b848:	f1b8 0300 	subs.w	r3, r8, #0
 800b84c:	d023      	beq.n	800b896 <__d2b+0x82>
 800b84e:	4668      	mov	r0, sp
 800b850:	9300      	str	r3, [sp, #0]
 800b852:	f7ff fd84 	bl	800b35e <__lo0bits>
 800b856:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b85a:	b1d0      	cbz	r0, 800b892 <__d2b+0x7e>
 800b85c:	f1c0 0320 	rsb	r3, r0, #32
 800b860:	fa02 f303 	lsl.w	r3, r2, r3
 800b864:	430b      	orrs	r3, r1
 800b866:	40c2      	lsrs	r2, r0
 800b868:	6163      	str	r3, [r4, #20]
 800b86a:	9201      	str	r2, [sp, #4]
 800b86c:	9b01      	ldr	r3, [sp, #4]
 800b86e:	61a3      	str	r3, [r4, #24]
 800b870:	2b00      	cmp	r3, #0
 800b872:	bf0c      	ite	eq
 800b874:	2201      	moveq	r2, #1
 800b876:	2202      	movne	r2, #2
 800b878:	6122      	str	r2, [r4, #16]
 800b87a:	b1a5      	cbz	r5, 800b8a6 <__d2b+0x92>
 800b87c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b880:	4405      	add	r5, r0
 800b882:	603d      	str	r5, [r7, #0]
 800b884:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b888:	6030      	str	r0, [r6, #0]
 800b88a:	4620      	mov	r0, r4
 800b88c:	b003      	add	sp, #12
 800b88e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b892:	6161      	str	r1, [r4, #20]
 800b894:	e7ea      	b.n	800b86c <__d2b+0x58>
 800b896:	a801      	add	r0, sp, #4
 800b898:	f7ff fd61 	bl	800b35e <__lo0bits>
 800b89c:	9b01      	ldr	r3, [sp, #4]
 800b89e:	6163      	str	r3, [r4, #20]
 800b8a0:	3020      	adds	r0, #32
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	e7e8      	b.n	800b878 <__d2b+0x64>
 800b8a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b8aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b8ae:	6038      	str	r0, [r7, #0]
 800b8b0:	6918      	ldr	r0, [r3, #16]
 800b8b2:	f7ff fd35 	bl	800b320 <__hi0bits>
 800b8b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b8ba:	e7e5      	b.n	800b888 <__d2b+0x74>
 800b8bc:	0800c4c4 	.word	0x0800c4c4
 800b8c0:	0800c4d5 	.word	0x0800c4d5

0800b8c4 <__ssputs_r>:
 800b8c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8c8:	688e      	ldr	r6, [r1, #8]
 800b8ca:	461f      	mov	r7, r3
 800b8cc:	42be      	cmp	r6, r7
 800b8ce:	680b      	ldr	r3, [r1, #0]
 800b8d0:	4682      	mov	sl, r0
 800b8d2:	460c      	mov	r4, r1
 800b8d4:	4690      	mov	r8, r2
 800b8d6:	d82d      	bhi.n	800b934 <__ssputs_r+0x70>
 800b8d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b8dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b8e0:	d026      	beq.n	800b930 <__ssputs_r+0x6c>
 800b8e2:	6965      	ldr	r5, [r4, #20]
 800b8e4:	6909      	ldr	r1, [r1, #16]
 800b8e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b8ea:	eba3 0901 	sub.w	r9, r3, r1
 800b8ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b8f2:	1c7b      	adds	r3, r7, #1
 800b8f4:	444b      	add	r3, r9
 800b8f6:	106d      	asrs	r5, r5, #1
 800b8f8:	429d      	cmp	r5, r3
 800b8fa:	bf38      	it	cc
 800b8fc:	461d      	movcc	r5, r3
 800b8fe:	0553      	lsls	r3, r2, #21
 800b900:	d527      	bpl.n	800b952 <__ssputs_r+0x8e>
 800b902:	4629      	mov	r1, r5
 800b904:	f7ff fbd8 	bl	800b0b8 <_malloc_r>
 800b908:	4606      	mov	r6, r0
 800b90a:	b360      	cbz	r0, 800b966 <__ssputs_r+0xa2>
 800b90c:	6921      	ldr	r1, [r4, #16]
 800b90e:	464a      	mov	r2, r9
 800b910:	f7fe fcf5 	bl	800a2fe <memcpy>
 800b914:	89a3      	ldrh	r3, [r4, #12]
 800b916:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b91a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b91e:	81a3      	strh	r3, [r4, #12]
 800b920:	6126      	str	r6, [r4, #16]
 800b922:	6165      	str	r5, [r4, #20]
 800b924:	444e      	add	r6, r9
 800b926:	eba5 0509 	sub.w	r5, r5, r9
 800b92a:	6026      	str	r6, [r4, #0]
 800b92c:	60a5      	str	r5, [r4, #8]
 800b92e:	463e      	mov	r6, r7
 800b930:	42be      	cmp	r6, r7
 800b932:	d900      	bls.n	800b936 <__ssputs_r+0x72>
 800b934:	463e      	mov	r6, r7
 800b936:	6820      	ldr	r0, [r4, #0]
 800b938:	4632      	mov	r2, r6
 800b93a:	4641      	mov	r1, r8
 800b93c:	f000 fb6a 	bl	800c014 <memmove>
 800b940:	68a3      	ldr	r3, [r4, #8]
 800b942:	1b9b      	subs	r3, r3, r6
 800b944:	60a3      	str	r3, [r4, #8]
 800b946:	6823      	ldr	r3, [r4, #0]
 800b948:	4433      	add	r3, r6
 800b94a:	6023      	str	r3, [r4, #0]
 800b94c:	2000      	movs	r0, #0
 800b94e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b952:	462a      	mov	r2, r5
 800b954:	f000 fbee 	bl	800c134 <_realloc_r>
 800b958:	4606      	mov	r6, r0
 800b95a:	2800      	cmp	r0, #0
 800b95c:	d1e0      	bne.n	800b920 <__ssputs_r+0x5c>
 800b95e:	6921      	ldr	r1, [r4, #16]
 800b960:	4650      	mov	r0, sl
 800b962:	f7ff fb35 	bl	800afd0 <_free_r>
 800b966:	230c      	movs	r3, #12
 800b968:	f8ca 3000 	str.w	r3, [sl]
 800b96c:	89a3      	ldrh	r3, [r4, #12]
 800b96e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b972:	81a3      	strh	r3, [r4, #12]
 800b974:	f04f 30ff 	mov.w	r0, #4294967295
 800b978:	e7e9      	b.n	800b94e <__ssputs_r+0x8a>
	...

0800b97c <_svfiprintf_r>:
 800b97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b980:	4698      	mov	r8, r3
 800b982:	898b      	ldrh	r3, [r1, #12]
 800b984:	061b      	lsls	r3, r3, #24
 800b986:	b09d      	sub	sp, #116	@ 0x74
 800b988:	4607      	mov	r7, r0
 800b98a:	460d      	mov	r5, r1
 800b98c:	4614      	mov	r4, r2
 800b98e:	d510      	bpl.n	800b9b2 <_svfiprintf_r+0x36>
 800b990:	690b      	ldr	r3, [r1, #16]
 800b992:	b973      	cbnz	r3, 800b9b2 <_svfiprintf_r+0x36>
 800b994:	2140      	movs	r1, #64	@ 0x40
 800b996:	f7ff fb8f 	bl	800b0b8 <_malloc_r>
 800b99a:	6028      	str	r0, [r5, #0]
 800b99c:	6128      	str	r0, [r5, #16]
 800b99e:	b930      	cbnz	r0, 800b9ae <_svfiprintf_r+0x32>
 800b9a0:	230c      	movs	r3, #12
 800b9a2:	603b      	str	r3, [r7, #0]
 800b9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b9a8:	b01d      	add	sp, #116	@ 0x74
 800b9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ae:	2340      	movs	r3, #64	@ 0x40
 800b9b0:	616b      	str	r3, [r5, #20]
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9b6:	2320      	movs	r3, #32
 800b9b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b9bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9c0:	2330      	movs	r3, #48	@ 0x30
 800b9c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bb60 <_svfiprintf_r+0x1e4>
 800b9c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b9ca:	f04f 0901 	mov.w	r9, #1
 800b9ce:	4623      	mov	r3, r4
 800b9d0:	469a      	mov	sl, r3
 800b9d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9d6:	b10a      	cbz	r2, 800b9dc <_svfiprintf_r+0x60>
 800b9d8:	2a25      	cmp	r2, #37	@ 0x25
 800b9da:	d1f9      	bne.n	800b9d0 <_svfiprintf_r+0x54>
 800b9dc:	ebba 0b04 	subs.w	fp, sl, r4
 800b9e0:	d00b      	beq.n	800b9fa <_svfiprintf_r+0x7e>
 800b9e2:	465b      	mov	r3, fp
 800b9e4:	4622      	mov	r2, r4
 800b9e6:	4629      	mov	r1, r5
 800b9e8:	4638      	mov	r0, r7
 800b9ea:	f7ff ff6b 	bl	800b8c4 <__ssputs_r>
 800b9ee:	3001      	adds	r0, #1
 800b9f0:	f000 80a7 	beq.w	800bb42 <_svfiprintf_r+0x1c6>
 800b9f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9f6:	445a      	add	r2, fp
 800b9f8:	9209      	str	r2, [sp, #36]	@ 0x24
 800b9fa:	f89a 3000 	ldrb.w	r3, [sl]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	f000 809f 	beq.w	800bb42 <_svfiprintf_r+0x1c6>
 800ba04:	2300      	movs	r3, #0
 800ba06:	f04f 32ff 	mov.w	r2, #4294967295
 800ba0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba0e:	f10a 0a01 	add.w	sl, sl, #1
 800ba12:	9304      	str	r3, [sp, #16]
 800ba14:	9307      	str	r3, [sp, #28]
 800ba16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ba1a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ba1c:	4654      	mov	r4, sl
 800ba1e:	2205      	movs	r2, #5
 800ba20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba24:	484e      	ldr	r0, [pc, #312]	@ (800bb60 <_svfiprintf_r+0x1e4>)
 800ba26:	f7f4 fbdb 	bl	80001e0 <memchr>
 800ba2a:	9a04      	ldr	r2, [sp, #16]
 800ba2c:	b9d8      	cbnz	r0, 800ba66 <_svfiprintf_r+0xea>
 800ba2e:	06d0      	lsls	r0, r2, #27
 800ba30:	bf44      	itt	mi
 800ba32:	2320      	movmi	r3, #32
 800ba34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba38:	0711      	lsls	r1, r2, #28
 800ba3a:	bf44      	itt	mi
 800ba3c:	232b      	movmi	r3, #43	@ 0x2b
 800ba3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba42:	f89a 3000 	ldrb.w	r3, [sl]
 800ba46:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba48:	d015      	beq.n	800ba76 <_svfiprintf_r+0xfa>
 800ba4a:	9a07      	ldr	r2, [sp, #28]
 800ba4c:	4654      	mov	r4, sl
 800ba4e:	2000      	movs	r0, #0
 800ba50:	f04f 0c0a 	mov.w	ip, #10
 800ba54:	4621      	mov	r1, r4
 800ba56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba5a:	3b30      	subs	r3, #48	@ 0x30
 800ba5c:	2b09      	cmp	r3, #9
 800ba5e:	d94b      	bls.n	800baf8 <_svfiprintf_r+0x17c>
 800ba60:	b1b0      	cbz	r0, 800ba90 <_svfiprintf_r+0x114>
 800ba62:	9207      	str	r2, [sp, #28]
 800ba64:	e014      	b.n	800ba90 <_svfiprintf_r+0x114>
 800ba66:	eba0 0308 	sub.w	r3, r0, r8
 800ba6a:	fa09 f303 	lsl.w	r3, r9, r3
 800ba6e:	4313      	orrs	r3, r2
 800ba70:	9304      	str	r3, [sp, #16]
 800ba72:	46a2      	mov	sl, r4
 800ba74:	e7d2      	b.n	800ba1c <_svfiprintf_r+0xa0>
 800ba76:	9b03      	ldr	r3, [sp, #12]
 800ba78:	1d19      	adds	r1, r3, #4
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	9103      	str	r1, [sp, #12]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	bfbb      	ittet	lt
 800ba82:	425b      	neglt	r3, r3
 800ba84:	f042 0202 	orrlt.w	r2, r2, #2
 800ba88:	9307      	strge	r3, [sp, #28]
 800ba8a:	9307      	strlt	r3, [sp, #28]
 800ba8c:	bfb8      	it	lt
 800ba8e:	9204      	strlt	r2, [sp, #16]
 800ba90:	7823      	ldrb	r3, [r4, #0]
 800ba92:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba94:	d10a      	bne.n	800baac <_svfiprintf_r+0x130>
 800ba96:	7863      	ldrb	r3, [r4, #1]
 800ba98:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba9a:	d132      	bne.n	800bb02 <_svfiprintf_r+0x186>
 800ba9c:	9b03      	ldr	r3, [sp, #12]
 800ba9e:	1d1a      	adds	r2, r3, #4
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	9203      	str	r2, [sp, #12]
 800baa4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800baa8:	3402      	adds	r4, #2
 800baaa:	9305      	str	r3, [sp, #20]
 800baac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bb70 <_svfiprintf_r+0x1f4>
 800bab0:	7821      	ldrb	r1, [r4, #0]
 800bab2:	2203      	movs	r2, #3
 800bab4:	4650      	mov	r0, sl
 800bab6:	f7f4 fb93 	bl	80001e0 <memchr>
 800baba:	b138      	cbz	r0, 800bacc <_svfiprintf_r+0x150>
 800babc:	9b04      	ldr	r3, [sp, #16]
 800babe:	eba0 000a 	sub.w	r0, r0, sl
 800bac2:	2240      	movs	r2, #64	@ 0x40
 800bac4:	4082      	lsls	r2, r0
 800bac6:	4313      	orrs	r3, r2
 800bac8:	3401      	adds	r4, #1
 800baca:	9304      	str	r3, [sp, #16]
 800bacc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bad0:	4824      	ldr	r0, [pc, #144]	@ (800bb64 <_svfiprintf_r+0x1e8>)
 800bad2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bad6:	2206      	movs	r2, #6
 800bad8:	f7f4 fb82 	bl	80001e0 <memchr>
 800badc:	2800      	cmp	r0, #0
 800bade:	d036      	beq.n	800bb4e <_svfiprintf_r+0x1d2>
 800bae0:	4b21      	ldr	r3, [pc, #132]	@ (800bb68 <_svfiprintf_r+0x1ec>)
 800bae2:	bb1b      	cbnz	r3, 800bb2c <_svfiprintf_r+0x1b0>
 800bae4:	9b03      	ldr	r3, [sp, #12]
 800bae6:	3307      	adds	r3, #7
 800bae8:	f023 0307 	bic.w	r3, r3, #7
 800baec:	3308      	adds	r3, #8
 800baee:	9303      	str	r3, [sp, #12]
 800baf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baf2:	4433      	add	r3, r6
 800baf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800baf6:	e76a      	b.n	800b9ce <_svfiprintf_r+0x52>
 800baf8:	fb0c 3202 	mla	r2, ip, r2, r3
 800bafc:	460c      	mov	r4, r1
 800bafe:	2001      	movs	r0, #1
 800bb00:	e7a8      	b.n	800ba54 <_svfiprintf_r+0xd8>
 800bb02:	2300      	movs	r3, #0
 800bb04:	3401      	adds	r4, #1
 800bb06:	9305      	str	r3, [sp, #20]
 800bb08:	4619      	mov	r1, r3
 800bb0a:	f04f 0c0a 	mov.w	ip, #10
 800bb0e:	4620      	mov	r0, r4
 800bb10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb14:	3a30      	subs	r2, #48	@ 0x30
 800bb16:	2a09      	cmp	r2, #9
 800bb18:	d903      	bls.n	800bb22 <_svfiprintf_r+0x1a6>
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d0c6      	beq.n	800baac <_svfiprintf_r+0x130>
 800bb1e:	9105      	str	r1, [sp, #20]
 800bb20:	e7c4      	b.n	800baac <_svfiprintf_r+0x130>
 800bb22:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb26:	4604      	mov	r4, r0
 800bb28:	2301      	movs	r3, #1
 800bb2a:	e7f0      	b.n	800bb0e <_svfiprintf_r+0x192>
 800bb2c:	ab03      	add	r3, sp, #12
 800bb2e:	9300      	str	r3, [sp, #0]
 800bb30:	462a      	mov	r2, r5
 800bb32:	4b0e      	ldr	r3, [pc, #56]	@ (800bb6c <_svfiprintf_r+0x1f0>)
 800bb34:	a904      	add	r1, sp, #16
 800bb36:	4638      	mov	r0, r7
 800bb38:	f7fd fd0e 	bl	8009558 <_printf_float>
 800bb3c:	1c42      	adds	r2, r0, #1
 800bb3e:	4606      	mov	r6, r0
 800bb40:	d1d6      	bne.n	800baf0 <_svfiprintf_r+0x174>
 800bb42:	89ab      	ldrh	r3, [r5, #12]
 800bb44:	065b      	lsls	r3, r3, #25
 800bb46:	f53f af2d 	bmi.w	800b9a4 <_svfiprintf_r+0x28>
 800bb4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bb4c:	e72c      	b.n	800b9a8 <_svfiprintf_r+0x2c>
 800bb4e:	ab03      	add	r3, sp, #12
 800bb50:	9300      	str	r3, [sp, #0]
 800bb52:	462a      	mov	r2, r5
 800bb54:	4b05      	ldr	r3, [pc, #20]	@ (800bb6c <_svfiprintf_r+0x1f0>)
 800bb56:	a904      	add	r1, sp, #16
 800bb58:	4638      	mov	r0, r7
 800bb5a:	f7fd ff95 	bl	8009a88 <_printf_i>
 800bb5e:	e7ed      	b.n	800bb3c <_svfiprintf_r+0x1c0>
 800bb60:	0800c52e 	.word	0x0800c52e
 800bb64:	0800c538 	.word	0x0800c538
 800bb68:	08009559 	.word	0x08009559
 800bb6c:	0800b8c5 	.word	0x0800b8c5
 800bb70:	0800c534 	.word	0x0800c534

0800bb74 <__sfputc_r>:
 800bb74:	6893      	ldr	r3, [r2, #8]
 800bb76:	3b01      	subs	r3, #1
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	b410      	push	{r4}
 800bb7c:	6093      	str	r3, [r2, #8]
 800bb7e:	da08      	bge.n	800bb92 <__sfputc_r+0x1e>
 800bb80:	6994      	ldr	r4, [r2, #24]
 800bb82:	42a3      	cmp	r3, r4
 800bb84:	db01      	blt.n	800bb8a <__sfputc_r+0x16>
 800bb86:	290a      	cmp	r1, #10
 800bb88:	d103      	bne.n	800bb92 <__sfputc_r+0x1e>
 800bb8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb8e:	f7fe ba44 	b.w	800a01a <__swbuf_r>
 800bb92:	6813      	ldr	r3, [r2, #0]
 800bb94:	1c58      	adds	r0, r3, #1
 800bb96:	6010      	str	r0, [r2, #0]
 800bb98:	7019      	strb	r1, [r3, #0]
 800bb9a:	4608      	mov	r0, r1
 800bb9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bba0:	4770      	bx	lr

0800bba2 <__sfputs_r>:
 800bba2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bba4:	4606      	mov	r6, r0
 800bba6:	460f      	mov	r7, r1
 800bba8:	4614      	mov	r4, r2
 800bbaa:	18d5      	adds	r5, r2, r3
 800bbac:	42ac      	cmp	r4, r5
 800bbae:	d101      	bne.n	800bbb4 <__sfputs_r+0x12>
 800bbb0:	2000      	movs	r0, #0
 800bbb2:	e007      	b.n	800bbc4 <__sfputs_r+0x22>
 800bbb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbb8:	463a      	mov	r2, r7
 800bbba:	4630      	mov	r0, r6
 800bbbc:	f7ff ffda 	bl	800bb74 <__sfputc_r>
 800bbc0:	1c43      	adds	r3, r0, #1
 800bbc2:	d1f3      	bne.n	800bbac <__sfputs_r+0xa>
 800bbc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bbc8 <_vfiprintf_r>:
 800bbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbcc:	460d      	mov	r5, r1
 800bbce:	b09d      	sub	sp, #116	@ 0x74
 800bbd0:	4614      	mov	r4, r2
 800bbd2:	4698      	mov	r8, r3
 800bbd4:	4606      	mov	r6, r0
 800bbd6:	b118      	cbz	r0, 800bbe0 <_vfiprintf_r+0x18>
 800bbd8:	6a03      	ldr	r3, [r0, #32]
 800bbda:	b90b      	cbnz	r3, 800bbe0 <_vfiprintf_r+0x18>
 800bbdc:	f7fe f8fe 	bl	8009ddc <__sinit>
 800bbe0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bbe2:	07d9      	lsls	r1, r3, #31
 800bbe4:	d405      	bmi.n	800bbf2 <_vfiprintf_r+0x2a>
 800bbe6:	89ab      	ldrh	r3, [r5, #12]
 800bbe8:	059a      	lsls	r2, r3, #22
 800bbea:	d402      	bmi.n	800bbf2 <_vfiprintf_r+0x2a>
 800bbec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bbee:	f7fe fb84 	bl	800a2fa <__retarget_lock_acquire_recursive>
 800bbf2:	89ab      	ldrh	r3, [r5, #12]
 800bbf4:	071b      	lsls	r3, r3, #28
 800bbf6:	d501      	bpl.n	800bbfc <_vfiprintf_r+0x34>
 800bbf8:	692b      	ldr	r3, [r5, #16]
 800bbfa:	b99b      	cbnz	r3, 800bc24 <_vfiprintf_r+0x5c>
 800bbfc:	4629      	mov	r1, r5
 800bbfe:	4630      	mov	r0, r6
 800bc00:	f7fe fa4a 	bl	800a098 <__swsetup_r>
 800bc04:	b170      	cbz	r0, 800bc24 <_vfiprintf_r+0x5c>
 800bc06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc08:	07dc      	lsls	r4, r3, #31
 800bc0a:	d504      	bpl.n	800bc16 <_vfiprintf_r+0x4e>
 800bc0c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc10:	b01d      	add	sp, #116	@ 0x74
 800bc12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc16:	89ab      	ldrh	r3, [r5, #12]
 800bc18:	0598      	lsls	r0, r3, #22
 800bc1a:	d4f7      	bmi.n	800bc0c <_vfiprintf_r+0x44>
 800bc1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc1e:	f7fe fb6d 	bl	800a2fc <__retarget_lock_release_recursive>
 800bc22:	e7f3      	b.n	800bc0c <_vfiprintf_r+0x44>
 800bc24:	2300      	movs	r3, #0
 800bc26:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc28:	2320      	movs	r3, #32
 800bc2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc32:	2330      	movs	r3, #48	@ 0x30
 800bc34:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bde4 <_vfiprintf_r+0x21c>
 800bc38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bc3c:	f04f 0901 	mov.w	r9, #1
 800bc40:	4623      	mov	r3, r4
 800bc42:	469a      	mov	sl, r3
 800bc44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc48:	b10a      	cbz	r2, 800bc4e <_vfiprintf_r+0x86>
 800bc4a:	2a25      	cmp	r2, #37	@ 0x25
 800bc4c:	d1f9      	bne.n	800bc42 <_vfiprintf_r+0x7a>
 800bc4e:	ebba 0b04 	subs.w	fp, sl, r4
 800bc52:	d00b      	beq.n	800bc6c <_vfiprintf_r+0xa4>
 800bc54:	465b      	mov	r3, fp
 800bc56:	4622      	mov	r2, r4
 800bc58:	4629      	mov	r1, r5
 800bc5a:	4630      	mov	r0, r6
 800bc5c:	f7ff ffa1 	bl	800bba2 <__sfputs_r>
 800bc60:	3001      	adds	r0, #1
 800bc62:	f000 80a7 	beq.w	800bdb4 <_vfiprintf_r+0x1ec>
 800bc66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc68:	445a      	add	r2, fp
 800bc6a:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc6c:	f89a 3000 	ldrb.w	r3, [sl]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	f000 809f 	beq.w	800bdb4 <_vfiprintf_r+0x1ec>
 800bc76:	2300      	movs	r3, #0
 800bc78:	f04f 32ff 	mov.w	r2, #4294967295
 800bc7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc80:	f10a 0a01 	add.w	sl, sl, #1
 800bc84:	9304      	str	r3, [sp, #16]
 800bc86:	9307      	str	r3, [sp, #28]
 800bc88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bc8c:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc8e:	4654      	mov	r4, sl
 800bc90:	2205      	movs	r2, #5
 800bc92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc96:	4853      	ldr	r0, [pc, #332]	@ (800bde4 <_vfiprintf_r+0x21c>)
 800bc98:	f7f4 faa2 	bl	80001e0 <memchr>
 800bc9c:	9a04      	ldr	r2, [sp, #16]
 800bc9e:	b9d8      	cbnz	r0, 800bcd8 <_vfiprintf_r+0x110>
 800bca0:	06d1      	lsls	r1, r2, #27
 800bca2:	bf44      	itt	mi
 800bca4:	2320      	movmi	r3, #32
 800bca6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bcaa:	0713      	lsls	r3, r2, #28
 800bcac:	bf44      	itt	mi
 800bcae:	232b      	movmi	r3, #43	@ 0x2b
 800bcb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bcb4:	f89a 3000 	ldrb.w	r3, [sl]
 800bcb8:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcba:	d015      	beq.n	800bce8 <_vfiprintf_r+0x120>
 800bcbc:	9a07      	ldr	r2, [sp, #28]
 800bcbe:	4654      	mov	r4, sl
 800bcc0:	2000      	movs	r0, #0
 800bcc2:	f04f 0c0a 	mov.w	ip, #10
 800bcc6:	4621      	mov	r1, r4
 800bcc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bccc:	3b30      	subs	r3, #48	@ 0x30
 800bcce:	2b09      	cmp	r3, #9
 800bcd0:	d94b      	bls.n	800bd6a <_vfiprintf_r+0x1a2>
 800bcd2:	b1b0      	cbz	r0, 800bd02 <_vfiprintf_r+0x13a>
 800bcd4:	9207      	str	r2, [sp, #28]
 800bcd6:	e014      	b.n	800bd02 <_vfiprintf_r+0x13a>
 800bcd8:	eba0 0308 	sub.w	r3, r0, r8
 800bcdc:	fa09 f303 	lsl.w	r3, r9, r3
 800bce0:	4313      	orrs	r3, r2
 800bce2:	9304      	str	r3, [sp, #16]
 800bce4:	46a2      	mov	sl, r4
 800bce6:	e7d2      	b.n	800bc8e <_vfiprintf_r+0xc6>
 800bce8:	9b03      	ldr	r3, [sp, #12]
 800bcea:	1d19      	adds	r1, r3, #4
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	9103      	str	r1, [sp, #12]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	bfbb      	ittet	lt
 800bcf4:	425b      	neglt	r3, r3
 800bcf6:	f042 0202 	orrlt.w	r2, r2, #2
 800bcfa:	9307      	strge	r3, [sp, #28]
 800bcfc:	9307      	strlt	r3, [sp, #28]
 800bcfe:	bfb8      	it	lt
 800bd00:	9204      	strlt	r2, [sp, #16]
 800bd02:	7823      	ldrb	r3, [r4, #0]
 800bd04:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd06:	d10a      	bne.n	800bd1e <_vfiprintf_r+0x156>
 800bd08:	7863      	ldrb	r3, [r4, #1]
 800bd0a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd0c:	d132      	bne.n	800bd74 <_vfiprintf_r+0x1ac>
 800bd0e:	9b03      	ldr	r3, [sp, #12]
 800bd10:	1d1a      	adds	r2, r3, #4
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	9203      	str	r2, [sp, #12]
 800bd16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bd1a:	3402      	adds	r4, #2
 800bd1c:	9305      	str	r3, [sp, #20]
 800bd1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bdf4 <_vfiprintf_r+0x22c>
 800bd22:	7821      	ldrb	r1, [r4, #0]
 800bd24:	2203      	movs	r2, #3
 800bd26:	4650      	mov	r0, sl
 800bd28:	f7f4 fa5a 	bl	80001e0 <memchr>
 800bd2c:	b138      	cbz	r0, 800bd3e <_vfiprintf_r+0x176>
 800bd2e:	9b04      	ldr	r3, [sp, #16]
 800bd30:	eba0 000a 	sub.w	r0, r0, sl
 800bd34:	2240      	movs	r2, #64	@ 0x40
 800bd36:	4082      	lsls	r2, r0
 800bd38:	4313      	orrs	r3, r2
 800bd3a:	3401      	adds	r4, #1
 800bd3c:	9304      	str	r3, [sp, #16]
 800bd3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd42:	4829      	ldr	r0, [pc, #164]	@ (800bde8 <_vfiprintf_r+0x220>)
 800bd44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bd48:	2206      	movs	r2, #6
 800bd4a:	f7f4 fa49 	bl	80001e0 <memchr>
 800bd4e:	2800      	cmp	r0, #0
 800bd50:	d03f      	beq.n	800bdd2 <_vfiprintf_r+0x20a>
 800bd52:	4b26      	ldr	r3, [pc, #152]	@ (800bdec <_vfiprintf_r+0x224>)
 800bd54:	bb1b      	cbnz	r3, 800bd9e <_vfiprintf_r+0x1d6>
 800bd56:	9b03      	ldr	r3, [sp, #12]
 800bd58:	3307      	adds	r3, #7
 800bd5a:	f023 0307 	bic.w	r3, r3, #7
 800bd5e:	3308      	adds	r3, #8
 800bd60:	9303      	str	r3, [sp, #12]
 800bd62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd64:	443b      	add	r3, r7
 800bd66:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd68:	e76a      	b.n	800bc40 <_vfiprintf_r+0x78>
 800bd6a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd6e:	460c      	mov	r4, r1
 800bd70:	2001      	movs	r0, #1
 800bd72:	e7a8      	b.n	800bcc6 <_vfiprintf_r+0xfe>
 800bd74:	2300      	movs	r3, #0
 800bd76:	3401      	adds	r4, #1
 800bd78:	9305      	str	r3, [sp, #20]
 800bd7a:	4619      	mov	r1, r3
 800bd7c:	f04f 0c0a 	mov.w	ip, #10
 800bd80:	4620      	mov	r0, r4
 800bd82:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd86:	3a30      	subs	r2, #48	@ 0x30
 800bd88:	2a09      	cmp	r2, #9
 800bd8a:	d903      	bls.n	800bd94 <_vfiprintf_r+0x1cc>
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d0c6      	beq.n	800bd1e <_vfiprintf_r+0x156>
 800bd90:	9105      	str	r1, [sp, #20]
 800bd92:	e7c4      	b.n	800bd1e <_vfiprintf_r+0x156>
 800bd94:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd98:	4604      	mov	r4, r0
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	e7f0      	b.n	800bd80 <_vfiprintf_r+0x1b8>
 800bd9e:	ab03      	add	r3, sp, #12
 800bda0:	9300      	str	r3, [sp, #0]
 800bda2:	462a      	mov	r2, r5
 800bda4:	4b12      	ldr	r3, [pc, #72]	@ (800bdf0 <_vfiprintf_r+0x228>)
 800bda6:	a904      	add	r1, sp, #16
 800bda8:	4630      	mov	r0, r6
 800bdaa:	f7fd fbd5 	bl	8009558 <_printf_float>
 800bdae:	4607      	mov	r7, r0
 800bdb0:	1c78      	adds	r0, r7, #1
 800bdb2:	d1d6      	bne.n	800bd62 <_vfiprintf_r+0x19a>
 800bdb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bdb6:	07d9      	lsls	r1, r3, #31
 800bdb8:	d405      	bmi.n	800bdc6 <_vfiprintf_r+0x1fe>
 800bdba:	89ab      	ldrh	r3, [r5, #12]
 800bdbc:	059a      	lsls	r2, r3, #22
 800bdbe:	d402      	bmi.n	800bdc6 <_vfiprintf_r+0x1fe>
 800bdc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bdc2:	f7fe fa9b 	bl	800a2fc <__retarget_lock_release_recursive>
 800bdc6:	89ab      	ldrh	r3, [r5, #12]
 800bdc8:	065b      	lsls	r3, r3, #25
 800bdca:	f53f af1f 	bmi.w	800bc0c <_vfiprintf_r+0x44>
 800bdce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bdd0:	e71e      	b.n	800bc10 <_vfiprintf_r+0x48>
 800bdd2:	ab03      	add	r3, sp, #12
 800bdd4:	9300      	str	r3, [sp, #0]
 800bdd6:	462a      	mov	r2, r5
 800bdd8:	4b05      	ldr	r3, [pc, #20]	@ (800bdf0 <_vfiprintf_r+0x228>)
 800bdda:	a904      	add	r1, sp, #16
 800bddc:	4630      	mov	r0, r6
 800bdde:	f7fd fe53 	bl	8009a88 <_printf_i>
 800bde2:	e7e4      	b.n	800bdae <_vfiprintf_r+0x1e6>
 800bde4:	0800c52e 	.word	0x0800c52e
 800bde8:	0800c538 	.word	0x0800c538
 800bdec:	08009559 	.word	0x08009559
 800bdf0:	0800bba3 	.word	0x0800bba3
 800bdf4:	0800c534 	.word	0x0800c534

0800bdf8 <__sflush_r>:
 800bdf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bdfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be00:	0716      	lsls	r6, r2, #28
 800be02:	4605      	mov	r5, r0
 800be04:	460c      	mov	r4, r1
 800be06:	d454      	bmi.n	800beb2 <__sflush_r+0xba>
 800be08:	684b      	ldr	r3, [r1, #4]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	dc02      	bgt.n	800be14 <__sflush_r+0x1c>
 800be0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800be10:	2b00      	cmp	r3, #0
 800be12:	dd48      	ble.n	800bea6 <__sflush_r+0xae>
 800be14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be16:	2e00      	cmp	r6, #0
 800be18:	d045      	beq.n	800bea6 <__sflush_r+0xae>
 800be1a:	2300      	movs	r3, #0
 800be1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800be20:	682f      	ldr	r7, [r5, #0]
 800be22:	6a21      	ldr	r1, [r4, #32]
 800be24:	602b      	str	r3, [r5, #0]
 800be26:	d030      	beq.n	800be8a <__sflush_r+0x92>
 800be28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800be2a:	89a3      	ldrh	r3, [r4, #12]
 800be2c:	0759      	lsls	r1, r3, #29
 800be2e:	d505      	bpl.n	800be3c <__sflush_r+0x44>
 800be30:	6863      	ldr	r3, [r4, #4]
 800be32:	1ad2      	subs	r2, r2, r3
 800be34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800be36:	b10b      	cbz	r3, 800be3c <__sflush_r+0x44>
 800be38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800be3a:	1ad2      	subs	r2, r2, r3
 800be3c:	2300      	movs	r3, #0
 800be3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be40:	6a21      	ldr	r1, [r4, #32]
 800be42:	4628      	mov	r0, r5
 800be44:	47b0      	blx	r6
 800be46:	1c43      	adds	r3, r0, #1
 800be48:	89a3      	ldrh	r3, [r4, #12]
 800be4a:	d106      	bne.n	800be5a <__sflush_r+0x62>
 800be4c:	6829      	ldr	r1, [r5, #0]
 800be4e:	291d      	cmp	r1, #29
 800be50:	d82b      	bhi.n	800beaa <__sflush_r+0xb2>
 800be52:	4a2a      	ldr	r2, [pc, #168]	@ (800befc <__sflush_r+0x104>)
 800be54:	40ca      	lsrs	r2, r1
 800be56:	07d6      	lsls	r6, r2, #31
 800be58:	d527      	bpl.n	800beaa <__sflush_r+0xb2>
 800be5a:	2200      	movs	r2, #0
 800be5c:	6062      	str	r2, [r4, #4]
 800be5e:	04d9      	lsls	r1, r3, #19
 800be60:	6922      	ldr	r2, [r4, #16]
 800be62:	6022      	str	r2, [r4, #0]
 800be64:	d504      	bpl.n	800be70 <__sflush_r+0x78>
 800be66:	1c42      	adds	r2, r0, #1
 800be68:	d101      	bne.n	800be6e <__sflush_r+0x76>
 800be6a:	682b      	ldr	r3, [r5, #0]
 800be6c:	b903      	cbnz	r3, 800be70 <__sflush_r+0x78>
 800be6e:	6560      	str	r0, [r4, #84]	@ 0x54
 800be70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be72:	602f      	str	r7, [r5, #0]
 800be74:	b1b9      	cbz	r1, 800bea6 <__sflush_r+0xae>
 800be76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be7a:	4299      	cmp	r1, r3
 800be7c:	d002      	beq.n	800be84 <__sflush_r+0x8c>
 800be7e:	4628      	mov	r0, r5
 800be80:	f7ff f8a6 	bl	800afd0 <_free_r>
 800be84:	2300      	movs	r3, #0
 800be86:	6363      	str	r3, [r4, #52]	@ 0x34
 800be88:	e00d      	b.n	800bea6 <__sflush_r+0xae>
 800be8a:	2301      	movs	r3, #1
 800be8c:	4628      	mov	r0, r5
 800be8e:	47b0      	blx	r6
 800be90:	4602      	mov	r2, r0
 800be92:	1c50      	adds	r0, r2, #1
 800be94:	d1c9      	bne.n	800be2a <__sflush_r+0x32>
 800be96:	682b      	ldr	r3, [r5, #0]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d0c6      	beq.n	800be2a <__sflush_r+0x32>
 800be9c:	2b1d      	cmp	r3, #29
 800be9e:	d001      	beq.n	800bea4 <__sflush_r+0xac>
 800bea0:	2b16      	cmp	r3, #22
 800bea2:	d11e      	bne.n	800bee2 <__sflush_r+0xea>
 800bea4:	602f      	str	r7, [r5, #0]
 800bea6:	2000      	movs	r0, #0
 800bea8:	e022      	b.n	800bef0 <__sflush_r+0xf8>
 800beaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800beae:	b21b      	sxth	r3, r3
 800beb0:	e01b      	b.n	800beea <__sflush_r+0xf2>
 800beb2:	690f      	ldr	r7, [r1, #16]
 800beb4:	2f00      	cmp	r7, #0
 800beb6:	d0f6      	beq.n	800bea6 <__sflush_r+0xae>
 800beb8:	0793      	lsls	r3, r2, #30
 800beba:	680e      	ldr	r6, [r1, #0]
 800bebc:	bf08      	it	eq
 800bebe:	694b      	ldreq	r3, [r1, #20]
 800bec0:	600f      	str	r7, [r1, #0]
 800bec2:	bf18      	it	ne
 800bec4:	2300      	movne	r3, #0
 800bec6:	eba6 0807 	sub.w	r8, r6, r7
 800beca:	608b      	str	r3, [r1, #8]
 800becc:	f1b8 0f00 	cmp.w	r8, #0
 800bed0:	dde9      	ble.n	800bea6 <__sflush_r+0xae>
 800bed2:	6a21      	ldr	r1, [r4, #32]
 800bed4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bed6:	4643      	mov	r3, r8
 800bed8:	463a      	mov	r2, r7
 800beda:	4628      	mov	r0, r5
 800bedc:	47b0      	blx	r6
 800bede:	2800      	cmp	r0, #0
 800bee0:	dc08      	bgt.n	800bef4 <__sflush_r+0xfc>
 800bee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bee6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800beea:	81a3      	strh	r3, [r4, #12]
 800beec:	f04f 30ff 	mov.w	r0, #4294967295
 800bef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bef4:	4407      	add	r7, r0
 800bef6:	eba8 0800 	sub.w	r8, r8, r0
 800befa:	e7e7      	b.n	800becc <__sflush_r+0xd4>
 800befc:	20400001 	.word	0x20400001

0800bf00 <_fflush_r>:
 800bf00:	b538      	push	{r3, r4, r5, lr}
 800bf02:	690b      	ldr	r3, [r1, #16]
 800bf04:	4605      	mov	r5, r0
 800bf06:	460c      	mov	r4, r1
 800bf08:	b913      	cbnz	r3, 800bf10 <_fflush_r+0x10>
 800bf0a:	2500      	movs	r5, #0
 800bf0c:	4628      	mov	r0, r5
 800bf0e:	bd38      	pop	{r3, r4, r5, pc}
 800bf10:	b118      	cbz	r0, 800bf1a <_fflush_r+0x1a>
 800bf12:	6a03      	ldr	r3, [r0, #32]
 800bf14:	b90b      	cbnz	r3, 800bf1a <_fflush_r+0x1a>
 800bf16:	f7fd ff61 	bl	8009ddc <__sinit>
 800bf1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d0f3      	beq.n	800bf0a <_fflush_r+0xa>
 800bf22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bf24:	07d0      	lsls	r0, r2, #31
 800bf26:	d404      	bmi.n	800bf32 <_fflush_r+0x32>
 800bf28:	0599      	lsls	r1, r3, #22
 800bf2a:	d402      	bmi.n	800bf32 <_fflush_r+0x32>
 800bf2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf2e:	f7fe f9e4 	bl	800a2fa <__retarget_lock_acquire_recursive>
 800bf32:	4628      	mov	r0, r5
 800bf34:	4621      	mov	r1, r4
 800bf36:	f7ff ff5f 	bl	800bdf8 <__sflush_r>
 800bf3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bf3c:	07da      	lsls	r2, r3, #31
 800bf3e:	4605      	mov	r5, r0
 800bf40:	d4e4      	bmi.n	800bf0c <_fflush_r+0xc>
 800bf42:	89a3      	ldrh	r3, [r4, #12]
 800bf44:	059b      	lsls	r3, r3, #22
 800bf46:	d4e1      	bmi.n	800bf0c <_fflush_r+0xc>
 800bf48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf4a:	f7fe f9d7 	bl	800a2fc <__retarget_lock_release_recursive>
 800bf4e:	e7dd      	b.n	800bf0c <_fflush_r+0xc>

0800bf50 <__swhatbuf_r>:
 800bf50:	b570      	push	{r4, r5, r6, lr}
 800bf52:	460c      	mov	r4, r1
 800bf54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf58:	2900      	cmp	r1, #0
 800bf5a:	b096      	sub	sp, #88	@ 0x58
 800bf5c:	4615      	mov	r5, r2
 800bf5e:	461e      	mov	r6, r3
 800bf60:	da0d      	bge.n	800bf7e <__swhatbuf_r+0x2e>
 800bf62:	89a3      	ldrh	r3, [r4, #12]
 800bf64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bf68:	f04f 0100 	mov.w	r1, #0
 800bf6c:	bf14      	ite	ne
 800bf6e:	2340      	movne	r3, #64	@ 0x40
 800bf70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bf74:	2000      	movs	r0, #0
 800bf76:	6031      	str	r1, [r6, #0]
 800bf78:	602b      	str	r3, [r5, #0]
 800bf7a:	b016      	add	sp, #88	@ 0x58
 800bf7c:	bd70      	pop	{r4, r5, r6, pc}
 800bf7e:	466a      	mov	r2, sp
 800bf80:	f000 f862 	bl	800c048 <_fstat_r>
 800bf84:	2800      	cmp	r0, #0
 800bf86:	dbec      	blt.n	800bf62 <__swhatbuf_r+0x12>
 800bf88:	9901      	ldr	r1, [sp, #4]
 800bf8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bf8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bf92:	4259      	negs	r1, r3
 800bf94:	4159      	adcs	r1, r3
 800bf96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bf9a:	e7eb      	b.n	800bf74 <__swhatbuf_r+0x24>

0800bf9c <__smakebuf_r>:
 800bf9c:	898b      	ldrh	r3, [r1, #12]
 800bf9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bfa0:	079d      	lsls	r5, r3, #30
 800bfa2:	4606      	mov	r6, r0
 800bfa4:	460c      	mov	r4, r1
 800bfa6:	d507      	bpl.n	800bfb8 <__smakebuf_r+0x1c>
 800bfa8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bfac:	6023      	str	r3, [r4, #0]
 800bfae:	6123      	str	r3, [r4, #16]
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	6163      	str	r3, [r4, #20]
 800bfb4:	b003      	add	sp, #12
 800bfb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfb8:	ab01      	add	r3, sp, #4
 800bfba:	466a      	mov	r2, sp
 800bfbc:	f7ff ffc8 	bl	800bf50 <__swhatbuf_r>
 800bfc0:	9f00      	ldr	r7, [sp, #0]
 800bfc2:	4605      	mov	r5, r0
 800bfc4:	4639      	mov	r1, r7
 800bfc6:	4630      	mov	r0, r6
 800bfc8:	f7ff f876 	bl	800b0b8 <_malloc_r>
 800bfcc:	b948      	cbnz	r0, 800bfe2 <__smakebuf_r+0x46>
 800bfce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfd2:	059a      	lsls	r2, r3, #22
 800bfd4:	d4ee      	bmi.n	800bfb4 <__smakebuf_r+0x18>
 800bfd6:	f023 0303 	bic.w	r3, r3, #3
 800bfda:	f043 0302 	orr.w	r3, r3, #2
 800bfde:	81a3      	strh	r3, [r4, #12]
 800bfe0:	e7e2      	b.n	800bfa8 <__smakebuf_r+0xc>
 800bfe2:	89a3      	ldrh	r3, [r4, #12]
 800bfe4:	6020      	str	r0, [r4, #0]
 800bfe6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfea:	81a3      	strh	r3, [r4, #12]
 800bfec:	9b01      	ldr	r3, [sp, #4]
 800bfee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bff2:	b15b      	cbz	r3, 800c00c <__smakebuf_r+0x70>
 800bff4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bff8:	4630      	mov	r0, r6
 800bffa:	f000 f837 	bl	800c06c <_isatty_r>
 800bffe:	b128      	cbz	r0, 800c00c <__smakebuf_r+0x70>
 800c000:	89a3      	ldrh	r3, [r4, #12]
 800c002:	f023 0303 	bic.w	r3, r3, #3
 800c006:	f043 0301 	orr.w	r3, r3, #1
 800c00a:	81a3      	strh	r3, [r4, #12]
 800c00c:	89a3      	ldrh	r3, [r4, #12]
 800c00e:	431d      	orrs	r5, r3
 800c010:	81a5      	strh	r5, [r4, #12]
 800c012:	e7cf      	b.n	800bfb4 <__smakebuf_r+0x18>

0800c014 <memmove>:
 800c014:	4288      	cmp	r0, r1
 800c016:	b510      	push	{r4, lr}
 800c018:	eb01 0402 	add.w	r4, r1, r2
 800c01c:	d902      	bls.n	800c024 <memmove+0x10>
 800c01e:	4284      	cmp	r4, r0
 800c020:	4623      	mov	r3, r4
 800c022:	d807      	bhi.n	800c034 <memmove+0x20>
 800c024:	1e43      	subs	r3, r0, #1
 800c026:	42a1      	cmp	r1, r4
 800c028:	d008      	beq.n	800c03c <memmove+0x28>
 800c02a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c02e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c032:	e7f8      	b.n	800c026 <memmove+0x12>
 800c034:	4402      	add	r2, r0
 800c036:	4601      	mov	r1, r0
 800c038:	428a      	cmp	r2, r1
 800c03a:	d100      	bne.n	800c03e <memmove+0x2a>
 800c03c:	bd10      	pop	{r4, pc}
 800c03e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c042:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c046:	e7f7      	b.n	800c038 <memmove+0x24>

0800c048 <_fstat_r>:
 800c048:	b538      	push	{r3, r4, r5, lr}
 800c04a:	4d07      	ldr	r5, [pc, #28]	@ (800c068 <_fstat_r+0x20>)
 800c04c:	2300      	movs	r3, #0
 800c04e:	4604      	mov	r4, r0
 800c050:	4608      	mov	r0, r1
 800c052:	4611      	mov	r1, r2
 800c054:	602b      	str	r3, [r5, #0]
 800c056:	f7f6 f98b 	bl	8002370 <_fstat>
 800c05a:	1c43      	adds	r3, r0, #1
 800c05c:	d102      	bne.n	800c064 <_fstat_r+0x1c>
 800c05e:	682b      	ldr	r3, [r5, #0]
 800c060:	b103      	cbz	r3, 800c064 <_fstat_r+0x1c>
 800c062:	6023      	str	r3, [r4, #0]
 800c064:	bd38      	pop	{r3, r4, r5, pc}
 800c066:	bf00      	nop
 800c068:	20005028 	.word	0x20005028

0800c06c <_isatty_r>:
 800c06c:	b538      	push	{r3, r4, r5, lr}
 800c06e:	4d06      	ldr	r5, [pc, #24]	@ (800c088 <_isatty_r+0x1c>)
 800c070:	2300      	movs	r3, #0
 800c072:	4604      	mov	r4, r0
 800c074:	4608      	mov	r0, r1
 800c076:	602b      	str	r3, [r5, #0]
 800c078:	f7f6 f98a 	bl	8002390 <_isatty>
 800c07c:	1c43      	adds	r3, r0, #1
 800c07e:	d102      	bne.n	800c086 <_isatty_r+0x1a>
 800c080:	682b      	ldr	r3, [r5, #0]
 800c082:	b103      	cbz	r3, 800c086 <_isatty_r+0x1a>
 800c084:	6023      	str	r3, [r4, #0]
 800c086:	bd38      	pop	{r3, r4, r5, pc}
 800c088:	20005028 	.word	0x20005028

0800c08c <_sbrk_r>:
 800c08c:	b538      	push	{r3, r4, r5, lr}
 800c08e:	4d06      	ldr	r5, [pc, #24]	@ (800c0a8 <_sbrk_r+0x1c>)
 800c090:	2300      	movs	r3, #0
 800c092:	4604      	mov	r4, r0
 800c094:	4608      	mov	r0, r1
 800c096:	602b      	str	r3, [r5, #0]
 800c098:	f7f6 f992 	bl	80023c0 <_sbrk>
 800c09c:	1c43      	adds	r3, r0, #1
 800c09e:	d102      	bne.n	800c0a6 <_sbrk_r+0x1a>
 800c0a0:	682b      	ldr	r3, [r5, #0]
 800c0a2:	b103      	cbz	r3, 800c0a6 <_sbrk_r+0x1a>
 800c0a4:	6023      	str	r3, [r4, #0]
 800c0a6:	bd38      	pop	{r3, r4, r5, pc}
 800c0a8:	20005028 	.word	0x20005028

0800c0ac <__assert_func>:
 800c0ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c0ae:	4614      	mov	r4, r2
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	4b09      	ldr	r3, [pc, #36]	@ (800c0d8 <__assert_func+0x2c>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	4605      	mov	r5, r0
 800c0b8:	68d8      	ldr	r0, [r3, #12]
 800c0ba:	b14c      	cbz	r4, 800c0d0 <__assert_func+0x24>
 800c0bc:	4b07      	ldr	r3, [pc, #28]	@ (800c0dc <__assert_func+0x30>)
 800c0be:	9100      	str	r1, [sp, #0]
 800c0c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c0c4:	4906      	ldr	r1, [pc, #24]	@ (800c0e0 <__assert_func+0x34>)
 800c0c6:	462b      	mov	r3, r5
 800c0c8:	f000 f870 	bl	800c1ac <fiprintf>
 800c0cc:	f000 f880 	bl	800c1d0 <abort>
 800c0d0:	4b04      	ldr	r3, [pc, #16]	@ (800c0e4 <__assert_func+0x38>)
 800c0d2:	461c      	mov	r4, r3
 800c0d4:	e7f3      	b.n	800c0be <__assert_func+0x12>
 800c0d6:	bf00      	nop
 800c0d8:	2000001c 	.word	0x2000001c
 800c0dc:	0800c549 	.word	0x0800c549
 800c0e0:	0800c556 	.word	0x0800c556
 800c0e4:	0800c584 	.word	0x0800c584

0800c0e8 <_calloc_r>:
 800c0e8:	b570      	push	{r4, r5, r6, lr}
 800c0ea:	fba1 5402 	umull	r5, r4, r1, r2
 800c0ee:	b934      	cbnz	r4, 800c0fe <_calloc_r+0x16>
 800c0f0:	4629      	mov	r1, r5
 800c0f2:	f7fe ffe1 	bl	800b0b8 <_malloc_r>
 800c0f6:	4606      	mov	r6, r0
 800c0f8:	b928      	cbnz	r0, 800c106 <_calloc_r+0x1e>
 800c0fa:	4630      	mov	r0, r6
 800c0fc:	bd70      	pop	{r4, r5, r6, pc}
 800c0fe:	220c      	movs	r2, #12
 800c100:	6002      	str	r2, [r0, #0]
 800c102:	2600      	movs	r6, #0
 800c104:	e7f9      	b.n	800c0fa <_calloc_r+0x12>
 800c106:	462a      	mov	r2, r5
 800c108:	4621      	mov	r1, r4
 800c10a:	f7fe f81b 	bl	800a144 <memset>
 800c10e:	e7f4      	b.n	800c0fa <_calloc_r+0x12>

0800c110 <__ascii_mbtowc>:
 800c110:	b082      	sub	sp, #8
 800c112:	b901      	cbnz	r1, 800c116 <__ascii_mbtowc+0x6>
 800c114:	a901      	add	r1, sp, #4
 800c116:	b142      	cbz	r2, 800c12a <__ascii_mbtowc+0x1a>
 800c118:	b14b      	cbz	r3, 800c12e <__ascii_mbtowc+0x1e>
 800c11a:	7813      	ldrb	r3, [r2, #0]
 800c11c:	600b      	str	r3, [r1, #0]
 800c11e:	7812      	ldrb	r2, [r2, #0]
 800c120:	1e10      	subs	r0, r2, #0
 800c122:	bf18      	it	ne
 800c124:	2001      	movne	r0, #1
 800c126:	b002      	add	sp, #8
 800c128:	4770      	bx	lr
 800c12a:	4610      	mov	r0, r2
 800c12c:	e7fb      	b.n	800c126 <__ascii_mbtowc+0x16>
 800c12e:	f06f 0001 	mvn.w	r0, #1
 800c132:	e7f8      	b.n	800c126 <__ascii_mbtowc+0x16>

0800c134 <_realloc_r>:
 800c134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c138:	4607      	mov	r7, r0
 800c13a:	4614      	mov	r4, r2
 800c13c:	460d      	mov	r5, r1
 800c13e:	b921      	cbnz	r1, 800c14a <_realloc_r+0x16>
 800c140:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c144:	4611      	mov	r1, r2
 800c146:	f7fe bfb7 	b.w	800b0b8 <_malloc_r>
 800c14a:	b92a      	cbnz	r2, 800c158 <_realloc_r+0x24>
 800c14c:	f7fe ff40 	bl	800afd0 <_free_r>
 800c150:	4625      	mov	r5, r4
 800c152:	4628      	mov	r0, r5
 800c154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c158:	f000 f841 	bl	800c1de <_malloc_usable_size_r>
 800c15c:	4284      	cmp	r4, r0
 800c15e:	4606      	mov	r6, r0
 800c160:	d802      	bhi.n	800c168 <_realloc_r+0x34>
 800c162:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c166:	d8f4      	bhi.n	800c152 <_realloc_r+0x1e>
 800c168:	4621      	mov	r1, r4
 800c16a:	4638      	mov	r0, r7
 800c16c:	f7fe ffa4 	bl	800b0b8 <_malloc_r>
 800c170:	4680      	mov	r8, r0
 800c172:	b908      	cbnz	r0, 800c178 <_realloc_r+0x44>
 800c174:	4645      	mov	r5, r8
 800c176:	e7ec      	b.n	800c152 <_realloc_r+0x1e>
 800c178:	42b4      	cmp	r4, r6
 800c17a:	4622      	mov	r2, r4
 800c17c:	4629      	mov	r1, r5
 800c17e:	bf28      	it	cs
 800c180:	4632      	movcs	r2, r6
 800c182:	f7fe f8bc 	bl	800a2fe <memcpy>
 800c186:	4629      	mov	r1, r5
 800c188:	4638      	mov	r0, r7
 800c18a:	f7fe ff21 	bl	800afd0 <_free_r>
 800c18e:	e7f1      	b.n	800c174 <_realloc_r+0x40>

0800c190 <__ascii_wctomb>:
 800c190:	4603      	mov	r3, r0
 800c192:	4608      	mov	r0, r1
 800c194:	b141      	cbz	r1, 800c1a8 <__ascii_wctomb+0x18>
 800c196:	2aff      	cmp	r2, #255	@ 0xff
 800c198:	d904      	bls.n	800c1a4 <__ascii_wctomb+0x14>
 800c19a:	228a      	movs	r2, #138	@ 0x8a
 800c19c:	601a      	str	r2, [r3, #0]
 800c19e:	f04f 30ff 	mov.w	r0, #4294967295
 800c1a2:	4770      	bx	lr
 800c1a4:	700a      	strb	r2, [r1, #0]
 800c1a6:	2001      	movs	r0, #1
 800c1a8:	4770      	bx	lr
	...

0800c1ac <fiprintf>:
 800c1ac:	b40e      	push	{r1, r2, r3}
 800c1ae:	b503      	push	{r0, r1, lr}
 800c1b0:	4601      	mov	r1, r0
 800c1b2:	ab03      	add	r3, sp, #12
 800c1b4:	4805      	ldr	r0, [pc, #20]	@ (800c1cc <fiprintf+0x20>)
 800c1b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1ba:	6800      	ldr	r0, [r0, #0]
 800c1bc:	9301      	str	r3, [sp, #4]
 800c1be:	f7ff fd03 	bl	800bbc8 <_vfiprintf_r>
 800c1c2:	b002      	add	sp, #8
 800c1c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1c8:	b003      	add	sp, #12
 800c1ca:	4770      	bx	lr
 800c1cc:	2000001c 	.word	0x2000001c

0800c1d0 <abort>:
 800c1d0:	b508      	push	{r3, lr}
 800c1d2:	2006      	movs	r0, #6
 800c1d4:	f000 f834 	bl	800c240 <raise>
 800c1d8:	2001      	movs	r0, #1
 800c1da:	f7f6 f879 	bl	80022d0 <_exit>

0800c1de <_malloc_usable_size_r>:
 800c1de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1e2:	1f18      	subs	r0, r3, #4
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	bfbc      	itt	lt
 800c1e8:	580b      	ldrlt	r3, [r1, r0]
 800c1ea:	18c0      	addlt	r0, r0, r3
 800c1ec:	4770      	bx	lr

0800c1ee <_raise_r>:
 800c1ee:	291f      	cmp	r1, #31
 800c1f0:	b538      	push	{r3, r4, r5, lr}
 800c1f2:	4605      	mov	r5, r0
 800c1f4:	460c      	mov	r4, r1
 800c1f6:	d904      	bls.n	800c202 <_raise_r+0x14>
 800c1f8:	2316      	movs	r3, #22
 800c1fa:	6003      	str	r3, [r0, #0]
 800c1fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c200:	bd38      	pop	{r3, r4, r5, pc}
 800c202:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c204:	b112      	cbz	r2, 800c20c <_raise_r+0x1e>
 800c206:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c20a:	b94b      	cbnz	r3, 800c220 <_raise_r+0x32>
 800c20c:	4628      	mov	r0, r5
 800c20e:	f000 f831 	bl	800c274 <_getpid_r>
 800c212:	4622      	mov	r2, r4
 800c214:	4601      	mov	r1, r0
 800c216:	4628      	mov	r0, r5
 800c218:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c21c:	f000 b818 	b.w	800c250 <_kill_r>
 800c220:	2b01      	cmp	r3, #1
 800c222:	d00a      	beq.n	800c23a <_raise_r+0x4c>
 800c224:	1c59      	adds	r1, r3, #1
 800c226:	d103      	bne.n	800c230 <_raise_r+0x42>
 800c228:	2316      	movs	r3, #22
 800c22a:	6003      	str	r3, [r0, #0]
 800c22c:	2001      	movs	r0, #1
 800c22e:	e7e7      	b.n	800c200 <_raise_r+0x12>
 800c230:	2100      	movs	r1, #0
 800c232:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c236:	4620      	mov	r0, r4
 800c238:	4798      	blx	r3
 800c23a:	2000      	movs	r0, #0
 800c23c:	e7e0      	b.n	800c200 <_raise_r+0x12>
	...

0800c240 <raise>:
 800c240:	4b02      	ldr	r3, [pc, #8]	@ (800c24c <raise+0xc>)
 800c242:	4601      	mov	r1, r0
 800c244:	6818      	ldr	r0, [r3, #0]
 800c246:	f7ff bfd2 	b.w	800c1ee <_raise_r>
 800c24a:	bf00      	nop
 800c24c:	2000001c 	.word	0x2000001c

0800c250 <_kill_r>:
 800c250:	b538      	push	{r3, r4, r5, lr}
 800c252:	4d07      	ldr	r5, [pc, #28]	@ (800c270 <_kill_r+0x20>)
 800c254:	2300      	movs	r3, #0
 800c256:	4604      	mov	r4, r0
 800c258:	4608      	mov	r0, r1
 800c25a:	4611      	mov	r1, r2
 800c25c:	602b      	str	r3, [r5, #0]
 800c25e:	f7f6 f827 	bl	80022b0 <_kill>
 800c262:	1c43      	adds	r3, r0, #1
 800c264:	d102      	bne.n	800c26c <_kill_r+0x1c>
 800c266:	682b      	ldr	r3, [r5, #0]
 800c268:	b103      	cbz	r3, 800c26c <_kill_r+0x1c>
 800c26a:	6023      	str	r3, [r4, #0]
 800c26c:	bd38      	pop	{r3, r4, r5, pc}
 800c26e:	bf00      	nop
 800c270:	20005028 	.word	0x20005028

0800c274 <_getpid_r>:
 800c274:	f7f6 b814 	b.w	80022a0 <_getpid>

0800c278 <_init>:
 800c278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c27a:	bf00      	nop
 800c27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c27e:	bc08      	pop	{r3}
 800c280:	469e      	mov	lr, r3
 800c282:	4770      	bx	lr

0800c284 <_fini>:
 800c284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c286:	bf00      	nop
 800c288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c28a:	bc08      	pop	{r3}
 800c28c:	469e      	mov	lr, r3
 800c28e:	4770      	bx	lr
>>>>>>> 95147dff18777353e4155d9c14b1506f44999be0
